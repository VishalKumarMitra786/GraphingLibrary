
/**
 * almond 0.2.5 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("vendor/almond", function(){});

define('testbridge',['require'],function(require){
  var TestBridge = {
    ready: function () {
      window.TestBridge = TestBridge;
    }
  };

  return TestBridge;
});
// fixes an issue with ghost clicks. borrowed the idea of using capture phase rather than bubble phase from:
//    https://developers.google.com/mobile/articles/fast_buttons?csw=1#ghost
//
// but the solution there is far from complete. It doesn't deal with focus being placed in textboxes still, and
// it doesn't prevent the ghost events from propagating down and back up through the dom. Mathquill listens for
// the mousedown and mouseup events, so when they were triggered erroneously, we should prevent them from propagating.
//
// the event handlers defined here need to be added before jquery has chance to add it's own listeners. This is
// especially important for the focus and blur events. The fact that touchtracking.js is split into two separate
// events here is unfortunate, but I think it's fine for now. There are talks of refactoring the touchtracking.js
// code anyways.
define('ipad.ghostevents',['require'],function (require) {
  
  var inGhostEventMode = false;
  var startingActiveElement = null;
    
  function stopGhostEvent (evt) {
    if (inGhostEventMode) {
      evt.stopPropagation();
      evt.stopImmediatePropagation();
    }
  }
    
  function stopAndPreventGhostEvent (evt) {
    if (inGhostEventMode) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.stopImmediatePropagation();
    }
  }
  
  // will get overriden by touchtracking.js
  // would be better not do things this way, but we need to split touchtracking.js into
  // a part that jquery depends on and a part that depends on jquery. This little inconvenience is what
  // splices all of touchtracking back together
  var touchTrackingCallbacks = {
    isGhostEvent: function (evt) {
      return false;
    }
  };
  
  // don't send ghost mousedwon events; someone might be listening for them
  document.addEventListener('mousedown', function (evt) {
    startingActiveElement = document.activeElement;
     
    inGhostEventMode = touchTrackingCallbacks.isGhostEvent(evt);
      
    // stop the mousedown event
    stopGhostEvent(evt);
  }, true);
    
  // don't send ghost mouseup events; someone might be listening for them
  document.addEventListener('mouseup', stopGhostEvent, true);
    
  // prevent links from being followed on ghost clicks.
  document.addEventListener('click', function (evt) {
    stopAndPreventGhostEvent(evt);
     
    // put focus where it was before the start of these events. the focusin and focusout
    // events fired from this will be stopped.
    if (inGhostEventMode && document.activeElement !== startingActiveElement) {
      if (document.activeElement) document.activeElement.blur();
      if (startingActiveElement) startingActiveElement.focus();
    }
      
    // anything after this is not a ghost event
    inGhostEventMode = false;
  }, true);

  // we prevent focus events from firing during ghost events
  document.addEventListener('focus', stopAndPreventGhostEvent, true);
  document.addEventListener('blur', stopAndPreventGhostEvent, true);
  
  return touchTrackingCallbacks;
});

/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

define('lib/clone',['require'],function(require){
  var clone = function (json) {
    return JSON.parse(JSON.stringify(json));
  };
  return clone;
});

// There are a few ways we can define the configuration.
define('config',['require','lib/clone'],function(require) {
  var clone = require('lib/clone');
  var config = {};

  // Parse query parameters from the url search.
  //
  // config options here have 2 purposes:
  //  * desktop-calc specific options (testing, preview, maintenance, language menu)
  //  * testing api options (nofolders, etc)
  var query = location.search;
  if (query[0] === '?') query = query.slice(1);
  var paramStrings = query.split('&'), params = {};

  for (var i = 0; i < paramStrings.length; i++) {
    var pair = paramStrings[i].split('=');
    params[pair[0]] = (pair.length === 2) ? pair[1] : true;
  }

  // Settings on window.Desmos.config override url parameters
  if (window.Desmos && window.Desmos.config) {
    for (var k in window.Desmos.config) {
      if (window.Desmos.config.hasOwnProperty(k)) params[k] = window.Desmos.config[k];
    }
  }

  var checkOption = function(option) {
    return params.hasOwnProperty(option);
  };
  var addOption = function(option) {
    config[option] = checkOption(option);
  };

  //starts "no", i.e. "nographpaper" => graphpaper: false
  var addInverseOption = function(option) {
    config[option] = !checkOption("no" + option);
  };

  //desktop specific options
  addOption('testing');
  addOption('maintenance');
  addOption('disablelocale');
  addOption('detectlocale');
  addOption('secure');
  addOption('nativeOnscreenKeypad');
  if (params.lang) config.lang = params.lang;

  // Disable navigation warning -- Eric likes not having this in noconcat. Eli likes it in startlivecss
  config.no_navigation_warning = checkOption('noconcat') || checkOption('testing');

  //previewMode rules:
  config.previewMessage = "You're previewing regressions.";
  config.previewFeedbackUrl = "https://docs.google.com/forms/d/1-TJNpusDOTmxuI44Pt8cNTPEtuc2zh5U_izPTPM2Glg/viewform";
  var hostIsPreview = location && location.hostname === 'preview.desmos.com';
  config.previewMode = (checkOption('previewMode') || hostIsPreview);

  //API options for testing
  addOption('lockViewport');
  addOption('resizeLoop');

  //note: on desktop, this won't work when you open a blank graph because we add focus
  //and that automatically uncollapses. Need to test on a non-blank state or in ?embed
  addOption('expressionsCollapsed');
  addInverseOption('images');
  addInverseOption('folders');
  addInverseOption('settingsMenu');
  addInverseOption('expressionsTopbar');
  addInverseOption('zoomButtons');
  addInverseOption('keypad');
  addInverseOption('graphpaper');
  addInverseOption('expressions');
  addInverseOption('expressionsTopbar');
  addInverseOption('settingsMenu');
  addInverseOption('branding');
  addInverseOption('singlevarsolutions');
  // config.secure overrides singlevarsolutions setting
  if (config.secure) {
    config.singlevarsolutions = false;
  }

  // When true, client sends graph states to s3 directly instead of relaying them
  // through our server.
  addOption('s3upload');



  if (params.nworkers) {
     config.nworkers = params.nworkers;
  }

  return {
    get: function (prop) {
      return config[prop];
    },
    all: function () {
      return clone(config);
    }
  };
});

// Do things this way to avoid script injection, and to have the LOAD_DATA
// var available to all our other javascript written out below. Using
// jQuery, which lives in vendor (above).
define('main/load_data',['require','jquery'],function(require){
  var $ = require('jquery');
  var load_data = $('body').data('load-data');
  return load_data;
});

define('pjs',[], function() {
var P = (function(prototype, ownProperty, undefined) {
  // helper functions that also help minification
  function isObject(o) { return typeof o === 'object'; }
  function isFunction(f) { return typeof f === 'function'; }

  // used to extend the prototypes of superclasses (which might not
  // have `.Bare`s)
  function SuperclassBare() {}

  function P(_superclass /* = Object */, definition) {
    // handle the case where no superclass is given
    if (definition === undefined) {
      definition = _superclass;
      _superclass = Object;
    }

    // C is the class to be returned.
    //
    // It delegates to instantiating an instance of `Bare`, so that it
    // will always return a new instance regardless of the calling
    // context.
    //
    //  TODO: the Chrome inspector shows all created objects as `C`
    //        rather than `Object`.  Setting the .name property seems to
    //        have no effect.  Is there a way to override this behavior?
    function C() {
      var self = new Bare;
      if (isFunction(self.init)) self.init.apply(self, arguments);
      return self;
    }

    // C.Bare is a class with a noop constructor.  Its prototype is the
    // same as C, so that instances of C.Bare are also instances of C.
    // New objects can be allocated without initialization by calling
    // `new MyClass.Bare`.
    function Bare() {}
    C.Bare = Bare;

    // Set up the prototype of the new class.
    var _super = SuperclassBare[prototype] = _superclass[prototype];
    var proto = Bare[prototype] = C[prototype] = new SuperclassBare;

    // other variables, as a minifier optimization
    var extensions;


    // set the constructor property on the prototype, for convenience
    proto.constructor = C;

    C.mixin = function(def) {
      Bare[prototype] = C[prototype] = P(C, def)[prototype];
      return C;
    }

    return (C.open = function(def) {
      extensions = {};

      if (isFunction(def)) {
        // call the defining function with all the arguments you need
        // extensions captures the return value.
        extensions = def.call(C, proto, _super, C, _superclass);
      }
      else if (isObject(def)) {
        // if you passed an object instead, we'll take it
        extensions = def;
      }

      // ...and extend it
      if (isObject(extensions)) {
        for (var ext in extensions) {
          if (ownProperty.call(extensions, ext)) {
            proto[ext] = extensions[ext];
          }
        }
      }

      // if there's no init, we assume we're inheriting a non-pjs class, so
      // we default to applying the superclass's constructor.
      if (!isFunction(proto.init)) {
        proto.init = _superclass;
      }

      return C;
    })(definition);
  }

  // ship it
  return P;

  // as a minifier optimization, we've closured in a few helper functions
  // and the string 'prototype' (C[p] is much shorter than C.prototype)
})('prototype', ({}).hasOwnProperty);
return P;
});

//     Underscore.js 1.3.3
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.
//     Portions of Underscore are inspired or borrowed from Prototype,
//     Oliver Steele's Functional, and John Resig's Micro-Templating.
//     For all details and documentation:
//     http://documentcloud.github.com/underscore

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var slice            = ArrayProto.slice,
      unshift          = ArrayProto.unshift,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) { return new wrapper(obj); };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root['_'] = _;
  }

  // Current version.
  _.VERSION = '1.3.3';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    if (obj.length === +obj.length) results.length = obj.length;
    return results;
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var reversed = _.toArray(obj).reverse();
    if (context && !initial) iterator = _.bind(iterator, context);
    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if a given value is included in the array or object using `===`.
  // Aliased as `contains`.
  _.include = _.contains = function(obj, target) {
    var found = false;
    if (obj == null) return found;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Return the maximum element or (element-based computation).
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var shuffled = [], rand;
    each(obj, function(value, index, list) {
      rand = Math.floor(Math.random() * (index + 1));
      shuffled[index] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, val, context) {
    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      if (a === void 0) return 1;
      if (b === void 0) return -1;
      return a < b ? -1 : a > b ? 1 : 0;
    }), 'value');
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, val) {
    var result = {};
    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
    each(obj, function(value, index) {
      var key = iterator(value, index);
      (result[key] || (result[key] = [])).push(value);
    });
    return result;
  };

  // Use a comparator function to figure out at what index an object should
  // be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator) {
    iterator || (iterator = _.identity);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >> 1;
      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj)                                     return [];
    if (_.isArray(obj))                           return slice.call(obj);
    if (_.isArguments(obj))                       return slice.call(obj);
    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    return _.isArray(obj) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especcialy useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail`.
  // Especially useful on the arguments object. Passing an **index** will return
  // the rest of the values in the array from that index onward. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = function(array, index, guard) {
    return slice.call(array, (index == null) || guard ? 1 : index);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, function(value){ return !!value; });
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return _.reduce(array, function(memo, value) {
      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
      memo[memo.length] = value;
      return memo;
    }, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator) {
    var initial = iterator ? _.map(array, iterator) : array;
    var results = [];
    // The `isSorted` flag is irrelevant if the array only contains two elements.
    if (array.length < 3) isSorted = true;
    _.reduce(initial, function (memo, value, index) {
      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {
        memo.push(value);
        results.push(array[index]);
      }
      return memo;
    }, []);
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays. (Aliased as "intersect" for back-compat.)
  _.intersection = _.intersect = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = _.flatten(slice.call(arguments, 1), true);
    return _.filter(array, function(value){ return !_.include(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
    return results;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i, l;
    if (isSorted) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item) {
    if (array == null) return -1;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
    var i = array.length;
    while (i--) if (i in array && array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, throttling, more, result;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) func.apply(context, args);
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        result = func.apply(context, args);
      }
      whenDone();
      throttling = true;
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      if (immediate && !timeout) func.apply(context, args);
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      return memo = func.apply(this, arguments);
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func].concat(slice.call(arguments, 0));
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) { return func.apply(this, arguments); }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    return _.map(obj, _.identity);
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var result = {};
    each(_.flatten(slice.call(arguments, 1)), function(key) {
      if (key in obj) result[key] = obj[key];
    });
    return result;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function.
  function eq(a, b, stack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a._chain) a = a._wrapped;
    if (b._chain) b = b._wrapped;
    // Invoke a custom `isEqual` method if one is provided.
    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);
    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = stack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (stack[length] == a) return true;
    }
    // Add the first object to the stack of traversed objects.
    stack.push(a);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          // Ensure commutative equality for sparse arrays.
          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent.
      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    stack.pop();
    return result;
  }

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType == 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Is a given variable an arguments object?
  _.isArguments = function(obj) {
    return toString.call(obj) == '[object Arguments]';
  };
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Is a given value a function?
  _.isFunction = function(obj) {
    return toString.call(obj) == '[object Function]';
  };

  // Is a given value a string?
  _.isString = function(obj) {
    return toString.call(obj) == '[object String]';
  };

  // Is a given value a number?
  _.isNumber = function(obj) {
    return toString.call(obj) == '[object Number]';
  };

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return _.isNumber(obj) && isFinite(obj);
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    // `NaN` is the only value for which `===` is not reflexive.
    return obj !== obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value a date?
  _.isDate = function(obj) {
    return toString.call(obj) == '[object Date]';
  };

  // Is the given value a regular expression?
  _.isRegExp = function(obj) {
    return toString.call(obj) == '[object RegExp]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Has own property?
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function (n, iterator, context) {
    for (var i = 0; i < n; i++) iterator.call(context, i);
  };

  // Escape a string for HTML interpolation.
  _.escape = function(string) {
    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g,'&#x2F;');
  };

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object, ensuring that
  // they're correctly added to the OOP wrapper as well.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      addToWrapper(name, _[name] = obj[name]);
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /.^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    '\\': '\\',
    "'": "'",
    'r': '\r',
    'n': '\n',
    't': '\t',
    'u2028': '\u2028',
    'u2029': '\u2029'
  };

  for (var p in escapes) escapes[escapes[p]] = p;
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
  var unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;

  // Within an interpolation, evaluation, or escaping, remove HTML escaping
  // that had been previously added.
  var unescape = function(code) {
    return code.replace(unescaper, function(match, escape) {
      return escapes[escape];
    });
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults(settings || {}, _.templateSettings);

    // Compile the template source, taking care to escape characters that
    // cannot be included in a string literal and then unescape them in code
    // blocks.
    var source = "__p+='" + text
      .replace(escaper, function(match) {
        return '\\' + escapes[match];
      })
      .replace(settings.escape || noMatch, function(match, code) {
        return "'+\n_.escape(" + unescape(code) + ")+\n'";
      })
      .replace(settings.interpolate || noMatch, function(match, code) {
        return "'+\n(" + unescape(code) + ")+\n'";
      })
      .replace(settings.evaluate || noMatch, function(match, code) {
        return "';\n" + unescape(code) + "\n;__p+='";
      }) + "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __p='';" +
      "var print=function(){__p+=Array.prototype.join.call(arguments, '')};\n" +
      source + "return __p;\n";

    var render = new Function(settings.variable || 'obj', '_', source);
    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for build time
    // precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' +
      source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // The OOP Wrapper
  // ---------------

  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.
  var wrapper = function(obj) { this._wrapped = obj; };

  // Expose `wrapper.prototype` as `_.prototype`
  _.prototype = wrapper.prototype;

  // Helper function to continue chaining intermediate results.
  var result = function(obj, chain) {
    return chain ? _(obj).chain() : obj;
  };

  // A method to easily add functions to the OOP wrapper.
  var addToWrapper = function(name, func) {
    wrapper.prototype[name] = function() {
      var args = slice.call(arguments);
      unshift.call(args, this._wrapped);
      return result(func.apply(_, args), this._chain);
    };
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    wrapper.prototype[name] = function() {
      var wrapped = this._wrapped;
      method.apply(wrapped, arguments);
      var length = wrapped.length;
      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];
      return result(wrapped, this._chain);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    wrapper.prototype[name] = function() {
      return result(method.apply(this._wrapped, arguments), this._chain);
    };
  });

  // Start chaining a wrapped Underscore object.
  wrapper.prototype.chain = function() {
    this._chain = true;
    return this;
  };

  // Extracts the result from a wrapped and chained object.
  wrapper.prototype.value = function() {
    return this._wrapped;
  };

}).call(this);
define("underscore", (function (global) {
    return function () {
        var ret, fn;
        return ret || global._;
    };
}(this)));

//Copied from MDN reference
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind

;(function () {
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== "function") {
        // closest thing possible to the ECMAScript 5 internal IsCallable function
        throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
            return fToBind.apply(this instanceof fNOP && oThis ? this : oThis,
                                 aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
})();

define("function.bind", function(){});

define('underscore_model',['require','underscore','pjs','function.bind'],function(require){
var _ = require('underscore');
var P = require('pjs');
require('function.bind');

var UnderscoreModel = P(function (model) {

  // each model gets a guid that is unique even across different
  // versions of this file running within the same window
  var guid_count = 0;
  var guid_prefix = 'guid_' + Math.round(Math.random()*1000000) + "_" + (new Date().getTime()) + "_";
  
  model.init = function () {
    this.__observers = {};
    this.__eventObservers = {};
    this.__oldProperties = {};
    this.__propertyComparators = {};
    this.guid = guid_prefix + (++guid_count);
  };
  
  model.unobserveAll = function () {
    this.__observers = {};
    this.__eventObservers = {};
  };
  
  model.getProperty = function (property) {
    return this[property];
  };
  
  model.getOldProperty = function (property) {
    return this.__oldProperties[property];
  };
  
  model.setProperty = function (property, newValue) {
    var oldValue = this[property];
    var comparator = this.__propertyComparators[property];
    if (comparator) {
      if (comparator(oldValue, newValue)) {
        return;
      }
    } else if (_.isEqual(oldValue, newValue)) {
      return;
    }
    
    this.__oldProperties[property] = oldValue;
    this[property] = newValue;
    this.notifyPropertyChange(property);
  };

  model.setProperties = function (obj) {
    for (var k in obj) {
      if (obj.hasOwnProperty(k)) this.setProperty(k, obj[k]);
    }
  };
  
  model.setPropertyComparator = function (property, comparator) {
    this.__propertyComparators[property] = comparator;
  };
  
  // for properties
  model.notifyPropertyChange = function (property) {
    this.__callObservers(this.__observers, property, this);
  };
  model.observe = function (property_string, callback) {
    this.__addObservers(this.__observers, property_string, callback);
  };
  model.unobserve = function (property_string) {
    this.__removeObservers(this.__observers, property_string);
  };
  model.observeAndSync = function (property_string, callback) {
    this.observe(property_string, callback);
    var props = property_string.split(" ");
    for(var i = 0; i < props.length; i++){
      var prop_parts = props[i].split(".");
      var prop = prop_parts[0];
      if(this.hasOwnProperty(prop)){
        //Observer will fire for each observed property that exists
        //With the same args that an observed change would cause
        callback(prop, this);
      }
    }
  };
  
  // for events
  model.triggerEvent = function (event, param) {
    this.__callObservers(this.__eventObservers, event, param);
  };
  model.observeEvent = function (event_string, callback) {
    this.__addObservers(this.__eventObservers, event_string, callback);
  };
  model.unobserveEvent = function (event_string) {
    this.__removeObservers(this.__eventObservers, event_string);
  };
  
  // generic implementation of trigger, add, remove observers 
  model.__callObservers = function (list, prop, arg) {
    var observers = list[prop];
    if (observers) {
     for (var i=0; i<observers.length; i++) {
       observers[i].callback(prop, arg);
     }
    }
  };
  model.__removeObservers = function (list, prop_string) {
    var props = prop_string.split(" ");
    for (var i=0; i<props.length; i++) {
      var prop_parts = props[i].split(".");
      var prop = prop_parts[0];
      var namespace = prop_parts[1];

      // only keep the ones with a different namespace
      if (prop && namespace) {
        var original = list[prop];
        var filtered = [];
        if (!original) continue;
        for (var j=0; j<original.length; j++) {
          var observer = original[j];
          if (observer.namespace !== namespace) {
            filtered.push(observer);
          }
        }
        list[prop] = filtered;
        
      // get rid of all of observers for this property since no namespace given
      } else if (prop) {
        delete list[prop];
    
      // we aren't given a property, only a namespace. run through each
      // property that has observers and call .unobserve(property.namespace)
      } else if (namespace) {
        for (prop in list) {
          if (list.hasOwnProperty(prop)) {
            this.__removeObservers(list, prop + "." + namespace);
          }
        }
      }
    }
  };
  model.__addObservers = function (list, prop_string, callback) {
    var props = prop_string.split(" ");
    for (var i=0; i<props.length; i++) {
      var prop_parts = props[i].split(".");
      var prop = prop_parts[0];
      if (!prop) throw 'Must supply a property to observe';
      
      var namespace = prop_parts[1];
      var observer = {
        namespace: namespace,
        callback: callback
      };
      
      var observers = list[prop];
      if (!observers) {
        list[prop] = [observer];
      } else {
        observers.push(observer);
      }
    }
  };
  
});

return UnderscoreModel;
});

define('main/account_backend',['require','jquery'],function(require){
  var $ = require('jquery');

  var accountBackend = {
    logout: function () { return $.post('/account/logout_xhr'); },

    fetchUser: function (formData) {
      var login = function () {
        return $.post('/account/login_xhr', formData);
      };

      // do a logout before a login so that cookies are set correctly
      return this.logout().then(login, login).then(this.getUserInfo);
    },

    getUserInfo: function () { return $.getJSON('/account/user_info'); },

    registerUser: function (formData) {
      return $.post('/account/register_xhr', formData).then(this.getUserInfo);
    },

    editAccount: function (formData) {
      return $.post('/account/edit_account_xhr', formData).then(
        this.getUserInfo
      );
    },

    recoverPassword: function (formData) {
      return $.post('/account/recover_xhr', formData);
    }
  };

  return accountBackend;
});

define('main/user',['require','pjs','underscore_model'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');

  var User = P(UnderscoreModel, function (proto, _super) {
    var properties = ['name', 'email', 'isDriveUser', 'isCleverUser'];

    proto.init = function (obj) {
      _super.init.call(this);
      var self = this;

      if (obj) {
        properties.forEach(function (p) {
          if (obj.hasOwnProperty(p)) self.setProperty(p, obj[p]);
        });
      }
    };

    //this is sort of copied from account_email.py for guessing what people's first name is
    //we use this as the display name in header_desktop.js
    proto.firstName = function() {
      if (!this.name) return null;

      //regex for their inclusion of weird characters in their name -- that means it's probably
      //like an e-mail address, or a username or "Mr. blah"
      if (this.name.match(/[\d@_&\.\']/)) return this.name;

      var pieces = this.name.split(' ');
      if (pieces[0].length >= 3) return pieces[0];

      return this.name;
    };

  });

  return User;
});

define('main/user_controller',['require','pjs','jquery','underscore_model','main/account_backend','main/user'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var UnderscoreModel = require('underscore_model');
  var accountBackend = require('main/account_backend');
  var User = require('main/user');

  var UserController = P(UnderscoreModel, function (proto, _super) {
    proto.init = function (graphsController) {
      _super.init.call(this);
      this.graphsController = graphsController;

      //log the user out if we ever make a request and get back a 401
      var self = this;
      $.ajaxSetup({statusCode: {401: function() { self.logout(); }}});
    };

    proto.desmosLogin = function (formData) {
      return accountBackend.fetchUser(formData).done(
        this.completeLogin.bind(this)
      );
    };

    proto.driveCallback = function () {
      return accountBackend.getUserInfo().then(
        this.completeLogin.bind(this),
        this.logout.bind(this)
      );
    };

    proto.createAccount = function (formData) {
      return accountBackend.registerUser(formData).done(
        this.completeLogin.bind(this)
      ).done(function () {
        //_kmq.push(['record', 'signed up', {'identity provider': 'desmos'}]);
      });
    };

    proto.editAccount = function (formData) {
      var currentUser = this.currentUser;
      var self = this;
      return accountBackend.editAccount(formData).done(function (msg) {
        currentUser.setProperty('name', msg.name);
        currentUser.setProperty('email', msg.email);
        self.notifyPropertyChange('currentUser');
      });
    };

    proto.recoverPassword = function (formData) {
      return accountBackend.recoverPassword(formData);
    };

    //called at the end of the login process
    proto.completeLogin = function (msg, source) {
      this.setProperty('currentUser', User(msg));
      this.graphsController.updateGraphs();

      //Analytics
      //_kmq.push(['identify', user.email]);
      //_kmq.push(['record', 'logged in', {
      //  'google user': user.isDriveUser,
      //  'login remembered': source === 'load'
      //}]);
    };

    proto.logout = function () {
      //_kmq.push(['clearIdentity']);
      var self = this;
      return accountBackend.logout().done(function() {
        self.setProperty('currentUser', null);
        self.graphsController.clear();
      });
    };
  });

  return UserController;
});

define('main/url_prefix',['require'],function(require){
  var URL_PREFIX = window.location.href.split('/calculator')[0] + '/calculator';
  // if we're on the file:// protocol we don't want to look at pathname. It'll
  // be a really ugly path listing all the directories we need to go through to
  // get to the index.html file. Just pretend like we're on a live server.
  if (window.location.protocol === 'file:') URL_PREFIX = '/calculator';
  return URL_PREFIX;
});


//from http://www.w3schools.com/js/js_cookies.asp
define('main/cookie',[],function () {
  function getCookie(c_name) {

    var encoded_c_name = encodeURIComponent(c_name);
    var i,x,y,ARRcookies=document.cookie.split(";");
    for (i=0;i<ARRcookies.length;i++)
    {
      x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
      y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
      x=x.replace(/^\s+|\s+$/g,"");
      if (x==encoded_c_name) {
        return decodeURIComponent(y);
      }
    }
  }

  function setCookie(c_name, value, duration) {
    //set a javascript cookie
    var expires = new Date();
    expires.setDate(expires.getDate() + (duration || 30));
    document.cookie = (
      encodeURIComponent(c_name) +
      "=" + encodeURIComponent(value) +
      "; expires=" + expires.toUTCString() +
      "; path=/"
    );
  }

  return {
    getCookie: getCookie,
    setCookie: setCookie
  };
});

define('locales/all',['require'],function (require) {return {"lt":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Prisijungimo langas užblokuotas. Prašome leisti iššokančius langus iš desmos.com, kad galėtumėte prisijungti naudojant \"Google\".", 
    "all": "visi", 
    "style:": "stilius:", 
    "Jan": "Sausis", 
    "Undo (ctrl+z)": "Anuliuoti (ctrl + z)", 
    "Update Password": "Atnaujinti slaptažodį", 
    "Share your graph with the world!": "Pasidalinti savo grafiką su visu pasauliu!", 
    "Oct": "Spalis", 
    "Sign In with Google": "Prisijunkite naudojant \"Google\"", 
    "__number__ hours ago": "prieš __number__ valandas", 
    "Undo": "Anuliuoti", 
    "Untitled Graph": "Be pavadinimo", 
    "Sign in": "Prisijungti", 
    "Remembered your password?": "Prisiminėte slaptažodį?", 
    "Nov": "Lapkritis", 
    "Nice Graph!": "Gražus grafikas!", 
    "step:": "žingsnis:", 
    "Tweet @desmos": "Tweet @desmos", 
    "Radians": "Radianai", 
    "New graph created.": "Naujas grafikas sukurtas.", 
    "HTML Embed Code": "HTML Kodas", 
    "Embed": "Įdėti", 
    "color:": "spalva:", 
    "Help": "Pagalba", 
    "A B C": "A B C", 
    "Your Name:": "Jūsų vardas:", 
    "Update Account": "Atnaujinkite paskyrą", 
    "loading graphs...": "kraunami grafikai...", 
    "Didn't work? Try again!": "Nepavyko? Pabandykite dar kartą!", 
    "This graph has been deleted.": "Šis grafikas yra panaikintas.", 
    "Create Account": "Sukurkite paskyrą", 
    "Tables": "Lentelės", 
    "what's this?": "kas tai?", 
    "This is the name we'll use if we feature one of your graphs.": "Tai bus pavadinimas, kurį mes naudosime jei mes rodysime vieną iš jūsų kreivių.", 
    "Send": "Siųsti", 
    "Sliders": "Slankmačiai", 
    "Print": "Spausdinti", 
    "Email": "El. paštas", 
    "saved": "įrašyta", 
    "Please provide an email so that we can write back.": "Pateikite elektroninio pašto adresą, kad mes galime jums parašyti.", 
    "Repeat Password:": "Pakartokite slaptažodį:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Ar esate įsitikinę, kad norite uždaryti šią kreivę? Visas neišsaugotas darbas bus prarastas.", 
    "__number__ minutes ago": "prieš __number__ minutes", 
    "Resources": "Ištekliai", 
    "example": "pavyzdys", 
    "Title:": "Pavadinimas:", 
    "Current Password:": "Dabartinis slaptažodis:", 
    "New Password:": "Naujas slaptažodis:", 
    "We only plot inequalities of x and y, or r and θ.": "Mes tik braižome nelygybes su tik x ir y, arba r ir θ.", 
    "sending...": "siunčiama...", 
    "last week": "praeitą savaitę", 
    "We'll never share or sell your email address.": "Mes niekada nesidalinsime arba parduosime jūsų elektroninio pašto adresą.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Kažkas nutiko, praneškite apie tai desmos.com. (Klaida __error_num__)", 
    "Sign In": "Prisijunkite", 
    "optional": "neprivalomas", 
    "Delete": "Naikinti", 
    "Delete All": "Ištrinti visus", 
    "Sorry, we didn't find any graphs with that title.": "Deja, mums nepavyko rasti jokių grafikų pagal tą pavadinimą.", 
    "Apr": "Balandis", 
    "Image": "Paveikslėlis", 
    "no, thanks": "ne, ačiū", 
    "Recover Password": "Atkurti slaptažodį", 
    "Want us to consider featuring it?": "Ar norėtumėte, kad mes jį paviešintumėme?", 
    "Learn More": "Sužinoti daugiau", 
    "on __month__ __day__, __year__": "__year__ __month__ __day__", 
    "type your question or suggestion...": "Įveskite savo klausimą arba pasiūlymą...", 
    "Terms of Use": "Naudojimosi sąlygos", 
    "expression": "išraiška", 
    "or": "arba", 
    "New Blank Graph": "Naujas grafikas", 
    "Feb": "Vasaris", 
    "BBCode": "BB Kodas", 
    "Aug": "Rugpjūtis", 
    "image": "paveikslėlis", 
    "Projector Mode": "Projektorius režimas", 
    "just now": "kątik", 
    "Link to Google": "Nuoroda į \"Google\"", 
    "Duplicate": "Dvigubinti", 
    "Degrees": "Laipsniai", 
    "Desmos is in Maintenance Mode.": "Desmos yra tvarkymo režime.", 
    "table": "lentelė", 
    "loading...": "kraunama...", 
    "Forgot your password?": "Pamiršote savo slaptažodį?", 
    "Hide List": "Paslėpti sąrašą", 
    "one hour ago": "prieš valandą", 
    "__number__ weeks ago": "prieš __number__ savaites", 
    "Jun": "Birželis", 
    "Open Graph (ctrl+o)": "Atidaryti grafiką (ctrl + o)", 
    "Jul": "Liepa", 
    "Edit Account": "Redaguoti paskyrą", 
    "more": "daugiau", 
    "Function '__dependency__' is not defined.": "Funkcija '__dependency__' nėra apibrėžta.", 
    "Language": "Kalba", 
    "Dec": "Gruodis", 
    "folder": "aplankas", 
    "Edit List": "Redaguoti sąrašą", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos yra laikinai tvarkoma. Jūs galite atidaryti pavyzdinius grafikus, bet negalėsite prisijungti, atidaryti savo grafikus, arba įrašyti keitimus. Atsiprašome už nepatogumus.", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Mes galite sudėti nelygybes tik tada, kai viena funkcija yra kvadratinė arba linijinė.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Ačiū už atsiliepimus &ndash; jums greitai bus atsakyta!", 
    "Feedback": "Atsiliepimai", 
    "Sep": "Rugsėjis", 
    "Convert to Table": "Konvertuoti į lentelę", 
    "Redo (ctrl+y)": "Perdaryti (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Kintamasis '__dependency__' negali būti naudojamas kaip funkcija.", 
    "__number__ days ago": "prieš __number__ dienas", 
    "Send a Copy to Google Drive": "Siųsti kopiją į \"Google\" diską", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Šiuo metu Desmos veikia techninės priežiūros režimu, todėl negalėsite įrašyti keitimus šiam grafikui. Taigi atsiprašome už nepatogumus!", 
    "Desmos User Guide": "Vartotojo vadovas", 
    "Done": "Atlikta", 
    "Desmos Graphing Calculator": "Desmos grafikų skaičiuoklė", 
    "Cancel": "Atšaukti", 
    "Send to:": "Adresatas:", 
    "Open Graph": "Atidaryti grafiką", 
    "Save (ctrl+s)": "Įrašyti (ctrl + s)", 
    "Share Graph": "Pasidalinti grafiku", 
    "Sign In with Your Google Account": "Prisijunkite naudojant \"Google\" paskyrą", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Galime išspręsti tik dvigubas nelygybes. Pabandykite panaikinti nelygybės vieną pusę.", 
    "Send Feedback": "Siųsti atsiliepimus", 
    "search by title...": "ieškoti pagal pavadinimą...", 
    "Share this link:": "Dalinkis šia nuoroda:", 
    "Link to your Google Account": "Susieti su \"Google\" paskyra", 
    "functions": "funkcijos", 
    "Mar": "Kovas", 
    "May": "Gegužė", 
    "message sent": "pranešimas išsiųstas", 
    "Save As or Rename (ctrl+shift+s)": "Įrašyti kaip naują arba pervadinti (ctrl + shift + s)", 
    "Please enter your email address. We will send a password recovery link to you.": "Įveskite savo elektroninio pašto adresą. Mes jums atsiųsime slaptažodį ir atkūrimo nuorodą.", 
    "Sign Out": "Atsijungti", 
    "Use your Email Address": "Naudokite savo el. pašto adresą", 
    "to save and share your graphs!": "išsaugoti bei dalintis savo grafikais!", 
    "Name:": "Vardas:", 
    "Add Item": "Įtraukti elementą", 
    "Graph Paper": "Milimetrinis popierius", 
    "yesterday": "vakar", 
    "add slider:": "pridėti slankiklį:", 
    "Opened '__graphTitle__'": "Atidaryta '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Spustelėdami \"__btn__\", jūs pripažįstate, kad perskaitėte ir priimate mūsų __terms_of_use_link__.", 
    "Message: <i>(optional)</i>": "Žinutė: <i>(neprivaloma)</i>", 
    "Sign In with Desmos": "Prisijunkite naudojant Desmos", 
    "one minute ago": "prieš minutę", 
    "Password:": "Slaptažodis:", 
    "Please enter your feedback.": "Parašykite atsiliepimą.", 
    "We only support implicit equations of x and y.": "Palaikome numanomas lygtis tik su x ir y.", 
    "Message sent. Please check your email for a password recovery link.": "Pranešimas išsiųstas. Prašome pasitikrinti savo elektroninį paštą dėl slaptažodžio atkūrimo nuorodos.", 
    "Email:": "El. paštas:", 
    "enter": "įveskite", 
    "yeah!": "taip!"
},"uk":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Вікно авторизації заблоковано. Будь-ласка дозвольте спливаючі вікна для desmos.com, аби увійти за допомогою Google.", 
    "all": "всі", 
    "Try adding an equals sign to turn this into an equation.": "Спробуйте додати знак рівності, щоб перетворити це на рівняння.", 
    "Undo (ctrl+z)": "Скасувати (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Як впливає b на функцію g(x)?", 
    "Share your graph with the world!": "Поділіться своїм графіком з усім світом!", 
    "__number__ minutes ago": "__number__ хвилин тому", 
    "Let's make a scatter plot!": "Давайте зробимо точковий графік!", 
    "Hide this warning.": "Сховати це попередження.", 
    "Nice!": "Дуже мило!", 
    "Nov": "Лис", 
    "Zoom In": "Збільшити масштаб", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Функція \"__dependency__\" вимагає тільки 1 аргумент. __supplement__", 
    "saved": "збережено", 
    "center:": "центр:", 
    "When __symbol__ is called with more than two arguments, no argument can be a list.": "Якщо до __symbol__ передається більше двох параметрів, жоден з них не може бути списком.", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' та '__lastSymbol__' не може бути визначено по відношенню один до одного.", 
    "Click to return to this graph.": "Натисніть, щоб повернутися до цього графіка.", 
    "Press play to animate the slider.": "Натисніть кнопку відтворення, щоб почати анімацію повзунка.", 
    "Didn't work? Try again!": "Не працює? Спробуй ще раз!", 
    "Now, let's try a new model.": "Тепер давайте спробуємо нову модель.", 
    "Tables": "Таблиці", 
    "Table headers must be simple expressions. __supplement__": "Шапка таблиці може містити лише прості вирази. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Функція '__symbol__' потребує принаймні один аргумент. Наприклад, спробуйте набрати: __symbol__ (1, 2).", 
    "Function definitions are not allowed.": "Визначення функцій не допускаються.", 
    "Too many variables, I don't know what to do with this.": "Занадто багато змінних, я не знаю, що робити з цим.", 
    "Logarithmic Spiral": "Логарифмічна спіраль", 
    "Circle": "Коло", 
    "Secant Line": "Січна пряма", 
    "Polar Graphing": "Полярний графік", 
    "Visualizing Slope": "Відображення схилу", 
    "How can I change the color?": "Як я можу змінити колір?", 
    "Fill in the sample data:": "Заповніть дані для прикладу:", 
    "Grid": "Сітка", 
    "List index must not be a list.": "Індекс до списка не може сам бути списком.", 
    "Invalid height.": "Неправильне значення висоти.", 
    "Click here to create a new expression.": "Натисніть тут, щоб створити новий вираз.", 
    "New Password:": "Новий пароль:", 
    "Failed to find regression coefficients.": "Не вдалося знайти коефіціенти регресії.", 
    "For example, try typing: __recommendation__.": "Наприклад, спробуйте набрати: __recommendation__.", 
    "How do I share a link to my graph?": "Як я можу поділитися посиланням на мій графік?", 
    "Regressions must contain at least one list of data.": "Регресія має містити принаймні один список даних.", 
    "sending...": "відправлення...", 
    "Hide Keypad": "Приховати екранну клавіатуру", 
    "last week": "на минулому тижні", 
    "Show List": "Відобразити список", 
    "We only plot double inequalities of x and y.": "Ми будуємо графіки тільки подвійних нерівностей зі змінними x та y.", 
    "Nice work &ndash; Keep exploring!": "Гарна робота, продовжуйте дослідження!", 
    "Slope Intercept Form": "Форма нахилу та перетину", 
    "no, thanks": "ні, дякую", 
    "Recover Password": "Відновити пароль", 
    "Terms of Use": "Умови використання", 
    "Show Keypad": "Показати клавіатуру", 
    "Aug": "Сер", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "'__dependency__' не можна використовувати як параметр цієї функції, тому що '__dependency__' уже визначено.", 
    "You're a scatter plot whiz!": "Ну ви взагалі цар точкових графіків!", 
    "Standard Form": "Стандартна форма", 
    "one hour ago": "одну годину тому", 
    "You're a slider pro!": "Ви володар повзунків!", 
    "Delete": "Видалити", 
    "drag:": "потягніть:", 
    "more": "більше", 
    "Point Slope Form": "Форма точки та нахилу", 
    "How is this app free?": "Як цей додаток може бути безкоштовним?", 
    "Nice Graph!": "Гарний графік!", 
    "Feedback": "Відгук", 
    "Desmos User Guide": "Керівництво користувача Desmos", 
    "example": "приклад", 
    "on __month__ __day__, __year__": "на __day__ __month__, __year__", 
    "Graph Settings": "Налаштування графіку", 
    "Share Graph": "Поділитися графіком", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Подвійні нерівності повинні йти в одному напрямку, наприклад 1 < y < 2.", 
    "Show Numbers": "Показати числа", 
    "Wave Interference": "Інтерференція хвилі", 
    "message sent": "повідомлення відправлено", 
    "Sign Out": "Вийти", 
    "X-Axis": "Вісь x", 
    "Graph Paper": "Координатна система", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos зараз у режимі перегляду, тому ви не зможете зберегти графіки.", 
    "Save Changes (ctrl+s)": "Зберегти зміни (ctrl + s)", 
    "Regressions": "Регресії", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Натиснувши кнопку \"__btn__\", ви підтверджуєте, що ви прочитали і приймаєте наші __terms_of_use_link__.", 
    "Sign In with Desmos": "Увійдіть за допомогою Desmos", 
    "Password:": "Пароль:", 
    "Link to your Google Account": "Зв'язати з обліковим записом Google+", 
    "Parabolas": "Параболи", 
    "Email:": "Електронна адреса:", 
    "enter": "введіть", 
    "Derivatives": "Похідні", 
    "Jan": "Січ", 
    "First column may not be __most__ or __last__.": "Перший стовпець не може бути __most__ або __last__.", 
    "Translating Any Function": "Переклад будь-яких функцій", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Залишкі — це різниця між вашими даними та моделлю. Натисніть тут, щоб додати залишки до таблиці та до графіка.", 
    "Oct": "Жов", 
    "Sign In with Google": "Увійдіть за допомогою Google", 
    "Just fill in one more...": "Просто заповніть ще один...", 
    "Untitled Graph": "Графік без назви", 
    "... and select the \"table\" option.": "... і виберіть опцію \"Таблиця\".", 
    "Points are written like this: (1, 2).": "Точки записані як (1, 2).", 
    "New graph created.": "Створено новий графік.", 
    "HTML Embed Code": "HTML код для вставки", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Знайдете жменьку часу, щоб допомогти нам? Ваші оцінки та відгуки допоможуть іншим людям знайти нас, і допоможуть нам покращити калькулятор. Розкажіть, що ви думаєте!", 
    "Click to return to your expressions.": "Натисніть, щоб повернутися до ваших виразів.", 
    "A B C": "A B C", 
    "enter a note...": "введіть примітку...", 
    "Only __form__ is supported. Otherwise, use parens.": "Підтримується лише __form__. В іншому випадку, використовуйте круглі дужки.", 
    "Hyperbola": "Гіпербола", 
    "Unsupported Browser": "Непідтримуваний браузер", 
    "Save This Graph": "Зберегти цей графік", 
    "Show Grid Angles": "Значення кутів сітки", 
    "Let's get started!": "Давайте почнемо!", 
    "This is the name we'll use if we feature one of your graphs.": "Це ім'я, яке ми будемо використовувати, якщо будемо відображати один з ваших графіків.", 
    "We zoomed to fit your data.": "Ми збільшили відповідно до ваших даних.", 
    "FAQs": "FAQs", 
    "Sliders": "Повзунки", 
    "Click anywhere to close the drawing options.": "Клацніть будь-де, щоб закрити параметри графика.", 
    "Print": "Друк", 
    "Move right to add a new column.": "Переміститься вправо, щоб додати новий стовпець.", 
    "Save": "Зберегти", 
    "Repeat Password:": "Повторіть пароль:", 
    "Try graphing a straight line, like __sample_expression__": "Спробуйте побудувати пряму лінію, як наприклад __sample_expression__", 
    "Conic Sections": "Конічні перерізи", 
    "Definitions are nested too deeply.": "Визначення вкладено занадто глибоко.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Спробуйте додати '__lhs__' на початку цього рівняння.", 
    "Tangent Line": "Дотична пряма", 
    "Period and Amplitude": "Період і амплітуда", 
    "Try typing __sample_expression__": "Спробуйте ввести __sample_expression__", 
    "Apr": "Кві", 
    "sample data": "зразок даних", 
    "Now try pressing Enter.": "Тепер спробуйте натиснути Enter.", 
    "Lists are not allowed.": "Списки не допускаються.", 
    "size:": "розмір:", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Функція '__dependency__' потребує __assignment_arity__ аргументи. __supplement__", 
    "note": "примітка", 
    "Needs work": "Треба краще", 
    "BBCode": "BBCode", 
    "Projector Mode": "Режим проектора", 
    "just now": "щойно", 
    "I just want to graph": "Я просто хочу побудувати графік", 
    "Click here to create a new blank expression.": "Натисніть тут, щоб створити новий порожній вираз.", 
    "Range cannot depend on free variable '__symbol__'.": "Область значень не може залежати від незалежної змінної '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos зараз у режимі обслуговування.", 
    "The file \"__file__\" is not an image": "Файл \"__file__\" не є зображенням", 
    "add label": "додати підпис", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Скорегуйте це рівняння, щоб покращити відповідність. Спробуйте, наприклад, <br>__equation__", 
    "__number__ weeks ago": "__number__ тижні тому", 
    "Drop Image Here": "Киньте зображення сюди", 
    "Open Graph (ctrl+o)": "Відкрити граф (ctrl + o)", 
    "What effect does h have on the function g(x)?": "Як впливає h на функцію g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Спробуйте включити  '__symbols__' та '__lastSymbol__' як аргументи, визначаючи функцію як '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "Функцію '__dependency__' не визначено.", 
    "Restrictions": "Обмеження", 
    "Click here to only show the dots.": "Натисніть тут, щоб показувати тільки точки.", 
    "Click here to download Google Chrome.": "Натисніть тут, щоб завантажити Google Chrome.", 
    "Zoom Out": "Зменшити масштаб", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Спробуйте включити __lastSymbol__ як визначення для функції __newSignature__.", 
    "Send": "Надіслати", 
    "Try typing all of __sample_expression__": "Спробуйте ввести __sample_expression__ цілком", 
    "Too complicated. Use parens.": "Занадто складне. Використовуйте круглі дужки.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos тимчасово знаходиться у режимі обслуговування. Можна відкривати приклади графіків, але не можна ввійти, відкрити ваші графіки або зберегти будь-які зміни. Просимо вибачення за незручності.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Дякуємо за зворотній зв'язок, ви скоро отримаєте нашу відповідь!", 
    "Sep": "Вер", 
    "Redo (ctrl+y)": "Повторити (ctrl + y)", 
    "__number__ days ago": "__number__ днів тому", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos зараз у режимі обслуговування, не можна зберегти зміни в цьому графіку. Вибачте будь ласка за незручності!", 
    "Cancel": "Скасувати", 
    "Send to:": "Надіслати:", 
    "Open Graph": "Відкрити графік", 
    "Table entries must be simple expressions. __supplement__": "У клітках таблиці можуть бути тільки прості вирази. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Ми підтримуємо лише вирішені подвійні нерівності. Спробуйте видалити одну зі сторіну нерівності.", 
    "Scaling Any Function": "Масштабування функцій", 
    "Last trick!": "Остання хитрість!", 
    "Share this link:": "Поділіться цим посиланням:", 
    "Language": "Мова", 
    "The first argument of '__symbol__' must be a list. For example, try typing: __recommendation__.": "Перший аргумент '__symbol__' має бути списком. Наприклад, спробуйте набрати __recommendation__.", 
    "Awesome!": "Чудово!", 
    "Click here to generate a table.": "Натисніть тут, щоб створити таблицю.", 
    "to save and share your graphs!": "щоб зберегти ваші графіки та поділитися ними!", 
    "Standard Form with Tangent": "Стандартна форма з дотичною", 
    "Invalid y coordinate.": "Неправильна координата y.", 
    "I love it": "Мені це дуже подобається", 
    "We'll never share or sell your email address.": "Ми ніколи не розголошуємо та не продаємо нікому вашу адресу електронної пошти.", 
    "Residuals": "Залишки", 
    "Points are not allowed.": "Точки не допускаються.", 
    "Arrows:": "Стрілки:", 
    "Edit List": "Редагувати список", 
    "Message sent. Please check your email for a password recovery link.": "Повідомлення надіслано. Будь ласка, перевірте свою електронну пошту та знайдіть посилання для відновлення паролю.", 
    "Please provide an email so that we can write back.": "Будь ласка, надайте вашу електронну алресу, щоб ми могли відповісти вам.", 
    "Let's make some sliders!": "Давайте зробимо деякі повзунки!", 
    "Go down to the next row to add more data.": "Йдіть вниз до наступного рядка, щоб додати більше даних.", 
    "Let's make a function. First: click here to create a new blank expression.": "Давайте побудуємо функцію. По-перше, натисніть тут, щоб створити новий порожній вираз.", 
    "yeah!": "так!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Помилка: рядок __rowNum__, стовпець __colNum__ не є числом.", 
    "Transformations": "Перетворення", 
    "Image upload is not supported in this browser.": "Ваш браузер не підтримує функцію завантаження зображень.", 
    "This column header can't be defined elsewhere in the calculator.": "Цей заголовок стовпця не може бути визначений в іншому місці калькулятора.", 
    "Update Password": "Оновіть пароль", 
    "Resources": "Джерела інформації", 
    "Help Center": "Довідковий центр", 
    "Drag the handle to change the value.": "Перетягніть маркер, щоб змінити значення.", 
    "Undo": "Повернути", 
    "Now type: __equation__": "Тепер наберіть __equation__", 
    "What effect does a have on the function g(x)?": "Як впливає a на функцію g(x)?", 
    "Sign in": "Увійти", 
    "Type any number here.": "Введіть будь-яке число.", 
    "folder": "папка", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Ми будуємо графіки тільки таких нерівностей, у яких одна змінна квадратична або лінійна.", 
    "Send a Copy to Google Drive": "Надіслати копію до диску Google", 
    "Tweet @desmos": "Твітнути @desmos", 
    "Angles": "Кути", 
    "This message will self-destruct in __seconds__...": "Це повідомлення самознищиться через __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Підказка #2: __twiddle__ знаходиться на нашій екранній клавіатурі в розділі 'A-B-C'.", 
    "We don't solve single-variable equations involving lists yet.": "Ми ще не вирішуємо рівняння одної змінної, що включають списки.", 
    "Default Zoom": "Масштаб за промовчанням", 
    "Ellipse with Foci": "Еліпс з фокусами", 
    "color:": "колір:", 
    "... and select the \"expression\" option.": "... і оберіть опцію \"вираз\".", 
    "Help": "Довідка", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Підказка: натисніть кнопку 'A-B-C' на екранній клавіатурі, щоб знайти кнопки { }", 
    "Nice. Let's check the model.": "Гарно. Давайте перевіримо модель.", 
    "Logged in with Clever!": "Увійти до системи за допомогою Clever!", 
    "This graph has been deleted.": "Цей графік було видалено.", 
    "Invalid width.": "Неправильне значення ширини.", 
    "Create Account": "Створити обліковий запис", 
    "First, let's get some data.": "По-перше, давайте отримаємо якісь дані.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos отримує гроші за допомогою співробітництва. Зацікавлені у підтримці Desmos? Надішліть там листа на <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Зробіть довгий клік на кольоровім колі зліва від виразу, щоб відкрити налаштування стилю та кольору.", 
    "Learn more": "Дізнатися більше", 
    "Brilliant!": "Блискуче!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Ви впевнені, що хочете залишити цей графік? Незбережену роботу буде втрачено.", 
    "Step:": "Крок:", 
    "Parabola and Focus": "Парабола і фокус", 
    "Advanced Tables": "Розширені таблиці", 
    "Title:": "Назва:", 
    "Current Password:": "Поточний пароль:", 
    "Click here to connect the dots.": "Натисніть тут, щоб з'єднати точки.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Щось пішло не так, будь ласка, повідомте про це до служби підтримки desmos.com. (Помилка __error_num__)", 
    "Sign In": "Увійти", 
    "Polar Conic Sections": "Полярні конічні перерізи", 
    "optional": "необов'язково", 
    "You haven't written anything yet.": "Ви ще нічого не написали.", 
    "Sorry, we didn't find any graphs with that title.": "На жаль, ми не знайшли ніяких графіків з цією назвою.", 
    "Y-Axis": "Вісь y", 
    "Want us to consider featuring it?": "Бажаєте, щоб ми це зробили?", 
    "What effect does k have on the function g(x)?": "Як впливає k на функцію g(x)?", 
    "Tours": "Огляд", 
    "Reflections of a Function": "Віддзеркалення фукнції", 
    "expression": "вираз", 
    "Close": "Закрити", 
    "send us feedback": "надішліть нам відгук", 
    "For example, try typing: __dependency__(x).": "Наприклад, спробуйте набрати: __dependency__(x).", 
    "Unit Circle": "Одиничне коло", 
    "powered by": "за підтримки", 
    "table": "таблиця", 
    "loading...": "завантаження...", 
    "Forgot your password?": "Забули пароль?", 
    "Calculus": "Числення", 
    "Make a New Copy": "Створити нову копію", 
    "Click here to add a new table.": "Натисніть тут, щоб додати нову таблицю.", 
    "Jun": "Чер", 
    "You're a restrictions star!": "Ви такі добре розумієтеся на обмеженнях!", 
    "Jul": "Лип", 
    "Inverse of a Function": "Обернена функція", 
    "Edit Account": "Змініть обліковий запис", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Не існує способу зберегти ваш графік через додаток (поки що!). Ми рекомендуємо відвідати www.desmos.com/calculator та увійти до аккаунта Desmos, якщо ви бажаете зберегти свій графік.", 
    "Delete All": "Видалити все", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Не існує способу поділитися посиланням на ваш графік через додаток (поки що!). Ми рекомендуємо відвідати www.desmos.com/calculator та увійти до аккаунта Desmos, якщо ви бажаєте поділитися посиланням на свій графік.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Синусоїда з амплітудою \"a\" та періодом \"b\"", 
    "what's this?": "що це?", 
    "Done": "Виконано", 
    "Desmos Graphing Calculator": "Графічний калькулятор Desmos", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' не може бути використано як параметр регресії.", 
    "Nested lists are not allowed.": "Багаторівневі списки не дозволені.", 
    "Sign In with Your Google Account": "Увійдіть за допомогою облікового запису Google", 
    "loading graphs...": "завантаження графіків...", 
    "Click here to make a new blank expression.": "Натисніть тут, щоб створити новий порожній вираз.", 
    "Send Feedback": "Надіслати відгук", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Тепер давайте побудуємо графік залишків.</b> <br>Введіть __residualVariable__ до нового стовпчика таблиці.", 
    "Table created.": "Таблиця створена.", 
    "Click back to continue editing.": "Натисніть кнопку \"назад\", щоб продовжити редагування.", 
    "Ranges must be arithmetic sequences.": "Діапазони мають бути арифметичними прогресіями.", 
    "Enjoying Desmos?": "Вам подобається Desmos?", 
    "Name:": "Ім'я:", 
    "Add Item": "Додати елемент", 
    "Click to show the list of expressions.": "Клацніть, щоб переглянути список виразів.", 
    "Logged in successfully!": "Ви успішно увійшли до системи!", 
    "Function g(x) is a transformed version of function f(x).": "Функція g(x) - це перетворена функція f(x).", 
    "Lines": "Прямі", 
    "yesterday": "вчора", 
    "Hint #1: to get __y_1__ type __y1__.": "Підказка №1: щоб отримати __y_1__ наберіть __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "Не вдається перевизначити '__symbol__', тому що це уже визначено.", 
    "Function '__symbol__' requires 2 arguments. For example, try typing: __recommendation__.": "Функція '__symbol__' потребує 2 аргументи. Спробуйте набрати __recommendation__.", 
    "How do I save my graph?": "Як зберегти мій графік?", 
    "Opened '__graphTitle__'": "Завантажено '__graphTitle__'", 
    "Trigonometry": "Тригонометрія", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "На жаль, ви не можете графічно відобразити __symbol__ як функцію від чого-небудь ще.", 
    "No Unsaved Changes": "Немає незбережених змін", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Підтримуються лише __form1__ та __form2__. В іншому випадку, використовуйте круглі дужки.", 
    "one minute ago": "одну хвилину тому", 
    "Vertex Form": "Форма вершини", 
    "Other Questions?": "Є ще запитання?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Поверніться до документів Google та скопіюйте це __sample_data_link__.", 
    "Square Grid": "Квадратна сітка", 
    "style:": "стиль:", 
    "Ask us on Twitter": "Запитайте нас у Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "Функція \"__dependency__\" вимагає вказання аргументу. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Ми ще не можемо вирішувати складні рівняння з однією змінною.", 
    "__number__ hours ago": "__number__ годин тому", 
    "Click and hold on this icon until the options menu opens up.": "Натисніть і утримуйте цю піктограму, поки з'явиться меню параметрів.", 
    "Learn more.": "Дізнатися більше.", 
    "Remembered your password?": "Пам'ятаєте свій пароль?", 
    "Download the User Guide": "Завантажити керівництво користувача", 
    "Go \"Hands-free\"": "Нехай повзе сам", 
    "step:": "крок:", 
    "Cannot index into something that is not a list.": "Індекси можна застосовувати тільки для списків.", 
    "Radians": "Радіани", 
    "Let's start with some data!": "Розпочнемо з деяких даних!", 
    "Uh-oh! Type a valid number here.": "Ой ой! Введіть припустиме число.", 
    "Use your Email Address": "Використувати вашу адресу електронної пошти", 
    "General Form": "Загальна форма", 
    "Embed": "Код для вставки", 
    "You did not select a file": "Ви не вибрали файл", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos найкраще працює на вашій версії Android, якщо ви використовуєте веб-переглядач Chrome.", 
    "Your Name:": "Ім'я:", 
    "Two Point Form": "Форма двох точок", 
    "Now click here to add the sliders.": "Тепер натисніть тут, щоб додати повзунки.", 
    "Limacon": "Равлик Паскаля", 
    "Click here to add a new item.": "Натисніть тут, щоб додати новий елемент.", 
    "Don't forget the \"y=\"!": "Не забувайте ввести \"y=\"!", 
    "Fill in this whole row.": "Заповніть весь рядок цілком.", 
    "Invalid x coordinate.": "Неправильна координата x.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Тепер давайте обмежимо діапазон. Додайте __sample_expression__ в кінці.", 
    "Too many variables. Try defining '__variables__'.": "Занадто багато змінних. Спробуйте визначення '__variables__'.", 
    "Parameters": "Параметри", 
    "Update Account": "Оновити обліковий запис", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Примітка: ви можете додати ваші власні дані, натиснувши кнопку __plus_icon__.", 
    "Convert this to a table.": "Перетворити на таблицю.", 
    "Change this equation to __sample_expression__": "Змініть це рівняння на __sample_expression__", 
    "Email": "Електронна адреса", 
    "Taylor Expansion of sin(x)": "Розкладання sin(x) у ряд Тейлора", 
    "rate it in the app store": "оцінити його в app store", 
    "Now graph: __sample_expression__": "Зараз побудуйте графік __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "'__dependency__' було визначено у більш ніж одному місці. Спробуйте заміну іншою змінною, або видалення кількох визначень '__dependency__'.", 
    "All the Trig Functions": "Всі тригонометричні функції", 
    "We only plot inequalities of x and y, or r and θ.": "Ми будуємо графіки нерівностей тільки зі змінними x та y, або r та φ.", 
    "Share your thoughts!": "Поділіться своїми думками!", 
    "Factored Form": "Факторизована форма", 
    "Fill it in.": "Заповніть це.", 
    "Both arguments of '__symbol__' must be lists. For example, try typing: __recommendation__.": "Обидва аргументи '__symbol__' мають бути списками. Наприклад, спробуйте набрати __recommendation__.", 
    "Sorry, I don't understand this.": "На жаль, я не розумію цього.", 
    "Image": "Зображення", 
    "Learn More": "Дізнатися більше", 
    "You can't use '__symbol__' as an index because it's already defined.": "'__symbol__' не можна використовувати як індекс, тому що його уже визначено.", 
    "What do you want '__symbol__' to equal?": "Чому ви бажаєте прирівняти '__symbol__'?", 
    "add slider:": "додати повзунок:", 
    "or": "або", 
    "Does not compute to constant.": "Не можливо обчислити константу.", 
    "New Blank Graph": "Новий порожній графік", 
    "Feb": "Лют", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Обмежте область визначення цієї функції, додавши __sample_expression__ у кінці.", 
    "image": "зображення", 
    "Duplicate": "Дублювати", 
    "Statistics": "Статистика", 
    "Degrees": "Градуси", 
    "Hide List": "Приховати список", 
    "Start by graphing a function.": "Почніть з побудови графіка функції.", 
    "Intercept Form": "Перетин двох вісей", 
    "Tell us on Facebook": "Facebook", 
    "Inequalities are not allowed.": "Нерівності не допускаються.", 
    "Click here to continue editing this table.": "Натисніть тут, щоб продовжити редагування цієї таблиці.", 
    "Click the \"Edit List\" button.": "Натисніть кнопку \"Редагувати список\".", 
    "Dec": "Гру", 
    "Convert to Table": "Перетворити на таблицю", 
    "Variable '__dependency__' can't be used as a function.": "Змінна '__dependency__' не може використовуватися як функція.", 
    "This equation contains fine detail that has not been fully resolved.": "Це рівняння містить дрібні деталі, які не були повністю відображені.", 
    "Polar equations must be linear in r.": "Рівняння в полярних координатах повинні бути лінійними від r.", 
    "Move the parabola.": "Перемістить параболу.", 
    "You're a table wizard!": "Ну ви взагалі майстер таблиць!", 
    "Polar Rose": "Полярна роза", 
    "Save (ctrl+s)": "Зберегти (ctrl + s)", 
    "search by title...": "пошук за назвою...", 
    "type your question or suggestion...": "введіть своє запитання або пропозицію...", 
    "functions": "функції", 
    "Mar": "Бер", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Підказка: введіть y=x^2 або використайте кнопку a<sup>2</sup> на екранній клавіатурі.", 
    "May": "Тра", 
    "Save As or Rename (ctrl+shift+s)": "Зберегти як або перейменувати (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "Ми не можемо побудувати графік θ як функції від r. Будь ласка задайте r(θ).", 
    "Please enter your email address. We will send a password recovery link to you.": "Будь ласка, введіть вашу адресу електронної пошти. Ми надішлемо вам посилання для відновлення паролю.", 
    "Visiting anonymously from Clever.": "Відвідати анонімно за допомогою Clever.", 
    "Equations are not allowed.": "Рівняння не допускаються.", 
    "Phase": "Фаза", 
    "Link to Google": "Зв'язок з Google", 
    "Create an Account": "Створити обліковий запис", 
    "Message: <i>(optional)</i>": "Повідомлення: <i>(необов'язково)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Натисніть на іконку поруч з кожною тригонометричною функцією, аби увімкнути або вимкнути її:", 
    "Please enter your feedback.": "Будь ласка, введіть свій відгук.", 
    "We only support implicit equations of x and y.": "Ми підтримуємо неявні рівняння тільки зі змінними x та y.", 
    "Error signing in with Clever.": "Помилка входу за допомогою Clever."
},"ur-PK":{},"sr-CS":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Prozor za logovanje je blokiran. Molimo dozvolite iskačućim prozorima sa desmos.com da vas prijave na Google.", 
    "all": "sve", 
    "Square Grid": "kvadratna mreža", 
    "style:": "stil:", 
    "Jan": "Jan", 
    "Try adding an equals sign to turn this into an equation.": "Pokušaj da dodavanjem znaka jednakosti pretvoriš ovo u jednačinu.", 
    "Please enter your email address. We will send a password recovery link to you.": "Molimo unesite vašu i-mejl adresu. Poslaćemo vam link za obnovu lozinke.", 
    "Undo (ctrl+z)": "korak unazad (ctrl+z)", 
    "Update Password": "Ažuriraj lozinku", 
    "Share your graph with the world!": "Podeli svoj grafik sa svetom!", 
    "Oct": "Okt", 
    "Sign In with Google": "Prijavi se preko Google-a", 
    "We don't solve complicated single-variable equations yet.": "Još ne rešavamo komplikovane jednačine sa jednom nepoznatom.", 
    "__number__ hours ago": "pre __number__ sati", 
    "Click and hold on this icon until the options menu opens up.": "Klikni  i zadrži se na ikonici dok se ne pojave dodatne opcije podešavanja.", 
    "Undo": "korak unazad", 
    "Untitled Graph": "Neimenovan grafik", 
    "Nice!": "Lepo!", 
    "... and select the \"table\" option.": "...i izaberi opcije za tabelu.", 
    "Remembered your password?": "Zapamtili ste svoju lozinku?", 
    "Grid": "mreža", 
    "Go \"Hands-free\"": "Idi na \"Hands-free\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Prikazuje se samo nejednakost kada je promenljiva kvadratna ili linearna.", 
    "step:": "korak: ", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "uglovi", 
    "This message will self-destruct in __seconds__...": "Ova poruka ce nestati za __seconds__ sekundi...", 
    "X-Axis": "x-osa", 
    "Radians": "Radijani", 
    "New graph created.": "Novi grafik je kreiran.", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Ukucaj ispravan broj ovde.", 
    "example": "primer", 
    "Link to your Google Account": "Poveži se sa svojim Google nalogom", 
    "Embed": "Ugradjeno", 
    "color:": "boja:", 
    "Click to return to your expressions.": "Klikni za povratak na svoj izraz.", 
    "A B C": "A B C", 
    "You did not select a file": "Niste izabrali fajl", 
    "Click to return to this graph.": "Klikni za povratak na ovaj grafik.", 
    "Your Name:": "Vaše ime:", 
    "Update Account": "Ažuriraj nalog", 
    "Duplicate": "Duplikat", 
    "Current Password:": "Trenutna lozinka:", 
    "Now click here to add the sliders.": "Sada klikni ovde za dodavanje slajdera.", 
    "Press play to animate the slider.": "Pritisni Play da animiraš slajder.", 
    "Click here to add a new item.": "Klikni ovde za  novu stavku.", 
    "Don't forget the \"y=\"!": "Ne zaboravi \"y=\"!", 
    "Fill in this whole row.": "Popuni ovaj ceo red.", 
    "Invalid width.": "Pogrešna sirina.", 
    "Invalid x coordinate.": "Pogresna x koordinata.", 
    "Create Account": "Kreiraj nalog", 
    "Tables": "Tabele", 
    "what's this?": "šta je ovo?", 
    "Let's get started!": "Hajde da počnemo!", 
    "This is the name we'll use if we feature one of your graphs.": "Ovo je ime koje ćemo koristiti ako budemo isticali tvoj grafikon.", 
    "Convert this to a table.": "Konvertuj u tabelu.", 
    "Send": "Pošalji", 
    "Sliders": "Klizači (slajderi)", 
    "Change this equation to __sample_expression__": "Promeni ovu jednačinu u __sample_expression__", 
    "Click anywhere to close the drawing options.": "Klikni bilo gde da zatvoriš opcije crtanja.", 
    "Print": "Štampa", 
    "Move right to add a new column.": "Klikni desno za dodavanje nove kolone.", 
    "Email": "I-mejl", 
    "saved": "sačuvano", 
    "Brilliant!": "Brilijantno!", 
    "Now graph: __sample_expression__": "Sada crtajte: __sample_expression__", 
    "Repeat Password:": "Ponovi lozinku:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Da li ste sigurni da želite da napustite ovaj grafik? Tvoj nesačuvan rad će biti izgubljen.", 
    "Try graphing a straight line, like __sample_expression__": "Pokušaj da skiciraš pravu, kao  __sample_expression__", 
    "__number__ minutes ago": "pre __number__ minuta", 
    "Type any number here.": "Otkucaj ovde bilo koji broj.", 
    "Resources": "Resursi", 
    "Advanced Tables": "Napredne tabele", 
    "Invalid height.": "Pogrešna visina.", 
    "Title:": "Naslov:", 
    "sending...": "slanje...", 
    "New Password:": "Nova lozinka:", 
    "We only plot inequalities of x and y, or r and θ.": "Prikazuje se samo nejednakost za x i y ili r i θ.", 
    "Click here to generate a table.": "Klikni ovde za generisanje nove tabele.", 
    "Share your thoughts!": "Podeli svoja razmišljanja!", 
    "Click here to connect the dots.": "Klikni ovde za povezivanje tačaka.", 
    "Click here to create a new expression.": "Klikni ovde da kreiraš novi izraz.", 
    "Didn't work? Try again!": "Nije uspelo? Pokušaj ponovo!", 
    "last week": "prošle nedelje", 
    "We'll never share or sell your email address.": "Nećemo deliti ni prodati tvoju i-mejl adresu.", 
    "Fill it in.": "Popuni.", 
    "Sign In": "Uloguj se", 
    "Show List": "Prikaži listu", 
    "optional": "opciono", 
    "Delete": "Obrisati", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Nešto nije u redu, molimo vas prijavite na desmos.com support. ( Greška __error_num__)", 
    "Delete All": "obrisati sve", 
    "Try typing __sample_expression__": "Pokušaj da otkucaš __sample_expression__", 
    "Apr": "Apr", 
    "Image": "Slika", 
    "__number__ weeks ago": "pre __number__ nedelja", 
    "no, thanks": "ne, hvala", 
    "Now try pressing Enter.": "Sada pokušaj da pritisneš Enter.", 
    "Recover Password": "obnovljena lozinka", 
    "Want us to consider featuring it?": "Da li želite da razmotrimo ovo?", 
    "folder": "folder", 
    "Tours": "Tutorijali", 
    "Open Graph": "Otvori grafik", 
    "type your question or suggestion...": "unesite svoje pitanje ili sugestiju...", 
    "Drop Image Here": "Ispusti ovde sliku", 
    "Terms of Use": "Uslovi korišćenja", 
    "Show Keypad": "Prikaži tastaturu", 
    "expression": "izraz", 
    "Drag the handle to change the value.": "Povuci manipulator da promeniš vrednost.", 
    "Does not compute to constant.": "Ne izračunava se konstanta.", 
    "New Blank Graph": "Nov prazan grafik", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Avg", 
    "This graph has been deleted.": "Ovaj grafik je izbrisan.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ograniči domen ove prave dodavanjem __sample_expression__ na kraj.", 
    "image": "slika", 
    "Projector Mode": "Režim za projektor", 
    "Send a Copy to Google Drive": "Pošalji kopiju na google drive", 
    "just now": "upravo sada", 
    "Open Graph (ctrl+o)": "Otvaranje grafika (ctrl+o)", 
    "Link to Google": "veza ka google-u", 
    "Click here to create a new blank expression.": "Klikni ovde da napraviš novi prazan izraz.", 
    "Show Grid Angles": "Prikaži uglove mreže", 
    "Degrees": "Stepeni", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Hajde sada da ograničimo opseg. Dodaj __sample_expression__ na kraj.", 
    "You're a scatter plot whiz!": "Ti si ekspert za korelacione dijagrame!", 
    "Desmos is in Maintenance Mode.": "Desmos je u režimu održavanja.", 
    "table": "tabela", 
    "loading...": "učitavanje...", 
    "Forgot your password?": "Zaboravili ste svoju lozinku?", 
    "The file \"__file__\" is not an image": "Fajl  \"__file__\" nije slika", 
    "add label": "dodaj oznaku", 
    "one hour ago": "pre sat vremena", 
    "Start by graphing a function.": "Počni sa skiciranjem funkcije.", 
    "You're a slider pro!": "Vi ste slajder profesionalac!", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Ti si zvezda ograničavanja!", 
    "Jul": "Jul", 
    "Let's make a scatter plot!": "Hajde da napravimo korelacioni dijagram!", 
    "Edit List": "Izmeniti listu", 
    "Edit Account": "Podešavanje naloga", 
    "more": "više", 
    "Function '__dependency__' is not defined.": "Funkcija '__dependency__' nije definisana.", 
    "Restrictions": "Ograničenja", 
    "Click here to continue editing this table.": "Klikni ovde da nastaviš da edituješ tabelu.", 
    "Click here to only show the dots.": "Klikni ovde da se prikažu samo tačke.", 
    "Click the \"Edit List\" button.": "Klikni na \"Izmeniti listu\" dugme.", 
    "Sign in": "Prijavi se", 
    "Sorry, we didn't find any graphs with that title.": "Izvinjavamo se, nismo našli grafik sa tim imenom.", 
    "Hide Keypad": "sakrij tastaturu", 
    "Try typing all of __sample_expression__": "Pokušaj da otkucaš sve  __sample_expression__", 
    "Dec": "Dec", 
    "Nov": "Nov", 
    "Message: <i>(optional)</i>": "Poruka;<i>(opciono)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos je trenutno u režimu za održavanje. Možete otvoriti postojeće grafike, ali nećete biti u mogućnosti da se prijavite, otvorite svoje grafike, ili sačuvate promene. Izvinjavamo se zbog ove neprijatnosti.", 
    "Nice Graph!": "Lep grafik!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Hvala za podršku &ndash; čujemo se uskoro!", 
    "Feedback": "Povratne informacije", 
    "Sep": "Sep", 
    "Convert to Table": "Konvertuj u tabelu", 
    "Redo (ctrl+y)": "korak unapred (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "Promenljiva '__dependency__' se ne može koristiti kao funkcija.", 
    "__number__ days ago": "pre __number__ dana", 
    "Tell us on Facebook": "Facebook-u", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos je u režimu održavanja, ne možete da sačuvate promene na ovom grafiku. Žao nam je zbog ove neprijatnosti!", 
    "Desmos User Guide": "Desmos uputstvo za korisnike", 
    "Done": "Uradjeno", 
    "Desmos Graphing Calculator": "Desmos Grafički Kalkulator", 
    "Cancel": "otkaži", 
    "Step:": "korak:", 
    "Send to:": "Poslati na:", 
    "on __month__ __day__, __year__": "__day__ __month__, __year__ . godine", 
    "Show Numbers": "Pokaži brojeve", 
    "Move the parabola.": "Premesti parabolu.", 
    "Hide List": "Sakriti listu", 
    "Y-Axis": "y-osa", 
    "Save (ctrl+s)": "Sačuvaj (ctrl+s)", 
    "You're a table wizard!": "Ti si čarobnjak za tabele!", 
    "Share Graph": "Podeli grafik", 
    "Sign In with Your Google Account": "Prijavi se sa svojim Google nalogom", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Podržane su samo duple nejednakosti. Pokušaj da izbrišeš jednu stranu nejednakosti.", 
    "Help": "Pomoć", 
    "Click here to make a new blank expression.": "Klikni ovde da napraviš novi prazan izraz.", 
    "Last trick!": "Poslednji trik!", 
    "Send Feedback": "Pošalji Feedback", 
    "search by title...": "pretraga po naslovu...", 
    "Share this link:": "Podeli ovaj link:", 
    "Please enter your feedback.": "Molimo vas, unesite svoje mišljenje.", 
    "loading graphs...": "učitavanje grafika...", 
    "functions": "funkcije", 
    "Mar": "Mar", 
    "Table created.": "Tabela je kreirana.", 
    "Language": "Jezik", 
    "No Unsaved Changes": "Nema nesačuvanih promena", 
    "May": "Maj", 
    "message sent": "poruka poslata", 
    "Save As or Rename (ctrl+shift+s)": "Sačuvaj kao ili preimenuj (ctrl+shift+s)", 
    "Awesome!": "Fenomenalno!", 
    "Sign Out": "Odjavi se", 
    "Click back to continue editing.": "Klikni korak nazad da nastavite editovanje.", 
    "Just fill in one more...": "Samo popuni još jedan...", 
    "Learn More": "Saznaj više", 
    "Use your Email Address": "Koristi svoju i-mejl adresu", 
    "to save and share your graphs!": "da sačuvate i podelite svoje grafike!", 
    "Name:": "ime:", 
    "Add Item": "dodaj stavku", 
    "Click to show the list of expressions.": "Klikni za prikaz liste izraza.", 
    "Graph Paper": "Milimetarski papir", 
    "Invalid y coordinate.": "Pogrešna y koordinata.", 
    "Graph Settings": "Podešavanja grafika", 
    "yesterday": "juče", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos je u preview režimu, pa nećete moći da sačuvate ovaj grafik.", 
    "add slider:": "dodaj klizač:", 
    "Please provide an email so that we can write back.": "Molimo vas obezbedite i-mejl da bi mogli da vam odgovorimo.", 
    "Opened '__graphTitle__'": "Otvoren '__graphTitle__'", 
    "Save Changes (ctrl+s)": "Sačuvati promene (ctrl+s)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Klikom na dugme \"__btn__\" potvrdjuješ da si pročitao i prihvatio naše __terms_of_use_link__.", 
    "HTML Embed Code": "HTML ugradjen kod", 
    "Arrows:": "Strelice:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Trik: možeš da kucaš y=x^2 ili koristi <sup>2</sup> dugme na tastaturi.", 
    "size:": "veličina:", 
    "Sign In with Desmos": "Prijavi se preko Desmos-a", 
    "one minute ago": "pre jedan minut", 
    "Password:": "Lozinka:", 
    "or": "ili", 
    "We only support implicit equations of x and y.": "Podržana je samo implicitna jednacina za x i y.", 
    "Message sent. Please check your email for a password recovery link.": "Poruka poslata. Molimo proverite vaš i-mejl za link za obnovu lozinke.", 
    "Email:": "I-mejl:", 
    "enter": "ulaz", 
    "center:": "centar:", 
    "Let's make some sliders!": "Hajde da pravimo slajdere!", 
    "Go down to the next row to add more data.": "Idi dole na sledeći red da dodaš još podataka.", 
    "Let's make a function. First: click here to create a new blank expression.": "Hajde da napravimo funkciju. Prvo: klikni ovde da napravimo novi prazan izraz.", 
    "yeah!": "Ura!"
},"pt-BR":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Janela de login bloqueada. Favor permitir pop-ups de desmos.com para fazer login com sua conta Google.", 
    "all": "todos", 
    "Try adding an equals sign to turn this into an equation.": "Tente adicionar um sinal de igual para transformar isso em uma equação.", 
    "Undo (ctrl+z)": "Desfazer (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Qual é o efeito de b na função g(x)?", 
    "Share your graph with the world!": "Compartilhe seu gráfico com o mundo!", 
    "__number__ minutes ago": "__number__ minutos atrás", 
    "Let's make a scatter plot!": "Vamos fazer um gráfico de dispersão!", 
    "Hide this warning.": "Ocultar este aviso.", 
    "Nice!": "Legal!", 
    "Nov": "Nov", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "A função '__dependency__' requer apenas 1 argumento. __supplement__", 
    "saved": "salvo", 
    "center:": "centro:", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' e '__lastSymbol__' não podem ser definidos em termos de um ao outro.", 
    "Click to return to this graph.": "Clique para retornar a este gráfico.", 
    "Press play to animate the slider.": "Pressione play para animar o controle deslizante.", 
    "Didn't work? Try again!": "Não funcionou? Tente novamente!", 
    "Now, let's try a new model.": "Agora, vamos tentar um novo modelo.", 
    "Tables": "Tabelas", 
    "Table headers must be simple expressions. __supplement__": "Cabeçalhos de tabela devem ser expressões simples. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "A função '__symbol__' requer pelo menos um argumento. Por exemplo, tente digitar: __symbol__(1, 2).", 
    "Function definitions are not allowed.": "Não são permitidas as definições de funções.", 
    "Too many variables, I don't know what to do with this.": "Muitas variáveis, não sei o que fazer com isso.", 
    "Click here to download Google Chrome.": "Clique aqui para baixar o Google Chrome.", 
    "Circle": "Círculo", 
    "Secant Line": "Reta Secante", 
    "Polar Graphing": "Coordenadas Polares", 
    "Visualizing Slope": "Visualizar Inclinação", 
    "How can I change the color?": "Como posso mudar a cor?", 
    "Fill in the sample data:": "Preencha os dados de exemplo:", 
    "Grid": "Grade", 
    "List index must not be a list.": "O índice da lista não deve ser uma lista.", 
    "Invalid height.": "Altura inválida.", 
    "Click here to create a new expression.": "Clique aqui para criar uma nova expressão.", 
    "New Password:": "Nova Senha:", 
    "Failed to find regression coefficients.": "Não conseguimos encontrar os coeficientes da regressão.", 
    "For example, try typing: __recommendation__.": "Por exemplo, tente digitar: __recommendation__.", 
    "How do I share a link to my graph?": "Como compartilhar um link para meu gráfico?", 
    "Regressions must contain at least one list of data.": "Regressões devem conter, pelo menos, uma lista de dados.", 
    "sending...": "enviando...", 
    "Hide Keypad": "Ocultar o teclado", 
    "last week": "semana passada", 
    "Show List": "Exibir a lista", 
    "We only plot double inequalities of x and y.": "Só desenhamos inequações duplas de x e de y.", 
    "Nice work &ndash; Keep exploring!": "Bom trabalho &ndash; Continue explorando!", 
    "Slope Intercept Form": "Forma Função", 
    "no, thanks": "não, obrigado", 
    "Recover Password": "Recuperar Senha", 
    "Terms of Use": "Termos de Uso", 
    "Show Keypad": "Exibir o teclado", 
    "Aug": "Ago", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Você não pode usar '__dependency__' como um parâmetro desta função, porque '__dependency__' já está definido.", 
    "You're a scatter plot whiz!": "Você é um mago do gráfico de dispersão!", 
    "Standard Form": "Forma Padrão", 
    "one hour ago": "uma hora atrás", 
    "You're a slider pro!": "Você é um profissional do controle deslizante!", 
    "Delete": "Apagar", 
    "drag:": "arraste:", 
    "more": "mais", 
    "Point Slope Form": "Forma Ponto + Inclinação", 
    "How is this app free?": "Como este aplicativo é gratuito?", 
    "Nice Graph!": "Belo Gráfico!", 
    "Feedback": "Comentário", 
    "Desmos User Guide": "Guia do Usuário do Desmos", 
    "example": "exemplo", 
    "on __month__ __day__, __year__": "em __day__ de __month__ de __year__", 
    "Graph Settings": "Configurações do gráfico", 
    "Share Graph": "Compartilhar Gráfico", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Inequações duplas devem ir no mesmo sentido, por exemplo, 1 < y < 2.", 
    "Show Numbers": "Exibir números", 
    "Wave Interference": "Interferência de Onda", 
    "message sent": "mensagem enviada", 
    "Sign Out": "Sair", 
    "X-Axis": "Eixo X", 
    "Graph Paper": "Papel de gráfico", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "O Desmos está em modo de visualização, assim você não será capaz de salvar os gráficos.", 
    "Save Changes (ctrl+s)": "Gravar Modificações (ctrl+s)", 
    "Regressions": "Regressões", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Clicando em \"__btn__\", você reconhece que leu e aceita nossos __terms_of_use_link__.", 
    "Sign In with Desmos": "Iniciar Sessão com Desmos", 
    "Password:": "Senha:", 
    "Link to your Google Account": "Link para sua conta do Google", 
    "Parabolas": "Parábolas", 
    "Email:": "Email:", 
    "enter": "enter", 
    "Derivatives": "Derivadas", 
    "Jan": "Jan", 
    "First column may not be __most__ or __last__.": "A primeira coluna não pode ser __most__ ou __last__.", 
    "Translating Any Function": "Translação de Funções", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Residuais são a diferença entre seus dados e o seu modelo. Clique aqui para adicioná-los à sua abela e plota-los no gráfico.", 
    "Oct": "Out", 
    "Sign In with Google": "Iniciar sessão com Google", 
    "Just fill in one more...": "Basta preencher mais uma vez...", 
    "Untitled Graph": "Gráfico sem nome", 
    "... and select the \"table\" option.": "... e selecione a opção \"tabela\".", 
    "Points are written like this: (1, 2).": "Pontos são escritos assim: (1, 2).", 
    "New graph created.": "Novo gráfico criado.", 
    "HTML Embed Code": "Incorporar código HTML", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Você tem um segundo para ajudar-nos? Suas avaliações e feedback ajudam outras pessoas a nos encontrar e nos ajuda a melhorar a calculadora. Diga-nos o que você pensa!", 
    "Click to return to your expressions.": "Clique para retornar a suas expressões.", 
    "A B C": "A B C", 
    "enter a note...": "Insira uma nota...", 
    "Only __form__ is supported. Otherwise, use parens.": "Há suporte para apenas __form__. Caso contrário, uso parênteses.", 
    "Hyperbola": "Hipérbole", 
    "Unsupported Browser": "Navegador incompatível", 
    "Show Grid Angles": "Exibir os ângulos da grade", 
    "Let's get started!": "Vamos começar!", 
    "This is the name we'll use if we feature one of your graphs.": "Este é o nome que usaremos se apresentarmos um dos seus gráficos.", 
    "We zoomed to fit your data.": "Zoom automático para seus dados.", 
    "FAQs": "FAQs", 
    "Sliders": "Deslizantes", 
    "Click anywhere to close the drawing options.": "Clique em qualquer lugar para fechar as opções de desenho.", 
    "Print": "Imprimir", 
    "Move right to add a new column.": "Mova para a direita para adicionar uma nova coluna.", 
    "Repeat Password:": "Repita a senha:", 
    "Try graphing a straight line, like __sample_expression__": "Tente a representação gráfica de uma linha reta, como __sample_expression__", 
    "Conic Sections": "Seções Cônicas", 
    "Definitions are nested too deeply.": "As definições estão demasiadamente intercaladas.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Tente adicionar '__lhs__' no início desta equação.", 
    "Tangent Line": "Reta Tangente", 
    "Period and Amplitude": "Período e Amplitude", 
    "Try typing __sample_expression__": "Tente digitar __sample_expression__", 
    "Apr": "Abr", 
    "sample data": "dados de amostra", 
    "Now try pressing Enter.": "Agora tente pressionar Enter.", 
    "Lists are not allowed.": "Listas não são permitidas.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "A função '__dependency__' requer __assignment_arity__ argumentos. __supplement__", 
    "note": "Nota", 
    "Needs work": "Necessita-se de trabalho", 
    "BBCode": "BBCode", 
    "Projector Mode": "Modo de Projeção", 
    "just now": "agora", 
    "I just want to graph": "Eu só quero fazer um gráfico", 
    "Click here to create a new blank expression.": "Clique aqui para criar uma nova expressão em branco.", 
    "Range cannot depend on free variable '__symbol__'.": "O intervalo não pode depender da variável livre '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos está em Modo de Manutenção.", 
    "The file \"__file__\" is not an image": "O arquivo \"__file__\" não é uma imagem", 
    "add label": "Adicionar etiqueta", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Edite esta equação para encontrar um ajuste melhor. Tente, por exemplo: <br>__equation__", 
    "__number__ weeks ago": "__number__ semanas atrás", 
    "Drop Image Here": "Solte a imagem aqui", 
    "Open Graph (ctrl+o)": "Abrir Gráfico (ctrl + o)", 
    "What effect does h have on the function g(x)?": "Qual é o efeito de h na função g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Tente incluir '__symbols__' e '__lastSymbol__' como argumentos definindo a função como '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "A função '__dependency__' não está definida.", 
    "Restrictions": "Restrições", 
    "Click here to only show the dots.": "Clique aqui para visualizar apenas os pontos.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Tente incluir '__lastSymbol__' como um argumento definindo a função como '__newSignature__'.", 
    "Send": "Enviar", 
    "Try typing all of __sample_expression__": "Tente digitar completamente __sample_expression__", 
    "Too complicated. Use parens.": "Muito complicado. Use parêntesis.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos está temporariamente em modo de manutenção. Você pode abrir os gráficos de exemplo, mas não será capaz de iniciar sessão, abrir seus gráficos ou salvar as alterações. Sentimos muito pelo incômodo.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Obrigado pelo comentário &ndash; logo você terá notícias nossas!", 
    "Sep": "Set", 
    "Redo (ctrl+y)": "Refazer (ctrl + y)", 
    "__number__ days ago": "__number__ dias atrás", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos está em modo de manutenção, você não será capaz de salvar as alterações para este gráfico. Sentimos muito pelo incômodo!", 
    "Cancel": "Cancelar", 
    "Send to:": "Enviar para:", 
    "Open Graph": "Abrir Gráfico", 
    "Table entries must be simple expressions. __supplement__": "As entradas da tabela devem ser expressões simples. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Temos suporte apenas para inequações duplas resolvidas. Tente apagar um lado da inequação.", 
    "Scaling Any Function": "Homotetia de Funções", 
    "Last trick!": "Último truque!", 
    "Share this link:": "Compartilhe este link:", 
    "Language": "Idioma", 
    "Awesome!": "Incrível!", 
    "Click here to generate a table.": "Clique aqui para gerar uma tabela.", 
    "to save and share your graphs!": "para salvar e compartilhar seus gráficos!", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "O Desmos funciona melhor em sua versão do Android se você utilizar o navegador Chrome.", 
    "Invalid y coordinate.": "Coordenada y inválida.", 
    "I love it": "Eu amo isso", 
    "We'll never share or sell your email address.": "Nós nunca compartilharemos ou venderemos seu endereço de e-mail.", 
    "Residuals": "Residuais", 
    "Points are not allowed.": "Pontos não são permitidos.", 
    "Arrows:": "Setas:", 
    "Edit List": "Editar Lista", 
    "Message sent. Please check your email for a password recovery link.": "Mensagem enviada. Por favor, verifique seu e-mail para um link de recuperação de senha.", 
    "Please provide an email so that we can write back.": "Por favor, forneça um e-mail para que nós possamos lhe responder.", 
    "Let's make some sliders!": "Vamos fazer alguns controles deslizantes!", 
    "Go down to the next row to add more data.": "Vá para a próxima linha para adicionar mais dados.", 
    "Let's make a function. First: click here to create a new blank expression.": "Vamos fazer uma função. Primeiro: clique aqui para criar uma nova expressão em branco.", 
    "yeah!": "sim!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Erro: Linha __rowNum__, Coluna __colNum__ não é um número.", 
    "Transformations": "Transformações", 
    "Image upload is not supported in this browser.": "A imagem enviada não é suportada neste navegador.", 
    "This column header can't be defined elsewhere in the calculator.": "Esse cabeçalho da coluna não pode ser definido em outro lugar na calculadora.", 
    "Update Password": "Atualizar Senha", 
    "Resources": "Recursos", 
    "Help Center": "Central de ajuda", 
    "Drag the handle to change the value.": "Arraste o controle para alterar o valor.", 
    "Undo": "Desfazer", 
    "Now type: __equation__": "Agora digite: __equation__", 
    "What effect does a have on the function g(x)?": "Qual o efeito de a na função g(x)?", 
    "Sign in": "Entrar", 
    "Type any number here.": "Digite qualquer número aqui.", 
    "folder": "Pasta", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Só é possível desenhar inequações quando uma variável é linear ou quadrática.", 
    "Send a Copy to Google Drive": "Enviar uma cópia para o Google Drive", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Ângulos", 
    "This message will self-destruct in __seconds__...": "Esta mensagem se auto-destruirá em __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Dica #2: __twiddle__ está em nosso teclado virtual, na seção 'A B C'.", 
    "We don't solve single-variable equations involving lists yet.": "Nós não resolvemos ainda equações de uma única variável envolvendo listas.", 
    "Ellipse with Foci": "Elipse com Focos", 
    "color:": "cor:", 
    "... and select the \"expression\" option.": "... e selecione a opção \"expressão\".", 
    "Help": "Ajuda", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Dica: Pressione o botão \"A B C\" do teclado para encontrar os botões { }", 
    "Nice. Let's check the model.": "Muito bom. Vamos verificar o modelo.", 
    "Logged in with Clever!": "Sessão iniciada com Clever!", 
    "This graph has been deleted.": "Este gráfico foi excluído.", 
    "Invalid width.": "Largura inválida.", 
    "Create Account": "Criar Conta", 
    "First, let's get some data.": "Primeiro, vamos obter alguns dados.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "O Desmos adquire todo seu dinheiro por meio de parcerias. Interessado em fazer uma parceria com o Desmos? Envie um e-mail para <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Aperte e segure o círculo colorido à esquerda de uma equação ou expressão para abrir as opções de estilo e cor.", 
    "Learn more": "Saiba mais", 
    "Brilliant!": "Brilhante!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Você tem certeza que quer sair sem salvar? Seu trabalho não salvo será perdido.", 
    "Step:": "Passo:", 
    "Parabola and Focus": "Parábola e Foco", 
    "Advanced Tables": "Tabelas avançadas", 
    "Title:": "Título:", 
    "Current Password:": "Senha Atual:", 
    "Click here to connect the dots.": "Clique aqui para ligar os pontos.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Algo saiu errado, por favor reporte isto para a equipe de apoio de desmos.com. (Erro __error_num__)", 
    "Sign In": "Entrar", 
    "Polar Conic Sections": "Seções Cônicas em Coordenadas Polares", 
    "optional": "opcional", 
    "You haven't written anything yet.": "Você ainda não escreveu nada.", 
    "Sorry, we didn't find any graphs with that title.": "Desculpe, não encontramos nenhum gráfico com esse título.", 
    "Y-Axis": "Eixo y", 
    "Want us to consider featuring it?": "Gostaria que nós o divulgassemos?", 
    "What effect does k have on the function g(x)?": "Qual é o efeito de k na função g(x)?", 
    "Tours": "Visita Guiada", 
    "Reflections of a Function": "Reflexões de Funções", 
    "expression": "Expressão", 
    "Close": "Fechar", 
    "send us feedback": "enviar feedback", 
    "For example, try typing: __dependency__(x).": "Por exemplo, tente digitar: __dependency__(x).", 
    "Unit Circle": "Círculo Unitário", 
    "powered by": "powered by", 
    "table": "Tabela", 
    "loading...": "carregando...", 
    "Forgot your password?": "Esqueceu sua senha?", 
    "Calculus": "Cálculo", 
    "Click here to add a new table.": "Clique aqui para adicionar uma nova tabela.", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Você é uma estrela das restrições!", 
    "Jul": "Jul", 
    "Inverse of a Function": "Inversa de Funções", 
    "Edit Account": "Editar Conta", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Não há (por enquanto!) uma maneira de salvar seus gráficos pelo aplicativo. Nós recomendamos que visite www.desmos.com/calculator e faça o sign in com sua conta do Desmos para salvar seu gráfico.", 
    "Delete All": "Apagar Tudo", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Não há (por enquanto!) uma maneira de salvar seus gráficos pelo aplicativo. Nós recomendamos que visite www.desmos.com/calculator e faça o sign in com sua conta do Desmos para salvar seu gráfico.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Senóide com amplitude \"a\" e período \"b\"", 
    "what's this?": "o que é isto?", 
    "Done": "Feito", 
    "Desmos Graphing Calculator": "Calculadora Gráfica Desmos", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' não pode ser usada como um parâmetro de regressão.", 
    "Nested lists are not allowed.": "Listas aninhadas não são permitidas.", 
    "Sign In with Your Google Account": "Iniciar Sessão com sua conta do Google", 
    "loading graphs...": "carregando gráficos...", 
    "Click here to make a new blank expression.": "Clique aqui para criar uma nova expressão em branco.", 
    "Send Feedback": "Enviar Comentário", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Agora vamos plotar os residuais.</b><br>Digite __residualVariable__ em uma nova coluna de tabela.", 
    "Table created.": "Tabela criada.", 
    "Click back to continue editing.": "Clique em voltar para continuar a edição.", 
    "Ranges must be arithmetic sequences.": "Intervalos devem ser sequências aritméticas.", 
    "Enjoying Desmos?": "Curtindo o Desmos?", 
    "Name:": "Nome:", 
    "Add Item": "Adicionar Item", 
    "Click to show the list of expressions.": "Clique para visualizar a lista de expressões.", 
    "Function g(x) is a transformed version of function f(x).": "A função g(x) é uma versão transformada da função f(x).", 
    "Lines": "Retas", 
    "yesterday": "ontem", 
    "Hint #1: to get __y_1__ type __y1__.": "Dica #1: para obter __y_1__ digite __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "Você não pode redefinir '__symbol__' porque ele já está definido.", 
    "How do I save my graph?": "Como faço para salvar meu gráfico?", 
    "Opened '__graphTitle__'": "'__graphTitle__' aberto", 
    "Trigonometry": "Trigonometria", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Desculpe-me, você não pode desenhar __symbol__ como uma função de nada.", 
    "No Unsaved Changes": "Não Existem Alterações Não Gravadas", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Somente __form1__ e __form2__ são suportadas. Caso contrário, use parêntesis.", 
    "one minute ago": "um minuto atrás", 
    "Vertex Form": "Forma Vértice", 
    "Other Questions?": "Mais perguntas?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Vá ao Google Docs e copie e cole isso __sample_data_link__.", 
    "Square Grid": "Eixos com a mesma escala", 
    "style:": "estilo:", 
    "Ask us on Twitter": "Pergunte-nos no Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "A função '__dependency__' requer um argumento. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Ainda não resolvemos equações complicadas com uma variável.", 
    "__number__ hours ago": "__number__ horas atrás", 
    "Click and hold on this icon until the options menu opens up.": "Clique e segure sobre este ícone até que apareça o menu de opções.", 
    "size:": "tamanho:", 
    "Remembered your password?": "Lembrou de sua senha?", 
    "Download the User Guide": "Baixe o Guia do Usuário", 
    "Go \"Hands-free\"": "Ir para \"Sem as Mãos\"", 
    "step:": "passo:", 
    "Cannot index into something that is not a list.": "Não se pode indexar em algo que não é uma lista.", 
    "Radians": "Radianos", 
    "Let's start with some data!": "Vamos começar com alguns dados!", 
    "Uh-oh! Type a valid number here.": "Oh-oh! Digite um número válido aqui.", 
    "Use your Email Address": "Use seu endereço de E-mail", 
    "General Form": "Forma Geral", 
    "Embed": "Incorporar", 
    "You did not select a file": "Você não selecionou um arquivo", 
    "Standard Form with Tangent": "Forma Padrão com Tangente", 
    "Your Name:": "Seu Nome:", 
    "Two Point Form": "Forma Ponto + Ponto", 
    "Now click here to add the sliders.": "Agora clique aqui para adicionar os controles deslizantes.", 
    "Limacon": "Limaçon", 
    "Click here to add a new item.": "Clique aqui para adicionar um novo item.", 
    "Don't forget the \"y=\"!": "Não esqueça o \"y =\"!", 
    "Fill in this whole row.": "Preencha esta linha inteira.", 
    "Invalid x coordinate.": "Coordenada x inválida.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Agora vamos restringir o intervalo. Adicione __sample_expression__ no final.", 
    "Too many variables. Try defining '__variables__'.": "Muitas variáveis.  Tente definir '__variables__'.", 
    "Parameters": "Parâmetros", 
    "Update Account": "Atualizar Conta", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Atenção: você pode adicionar seus próprios dados, no lugar desses, clicando no botão __plus_icon__.", 
    "Convert this to a table.": "Converta isso em uma tabela.", 
    "Change this equation to __sample_expression__": "Mude esta equação para __sample_expression__", 
    "Email": "Email", 
    "Taylor Expansion of sin(x)": "Expansão de Taylor de sin(x)", 
    "rate it in the app store": "avalie o aplicativo na app store", 
    "Now graph: __sample_expression__": "Agora o gráfico: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Você definiu '__dependency__' mais de uma vez. Tente escolher uma variável diferente, ou exclua algumas das definições de '__dependency__'.", 
    "All the Trig Functions": "Todas as Funções Trigonométricas", 
    "We only plot inequalities of x and y, or r and θ.": "Nós montamos gráficos somente de inequações em x e y, ou em r e θ.", 
    "Share your thoughts!": "Compartilhe seus pensamentos!", 
    "Factored Form": "Forma Fatorada", 
    "Fill it in.": "Preencha.", 
    "Sorry, I don't understand this.": "Lamento, eu não entendo isto.", 
    "Image": "Imagem", 
    "Learn More": "Saiba Mais", 
    "You can't use '__symbol__' as an index because it's already defined.": "Você não pode usar '__symbol__' como um índice porque ele já está definido.", 
    "What do you want '__symbol__' to equal?": "A que você quer igualar '__symbol__'?", 
    "add slider:": "adicionar controle deslizante:", 
    "or": "ou", 
    "Does not compute to constant.": "O resultado calculado não é uma constante.", 
    "New Blank Graph": "Novo Gráfico em Branco", 
    "Feb": "Fev", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restrinja o domínio desta reta, adicionando __sample_expression__ no final.", 
    "image": "Imagem", 
    "Duplicate": "Duplicar", 
    "Statistics": "Estatísticas", 
    "Degrees": "Graus", 
    "Hide List": "Esconder Lista", 
    "Start by graphing a function.": "Comece pela representação gráfica de uma função.", 
    "Intercept Form": "Forma Normal", 
    "Tell us on Facebook": "Conte-nos no Facebook", 
    "Inequalities are not allowed.": "Inequações não são permitidas.", 
    "Click here to continue editing this table.": "Clique aqui para continuar a editar esta tabela.", 
    "Click the \"Edit List\" button.": "Clique no botão \"Editar lista\".", 
    "Dec": "Dez", 
    "Convert to Table": "Converter em Tabela", 
    "Variable '__dependency__' can't be used as a function.": "A variável '__dependency__' não pode ser usada como uma função.", 
    "Polar equations must be linear in r.": "Equações polares devem ser lineares em r.", 
    "Move the parabola.": "Mova a parábola.", 
    "You're a table wizard!": "Você é um mago das tabelas!", 
    "Polar Rose": "Rosácea", 
    "Save (ctrl+s)": "Salvar (ctrl + s)", 
    "search by title...": "pesquisar por título...", 
    "Logarithmic Spiral": "Espiral Logarítmica", 
    "type your question or suggestion...": "Escreva sua pergunta ou sugestão...", 
    "functions": "funções", 
    "Mar": "Mar", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Dica: você pode digitar y=x^2, ou usar o botão a<sup>2</sup> no teclado abaixo.", 
    "May": "Mai\n", 
    "Save As or Rename (ctrl+shift+s)": "Salvar Como ou Renomear (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "Não podemos desenhar θ como uma função de r. Tente desenhar r(θ) no lugar.", 
    "Please enter your email address. We will send a password recovery link to you.": "Por favor, forneça seu endereço de e-mail. Nós lhe enviaremos um link de recuperação de senha.", 
    "Visiting anonymously from Clever.": "Acesso anônimo via Clever.", 
    "Equations are not allowed.": "Equações não são permitidas.", 
    "Phase": "Fase", 
    "Link to Google": "Link para o Google", 
    "Message: <i>(optional)</i>": "Mensagem: <i>(opcional)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Clique no ícone próximo a cada função trigonométrica para habilitá-la ou desabilitá-la:", 
    "Please enter your feedback.": "Por favor dê seu feedback.", 
    "We only support implicit equations of x and y.": "Temos suporte apenas para funções implícitas em x e y.", 
    "Error signing in with Clever.": "Erro ao entrar via Clever."
},"ro":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Fereastra de autentificare a fost blocată. Vă rugăm să permiteţi ferestre pop-up din desmos.com pantru a intra cu contul Google.", 
    "all": "toate", 
    "style:": "stil:", 
    "Jan": "Jan", 
    "Please enter your email address. We will send a password recovery link to you.": "Vă rugăm să introduceţi adresa dumnevoastră de poşta electronică. Ne vom trimite un link-ul de recuperare parolei.", 
    "Undo (ctrl+z)": "Înapoi (ctrl + z)", 
    "Update Password": "Actualizaţi parola", 
    "Share your graph with the world!": "Distribuiți acest grafic peste lumea!", 
    "Oct": "Oct", 
    "Sign In with Google": "Autentificaţi-vă prin Google", 
    "We don't solve complicated single-variable equations yet.": "Noi încă nu rezolvăm ecuaţii complicate cu o singură variabilă.", 
    "__number__ hours ago": "__number__ ore în urmă", 
    "Click and hold on this icon until the options menu opens up.": "Faceţi clic şi țineți butonul pe această pictogramă până când se deschide meniul de opţiuni.", 
    "Undo": "O operație înapoi", 
    "Untitled Graph": "Grafic fără nume", 
    "Nice!": "Drăguţ!", 
    "... and select the \"table\" option.": "... şi selectaţi opţiunea de \"masă\".", 
    "Remembered your password?": "Aţi adus aminte de parola?", 
    "Go \"Hands-free\"": "Duceți-vă \"Hands-free\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Noi putem să facem un grafic de inegalitaţia doar atunci când o variabilă este pătratică sau liniară.", 
    "step:": "pas:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Acest mesaj va fi autodistrus în __seconds__...", 
    "Radians": "Radiane", 
    "New graph created.": "Graficul nou a fost creat.", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Scrieți aici un număr valid.", 
    "center:": "centru:", 
    "Link to your Google Account": "Legaţi-l cu contul google", 
    "Embed": "Încorporat", 
    "color:": "culoare:", 
    "Click to return to your expressions.": "Faceți un click pentru a întoarce la expresii dumnevoștri.", 
    "Help": "Ajutor", 
    "A B C": "A B C", 
    "Click to return to this graph.": "Faceţi click pentru a reveni la acest grafic.", 
    "Your Name:": "Numele dumnevostru:", 
    "Update Account": "Actualizaţi contul", 
    "Duplicate": "Duplicat", 
    "Current Password:": "Parola curentă:", 
    "Now click here to add the sliders.": "Acum, faceţi aici un clic pentru a adăuga un glisor.", 
    "Press play to animate the slider.": "Apăsaţi start pentru a anima pe glisor.", 
    "Click here to add a new item.": "Faceți un click aici pentru a adăuga un element nou.", 
    "Don't forget the \"y=\"!": "Nu uitaţi \"y =\"!", 
    "Fill in this whole row.": "Completaţi întreg rând.", 
    "Create Account": "Creaţi un cont", 
    "Tables": "Tabele", 
    "what's this?": "ce este acesta?", 
    "Let's get started!": "Haideţi să începem!", 
    "This is the name we'll use if we feature one of your graphs.": "Noi vom utiliza numele acesta dacă ne vom prezenta unul dintre grafice dumneavoastre.", 
    "Convert this to a table.": "Converti acesta într-un tabel.", 
    "Send": "Trimite", 
    "Sliders": "glisoarele", 
    "Change this equation to __sample_expression__": "Schimbaţi pe această equaţie la __sample_expression__", 
    "Click anywhere to close the drawing options.": "Faceți oriunde un click pentru a închide opţiuni de desen.", 
    "Print": "Imprimare", 
    "Move right to add a new column.": "Mișcaţi-vă pentru a adăuga o coloană nouă.", 
    "Email": "E-mail", 
    "saved": "Salvat", 
    "Brilliant!": "Genial!", 
    "Now graph: __sample_expression__": "Acum faceți graficul de: __sample_expression__", 
    "Repeat Password:": "Repetaţi parola:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Sînteţi siguri că doriţi să părăsiţi acest grafic? Munca dumnevoastra nesalvată va fi pierdută.", 
    "Try graphing a straight line, like __sample_expression__": "Încercaţi să faceți un grafic de o linie dreaptă, ca __sample_expression__", 
    "__number__ minutes ago": "__number__ minute în urmă", 
    "Type any number here.": "Introduceţi vreun număr aici.", 
    "Resources": "Resursele", 
    "Advanced Tables": "Tabele avansate", 
    "example": "exemplu", 
    "Title:": "Titlu:", 
    "sending...": "trimiterea...", 
    "New Password:": "Parola nouă:", 
    "We only plot inequalities of x and y, or r and θ.": "Noi doar facem grafice de inegalităţile de x şi y, sau r și θ.", 
    "Click here to generate a table.": "Faceți un click aici pentru a genera un tabel.", 
    "loading graphs...": "încarcarea graficilor...", 
    "Click here to connect the dots.": "Faceți un click aici pentru a conecta puncte.", 
    "Click here to create a new expression.": "Faceți click aici pentru a crea o expresie nouă.", 
    "Didn't work? Try again!": "Nu a lucrat? încearcaţi din nou!", 
    "last week": "săptămâna trecută", 
    "We'll never share or sell your email address.": "Noi niciodată nu vom partaja sau vindea adresa dumnevoastră de email.", 
    "Fill it in.": "Umpletaţi-l.", 
    "Sign In": "Autentificaţi-vă", 
    "optional": "opţional", 
    "Delete": "A şterge", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Ceva a mers incorect, vă rugăm să raportaţi greşeala aceasta la serviciu de ajutor desmos.com. (Eroare __error_num__)", 
    "Delete All": "Şterge tot", 
    "Try typing __sample_expression__": "Încercaţi să tastaţi __sample_expression__", 
    "Apr": "Apr", 
    "Image": "Imagine", 
    "Start by graphing a function.": "Începeţi făcînd un grafic de funcţie.", 
    "no, thanks": "nu, mulţumesc", 
    "Now try pressing Enter.": "Acum, încercaţi să apăsaţi pe Enter.", 
    "Recover Password": "A restabili parola", 
    "Want us to consider featuring it?": "Doriţi să ne luăm în considerare adăugarea caracteristicilor?", 
    "folder": "dosar", 
    "Tours": "Tururi", 
    "Open Graph": "A deschide un grafic", 
    "type your question or suggestion...": "Scrieți o întrebare sau o propunere...", 
    "size:": "Dimensiune:", 
    "Terms of Use": "Condiții de utilizare", 
    "expression": "expresie", 
    "Drag the handle to change the value.": "Trageți mâner pentru a schimba valoarea.", 
    "New Blank Graph": "Grafic Necompletat Nou", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Aug", 
    "This graph has been deleted.": "Acest grafic a fost şters.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Limitați domeniul de această linie prin adăugarea __sample_expression__ la capăt.", 
    "image": "imagine", 
    "Projector Mode": "Modul de proiector", 
    "Send a Copy to Google Drive": "Trimite o copie la Google Drive", 
    "just now": "chiar acum", 
    "Open Graph (ctrl+o)": "A deschide un grafic (ctrl+o)", 
    "Link to Google": "Legaţi-l cu contul google", 
    "Click here to create a new blank expression.": "Faceți click aici pentru a crea o nouă goală expresie.", 
    "Degrees": "Grade", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Acum hai să limităm domeniu. Adăugați __sample_expression__ la capăt.", 
    "You're a scatter plot whiz!": "Sînteți un master de grafice de puncte!", 
    "Desmos is in Maintenance Mode.": "Desmos este în mod de serviciu.", 
    "table": "tabel", 
    "loading...": "încărcătură...", 
    "Forgot your password?": "Aţi uitat parola?", 
    "Hide List": "A ascunde lista", 
    "one hour ago": "o oră în urmă", 
    "__number__ weeks ago": "__number__ săptămâni în urmă", 
    "You're a slider pro!": "Sînteți un pro de glisori!", 
    "Jun": "Iun", 
    "You're a restrictions star!": "Sînteți o stea de restricţii!", 
    "Jul": "Iul", 
    "Let's make a scatter plot!": "Haideți să facem un complot risipit!", 
    "Edit Account": "Editarea contului", 
    "more": "mai mult", 
    "Function '__dependency__' is not defined.": "Funcţia '__dependency__' nu este definită.", 
    "Restrictions": "Restricţii", 
    "Click here to continue editing this table.": "Faceți un click aici pentru a continua editarea acestui tabel.", 
    "Click here to only show the dots.": "Faceți un click aici pentru a arata numai puncte.", 
    "Click the \"Edit List\" button.": "Faceţi un clic pe butonul \"A edita listă\".", 
    "Sign in": "Conectaţi-vă", 
    "Sorry, we didn't find any graphs with that title.": "Ne pare rau, nu ne-am găsit nici un grafic cu acest titlu.", 
    "Try typing all of __sample_expression__": "Încercaţi să tipați tot de __sample_expression__", 
    "Dec": "Dec", 
    "Nov": "Noi", 
    "Edit List": "A edita listă", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos este temporar în modul de serviciu, dumnevoastră nu veţi putea să salvaţi modificările la acest grafic. Ne pare rău pentru inconvinienţă creată.", 
    "Nice Graph!": "E un grafic frumos!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Multumesc pentru recenzie &ndash; veţi auzi de la noi în curând!", 
    "Feedback": "Recenzie", 
    "Sep": "Sep", 
    "Convert to Table": "Conversia la tabela", 
    "Redo (ctrl+y)": "Înainte (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Variabila \"__dependency__\" nu poate fi utilizată ca o funcţie.", 
    "__number__ days ago": "__number__ zile în urmă", 
    "Tell us on Facebook": "Spuneți-ne pe Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos este în modul de serviciu, dumnevoastră nu veţi putea să salvaţi modificările la acest grafic. Ne pare rău pentru inconvinienţă creată!", 
    "Desmos User Guide": "Ghidul de utilizatre Desmos", 
    "Done": "Făcut", 
    "Desmos Graphing Calculator": "Desmos Graphing Calculator", 
    "Cancel": "Anulare", 
    "Send to:": "Trimite la:", 
    "on __month__ __day__, __year__": "pe __day__ , __month__ , __year__", 
    "Move the parabola.": "Mișcați parabola.", 
    "Save (ctrl+s)": "A salva (ctrl + s)", 
    "You're a table wizard!": "Sînteți un expert de tabele!", 
    "Share Graph": "Distribuiți graficul", 
    "Sign In with Your Google Account": "Autentificaţi-vă prin contul Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Noi numai sustinem inegalităţiile dubli rezolvate. Încercaţi să ştergeţi o parte a inegalităţii.", 
    "Click here to make a new blank expression.": "Faceți click aici pentru a forma o nouă goală expresie.", 
    "Last trick!": "Ultimul truc!", 
    "Send Feedback": "Trimiteţi o recenzie", 
    "search by title...": "Căutare după titlu...", 
    "Share this link:": "Distribuiți acest link:", 
    "Please enter your feedback.": "Vă rugăm să introduceţi pentru recenzie.", 
    "functions": "funcţii", 
    "Mar": "Mar", 
    "Language": "Limba", 
    "May": "Mai", 
    "message sent": "mesajul a fost trimis", 
    "Save As or Rename (ctrl+shift+s)": "A Salva ca sau a Reîntitula (ctrl + shift + s)", 
    "Awesome!": "Nemaipomenit!", 
    "Sign Out": "Deconectaţi-vă", 
    "Click back to continue editing.": "Faceţi clic pentru a da înapoi și a continua editarea.", 
    "Just fill in one more...": "Doar finisați încă unul...", 
    "Learn More": "Aflaţi mai mult", 
    "Use your Email Address": "Utilizaţi adresa dumnevoastră de E-mail", 
    "to save and share your graphs!": "pentru a salva și a distribui graficele dumnevoastre!", 
    "Name:": "Nume:", 
    "Add Item": "Adăugaţi un element", 
    "Click to show the list of expressions.": "Faceţi clic pentru a privi lista de expresii.", 
    "Graph Paper": "Hârtia milimetrică", 
    "yesterday": "ieri", 
    "add slider:": "A adauga up glisor:", 
    "Please provide an email so that we can write back.": "Vă rugăm să ne dați un e-mail, ca noi ar putea să scriem înapoi.", 
    "Opened '__graphTitle__'": "'__graphTitle__' deschis", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Făcând un clic pe \"__btn__\", dumnevoastră confirmaţi că aţi citit și aţi acceptat __terms_of_use_link__.", 
    "HTML Embed Code": "Codul de Embed HTML", 
    "Message: <i>(optional)</i>": "Mesajul: <i>(optional)</i>", 
    "Sign In with Desmos": "Autentificaţi-vă prin Desmos", 
    "one minute ago": "O minută în urmă", 
    "Password:": "Parola:", 
    "or": "sau", 
    "We only support implicit equations of x and y.": "Noi sprijinim numai ecuaţii implicite de x şi y.", 
    "Message sent. Please check your email for a password recovery link.": "Mesajul a fost trimis. Vă rog verificați pe poşta electronică dumnevoastră pentru un link-ul de recuperarea parolei.", 
    "Email:": "E-mail:", 
    "enter": "Input", 
    "Let's make some sliders!": "Hai să facem niște glisoarele!", 
    "Go down to the next row to add more data.": "Duceţi-vă jos la rândul următor pentru a adăuga mai multe date.", 
    "Let's make a function. First: click here to create a new blank expression.": "Hai să facem o funcţie. În primul rând: faceți click aici pentru a crea o nouă expresie goală.", 
    "yeah!": "da!"
},"ko":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "로그인 창이 차단되었습니다. Google로 로그인하려면 desmos.com의 팝업을 허용하십시오.", 
    "all": "모든", 
    "Image upload is not supported in this browser.": "이 브라우저에서는 이미지 업로드가 지원되지 않습니다.", 
    "style:": "스타일:", 
    "Jan": "1월", 
    "Please enter your email address. We will send a password recovery link to you.": "귀하의 이메일 주소를 입력해주시기 바랍니다. 귀하에게 비밀번호 복구 링크가 전송될 것입니다.", 
    "Undo (ctrl+z)": "실행 취소 (ctrl+z)", 
    "Update Password": "비밀번호 변경", 
    "Function '__dependency__' requires an argument. __supplement__": "함수 '__dependency__'는 변수를 요구합니다. __supplement__", 
    "Sign Out": "로그아웃", 
    "Share your graph with the world!": "그래프를 세계에 공유하세요!", 
    "Oct": "10월", 
    "Sign In with Google": "Google을 통해 로그인", 
    "We don't solve complicated single-variable equations yet.": "우리는 아직 복잡한 단일 변수 방정식을 풀지 않습니다.", 
    "Dec": "12월", 
    "__number__ hours ago": "__number__ 시간 전", 
    "Click and hold on this icon until the options menu opens up.": "옵션 메뉴가 나올 때까지 이 아이콘을 누르고 있으세요.", 
    "Hide this warning.": "경고 숨기기", 
    "Undo": "되돌리기", 
    "Untitled Graph": "제목 없는 그래프", 
    "Nice!": "좋습니다!", 
    "... and select the \"table\" option.": "... 그리고 \"표\"를 선택 합니다.", 
    "sending...": "보내는 중...", 
    "Grid": "눈금", 
    "Go \"Hands-free\"": "손을 떼도 됩니다", 
    "We can only plot inequalities when one variable is quadratic or linear.": "하나의 변수가 일차이거나 이차일 때만 부등식 그래프를 그릴 수 있습니다.", 
    "step:": "단계:", 
    "Tweet @desmos": "@desmos 트위터", 
    "Points are written like this: (1, 2).": "점은 다음과 같이 작성됩니다: (1, 2).", 
    "Angles": "각도", 
    "This message will self-destruct in __seconds__...": "이 ���시지는 __seconds__초 후에 자동 소멸 됩니다...", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "함수 '__dependency__'는 단 하나의 변수를 요구합니다. __supplement__", 
    "Radians": "호도법", 
    "New graph created.": "새 그래프가 만들어졌습니다.", 
    "Uh-oh! Type a valid number here.": "앗 이런! 올바른 숫자를 입력하시기 바랍니다.", 
    "example": "예시", 
    "Link to your Google Account": "Google 계정에 연결", 
    "Embed": "삽입", 
    "color:": "색:", 
    "Click to return to your expressions.": "당신의 식으로 돌아가려면 클릭하세요.", 
    "A B C": "A B C", 
    "You did not select a file": "파일이 선택되지 않았습니다.", 
    "Click to return to this graph.": "이 그래프로 돌아가려면 클릭하세요.", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos 는 안드로이드의 경우 Chrome 브라우저를 사용할 때 가장 잘 작동합니다.", 
    "Your Name:": "당신의 이름:", 
    "Update Account": "계정 사항 변경", 
    "enter a note...": "메모를 입력하세요...", 
    "Current Password:": "현재 비밀번호:", 
    "Now click here to add the sliders.": "이제 여기를 클릭하여 슬라이더를 추가합니다.", 
    "Press play to animate the slider.": "재생을 눌러 슬라이더를 움직이게 하세요.", 
    "Click here to add a new item.": "새 항목을 추가하려면 여기를 클릭하세요.", 
    "Don't forget the \"y=\"!": "\"y=\"을(를) 잊지 마세요!", 
    "Fill in this whole row.": "이 행 전체를 채워 넣으세요.", 
    "Invalid width.": "잘못된 너비입니다.", 
    "Invalid x coordinate.": "잘못된 x 좌표입니다.", 
    "Unsupported Browser": "지원되지 않는 브라우저", 
    "Create Account": "회원가입", 
    "Tables": "표", 
    "what's this?": "이게 뭐죠?", 
    "Let's get started!": "시작해 봅시다!", 
    "This is the name we'll use if we feature one of your graphs.": "이것은 우리가 당신의 그래프중 하나를 추천할 때 사용될 이름입니다.", 
    "Convert this to a table.": "이것을 표로 변환하세요.", 
    "Definitions are nested too deeply.": "정의가 너무 많이 중첩되어 있습니다.", 
    "Send": "전송", 
    "Sliders": "슬라이더", 
    "Change this equation to __sample_expression__": "이 등식을 __sample_expression__ 로 바꾸세요", 
    "Click anywhere to close the drawing options.": "그리기 설정을 닫으려면 아무 곳이나 클릭하세요.", 
    "Print": "인쇄", 
    "Move right to add a new column.": "새 열을 추가하려면 오른쪽으로 이동하세요.", 
    "Duplicate": "복제", 
    "Email": "이메일", 
    "saved": "저장됨", 
    "Brilliant!": "멋집니다!", 
    "Now graph: __sample_expression__": "이제 다음의 그래프를 그리세요: __sample_expression__", 
    "Repeat Password:": "비밀번호 확인:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "정말로 이 그래프를 떠나시기를 원합니까? 저장하지 않은 작업은 손실됩니다.", 
    "Try graphing a straight line, like __sample_expression__": "__sample_expression__ 처럼 직선 그래프를 그려보세요", 
    "__number__ minutes ago": "__number__ 분 전", 
    "Type any number here.": "여기에 아무 숫자나 입력하세요.", 
    "Resources": "자료실", 
    "Advanced Tables": "고급 표", 
    "Invalid height.": "잘못된 높이입니다.", 
    "Title:": "제목:", 
    "Logged in with Clever!": "Clever로 로그인!", 
    "New Password:": "새 비밀번호:", 
    "We only plot inequalities of x and y, or r and θ.": "오직 x와 y, 또는 r과 θ의 부등식 그래프만 그릴 수 있습니다.", 
    "Click here to generate a table.": "여기를 클릭하여 표를 만드세요.", 
    "loading graphs...": "그래프 불러오는 중...", 
    "For example, try typing: __recommendation__.": "예를 들어, 다음을 입력하세요: __recommendation__.", 
    "Click here to connect the dots.": "점들을 연결하려면 여기를 클릭하세요.", 
    "Click here to create a new expression.": "여기를 클릭하여 새 식을 만드세요.", 
    "Didn't work? Try again!": "작동하지 않습니까? 다시 해보세요!", 
    "last week": "지난주", 
    "We'll never share or sell your email address.": "우리는 절대 당신의 이메일 주소를 공유하거나 판매하지 않겠습니다.", 
    "Fill it in.": "적어 넣으세요.", 
    "Sign In": "로그인", 
    "optional": "선택 사항", 
    "Delete": "삭제", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "뭔가 잘못되었습니다, desmos.com 지원에 보고하시기 바랍니다. (오류 __error_num__)", 
    "Delete All": "모두 삭제", 
    "Try typing __sample_expression__": "__sample_expression__를 입력해보십시오", 
    "Apr": "4월", 
    "Image": "이미지", 
    "__number__ weeks ago": "__number__ 주 전", 
    "no, thanks": "아뇨, 괜찮아요", 
    "Now try pressing Enter.": "이제 Enter키를 눌러 보세요.", 
    "Recover Password": "비밀번호 복구하기", 
    "Want us to consider featuring it?": "우리가 이것의 추천을 고려하기를 원하십니까?", 
    "folder": "폴더", 
    "Tours": "사용 방법", 
    "Open Graph": "그래프 열기", 
    "type your question or suggestion...": "궁금한 점이나 제안할 것을 입력하세요...", 
    "You're a slider pro!": "당신은 슬라이더 전문가입니다!", 
    "Terms of Use": "이용 약관", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "함수 '__dependency__'는 __assignment_arity__개의 변수를 요구합니다. __supplement__", 
    "Drag the handle to change the value.": "값을 변경하려면 핸들을 끌어 움직이세요.", 
    "New Blank Graph": "새 빈 그래프", 
    "Feb": "2월", 
    "BBCode": "BBCode", 
    "Aug": "8월", 
    "This graph has been deleted.": "이 그래프는 삭제되었습니다.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "이 줄의 끝에 __sample_expression__ 를 추가하여 영역을 제한하세요.", 
    "image": "이미지", 
    "Projector Mode": "프로젝터 모드", 
    "For example, try typing: __dependency__(x).": "예를 들어,  다음을 입력하세요: __dependency__(x).", 
    "Send a Copy to Google Drive": "구글 드라이브로 복사본 보내기", 
    "just now": "지금", 
    "Open Graph (ctrl+o)": "그래프 열기 (ctrl+o)", 
    "Link to Google": "구글 에 연결", 
    "Click here to create a new blank expression.": "새 빈 식을 만들려면 여기를 클릭하세요.", 
    "Show Grid Angles": "눈금에 각도 표시", 
    "Degrees": "육십분법", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "이제 범위를 제한해 봅시다. 끝에 __sample_expression__ 를 추가하세요.", 
    "You're a scatter plot whiz!": "산점도에 재능이 있으시군요!", 
    "Desmos is in Maintenance Mode.": "Desmos 는 유지 보수 모드에 있습니다.", 
    "table": "표", 
    "loading...": "작업 중...", 
    "Forgot your password?": "비밀번호를 잊으셨나요?", 
    "The file \"__file__\" is not an image": "\"__file__\" 파일은 이미지가 아닙니다", 
    "add label": "레이블 추가", 
    "one hour ago": "1시간 전", 
    "Start by graphing a function.": "함수의 그래프를 그리는 것으로 시작하세요.", 
    "What do you want '__symbol__' to equal?": "'__symbol__'이 무엇과 같게 합니까?", 
    "Jun": "6월", 
    "You're a restrictions star!": "당신은 제한 사항 스타입니다!", 
    "Jul": "7월", 
    "X-Axis": "X축", 
    "Let's make a scatter plot!": "산점도를 만들어 봅시다!", 
    "Edit Account": "계정 설정", 
    "more": "더 보기", 
    "Function '__dependency__' is not defined.": "'__dependency__' 함수��� 정의되지 않았습니다.", 
    "Restrictions": "제한 사항", 
    "Click here to continue editing this table.": "이 표를 계속 편집하려면 여기를 클릭하세요.", 
    "Click here to only show the dots.": "점들만 표시하려면 여기를 클릭하세요.", 
    "Click the \"Edit List\" button.": "\"목록 편집\" 버튼을 클릭하세요.", 
    "Sign in": "로그인", 
    "Click here to download Google Chrome.": "Google Chrome을 다운로드하려면 여기를 클릭하세요.", 
    "Remembered your password?": "비밀번호가 기억나십니까?", 
    "Sorry, we didn't find any graphs with that title.": "죄송합니다, 우리는 그 제목의 그래프를 찾지 못했습니다.", 
    "Try typing all of __sample_expression__": "__sample_expression__의 모두를 입력해보세요", 
    "Too complicated. Use parens.": "너무 복잡합니다. 괄호를 사용하세요", 
    "Nov": "11월", 
    "Edit List": "목록 편집하기", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos 는 일시적으로 유지 관리 모드입니다. 예제 그래프를 열 수 있지만 로그인하거나 그래프를 열고 저장할 수 없습니다. 불편을 드려 정말 죄송합니다.", 
    "Nice Graph!": "좋은 그래프!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "의견을 주셔서 감사합니다 &ndash; 곧 대답을 듣게 될 겁니다!", 
    "Feedback": "피드백", 
    "Sep": "9월", 
    "Convert to Table": "표로 바꾸기", 
    "Redo (ctrl+y)": "다시 실행 (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "'__dependency__' 변수는 함수로서 사용할 수 없습니다.", 
    "__number__ days ago": "__number__ 일 전", 
    "Tell us on Facebook": "Facebook 에서 대화를 나눠요", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos 는 유지 관리 모드이므로 그래프의 변경 내용을 저장할 수 없습니다. 불편을 드려 죄송합니다!", 
    "Desmos User Guide": "Desmos 사용 길잡이", 
    "Learn more": "자세히 알아보기", 
    "Done": "완료", 
    "Desmos Graphing Calculator": "Desmos 그래프 계산기", 
    "Cancel": "취소", 
    "Step:": "단계:", 
    "Send to:": "보내기:", 
    "on __month__ __day__, __year__": "__year__년 __month__ __day__일에", 
    "Show Numbers": "숫자 표시", 
    "Move the parabola.": "포물선을 움직이세요.", 
    "Hide List": "목록 숨기기", 
    "Y-Axis": "Y축", 
    "Save (ctrl+s)": "저장하기 (ctrl + s)", 
    "You're a table wizard!": "당신은 표의 마법사입니다!", 
    "Share Graph": "그래프 공유", 
    "Sign In with Your Google Account": "Google 계정으로 로그인", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "해결된 이중 부등식만 지원합니다. 부등식 한 쪽을 지워보세요.", 
    "Click here to make a new blank expression.": "새 빈 식을 만들려면 여기를 클릭하세요.", 
    "Last trick!": "마지막 트릭!", 
    "Send Feedback": "의견 보내기", 
    "search by title...": "제목으로 검색...", 
    "Share this link:": "이 링크를 공유:", 
    "Please enter your feedback.": "의견을 입력해 주시기 바랍니다.", 
    "functions": "함수", 
    "Mar": "3월", 
    "Table created.": "테이블을 만들었습니다.", 
    "Language": "언어", 
    "No Unsaved Changes": "저장할 변경 사항 없음", 
    "May": "5월", 
    "message sent": "보낸 메시지", 
    "Save As or Rename (ctrl+shift+s)": "이름을 바꾸거나 그대로 저장 (ctrl + shift + s)", 
    "Awesome!": "굉장합니다!", 
    "Visiting anonymously from Clever.": "Clever로 익명 방문중.", 
    "Click back to continue editing.": "다시 클릭하여 편집을 계속합니다.", 
    "Just fill in one more...": "이제 하나만 더...", 
    "Learn More": "자세히 알아보기", 
    "Use your Email Address": "당신의 이메일 주소를 사용하세요", 
    "to save and share your graphs!": "하여 그래프를 저장하고 공유하세요!", 
    "Name:": "이름:", 
    "Add Item": "항목 추가", 
    "Click to show the list of expressions.": "식의 목록을 표시하려면 클릭하세요.", 
    "Graph Paper": "그래프 용지", 
    "Invalid y coordinate.": "잘못된 y 좌표입니다.", 
    "yesterday": "어제", 
    "Help": "도움말", 
    "add slider:": "슬라이더 추가하기:", 
    "Please provide an email so that we can write back.": "우리가 답할 수 있도록 이메일을 제공하십시오.", 
    "Opened '__graphTitle__'": "'__graphTitle__' 을 열었습니다", 
    "Save Changes (ctrl+s)": "변경 사항 저장 (Ctrl + S)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "\"__btn__\"을 클릭함으로써, 당신은 우리의 __terms_of_use_link__을 읽고 동의한 것으로 간주됩니다.", 
    "HTML Embed Code": "HTML 삽입 코드", 
    "Arrows:": "화살표:", 
    "Message: <i>(optional)</i>": "메시지: <i>(선택 사항)</i>", 
    "Square Grid": "직각 눈금", 
    "size:": "크기:", 
    "Sign In with Desmos": "Desmos 를 통해 로그인", 
    "one minute ago": "1분 전", 
    "Password:": "비밀번호:", 
    "or": "또는", 
    "We only support implicit equations of x and y.": "우리는 x와 y 의 암시적 방정식만 지원합니다.", 
    "Message sent. Please check your email for a password recovery link.": "메시지가 전송되었습니다. 귀하의 이메일에서 비밀번호 복구 링크를 확인 하시기 바랍니다.", 
    "Email:": "이메일:", 
    "expression": "수식", 
    "enter": "입력", 
    "center:": "중앙:", 
    "Let's make some sliders!": "슬라이더를 만들어 봅시다!", 
    "Error signing in with Clever.": "Clever 로그인 오류.", 
    "Go down to the next row to add more data.": "다음 행으로 내려가 더 많은 데이터를 추가하세요.", 
    "Let's make a function. First: click here to create a new blank expression.": "함수를 만들어 봅시다. 첫째: 여기를 클릭하여 새 빈 식을 만드세요.", 
    "yeah!": "네!"
},"tr":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Giriş sayfası bloke edildi. Google kullanarak giriş yapmak için lütfen desmos.com'tan gelen popuplara izin verin.", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Hata: Row __rowNum__, Column __colNum__ bir sayı değil.", 
    "all": "tümü", 
    "Ellipse with Foci": "Odak noktaları olan Elips", 
    "Derivatives": "Türevleri", 
    "Image upload is not supported in this browser.": "Bu tarayıcıda resim yükleme desteklenmiyor.", 
    "style:": "stil:", 
    "Jan": "Ocak", 
    "Try adding an equals sign to turn this into an equation.": "Bunu bir denkleme dönüştürmek için eşittir işareti eklemeyi deneyin.", 
    "Please enter your email address. We will send a password recovery link to you.": "Lütfen e-posta adresinizi girin. Size bir parola kurtarma bağlantısı göndereceğiz.", 
    "Undo (ctrl+z)": "Geri al (ctrl+z)", 
    "Translating Any Function": "Herhangi bir fonksiyonu dönüştürme", 
    "What effect does b have on the function g(x)?": "b'nin g(x) fonksiyonu üzerindeki etkisi nedir?", 
    "Update Password": "Parolayı güncelle", 
    "Sign Out": "Oturumu Kapat", 
    "Share your graph with the world!": "Grafiğini tüm dünya ile paylaş!", 
    "Oct": "Ekim", 
    "Sign In with Google": "Google ile oturum açın", 
    "Transformations": "Dönüşümler", 
    "We don't solve complicated single-variable equations yet.": "Henüz tek bilinmeyenli komplike denklemleri çözmüyoruz.", 
    "Dec": "Aralık", 
    "__number__ hours ago": "__number__ saat önce", 
    "Undo": "geri al", 
    "Untitled Graph": "Adsız Grafik", 
    "Nice!": "Güzel!", 
    "Sign in": "Oturum Aç", 
    "sending...": "gönderiliyor...", 
    "Nov": "Kasım", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Bir değişkeni ikinci dereceden veya birinci dereceden olan eşitsizlikerin grafiğini çizebiliyoruz.", 
    "step:": "adım:", 
    "Tweet @desmos": "Tweet @desmos", 
    "Points are written like this: (1, 2).": "Noktalar bu şekilde yazılır: (1,2).", 
    "This message will self-destruct in __seconds__...": "Bu mesaj __seconds__ içinde kendini yok edecektir...", 
    "Radians": "Radyan", 
    "New graph created.": "Yeni grafik oluşturuldu.", 
    "HTML Embed Code": "HTML yerleştirme kodu", 
    "Use your Email Address": "E-posta adresinizi kullanın", 
    "example": "örnek", 
    "General Form": "Standart formu", 
    "Link to your Google Account": "Google hesabınıza bağlayın", 
    "Embed": "Göm", 
    "color:": "renk:", 
    "A B C": "A B C", 
    "You did not select a file": "Bir dosya seçmediniz", 
    "Click to return to this graph.": "Bu grafiğe geri dönmek için tıklayın.", 
    "Name:": "Adınız:", 
    "Your Name:": "Adınız:", 
    "Two Point Form": "iki nokta formu", 
    "Current Password:": "Mevcut parola:", 
    "Add Item": "Öğe Ekle", 
    "Press play to animate the slider.": "Kaydırgacı hareketlendirmek için oynat'a basın.", 
    "Didn't work? Try again!": "İşe yaramadı mı? Yeniden Deneyin!", 
    "Don't forget the \"y=\"!": "\"y =\" 'i unutma!", 
    "Fill in this whole row.": "Tüm satırı doldurun.", 
    "Invalid width.": "Geçersiz genişlik.", 
    "Invalid x coordinate.": "geçersiz x koordinatı.", 
    "Create Account": "Hesap Oluştur", 
    "First, let's get some data.": "Öncelikle, bazı veriler alalım.", 
    "Too many variables. Try defining '__variables__'.": "Çok fazla değişken var.'__variables__' tanımlamayı deneyin.", 
    "what's this?": "Bu nedir?", 
    "Let's get started!": "Haydi Başlayalım!", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos bütün parasını ortaklıklar aracılığıyla yapar. Desmos ile ortaklık yapmaya ilgi duyuyorum? Bize  <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>  'dan e-posta at", 
    "Update Account": "Hesabı güncelle", 
    "Function definitions are not allowed.": "Fonksiyon tanımlarına izin verilmiyor.", 
    "Convert this to a table.": "Bunu, bir tabloya dönüştürün.", 
    "Too many variables, I don't know what to do with this.": "Çok fazla değişken var, bunun ile ne yapacağımı bilmiyorum.", 
    "Logarithmic Spiral": "Logaritmik Spiral", 
    "Send": "Gönder", 
    "Sliders": "Kaydırgaçlar", 
    "This graph has been deleted.": "Bu grafik silindi.", 
    "Print": "Yazdır", 
    "Move right to add a new column.": "Yeni bir sütun eklemek için sağa gidin.", 
    "Circle": "Çember", 
    "Secant Line": "Sekant doğrusu", 
    "Email": "Eposta", 
    "Polar Graphing": "Kutupsal çizim", 
    "Visualizing Slope": "Eğimi görselleştirme", 
    "Feedback": "Geri bildirim", 
    "Brilliant!": "Dahice!", 
    "Now graph: __sample_expression__": "Şimdi bu grafiği çizin: __sample_expression__", 
    "Repeat Password:": "Parola tekrar:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Bu grafikten çıkmak istediğinize emin misiniz? Kaydedilmemiş çalışmalarınız kaybolucak.", 
    "__number__ minutes ago": "__number__ dakika önce", 
    "Parabola and Focus": "Parabol ve odak", 
    "Type any number here.": "Buraya herhangi bir sayı yazın.", 
    "Resources": "Kaynaklar", 
    "Advanced Tables": "Gelişmiş tablolar", 
    "Invalid height.": "Geçersiz yükseklik.", 
    "Title:": "Başlık:", 
    "Logged in with Clever!": "Clever ile giriş yapıldı!", 
    "Conic Sections": "Konik kesitleri", 
    "Now, let's try a new model.": "Şimdi, yeni bir model deneyelim.", 
    "New Password:": "Yeni parola:", 
    "Failed to find regression coefficients.": "Regresyon katsayılarını bulmakta başarısız oldu.", 
    "We only plot inequalities of x and y, or r and θ.": "Sadece x ve y'nin veya r ve θ'nın eşitsizliklerini çizebiliyoruz.", 
    "Click here to generate a table.": "Bir tablo oluşturmak için burayı tıklatın.", 
    "Limacon": "Limaçon", 
    "Click here to connect the dots.": "Noktaları birleştirmek için buraya tıklayın.", 
    "How do I share a link to my graph?": "Benim grafiğimi gösteren bir bağlantıyı nasıl paylaşırım?", 
    "Regressions must contain at least one list of data.": "Regresyonlar en az bir veri listesi içermelidir.", 
    "Click here to create a new expression.": "Yeni bir ifade oluşturmak için burayı tıklatın.", 
    "last week": "geçen hafta", 
    "Factored Form": "Çarpanlı form", 
    "Fill it in.": "Doldurun.", 
    "saved": "kaydedildi", 
    "Sign In": "Oturum Aç", 
    "Polar Conic Sections": "Kutupsal konik kesitler", 
    "optional": "isteğe bağlı", 
    "What effect does a have on the function g(x)?": "a'nın g(x) fonksiyonu üzerindeki etkisi nedir?", 
    "one hour ago": "bir saat önce", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Bir hata oluştu. Lütfen desmos.com'a bildirin. (Error __error_num__)", 
    "You haven't written anything yet.": "Henüz hiçbir şey yazmadınız.", 
    "Hyperbola": "Hiperbol", 
    "Apr": "Nisan", 
    "Sorry, I don't understand this.": "Üzgünüm, bunu anlamıyorum.", 
    "Image": "Görüntü", 
    "__number__ weeks ago": "__number__ hafta önce", 
    "no, thanks": "hayır, teşekkürler", 
    "Recover Password": "Şifre kurtarma", 
    "Want us to consider featuring it?": "Yeni bir özellik olarak eklemeyi düşünmemizi ister misiniz?", 
    "What effect does k have on the function g(x)?": "k'nın g(x) fonksiyonu üzerindeki etkisi nedir?", 
    "Reflections of a Function": "Bir fonksiyonun yansımaları", 
    "Lists are not allowed.": "Listelere izin verilmiyor.", 
    "Terms of Use": "Kullanım Şartları", 
    "expression": "ifade", 
    "or": "veya", 
    "Does not compute to constant.": "Sabiti hesaplamaz.", 
    "New Blank Graph": "Yeni Boş Grafik", 
    "Feb": "Şubat", 
    "BBCode": "BBCode", 
    "Aug": "Ağustos", 
    "Tables": "Tablolar", 
    "image": "görüntü", 
    "Projector Mode": "Projektör modu", 
    "Unit Circle": "Birim çember", 
    "just now": "hemen şimdi", 
    "Link to Google": "Google'da paylaşın", 
    "Duplicate": "Kopyala", 
    "Degrees": "Derece", 
    "size:": "boyut:", 
    "How do I save my graph?": "Grafiğimi nasıl kaydederim?", 
    "Desmos is in Maintenance Mode.": "Desmos Bakım Modunda.", 
    "table": "tablo", 
    "Standard Form": "Standart form", 
    "loading...": "yükleniyor...", 
    "Forgot your password?": "Parolanızı mı unuttunuz?", 
    "Calculus": "Kalkülüs", 
    "The file \"__file__\" is not an image": "\"__file__\" dosyası, bir resim değildir", 
    "type your question or suggestion...": "Soru veya önerinizi yazın...", 
    "Click here to add a new table.": "Yeni bir tablo eklemek için buraya tıklayın.", 
    "Start by graphing a function.": "Bir fonksiyon grafiği çizerek başlayın.", 
    "You're a slider pro!": "Kaydırgaçlar konusunda uzmansın!", 
    "Jun": "Haziran", 
    "Open Graph (ctrl+o)": "Grafiği aç (ctrl+o)", 
    "Jul": "Temmuz", 
    "Trigonometry": "Trigonometri", 
    "Inverse of a Function": "Bir fonksiyonun tersi", 
    "Intercept Form": "eksenleri kestiği noktalar formu", 
    "Period and Amplitude": "Periyot ve genlik", 
    "Edit Account": "Hesabı düzenle", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "(Henüz) uygulamayı kullanarak grafiğinizi kaydedebileceğiniz bir yol yok. Eğer grafiğinizi kaydetmek istiyorsanız, www.desmos.com/calculator'ı ziyaret edin ve Desmos hesabınız ile giriş yapmanızı tavsiye ediyoruz.", 
    "Inequalities are not allowed.": "Eşitsizliklere izin verilmez.", 
    "Function '__dependency__' is not defined.": "'__dependency__' fonksiyonu tanımlı değil.", 
    "Restrictions": "Sınırlandırmalar", 
    "Click here to continue editing this table.": "Bu tabloyu düzenlemeye devam etmek için burayı tıklatın.", 
    "Click here to only show the dots.": "Sadece noktaları göstermek için buraya tıklayın.", 
    "Point Slope Form": "nokta ve eğim formu", 
    "We zoomed to fit your data.": "Verilerinizin ekranda görünebilmesi için yakınlaştırdık.", 
    "Click the \"Edit List\" button.": "\"Liste Ekle\" düğmesine basınız.", 
    "Delete All": "Hepsini Sil", 
    "How is this app free?": "Bu app nasıl oluyorda ücretsiz?", 
    "Remembered your password?": "Parolanızı hatırladınız mı?", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "(Henüz) uygulamayı kullanarak grafiğinizi paylaşabileceğiniz bir yol yok. Eğer grafiğinizi gösteren bir bağlantıyı paylaşmak istiyorsanız, www.desmos.com/calculator'ı ziyaret edin ve Desmos hesabınız ile giriş yapın.", 
    "Sorry, we didn't find any graphs with that title.": "Üzgünüz, o başlıkta hiçbir grafik bulamadık.", 
    "Too complicated. Use parens.": "Çok karışık. Parantez kullanın.", 
    "What effect does h have on the function g(x)?": "h'nin g(x) fonksiyonu üzerindeki etkisi nedir?", 
    "Edit List": "Listeyi düzenle", 
    "message sent": "mesaj gönderildi", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos geçici olarak bakım modundadır. Örnek grafiklerinizi açabilirsiniz, fakat oturum açmak, örnek grafiklerinizi açmak veya değişiklikleri kaydetmeniz mümkün olmayacaktır. Rahatsızlık için çok özür dileriz.", 
    "Nice Graph!": "Güzel grafik!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Geri bildiriminiz için teşekkürler &ndash; en kısa süre içinde size dönüş yapacağız!", 
    "Open Graph": "Grafiği aç", 
    "Sep": "Eylül", 
    "Convert to Table": "Tabloya dönüştür", 
    "Redo (ctrl+y)": "Yinele (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "'__dependency__' değişkeni fonksiyon olarak kullanılamaz.", 
    "__number__ days ago": "__number__ gün önce", 
    "Send a Copy to Google Drive": "Bir kopyasını Google Drive'a yolla", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos bakım modunda, bu grafiğe yapılan değişiklikleri kaydedemeyeceksiniz. Bu uygunsuzluktan ötürü üzgünüz!", 
    "Desmos User Guide": "Desmos Kullanım Kılavuzu", 
    "Done": "Tamam", 
    "Desmos Graphing Calculator": "Desmos grafik hesap makinesi", 
    "sample data": "örnek veriler", 
    "Cancel": "İptal", 
    "Polar equations must be linear in r.": "Polar denklemler r de doğrusal olmalıdır.", 
    "more": "daha fazla", 
    "Send to:": "Gönder:", 
    "on __month__ __day__, __year__": "__day__ __month__ __year__ tarihinde kaydedildi", 
    "Move the parabola.": "Parabolü hareket ettirin.", 
    "Hide List": "Listeyi gizle", 
    "Slope Intercept Form": "eğim ve kesen formu", 
    "Save (ctrl+s)": "Kaydet (ctrl+s)", 
    "You're a table wizard!": "Sen bir tablo sihirbazısın!", 
    "Share Graph": "Grafiği paylaş", 
    "Sign In with Your Google Account": "Google Hesabınızı kullanarak oturum açın", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Bir tarafı çözülmüş çift taraflı eşitsizlikleri destekleyebiliyoruz. Sağ veya sol tarafı silmeyi deneyin.", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Çift taraflı eşitsizliklerin her ikisi de aynı yöne bakmalıdır, örneğin 1 < y < 2.", 
    "Scaling Any Function": "Bir fonksiyonu ölçeklendirme", 
    "Polar Rose": "Kutupsal Gül", 
    "Last trick!": "Son numara!", 
    "Send Feedback": "Geribildirim yolla", 
    "search by title...": "başlığa göre arama...", 
    "Share this link:": "Bu bağlantıyı paylaş:", 
    "Vertex Form": "Tepe noktası formu", 
    "loading graphs...": "grafikler yükleniyor...", 
    "functions": "fonksiyonlar", 
    "Mar": "Mart", 
    "Table created.": "Tablolar oluşturuldu.", 
    "Language": "Dil", 
    "No Unsaved Changes": "Kaydedilmemiş bir değişiklik yok", 
    "May": "Mayıs", 
    "Tangent Line": "Tanjant doğrusu", 
    "We'll never share or sell your email address.": "Eposta adresinizi hiçbir zaman paylaşmayacak ve satmayacağız.", 
    "Save As or Rename (ctrl+shift+s)": "Farklı kaydet veya ismini değiştir (ctrl+shift+s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "θ, r'nin bir fonksiyonu olarak çizilemez. Bunun yerine r(θ) yı çizmeyi deneyin.", 
    "Awesome!": "Harika!", 
    "Visiting anonymously from Clever.": "Clever'dan anonim olarak ziyaret ediliyor.", 
    "Click back to continue editing.": "Ekleme yapmaya devam etmek için geri'ye tıklayın.", 
    "Learn More": "Daha fazla bilgi edinin", 
    "Equations are not allowed.": "Denklemlere izin verilmiyor.", 
    "Taylor Expansion of sin(x)": "sin(x)'in Taylor Açılımı", 
    "Phase": "Aşama", 
    "to save and share your graphs!": "kaydetmek ve grafiklerinizi paylaşmak için!", 
    "Standard Form with Tangent": "tanjantlı standart form", 
    "Delete": "Sil", 
    "Graph Paper": "Grafik kağıdı", 
    "Function g(x) is a transformed version of function f(x).": "g(x) fonksiyonu , f(x) fonksiyonunun dönüştürülmüş bir formudur.", 
    "Invalid y coordinate.": "geçersiz y koordinatı.", 
    "This is the name we'll use if we feature one of your graphs.": "Eğer grafiklerinizden birini yayınlarsak, bu ismi kullanacağız.", 
    "Help": "Yardım", 
    "enter": "girin", 
    "Lines": "Doğrular", 
    "yesterday": "dün", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos önizleme modunda, dolayısıyla grafikleri kaydedemeyeceksin.", 
    "Please provide an email so that we can write back.": "Size geri yazabilmemiz için lütfen bir e-posta temin edin.", 
    "add slider:": "kaydırgaç ekle:", 
    "Points are not allowed.": "Noktalara izin verilmiyor.", 
    "Opened '__graphTitle__'": "'__graphTitle__' açıldı", 
    "Save Changes (ctrl+s)": "Değişiklikleri kaydet (ctrl+s)", 
    "Regressions": "Regresyonlar", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Üzgünüz, şu anda __symbol__  herhangi birşeyin fonksiyonu olarak çizilemez.", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "\"__btn__\" 'a tıklayarak bizim __terms_of_use_link__'mızı okuduğunuzu ve kabul ettiğinizi onaylıyorsunuz.", 
    "Message: <i>(optional)</i>": "Mesaj: <i>(isteğe bağlı)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Herbir trigonometrik fonksiyonu açmak veya kapamak için yanındaki ikona tıklayın:", 
    "Sign In with Desmos": "Desmos ile giriş yapın", 
    "one minute ago": "bir dakika önce", 
    "Password:": "Parola:", 
    "Please enter your feedback.": "Lütfen geribildiriminizi girin.", 
    "Parabolas": "Paraboller", 
    "folder": "dosya", 
    "We only support implicit equations of x and y.": "x ve y'nin kapalı fonksiyonlarını destekleyebiliyoruz.", 
    "Message sent. Please check your email for a password recovery link.": "Mesaj yollandı. Lütfen parola kurtarma bağlantısı için epostanızı kontrol edin.", 
    "Email:": "E-posta:", 
    "How can I change the color?": "Rengi nasıl değiştirebilirim?", 
    "center:": "merkez:", 
    "Error signing in with Clever.": "Clever ile girişte sorun var.", 
    "yeah!": "Evet!"
},"ku":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "   په‌نجه‌ره‌ی چوونه‌ ژووره‌وه‌ بلۆک كراوه‌. تكایه‌ ڕێگه‌ به‌ په‌نجه‌ره‌ی لەناکاوی سایتی دیسموس بده‌ تا له‌ ڕێگه‌ی گووگڵەوە بچیێته‌ ژووره‌وه‌.  ", 
    "Derivatives": "داتاشراوه‌كان", 
    "all": "هه‌موو", 
    "Image upload is not supported in this browser.": "ئه‌م براوسه‌ره‌ پشتیوانی له‌ ئه‌پلۆدكردنی وێنه‌ ناكات.", 
    "style:": ":شێواز ", 
    "Jan": "كانونی دووه‌م", 
    "Try adding an equals sign to turn this into an equation.": "هه‌وڵبده‌ هێمای یه‌كسانه‌ زیادبكه‌یت تاوه‌كو ئه‌مه‌ بكه‌یت به‌ هاوكێشه‌.", 
    "Please enter your email address. We will send a password recovery link to you.": "تكایه‌ ئیمه‌له‌كه‌ت داخل بكه‌. دواتر به‌سته‌ری به‌ده‌ستخستنه‌وه‌ی ووشه‌ی نهێنیت بو ده‌نێرین.", 
    "Undo (ctrl+z)": "بگه‌رێوه‌(ctrl+z)", 
    "Update Password": "پاسوورده‌كه‌ت نویبكه‌ره‌وه‌", 
    "Share your graph with the world!": "وینه‌كه‌ت له‌گه‌ل جیهان هاوبه‌شیپیبكه‌ با خه‌لكی تریش بیبینیت!", 
    "Oct": "تشرینی یەکەم", 
    "Sign In with Google": "چوونه‌ ژووره‌ له‌ڕیگه‌ی گووگڵ", 
    "We don't solve complicated single-variable equations yet.": "تاهه‌نووكه‌، هیج جۆره‌ هاوكیشه‌یه‌كی ئاڵۆزی یه‌ك-گوڕاو شیكار ناكه‌ین.", 
    "__number__ hours ago": " __number__ كاتژمێر له‌مه‌وبه‌ر", 
    "Click and hold on this icon until the options menu opens up.": "كلیك بكه‌ وه‌ ئه‌م ئایكۆنه‌ هه‌لبگره‌ تاوه‌كه‌ ڕه‌چه‌ته‌ی هه‌ڵبژاردنه‌كان ده‌بنه‌وه‌", 
    "Undo": "وەک خۆی لێ بکەوە", 
    "Untitled Graph": "وێنه‌ی بێناونیشان", 
    "Nice!": "ده‌ستت خۆش بێت ! ", 
    "... and select the \"table\" option.": "  ..... وه ده‌ستنیشانی هه‌ڵبژارده‌ی \"خشته‌\" بكه‌.  ", 
    "Remembered your password?": "ووشه‌ی نهێنیت وه‌بیرهاته‌وه‌؟", 
    "Grid": "هێڵدار", 
    "Go \"Hands-free\"": "ئیستا بچوو تاقیبكه‌ره‌وه‌", 
    "We can only plot inequalities when one variable is quadratic or linear.": "ته‌نها وێنه‌ی ئه‌و لاسه‌نگانه‌ ده‌كه‌ین، یه‌ك گوڕاویان تیادایه‌ ، وه‌ پله‌ دوون یاخود هێڵی.", 
    "step:": "هه‌نگاو: ", 
    "Tweet @desmos": "له‌ تویته‌ر بماندوزه‌ره‌وه‌ desmos@", 
    "Angles": "گۆشه‌كان", 
    "This message will self-destruct in __seconds__...": "....__seconds__ ئه‌م نامه‌یه‌ خۆی لاده‌چیت پاش", 
    "X-Axis": "ته‌وه‌ره‌ی سین", 
    "Radians": "گۆشه‌یی نیوه‌تیره‌یی", 
    "New graph created.": "وێنه‌یه‌كی نوی درووستكرا.", 
    "Uh-oh! Type a valid number here.": "ئۆ هۆوو .. ژماره‌یه‌كی ڕاست لێره‌ بنووسه‌.", 
    "example": "نموونه‌", 
    "General Form": "فۆرمی گشتی", 
    "Link to your Google Account": "لینكی بكه‌ له‌گه‌ل ئه‌كاونتی گوگڵتدا واته‌ جیمه‌یل", 
    "Embed": "تیخستن", 
    "color:": ":ڕه‌نگ", 
    "Click to return to your expressions.": "كلیك بكه‌ تاوه‌كو بگه‌ڕیته‌وه‌ سه‌ر ده‌سته‌واژه‌كانت", 
    "A B C": "ئه‌لف و بێ", 
    "You did not select a file": "تۆ هیچ فایلێكت ده‌ستنیش��ن نه‌كردووه‌", 
    "Click to return to this graph.": "كلیك بكه‌ تا بگه‌ڕیته‌وه‌ سه‌ر وێنه‌كه‌", 
    "Your Name:": "ناوی تۆ:", 
    "Update Account": "نۆێكردنه‌وه‌ی ئه‌كاونت", 
    "Duplicate": "لەبەرگرتنەوە", 
    "Current Password:": "پاسووردی ئیستات:", 
    "Now click here to add the sliders.": "ئیستا كلیك لێره‌ بكه‌ تاوه‌كو سلایده‌كه‌ زیاد ببێت.", 
    "Send a Copy to Google Drive": "كۆپیه‌ك بو گووگڵ درایڤ بنێره‌", 
    "Press play to animate the slider.": "په‌نجه‌ بنی به‌ پله‌یدا بنی تاوه‌كو ئه‌نیمه‌یشنی سلایده‌كه‌ ببینیت.", 
    "Click here to add a new item.": "لیره‌ كلیك بكه‌ تاوه‌كو شتیكی نوێ زیاد ببیت.", 
    "Don't forget the \"y=\"!": "\"y=\" له‌بیرنه‌چیت  ! ", 
    "Fill in this whole row.": "ئه‌م ریزه‌ به‌ ته‌واوه‌تی پڕبكه‌ره‌وه‌.", 
    "Invalid width.": "پانیه‌كه‌ نه‌گونجاوه‌.", 
    "Invalid x coordinate.": "نرخێكی نه‌گونجاوت بۆ ته‌واره‌ی سین داناوه‌.", 
    "Create Account": "ئه‌كاونتیك بكه‌ره‌وه‌", 
    "Tables": "خشته‌كه‌كان", 
    "what's this?": "ئه‌مه‌ چیه‌؟", 
    "Let's get started!": "ده‌ی وه‌ره‌ با ده‌ست پیبكه‌ین ! ", 
    "This is the name we'll use if we feature one of your graphs.": "ئه‌م ناوه‌ به‌كارده‌هینین گه‌ر هاتوو یه‌كیك له‌ وینه‌كانی تۆمان ئیشپیبوو.", 
    "Convert this to a table.": "ئه‌مه‌ بگۆڕه‌ بۆ خشته‌", 
    "Send": "بینێره‌", 
    "Sliders": "سلایده‌ر", 
    "Change this equation to __sample_expression__": "ئه‌م هاوكێشه‌یه‌ بگۆڕه‌ بۆ __sample_expression__ ", 
    "Click anywhere to close the drawing options.": "له‌سه‌ر هه‌رشوینێك كلیك بكه‌ تا هه‌ڵبژارده‌ی وێنه‌كردن دابخرێت.", 
    "Print": "چاپكردن", 
    "Move right to add a new column.": ".بچۆ لای ڕاست تاوه‌كو ستونێکی نوی زیادبكه‌یت", 
    "Circle": "بازنه‌", 
    "Email": "ئیمه‌یل", 
    "Taylor Expansion of sin(x)": "فراوانبوونی تایلۆر بۆ sin(x) d", 
    "Visualizing Slope": "وێناكردنی لاری", 
    "Brilliant!": "ئافه‌رم!", 
    "Now graph: __sample_expression__": " وێنه‌كه‌ی ئێستات : __sample_expression__", 
    "Repeat Password:": "پاسوورده‌كه‌ دووباره‌ بنووسه‌وه‌:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "دڵنیایت له‌وه‌ی ده‌ته‌وێت وێنه‌كه‌ به‌جێهێلیت؟كاره‌ خه‌زن نه‌كراوه‌كانت ده‌فه‌وتیت.", 
    "Try graphing a straight line, like __sample_expression__": "هه‌وڵبده‌ وێنه‌ی هێڵیكی ڕاست بكه‌یت، وه‌ك  __sample_expression__  ", 
    "__number__ minutes ago": " __number__ خوله‌ك له‌مه‌وبه‌ر", 
    "Type any number here.": "هه‌ر ژماره‌یه‌ك  لیره‌ بنووسه‌.", 
    "Resources": "سه‌رچاوه‌كان", 
    "Advanced Tables": "خشته پێشكه‌وتووەکان", 
    "Invalid height.": "به‌رزیه‌كه‌ نه‌گونجاوه‌.", 
    "Title:": "ناونیشان:", 
    "sending...": "ناردن.....", 
    "Conic Sections": "بڕگه‌ قوچه‌كییه‌كان", 
    "All the Trig Functions": "سه‌رجه‌م نه‌خشه‌ سێگۆشه‌ییه‌كان", 
    "New Password:": "پاسووردی نوێ:", 
    "We only plot inequalities of x and y, or r and θ.": "ته‌نها وێنه‌ی لاسه‌نگه‌یه‌ك ده‌كه‌ین كه‌ گوڕاوه‌كانی x وه‌ y بێت , یاخود r وه‌ θ بێت.", 
    "Click here to generate a table.": "كلیك لیره‌ بكه‌ تاوه‌كو خشته‌یه‌ك بهینیته‌دی.", 
    "Share your thoughts!": "بۆچونه‌كانت شێر پێبكه‌.", 
    "Click here to connect the dots.": "لێره‌ كلیك بكه‌ تاوه‌كو خاڵه‌كان به‌یه‌كبگه‌یه‌نرێت.", 
    "Click here to create a new expression.": "لێره‌ كلیك بكه‌ تاوه‌كو ده‌سته‌واژه‌یه‌كی نوێ دروست ببیت.", 
    "Didn't work? Try again!": "كارناكات؟ دووباره‌ هه‌ولبده‌وه‌!", 
    "last week": "هه‌فته‌ی ڕابردوو", 
    "Factored Form": "شێوازی كۆلكه‌ی", 
    "Fill it in.": "پڕیبكه‌ره‌وه‌.", 
    "saved": "هه‌ڵگیرا", 
    "Sign In": "چوونه‌ ژووره‌وه‌  یان", 
    "Show List": "لیسته‌كه‌ پیشانبده‌", 
    "optional": "ئارەزوومەندانە", 
    "Delete": "سڕینه‌وه‌", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "هه‌ڵه‌یه‌ك روویداوه‌،تكایه‌ ڕاپورتیك بده‌ به desmos.com ‌  .(ژماره‌ __error_num__)", 
    "Delete All": "هه‌مووی دیلیتبكه‌", 
    "Try typing __sample_expression__": " هه‌وڵبده‌ بنووسیت __sample_expression__ ", 
    "Apr": "نیسان", 
    "Image": "ڕه‌سم", 
    "__number__ weeks ago": " __number__ هه‌فته‌ له‌مه‌وبه‌ر", 
    "no, thanks": "نا، سوپاس", 
    "Now try pressing Enter.": "ئێستا په‌نجه‌ بنێ به‌ دوگمه‌ی ئینته‌ر.", 
    "Recover Password": "وەدەست هێنانەوە ووشه‌ی نهێنی", 
    "Want us to consider featuring it?": "ئایا ده‌ته‌ویت، بوچونی ئیمه‌ وه‌ربگریت له‌سه‌ری ؟  ", 
    "folder": "فۆڵده‌ر", 
    "Tours": "گه‌شت", 
    "Open Graph": "وێنه‌كه‌ بكه‌ره‌وه‌", 
    "type your question or suggestion...": "پرسیاره‌كه‌ت یاخود پێشنیازه‌كه‌ت بنووسه‌...", 
    "Drop Image Here": "وێنه‌كه‌ لێره‌ فڕێبده‌", 
    "Terms of Use": "یاسای به‌كارهینان", 
    "Show Keypad": "كیبۆرده‌كه‌ پیشان بده‌", 
    "expression": "ده‌ربڕین", 
    "Drag the handle to change the value.": "ده‌سكه‌كه‌ ڕاكێشه‌ تاوه‌كو نرخه‌كه‌ بگۆڕێت.", 
    "Does not compute to constant.": "نابیت بیدۆزیته‌وه‌ بۆ نه‌گۆڕ.", 
    "New Blank Graph": "وێنه‌یه‌كی خاڵی نوێ", 
    "Feb": "شوبات", 
    "BBCode": "كۆدی BB  ", 
    "Aug": "ئاب", 
    "This graph has been deleted.": "ئه‌م وێنه‌یه‌ سڕایەوە.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "  بواری ئه‌م  هێڵه‌ سنوورداربكه‌ به‌ زیادكردنی  __sample_expression__ بو كوتاییه‌كه‌ی.", 
    "image": "وێنه‌", 
    "Projector Mode": "شێوازی پڕوجێكته‌ر", 
    "Unit Circle": "بازنه‌ی یه‌كه‌یی", 
    "just now": "هەر ئێستا", 
    "Open Graph (ctrl+o)": "وێنه‌كه‌ بكه‌ره‌وه‌  (ctrl+o) ", 
    "Link to Google": "لینكی بكه‌ بو گووگڵ", 
    "Click here to create a new blank expression.": "كلیك لێره‌ بكه‌ تاوه‌كو ده‌سته‌واژه‌یه‌كی خاڵی دروست بكه‌یت.", 
    "Show Grid Angles": "گۆشه‌ هێلداره‌كان پیشانبده‌", 
    "Degrees": "پله‌", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": " وه‌ره‌ با مه‌ودا سنوردار بكه‌ین. ئه‌مه‌ زیاد __sample_expression__ بۆ كۆتاییه‌كه‌ی.", 
    "You're a scatter plot whiz!": " ئه‌م وینه‌ په‌ڕشووبلاوه‌ یاخود سكارته‌ره زور نایابه‌ !", 
    "Desmos is in Maintenance Mode.": "Desmos له‌ دوخی چاكسازیدایه‌.", 
    "table": "خشته‌", 
    "Standard Form": "شێوازی ستاندارد", 
    "loading...": "ئامادەکردن...", 
    "Forgot your password?": "ووشه‌ی نهێننیت له‌ بیرچووه‌؟", 
    "Calculus": "كالكوله‌س", 
    "The file \"__file__\" is not an image": "ئه‌م فایله‌ \"__file__\"  ره‌سم نیه‌", 
    "add label": "ناونیشانێك زیاد بكه‌.", 
    "one hour ago": "یه‌ك كاتژمێر له‌مه‌وبه‌ر", 
    "Start by graphing a function.": "ده‌ستبكه‌ به‌ وێنه‌كێشانی نه‌خشه‌یه‌ك.", 
    "You're a slider pro!": "سلایده‌ره‌كه‌ت زور شازه‌!", 
    "Jun": "حوزەیران", 
    "You're a restrictions star!": "تو پاڵه‌وه‌نی دروستكردنی  سنوورداره‌كانیت! ", 
    "Jul": "تەمموز", 
    "Let's make a scatter plot!": "وه‌ره‌ با وێنه‌یه‌كی په‌رشووبلا یاخود سكارته‌ر  بكه‌ین !", 
    "Edit List": "لیسته‌كه‌ ده‌ستكاریكه‌", 
    "Edit Account": "ده‌ستكاری ئه‌كاونته‌كه‌ت بكه‌", 
    "more": "زیاتر", 
    "Function '__dependency__' is not defined.": " نه‌خشه‌ی'__dependency__'  پێناسه‌ نه‌كراوه‌.", 
    "Restrictions": "مه‌رجه‌كان", 
    "Click here to continue editing this table.": ".كلیك لێره‌ بكه‌ تاوه‌كو به‌رده‌وام بیت له‌ ده‌ستكاریكردنی ئه‌م خشته‌یه‌", 
    "Click here to only show the dots.": ".كلیك لێره‌ بكه‌ بۆ ته‌نها بینینی خاڵه‌كان", 
    "Click the \"Edit List\" button.": "كلیك له‌سه‌ر دوگمه‌ی “لیستی ده‌ستكاری” بكه‌.", 
    "Sign in": "چوونه‌ ژووره‌وه‌", 
    "Sorry, we didn't find any graphs with that title.": "بووره‌، هیچ وینه‌یه‌كمان به‌و ناونیشانه‌ی تو نه‌دوزیه‌وه‌.", 
    "Hide Keypad": "كیبۆرده‌كه‌ بشاره‌وه‌", 
    "Try typing all of __sample_expression__": "هه‌وڵبده‌ هه‌موو ئه‌مانه‌ بنووسیت __sample_expression__  ", 
    "Dec": "كانوونی یه‌كه‌م", 
    "Nov": "تشرینی دووەم", 
    "Message: <i>(optional)</i>": "<i>(ئارەزوومەندانە)</i>:نامه‌", 
    "message sent": "نامه‌كه‌ نێردرا", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos به‌شیوه‌یه‌كی كاتی له‌حاله‌تی چاكسازیدایه‌،ده‌توانی نموونه‌ ئاماده‌كراوه‌كان بكه‌یته‌وه‌ به‌لام ناتوانیت: بچیته‌ ژووره‌وه‌،وێنه‌كانی خوت بكه‌یته‌وه‌،یان هه‌ر گورانكاریه‌ بكه‌ی و خه‌زن بكه‌یت. داوای لیبووردن ده‌كه‌ین گه‌ر تووشی هه‌ر ناڕه‌حه‌تیه‌ك بوبیتیت.", 
    "Nice Graph!": "وێنه‌یه‌كی جوانه‌!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "سوپاس بۆ ڕەخنەوپێشنیار &ndash  به‌م نزیكانه‌ له‌لایه‌ن ئیمه‌وه‌ په‌یوه‌ندیت پێوه‌ده‌كرێت!   ", 
    "Feedback": "ڕەخنەوپێشنیار", 
    "Sep": "ئه‌یلول", 
    "Convert to Table": "بیگوره‌ بو خشته‌", 
    "Redo (ctrl+y)": "بو پێشه‌وه‌(ctrl+y )", 
    "Variable '__dependency__' can't be used as a function.": " گوڕاوی '__dependency__'  نابیت به‌كاربهنریت وه‌كو نه‌خشه‌.", 
    "__number__ days ago": " __number__ ڕوژ له‌مه‌وبه‌ر", 
    "Tell us on Facebook": " ڕه‌خنه‌و پیشنیاز پیمان بڵێ له‌سه‌ر فه‌یسبووك", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": " Desmos  له‌ دوخی چاككردندایه‌، ناتوانیت كاره‌كانی ئه‌م وێنه‌یه‌ت هه‌ڵبگریت. بووره‌ گه‌ر به‌هوێ ئیمه‌وه‌ تووشی چه‌رمه‌سه‌ری بووبیتیت.", 
    "Desmos User Guide": "ڕێبه‌ری دیسمۆس بۆ به‌كارهینه‌ر", 
    "Done": "ته‌واوبوو", 
    "Desmos Graphing Calculator": "ژمێرەره‌ی Desmos بو وینه‌كردن", 
    "Cancel": "لابردن", 
    "Step:": "هه‌نگاو:", 
    "Send to:": "بینیره‌ بۆ:", 
    "on __month__ __day__, __year__": "له‌ __day__ __month__, __year__", 
    "Show Numbers": "ژماره‌كان پیشان بده‌", 
    "Move the parabola.": "بڕگه‌ هاوتاكه‌ بجووڵێنه‌.", 
    "Hide List": "لیسته‌كه‌ بشاره‌وه‌", 
    "Y-Axis": "ته‌واره‌ی ساد", 
    "Save (ctrl+s)": " هه‌لگرتن (ctrl+s)", 
    "You're a table wizard!": "ئه‌م خشته‌یه‌ت زور ئه‌فسوناویه‌ ! ", 
    "Share Graph": "وینه‌كه‌ شێر بكه‌", 
    "Sign In with Your Google Account": "چوونه‌ ژووره‌وه‌ به‌ ئه‌كاونتی گووگڵه‌كه‌ت", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "ئیمه‌ ته‌نها پشتیوانی له‌ شیكاركردنی جووت لاسه‌نگه‌یی ده‌كه‌ین، تكایه‌ هه‌ولبده‌ لایه‌كی لاسه‌نگه‌كه‌ بسڕیته‌وه‌.", 
    "Help": "یارمه‌تی", 
    "Click here to make a new blank expression.": "كلیك لێره‌ بكه‌ تاوه‌كو ده‌سته‌واژه‌یه‌كی به‌تاڵ دروست بكه‌یت.", 
    "Last trick!": "دوا فێڵ!", 
    "Send Feedback": "فیدباك بنێره‌", 
    "search by title...": "گه‌ڕان له‌رێی پێناس....", 
    "Share this link:": "ئه‌م به‌سته‌ره‌ هاوبه‌شیپیبكه‌:", 
    "Please enter your feedback.": "تکایە فیدباكی خۆت بنووسه‌.", 
    "loading graphs...": "وینه‌كه‌ ئاماده‌كریت...", 
    "functions": "نه‌خشه‌كان", 
    "Mar": "مارت", 
    "Table created.": "خشته‌كه‌كه‌ دروستكرا.", 
    "Language": "زمان", 
    "No Unsaved Changes": "هیچ گۆڕانكاریه‌كی سه‌یڤ نه‌كراو نیه‌", 
    "May": "گوڵان", 
    "Tangent Line": "هێڵی لێكه‌وت", 
    "We'll never share or sell your email address.": "ئیمه‌ هه‌رگیز ئیمه‌یلی تو به‌كه‌س ناده‌ین وه‌ نافروشین.  ", 
    "Save As or Rename (ctrl+shift+s)": " هه‌لگرتن به‌ناوێك یان ناونانه‌وه‌ (ctrl+shift+s)", 
    "Awesome!": " تاسێنه‌ره‌ ! ", 
    "Sign Out": "چوونه‌ ده‌ره‌وه‌", 
    "Click back to continue editing.": "كلیك له‌سه‌ر گه‌ڕانه‌وه‌ بكه‌ بۆ ده‌ستكاریكردن.", 
    "Just fill in one more...": "ته‌نها یه‌ك دانه‌ی تر پڕبكه‌ره‌وه‌...", 
    "Learn More": "زانیاری زیاتر\n", 
    "Use your Email Address": "ئه‌دریسی ئیمه‌یلت به‌كاربهێنه‌", 
    "to save and share your graphs!": "بو هه‌ڵگرتن یان هاوبەشی کردنی وێنه‌كه‌ت!", 
    "Name:": "ناو:", 
    "Add Item": "شتیك زیاد بكه‌", 
    "Click to show the list of expressions.": "كلیك بكه‌ تاوه‌كو لیستی ده‌سته‌واژه‌كان ببینیت", 
    "Graph Paper": "په‌ره‌ی وینه‌ی هێلدار یان ختوت به‌یانی", 
    "Invalid y coordinate.": "نرخێكی نه‌گونجاوت بۆ ته‌واره‌ی ساد داناوه‌.", 
    "Graph Settings": "ده‌ستكاریه‌كانی وێنه‌", 
    "Lines": "هێڵه‌كان", 
    "yesterday": "دوینێ", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos له‌ دۆخی پێشانداندایه‌، واته‌ ناتوانیت له‌ دۆخی پیشاندان وێنه‌كه‌ت سه‌یڤ بكه‌یت.", 
    "add slider:": "سلایدیك زیاد بكه‌:", 
    "Please provide an email so that we can write back.": "تكایه‌ ئیمه‌یلی خوت به‌جیبهێله‌ تاوه‌كو دواتر وه‌لامت بده‌ینه‌وه‌.", 
    "Opened '__graphTitle__'": " '__graphTitle__' كراوه‌ته‌وه‌ ", 
    "Save Changes (ctrl+s)": "گۆڕانكاریه‌كان سه‌یڤ بكه‌ (ctrl+s)", 
    "Trigonometry": "سێگۆشه‌كاری", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "    به‌ كلیكردنت له‌سه‌ر \"__btn__,\" ئه‌وا مانای وایه‌ مه‌رج و یاساكانی دیسموست خوێندووه‌ته‌وه‌ وه‌ ڕازه‌مه‌ندیشت نوانده‌وه‌ له‌سه‌ریان وه‌ بو خویندنه‌وه‌ی  سه‌رجه‌م یاساكانی به‌كارهێنان كلیك بكه‌ له‌سه‌ر ئه‌م لینكه‌  __terms_of_use_link__.", 
    "HTML Embed Code": " كودی تیخستنی  HTML", 
    "Arrows:": "ڕیزكراوه‌كان:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "یارمه‌تی: ده‌توانیت بنوسیت y=x^2 ، یاخود <sup>2</sup>  له‌سه‌ری كیپاده‌كه‌ دابگره‌.", 
    "Square Grid": "چوارگۆشه‌ی هێڵدار", 
    "size:": "قه‌باره‌:", 
    "Sign In with Desmos": "چونه‌ ژووره‌ به‌هوی Desmos", 
    "one minute ago": "یه‌ك خوله‌ك له‌مه‌وبه‌ر", 
    "Password:": "پاسوورد:", 
    "or": "یان", 
    "We only support implicit equations of x and y.": " ئیمه‌ ته‌نها پشتیوانی له‌ هاوكێشه‌ی خوبه‌خوی  y  وه‌ x  ده‌كه‌ین.", 
    "Message sent. Please check your email for a password recovery link.": "نامه‌كه‌ نێردرا. تكایه‌ ئیمه‌له‌كه‌ت بكه‌ره‌وه‌ بو كردنه‌وه‌ی به‌سته‌ری به‌ده‌ستخستنه‌وه‌ی ووشه‌ی نهێنیه‌كه‌.", 
    "Email:": "ئیمه‌یل:", 
    "enter": "ئینته‌ر", 
    "center:": "سه‌نته‌ر:", 
    "Let's make some sliders!": "وه‌ره‌ با چه‌ند سلایدیك درووست بكه‌ین !", 
    "Go down to the next row to add more data.": "بچۆ خواره‌ بو ڕیزی دواتر تاوه‌كو داتای تر بنووسیت.", 
    "Let's make a function. First: click here to create a new blank expression.": "وه‌ره‌ با نه‌خشه‌یه‌ك دروست بكه‌ین. یه‌كه‌مجار : كلیك لێره‌ بكه‌ تاوه‌كو ده‌سته‌واژه‌یه‌كی به‌تاڵی نوێت دروست بكه‌یت.", 
    "yeah!": "یه‌س"
},"sr":{
    "style:": "стил:", 
    "Does not compute to constant.": "Не израчунава се константа.", 
    "Y-Axis": "y-оса", 
    "Feb": "Феб", 
    "BBCode": "BBCode", 
    "Aug": "Авг", 
    "Tables": "Табеле", 
    "Square Grid": "квадратна мрежа", 
    "no, thanks": "не, хвала", 
    "Projector Mode": "Режим за пројектор", 
    "just now": "управо сада", 
    "Jan": "Јан", 
    "Sliders": "Клизачи (слајдери)", 
    "Show Grid Angles": "Прикажи углове мреже", 
    "Degrees": "Степени", 
    "Show Numbers": "Прикажи бројеве", 
    "Share this link:": "Подели овај линк:", 
    "Message: <i>(optional)</i>": "Порука: <i>(опционо)</i>", 
    "Share your graph with the world!": "Подели свој график са светом!", 
    "Oct": "Окт", 
    "Email": "И-мејл", 
    "The file \"__file__\" is not an image": "Фајл \"__file__\" није слика", 
    "add label": "додај ознаку", 
    "Mar": "Мар", 
    "Table created.": "Табела је креирана.", 
    "__number__ hours ago": "пре __number__ сати", 
    "No Unsaved Changes": "Нема несачуваних промена", 
    "__number__ weeks ago": "пре __number__ недеља", 
    "May": "Мај", 
    "loading...": "учитавање...", 
    "Dec": "Дец", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Да ли сте сигурни да желите да напустите овај график? Твој несачуван рад ће бити изгубљен.", 
    "Jun": "Јун", 
    "Jul": "Јул", 
    "__number__ minutes ago": "пре __number__ минута", 
    "Untitled Graph": "Неименован график", 
    "Grid": "мрежа", 
    "Advanced Tables": "Напредне табеле", 
    "Invalid height.": "Погрешна висина.", 
    "Nov": "Нов", 
    "Nice Graph!": "Леп график!", 
    "step:": "корак:", 
    "Restrictions": "Ограничења", 
    "Embed": "Уграђено", 
    "Invalid y coordinate.": "Погрешна y  координата.", 
    "X-Axis": "x-оса", 
    "last week": "прошле недеље", 
    "yesterday": "јуче", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Нешто није у реду, молимо вас пријавите на десмос.цом суппорт. ( Грешка __error_num__)", 
    "Your Name:": "Ваше име:", 
    "color:": "боја:", 
    "Send": "Пошаљи", 
    "Radians": "Радијани", 
    "Opened '__graphTitle__'": "Отворен '__graphTitle__'", 
    "Save Changes (ctrl+s)": "Сачувати промене (ctrl+s)", 
    "Graph Paper": "Милиметарски папир", 
    "Step:": "корак:", 
    "one hour ago": "пре сат времена", 
    "HTML Embed Code": "HTML уграђен код", 
    "Angles": "углови", 
    "Arrows:": "Стрелице:", 
    "You did not select a file": "Нисте изабрали фајл", 
    "Sep": "Сеп", 
    "Apr": "Апр", 
    "one minute ago": "пре један минут", 
    "Image": "Слика", 
    "what's this?": "шта је ово?", 
    "__number__ days ago": "пре __number__ дана", 
    "Send to:": "Послати на:", 
    "Want us to consider featuring it?": "Да ли желите да размотримо ово?", 
    "Desmos Graphing Calculator": "Desmos Графички Калкулатор", 
    "message sent": "порука послата", 
    "Invalid width.": "Погрешна ширина.", 
    "Invalid x coordinate.": "Погрешна x координата.", 
    "or": "или", 
    "on __month__ __day__, __year__": "__day__ __month__, __year__ . године", 
    "yeah!": "Ура!"
},"ar":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "نافذة الدخول محظورة. الرجاء السماح بالنوافذ من desmos.com لتسجيل الدخول باستخدام جوجل.", 
    "Derivatives": "المشتقات", 
    "Transformations": "التحولات", 
    "Image upload is not supported in this browser.": "تحميل الصور غير مدعوم في هذا المتصفح.", 
    "Jan": "كانون الثاني", 
    "Please enter your email address. We will send a password recovery link to you.": "الرجاء إدخال عنوان البريد الإلكتروني الخاص بك. سوف نقوم بإرسال رابط استعادة كلمة مرور ل��.", 
    "Translating Any Function": "ترجمة أي دالة", 
    "Update Password": "تحديث كلمة المرور", 
    "Oct": "تشرين الأول", 
    "Too complicated. Use parens.": "معقدة للغاية.  استخدم اقواس.", 
    "Undo": "التراجع عن", 
    "Untitled Graph": "رسم بدون عنوان", 
    "Sign in": "تسجيل دخول", 
    "Remembered your password?": "تتذكر كلمة المرور الخاصة بك؟", 
    "Nov": "تشرين الثاني", 
    "Send a Copy to Google Drive": "إرسال نسخة إلى محرك جوجل", 
    "Points are written like this: (1, 2).": "تتم كتابة النقاط بهذه الطريقة: (2 ,1).", 
    "This message will self-destruct in __seconds__...": "هذه الرسالة سوف تختفي في __seconds__...", 
    "New graph created.": "تم إنشاء رسم بياني جديد.", 
    "Use your Email Address": "استخدم \"عنوان البريد الإلكتروني\" الخاص بك", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "لا يمكن تعريف '__symbols__' و '__lastSymbol__' من حيث كل منهما الآخر.", 
    "A B C": "أ ب ج", 
    "You did not select a file": "لم تحدد ملفك", 
    "Click to return to this graph.": "انقر للعودة إلى هذا الرسم البياني.", 
    "Didn't work? Try again!": "لم تنجح؟ حاول مرة أخرى!", 
    "This graph has been deleted.": "تم حذف هذا الرسم.", 
    "Invalid width.": "العرض غير صالح.", 
    "Invalid x coordinate.": "إحداثيات س غير صحيحة.", 
    "Create Account": "إنشاء حساب", 
    "Too many variables. Try defining '__variables__'.": "متغيرات كثيرة جداً.  حاول تحديد '__variables__' مرة أخرى.", 
    "Let's get started!": "دعونا نبدأ!", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "ديسموس تكون جميع أموالها من خلال الشراكات. هل ترغب في إقامة شراكة مع ديسموس؟ راسلنا على البريد الإلكتروني <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>", 
    "Function definitions are not allowed.": "تعريفات الدوال غير مسموح بها.", 
    "Convert this to a table.": "تحويل هذا إلى جدول.", 
    "Too many variables, I don't know what to do with this.": "توجد متغيرات كثيرة جداً، وأنا لا أعرف ما يجب أو أفعل بها.", 
    "Sliders": "منزلقات", 
    "Circle": "دائرة", 
    "Secant Line": "خط القاطع", 
    "Brilliant!": "رائعة!", 
    "How can I change the color?": "كيف يمكن تغيير اللون؟", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "هل أنت متأكد من أنك تريد ترك هذا الرسم ؟ ستفقد عملك الذي لم يتم حفظه.", 
    "Advanced Tables": "جداول متقدمة", 
    "Invalid height.": "الارتفاع غير صالح.", 
    "Title:": "العنوان:", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "قمت بتعريف '__dependency__' في أكثر من مكان واحد. حاول اختيار متغير مختلف، أو حذف بعض التعاريف من '__dependency__'.", 
    "All the Trig Functions": "جميع الدوال المثلثية", 
    "Tangent Line": "خط المماس", 
    "How do I share a link to my graph?": "كيف أقوم بنشر رابط الى الرسم البياني؟", 
    "last week": "الأسبوع الماضي", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "حدث خطأ، الرجاء الإبلاغ عن هذا الخطأ إ��ى دعم desmos.com. (خطأ __error_num__)", 
    "You haven't written anything yet.": "لم تقم بكتابة اي شيء بعد.", 
    "Hyperbola": "قطع زائد", 
    "Apr": "نيسان", 
    "Sorry, I don't understand this.": "آسف، أنا لا أفهم هذا.", 
    "Recover Password": "استعادة كلمة المرور", 
    "Open Graph": "فتح رسم", 
    "Lists are not allowed.": "القوائم غير مسموح بها.", 
    "add slider:": "إضافة شريط التمرير:", 
    "expression": "معادلة", 
    "or": "أو", 
    "Feb": "شباط", 
    "Aug": "آب", 
    "Tables": "الجداول", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "لا يمكن استخدام '__dependency__' كمعلمة لهذه الدالة لأنه تم تعريف '__dependency__' سابقا.", 
    "image": "صورة", 
    "Unit Circle": "دائرة الوحدة", 
    "just now": "الآن", 
    "Points are not allowed.": "غير مسموح بالنقاط.", 
    "table": "جدول", 
    "Calculus": "حساب التفاضل والتكامل", 
    "The file \"__file__\" is not an image": "الملف \"__file__\" ليس صورة", 
    "one hour ago": "منذ ساعة واحدة", 
    "Jun": "حزيران", 
    "Jul": "تموز", 
    "Regressions": "التراجعات", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "ليس هناك طريقة حفظ الرسم البياني الخاص بك عن طريق التطبيق (حتى الآن!). نوصي بزيارة www.desmos.com/calculator ، وتسجيل الدخول باستخدام حساب ديسموس الخاص بك إذا كنت ترغب في حفظ الرسم البياني الخاص بك.", 
    "more": "المزيد", 
    "Function '__dependency__' is not defined.": "الدالة '__dependency__' غير معرفة.", 
    "Restrictions": "القيود", 
    "Click the \"Edit List\" button.": "انقر على الزر \"تعديل القائمة\".", 
    "How is this app free?": "كيف يكون هذا التطبيق مجاناً؟", 
    "You can't use '__symbol__' as an index because it's already defined.": "لا يمكنك استخدام '__symbol__' كفهرس لأنه تم تعريفه مسبقاً.", 
    "Dec": "كانون الاول", 
    "folder": "دليل", 
    "Sep": "أيلول", 
    "Done": "تم", 
    "Desmos Graphing Calculator": "حاسبة Desmos البيانية", 
    "example": "مثال", 
    "on __month__ __day__, __year__": "في __month__ __day__، __year__", 
    "Wave Interference": "تداخل موجات", 
    "functions": "دوال", 
    "Mar": "اذار", 
    "Table created.": "تم إنشاء الجدول.", 
    "No Unsaved Changes": "لا توجد تعديلات لم يتم حغظها", 
    "May": "ايار", 
    "Awesome!": "رائع!", 
    "Equations are not allowed.": "غير مسموح بالمعادلات.", 
    "Phase": "المرحلة", 
    "Name:": "الاسم:", 
    "Click to show the list of expressions.": "انقر  لإظهار القائمة التعبيرات.", 
    "Invalid y coordinate.": "إحداثيات ص غير صحيحة.", 
    "Lines": "خطوط", 
    "yesterday": "أمس", 
    "You can't redefine '__symbol__' because it's already defined.": "لا يمكن إعادة تعريف '__symbol__' لأنه تم تعريفه مسبقاً.", 
    "How do I save my graph?": "كيف أقوم بتخزين الرسم البياني؟", 
    "Opened '__graphTitle__'": "فتح '__graphTitle__'", 
    "Save Changes (ctrl+s)": "حفظ التغييرات (ctrl + s)", 
    "Trigonometry": "حساب مثلثات", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "عذرا، لا يمكنك رسم __symbol__ كدالة لشئ بعد.", 
    "one minute ago": "منذ دقيقة واحدة", 
    "Password:": "كلمة السر:", 
    "Please enter your feedback.": "نرجو كتابة ملاحظاتك.", 
    "Parabolas": "قطع مكافئ", 
    "Message sent. Please check your email for a password recovery link.": "الرسالة التي تم إرسالها. الرجاء التحقق من البريد الإلكتروني الخاص بك لاسترداد كلمة مرور.", 
    "Email:": "البريد الالكتروني:", 
    "enter": "أدخل"
},"zh-TW":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "瀏覽器屏蔽了彈出視窗，請允許 desmos.com 彈出視窗以使用 Google 帳號登入。", 
    "all": "全部", 
    "Try adding an equals sign to turn this into an equation.": "加一個等號，把它變成方程式。", 
    "Undo (ctrl+z)": "復原 (ctrl+z)", 
    "What effect does b have on the function g(x)?": "b 對函數 g(x) 有什麼影響呢？", 
    "Share your graph with the world!": "分享圖檔給全世界！", 
    "__number__ minutes ago": "__number__分鐘前", 
    "Let's make a scatter plot!": "我們來畫個散佈圖吧！", 
    "Hide this warning.": "隱藏此警告。", 
    "Nice!": "很好！", 
    "Nov": "11", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "'__dependency__' 函數僅需要 1 個參數。__supplement__", 
    "center:": "中心：", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' 和 '__lastSymbol__' 不能互相定義彼此。", 
    "Click to return to this graph.": "按一下返回圖檔。", 
    "Press play to animate the slider.": "按「播放」鈕讓數值滑桿自動變化。", 
    "Didn't work? Try again!": "不起作用嗎？再試一次！", 
    "Now, let's try a new model.": "現在，我們來試試新的迴歸曲線。", 
    "Tables": "表格", 
    "Table headers must be simple expressions. __supplement__": "表格標題必須是簡單運算式。__supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "函數 '__symbol__' 至少需要一個參數。例如，輸入： __symbol__(1, 2)。", 
    "Function definitions are not allowed.": "不允許函數定義。", 
    "Too many variables, I don't know what to do with this.": "變數太多，無法處理。", 
    "Click here to download Google Chrome.": "按這裡下載 Google Chrome 瀏覽器。", 
    "Circle": "圓", 
    "Secant Line": "割線", 
    "Polar Graphing": "極座標", 
    "saved": "已儲存", 
    "Grid": "格線", 
    "Invalid height.": "高度不正確。", 
    "Click here to create a new expression.": "按這裡產生一個新的數學式。", 
    "New Password:": "新密碼：", 
    "Failed to find regression coefficients.": "計算迴歸線係數失敗。", 
    "For example, try typing: __recommendation__.": "例如，試著輸入：__recommendation__", 
    "How do I share a link to my graph?": "如何分享圖檔？", 
    "Regressions must contain at least one list of data.": "計算迴歸線必須至少包含一個資料清單。", 
    "sending...": "傳送中……", 
    "Hide Keypad": "隱藏鍵盤", 
    "last week": "上週", 
    "Show List": "顯示清單", 
    "Nice work &ndash; Keep exploring!": "好極了 — 繼續探索吧！", 
    "Slope Intercept Form": "斜截式", 
    "no, thanks": "不，謝謝", 
    "Recover Password": "找回密碼", 
    "Terms of Use": "使用規約", 
    "Show Keypad": "顯示鍵盤", 
    "Aug": "8", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "你不能用 '__dependency__' 當參數，因為 '__dependency__' 已有定義了。", 
    "You're a scatter plot whiz!": "你真是個散佈圖高手！", 
    "Standard Form": "標準式", 
    "one hour ago": "1 小時前", 
    "You're a slider pro!": "你真的很厲害！", 
    "Delete": "移除", 
    "more": "更多", 
    "Point Slope Form": "點斜式", 
    "How is this app free?": "為什麼這個 app 免費？", 
    "Nice Graph!": "好圖 ！", 
    "Feedback": "交流", 
    "Desmos User Guide": "Desmos 使用手冊", 
    "example": "範例", 
    "on __month__ __day__, __year__": "__year__/__month__/__day__", 
    "Graph Settings": "圖檔設定", 
    "Share Graph": "分享圖形", 
    "Show Numbers": "顯示刻度", 
    "message sent": "訊息已傳送", 
    "Sign Out": "登出", 
    "X-Axis": "x 軸", 
    "Graph Paper": "繪圖區", 
    "Desmos is in preview mode, so you won't be able to save graphs.": " Desmos 目前在預覽模式，無法存檔。", 
    "Save Changes (ctrl+s)": "儲存 (ctrl + s)", 
    "Regressions": "迴歸", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "按「__btn__」表示你已經閱讀並接受我們的__terms_of_use_link__。", 
    "Sign In with Desmos": "用 Desmos 帳號登入", 
    "Password:": "密碼：", 
    "Link to your Google Account": "連結 Google 帳戶", 
    "Parabolas": "抛物線", 
    "Email:": "信箱：", 
    "enter": "enter", 
    "Derivatives": "導函數", 
    "Jan": "1", 
    "First column may not be __most__ or __last__.": "第一欄不能是 __most__ 或 __last__。", 
    "Translating Any Function": "平移函數", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "「殘差」是資料與迴歸線間的差。按這裡可以將這些殘差畫出來。", 
    "Oct": "10", 
    "Sign In with Google": "用 Google 帳號登入", 
    "Just fill in one more...": "再多填一些 ...", 
    "Untitled Graph": "未命名", 
    "... and select the \"table\" option.": "...，然後選擇「表格」選項。", 
    "Points are written like this: (1, 2).": "點坐標類似這樣寫：(1, 2)", 
    "New graph created.": "新圖形成功建立。", 
    "HTML Embed Code": "HTML 網頁碼", 
    "Click to return to your expressions.": "按一下返回您的數學式。", 
    "A B C": "A B C", 
    "Only __form__ is supported. Otherwise, use parens.": "只支援 __form__ 形式。其他形式，請使用括號。", 
    "Hyperbola": "雙曲線", 
    "Unsupported Browser": "不支援的瀏覽器", 
    "Show Grid Angles": "顯示角度刻度", 
    "Let's get started!": "讓我們開始吧！", 
    "This is the name we'll use if we feature one of your graphs.": "如果我們推薦了您的圖檔，這個帳號將會被當做作者名稱。", 
    "We zoomed to fit your data.": "我們調整了座標系大小，讓你可以看到所有的點。", 
    "Sliders": "滑桿", 
    "Click anywhere to close the drawing options.": "請在任意地方按一下即可關閉繪圖選項。", 
    "Print": "列印", 
    "Move right to add a new column.": "向右移動可新增一欄。", 
    "Repeat Password:": "重複密碼：", 
    "Try graphing a straight line, like __sample_expression__": "試著畫一條直線，例如：__sample_expression__", 
    "Conic Sections": "圓錐曲線", 
    "Definitions are nested too deeply.": "定義疊套太多層。", 
    "Tangent Line": "切線", 
    "Period and Amplitude": "週期與振幅", 
    "Try typing __sample_expression__": "請輸入 __sample_expression__ 試試看", 
    "Apr": "4", 
    "sample data": "示範用資料", 
    "Now try pressing Enter.": "現在，請按「Enter」。", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "'__dependency__' 函數需要 __assignment_arity__ 個參數。__supplement__", 
    "BBCode": "討論區 BBCode", 
    "Projector Mode": "投影模式", 
    "just now": "剛剛", 
    "Click here to create a new blank expression.": "請按這裡產生新的數學式。", 
    "Desmos is in Maintenance Mode.": "Desmos 正處於維護模式。", 
    "The file \"__file__\" is not an image": "\"__file__\"  檔不是圖檔", 
    "add label": "自定軸名", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "請輸入新的方程式，例如：<br>__equation__", 
    "__number__ weeks ago": "__number__ 週���", 
    "Drop Image Here": "將圖像拖至此處", 
    "Open Graph (ctrl+o)": "開啟舊檔 (ctrl+o)", 
    "What effect does h have on the function g(x)?": "h 對函數 g(x) 有什麼影響呢？", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "請將 '__symbols__' 和 '__lastSymbol__' 當做參數，並將函數定義為 '__newSignature__'。", 
    "Function '__dependency__' is not defined.": "未定義 '__dependency__' 函數。", 
    "Restrictions": "限制範圍", 
    "Click here to only show the dots.": "若只要顯示點，請按這裡。", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "請將 '__lastSymbol__' 當做參數，並將函數定義為 '__newSignature__'。", 
    "Send": "傳送", 
    "Try typing all of __sample_expression__": "請輸入 __sample_expression__ 試試看", 
    "Too complicated. Use parens.": "太複雜了，請使用括號 ( )。", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos 正處於維護模式，你可以開啟範例圖形，但是不能登入、開啟你的圖形、儲存變更。抱歉給您帶來不便。", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "感謝您的寶貴意見 &ndash; 我們很快就會回覆您！", 
    "Sep": "9", 
    "Redo (ctrl+y)": "重做 (ctrl+y)", 
    "__number__ days ago": "__number__天前", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos 正處於維護模式，暫時無法存檔，很抱歉為您帶來不便。", 
    "Cancel": "取消", 
    "Send to:": "傳送給：", 
    "Open Graph": "開啟舊檔", 
    "Table entries must be simple expressions. __supplement__": "儲存格必須是簡單運算式。__supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "目前只支援可解的雙邊不等式，請刪除不等式的其中一側。", 
    "Scaling Any Function": "縮放函數", 
    "Last trick!": "最後一招！", 
    "Share this link:": "分享連結：", 
    "Language": "變更語言", 
    "Awesome!": "了不起！", 
    "Click here to generate a table.": "要產生表格，請按這裡。", 
    "to save and share your graphs!": "儲存並分享你的圖形！", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos 最適合的瀏覽器是 Google Chrome 瀏覽器。", 
    "Invalid y coordinate.": "y 座標不正確。", 
    "We'll never share or sell your email address.": "我們不會公開或出售你的電子信箱。", 
    "Residuals": "殘差", 
    "Points are not allowed.": "不允許點座標。", 
    "Arrows:": "箭頭：", 
    "Edit List": "編輯清單", 
    "Message sent. Please check your email for a password recovery link.": "訊息已傳送，請檢查你的信箱找到密碼重設連結。", 
    "Please provide an email so that we can write back.": "請提供您的電子信箱以便回覆。", 
    "Let's make some sliders!": "我們來做一些「數值滑桿」吧！", 
    "Go down to the next row to add more data.": "移到下一列新增更多資料。", 
    "Let's make a function. First: click here to create a new blank expression.": "讓我們來創造一個函數。首先：按這裡產生一個新的數學式。", 
    "yeah!": "是的 ！", 
    "Transformations": "幾何變換", 
    "Image upload is not supported in this browser.": "你的瀏覽器不支援上傳圖檔", 
    "This column header can't be defined elsewhere in the calculator.": "欄位標題格不能在其他地方已經有定義。", 
    "Update Password": "更新密碼", 
    "Resources": "資源", 
    "Drag the handle to change the value.": "利用滑鼠拖曳來更改數值。", 
    "Undo": "復原", 
    "Now type: __equation__": "請輸入： __equation__", 
    "What effect does a have on the function g(x)?": "a 對函數 g(x) 有什麼影響呢？", 
    "Sign in": "登入", 
    "Type any number here.": "請輸入任何數字。", 
    "folder": "資料夾", 
    "We can only plot inequalities when one variable is quadratic or linear.": "目前支援的不等式僅包含當其中一個變數為一次或二次時。", 
    "Send a Copy to Google Drive": "傳送一份副本到 Google 雲端硬碟", 
    "Tweet @desmos": "推特 @desmos", 
    "Advanced Tables": "進階表格", 
    "This message will self-destruct in __seconds__...": "此訊息將在 __seconds__ 秒內自動消失 ...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "提示二：按螢幕鍵盤上的「ABC」按鈕可找到「__twiddle__」符號。", 
    "Ellipse with Foci": "橢圓與焦點", 
    "color:": "色彩：", 
    "... and select the \"expression\" option.": "... 然後選擇「f(x) 運算式」", 
    "Help": "說明", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "提示：按螢幕鍵盤上的「ABC」按鈕可找到「{ }」符號。", 
    "Nice. Let's check the model.": "很好！現在來檢查一下迴歸線。", 
    "This graph has been deleted.": "這個圖形已經被移除。", 
    "Invalid width.": "寬度不正確。", 
    "Create Account": "建立帳號", 
    "First, let's get some data.": "首先，讓我們先抓一些資料。", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos 是透過合夥方式營利。有興趣與我們合作嗎？請來信至：<a target=\"_blank\"href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "長按方程式或運算式左邊的圓圈，就可以打開樣式和顏色選項。", 
    "Brilliant!": "太棒了！", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "圖檔尚未儲存，你確定要離開嗎？", 
    "Step:": "刻度：", 
    "Parabola and Focus": "抛物線與焦點", 
    "Angles": "角度單位", 
    "Title:": "標題：", 
    "Current Password:": "目前密碼：", 
    "Click here to connect the dots.": "按這裡可將點連起來。", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "系統錯誤，請回報 desmos.com。( 錯誤碼：__error_num__ )", 
    "Sign In": "登入", 
    "Polar Conic Sections": "圓錐曲線極式", 
    "optional": "可選", 
    "You haven't written anything yet.": "你還沒輸入任何東西。", 
    "Sorry, we didn't find any graphs with that title.": "很抱歉，我們無法找到帶有該標題的任何圖形。", 
    "Y-Axis": "y 軸", 
    "Want us to consider featuring it?": "你允許我們推薦它嗎？", 
    "What effect does k have on the function g(x)?": "k 對函數 g(x) 有什麼影響呢？", 
    "Tours": "導覽", 
    "Reflections of a Function": "函數的對稱", 
    "expression": "運算式", 
    "For example, try typing: __dependency__(x).": "例如，試著輸入：__dependency__(x)", 
    "Unit Circle": "單位圓", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "現在，我們來限制 y 的範圍。請在最後面輸入 __sample_expression__。", 
    "table": "表格", 
    "loading...": "載入中……", 
    "Forgot your password?": "忘記密碼？", 
    "Calculus": "微積分", 
    "Jun": "6", 
    "You're a restrictions star!": "真是個天生好手！", 
    "Jul": "7", 
    "Inverse of a Function": "反函數", 
    "Edit Account": "編輯帳號", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "目前在 app 中無法存檔。如果要存檔，請登入網址 www.desmos.com/calculator。", 
    "Delete All": "清空", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "目前在 app 中無法分享。如要分享，請登入網址 www.desmos.com/calculator。", 
    "what's this?": "這是什麼？", 
    "Done": "完成", 
    "Desmos Graphing Calculator": "Desmos 圖形計算器", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' 不能當作迴歸線的參數。", 
    "Sign In with Your Google Account": "用你的 Google 帳號登入", 
    "loading graphs...": "載入圖形……", 
    "Click here to make a new blank expression.": "要產生新的運算式，請按此處。", 
    "Send Feedback": "傳送意見", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>我們現在來畫「殘差」吧！</b><br>請在表格的新欄位中輸入「__residualVariable__」變數。", 
    "Table created.": "新增表格成功。", 
    "Click back to continue editing.": "按「返回」繼續編輯。", 
    "Name:": "帳號：", 
    "Add Item": "增加項目", 
    "Click to show the list of expressions.": "按一下以顯示數學式清單。", 
    "Function g(x) is a transformed version of function f(x).": "g(x) 函數是由 f(x) 函數變換過來的。", 
    "Lines": "直線", 
    "yesterday": "昨天", 
    "Hint #1: to get __y_1__ type __y1__.": "提示一：輸入「__y1__」會得到「__y_1__」。", 
    "You can't redefine '__symbol__' because it's already defined.": "不能重新定義 '__symbol__'，因為它已有定義了。", 
    "How do I save my graph?": "如何存檔？", 
    "Opened '__graphTitle__'": "已開啟 '__graphTitle__'", 
    "Trigonometry": "三角函數", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "抱歉！現在還不能將 __symbol__ 當做函數圖形來畫。", 
    "No Unsaved Changes": "已儲存所有變更", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "只支援 __form1__ 和 __form2__ 兩種形式。其他形式，請使用括號。", 
    "one minute ago": "1分鐘前", 
    "Vertex Form": "頂點式", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "到 Google 文件複製並貼上此 __sample_data_link__。", 
    "Square Grid": "座標等比例", 
    "style:": "樣式：", 
    "Function '__dependency__' requires an argument. __supplement__": "'__dependency__' 函數需要參數。__supplement__", 
    "We don't solve complicated single-variable equations yet.": "目前還沒有辦法處理複雜的單變數方程。", 
    "__number__ hours ago": "__number__小時前", 
    "Click and hold on this icon until the options menu opens up.": "按住此圖示，直到選項功能表打開。", 
    "size:": "大小：", 
    "Remembered your password?": "記住密碼？", 
    "Go \"Hands-free\"": "動態模擬", 
    "step:": "增量", 
    "Radians": "弧度", 
    "Uh-oh! Type a valid number here.": "噢喔！請輸入一個有效的數字。", 
    "General Form": "一般式", 
    "Embed": "內嵌", 
    "You did not select a file": "你沒有選任何檔案", 
    "Your Name:": "你的名字：", 
    "Two Point Form": "兩點式", 
    "Now click here to add the sliders.": "現在按這裡來新增數值滑桿。", 
    "Limacon": "蝸線", 
    "Click here to add a new item.": "請按此處新增一項。", 
    "Don't forget the \"y=\"!": "別忘了「y =」喔！", 
    "Fill in this whole row.": "請將此列填滿。", 
    "Invalid x coordinate.": "x 座標不正確。", 
    "Too many variables. Try defining '__variables__'.": "變數太多，請試著定義 '__variables__'。", 
    "Parameters": "參數", 
    "Update Account": "更新帳戶", 
    "Convert this to a table.": "將它變成一個表格。", 
    "Change this equation to __sample_expression__": "將此式改為 __sample_expression__", 
    "Email": "寄信", 
    "Taylor Expansion of sin(x)": "sin(x) 的泰勒展開式", 
    "Now graph: __sample_expression__": "現在，請畫： __sample_expression__", 
    "How can I change the color?": "如何更改顏色？", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "你已經定義了 '__dependency__' 一次以上。請選擇不同的變數，或刪除 '__dependency__' 的定義。", 
    "All the Trig Functions": "全部三角函數", 
    "We only plot inequalities of x and y, or r and θ.": "目前只支援 x, y 或 r, θ 的不等式。", 
    "Share your thoughts!": "分享您的想法！", 
    "Factored Form": "分解式", 
    "Fill it in.": "請填寫。", 
    "Sorry, I don't understand this.": "對不起，系統無法理解。", 
    "Image": "截圖", 
    "Learn More": "瞭解更多", 
    "You can't use '__symbol__' as an index because it's already defined.": "你不能使用 '__symbol__' 作為索引，因為它已經有定義了。", 
    "What do you want '__symbol__' to equal?": "你想讓 '__symbol__' 等於什麼？", 
    "add slider:": "新增滑桿：", 
    "or": "或", 
    "Does not compute to constant.": "計算結果不是常數。", 
    "New Blank Graph": "新增空白圖形", 
    "Feb": "2", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "在數學式最後加上 __sample_expression__ 來限制函數的範圍。", 
    "image": "截圖", 
    "Duplicate": "複製", 
    "Statistics": "統計值", 
    "Degrees": "角度", 
    "Hide List": "隱藏清單", 
    "Start by graphing a function.": "從畫一個函數開始。", 
    "Intercept Form": "截距式", 
    "Tell us on Facebook": "Facebook 按讚", 
    "Click here to continue editing this table.": "請按此處繼續編輯表格。", 
    "Click the \"Edit List\" button.": "按一下「編輯清單」按鈕。", 
    "Dec": "12", 
    "Convert to Table": "轉換為表格", 
    "Variable '__dependency__' can't be used as a function.": "變數 '__dependency__' 不能當作函數用。", 
    "Polar equations must be linear in r.": "極座標方程式必須是 r 的線性方程式。", 
    "Move the parabola.": "移動抛物線。", 
    "You're a table wizard!": "你真是個表格專家！", 
    "Polar Rose": "玫瑰線", 
    "Save (ctrl+s)": "儲存 (ctrl+s)", 
    "search by title...": "按標題搜尋......", 
    "Logarithmic Spiral": "對數螺線", 
    "type your question or suggestion...": "請輸入你的問題或建議……", 
    "functions": "函數", 
    "Mar": "3", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "提示：您可以輸入 y = x ^2 或使用「a<sup>2</sup>」按鈕。", 
    "May": "5", 
    "Save As or Rename (ctrl+shift+s)": "另存新檔或重新命名 (ctrl+shift+s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "我們現在沒辦法畫將 θ 當成 r 的函數的圖形。請改畫 r(θ) 試試看。", 
    "Please enter your email address. We will send a password recovery link to you.": "請輸入您的電子信箱，我們會傳送密碼重設連結給您。", 
    "Equations are not allowed.": "不允許方程式。", 
    "Use your Email Address": "請輸入電子信箱", 
    "Link to Google": "連結 Google", 
    "Message: <i>(optional)</i>": "附加訊息： <i>(可選)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "按一下每個三角函數旁邊的圖示，將其打開或關閉：", 
    "Please enter your feedback.": "請輸入您的意見。", 
    "We only support implicit equations of x and y.": "目前只支援 x, y 變數的隱函數。"
},"el":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Το παράθυρο σύνδεσης αποκλείστηκε. Παρακαλούμε επιτρέψτε τα αναδυόμενα παράθυρα από το desmos.com για να συνδεθείτε μέσω Google.", 
    "all": "όλα", 
    "style:": "στυλ:", 
    "Jan": "Ιαν", 
    "Please enter your email address. We will send a password recovery link to you.": "Παρακαλούμε εισάγετε τη διεύθυνση ηλεκτρονικού σας ταχυδρομείου. Θα σας στείλουμε ένα σύνδεσμο ανάκτησης κωδικού.", 
    "Undo (ctrl+z)": "Αναίρεση (ctrl + z)", 
    "Update Password": "Ανανέωση κωδικού", 
    "Share your graph with the world!": "Μοιραστείτε το γράφημά σας με τους άλλους!", 
    "Oct": "Οκτ", 
    "Sign In with Google": "Συνδεθείτε μέσω Google", 
    "We don't solve complicated single-variable equations yet.": "Προς το παρόν δεν είναι δυνατή η επίλυση περίπλοκων εξισώσεων μιας μεταβλητής.", 
    "__number__ hours ago": "πριν από __number__ ώρες", 
    "Click and hold on this icon until the options menu opens up.": "Επιλέξτε και κρατήστε αυτό το εικονίδιο μέχρι να ανοίξει το μενού επιλογών.", 
    "Undo": "Αναίρεση", 
    "Untitled Graph": "Χωρίς τίτλο γραφήματος", 
    "Nice!": "Ωραία!", 
    "... and select the \"table\" option.": "... και επιλέξτε \"πίνακας\".", 
    "Remembered your password?": "Θυμηθήκατε τον κωδικό πρόσβασής σας;", 
    "Nov": "Νοε", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Μπορούμε να σχεδιάσουμε ανισότητες μόνο όταν μια μεταβλητή είναι γραμμική ή τετραγωνική.", 
    "step:": "βήμα:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Αυτό το μήνυμα θα εξαφανιστεί σε __seconds__...", 
    "Radians": "rad's", 
    "New graph created.": "Δημιουργήθηκε νέο γράφημα.", 
    "Uh-oh! Type a valid number here.": "Ωχ! Πληκτρολογήστε έναν έγκυρο αριθμό εδώ.", 
    "center:": "Κέντρο:", 
    "Link to your Google Account": "Σύνδεση με το λογαριασμό σας Google", 
    "Embed": "Ενσωματωμένο", 
    "color:": "χρώμα:", 
    "Click to return to your expressions.": "Κάντε κλικ για να επιστρέψετε στις εκφράσεις σας.", 
    "Help": "Βοήθεια", 
    "A B C": "Α Β Γ", 
    "Click to return to this graph.": "Κάντε κλικ για να επιστρέψετε σε αυτό το γράφημα.", 
    "Your Name:": "Το όνομά σας:", 
    "Update Account": "Ενημέρωση λογαριασμού", 
    "Duplicate": "Αντιγραφή", 
    "Current Password:": "Τρέχων κωδικός:", 
    "Now click here to add the sliders.": "Τώρα κάντε κλικ εδώ για να προσθέσετε τις παραμέτρους.", 
    "Press play to animate the slider.": "Πατήστε το play για να θέσετε σε κίνηση τον δρομέα.", 
    "Click here to add a new item.": "Κάντε κλικ εδώ για να προσθέσετε ένα νέο στοιχείο.", 
    "Don't forget the \"y=\"!": "Μην ξεχνάτε το \"y =\"!", 
    "Fill in this whole row.": "Συμπληρώστε αυτήν τη γραμμή.", 
    "Create Account": "Δημιουργία λογαριασμού", 
    "Tables": "Πίνακες", 
    "what's this?": "Περί τίνος πρόκειται;", 
    "Let's get started!": "Ας αρχίσουμε!", 
    "This is the name we'll use if we feature one of your graphs.": "Αυτό είναι το όνομα που θα χρησιμοποιήσουμε εάν θα διαθέσουμε ένα από τα γραφήματά σας.", 
    "Convert this to a table.": "Μετατρέψτε αυτό σε πίνακα.", 
    "Send": "Αποστολή", 
    "Sliders": "παράμετροι", 
    "Change this equation to __sample_expression__": "Αλλάξτε αυτήν την εξίσωση σε __sample_expression__", 
    "Click anywhere to close the drawing options.": "Κάντε κλικ οπουδήποτε για να κλείσουν οι επιλογές γραφήματος.", 
    "Print": "Εκτύπωση", 
    "Move right to add a new column.": "Κάντε κλικ δεξιά για να δημιουργήσετε νέα στήλη.", 
    "Email": "Ηλεκτρονικό ταχυδρομείο", 
    "saved": "Αποθηκεύθηκε", 
    "Brilliant!": "Θαυμάσια!", 
    "Now graph: __sample_expression__": "Σχεδιάστε τώρα: __sample_expression__", 
    "Repeat Password:": "Επαναλάβετε τον κωδικό:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Είστε βέβαιοι ότι θέλετε να φύγετε από αυτό το γράφημα; Οι αλλαγές που δεν έχουν αποθηκευθεί θα χαθούν.", 
    "Try graphing a straight line, like __sample_expression__": "Δοκιμάστε να σχεδιάσετε μια ευθεία, όπως __sample_expression__", 
    "__number__ minutes ago": "πριν από __number__ λεπτά", 
    "Type any number here.": "Πληκτρολογήστε οποιοδήποτε αριθμό εδώ.", 
    "Resources": "Πόροι", 
    "Advanced Tables": "Προηγμένοι Πίνακες", 
    "example": "παράδειγμα", 
    "Title:": "Τίτλος:", 
    "sending...": "Αποστολή...", 
    "New Password:": "Νέος κωδικός:", 
    "We only plot inequalities of x and y, or r and θ.": "Σχεδιάζονται μόνο ανισότητες των x και y ή των r και θ.", 
    "Click here to generate a table.": "Κάντε κλικ εδώ για να δημιουργήσετε έναν πίνακα.", 
    "loading graphs...": "φόρτωση γραφημάτων...", 
    "Click here to connect the dots.": "Κάντε κλικ εδώ για να συνδέσετε τις τελείες.", 
    "Click here to create a new expression.": "Κάντε κλικ εδώ για να δημιουργήσετε μια νέα έκφραση - τύπο.", 
    "Didn't work? Try again!": "Δεν λειτούργησε; Δοκιμάστε ξανά!", 
    "last week": "Την προηγούμενη εβδομάδα", 
    "We'll never share or sell your email address.": "Ποτέ δεν θα δημοσιεύσουμε ή θα πουλήσουμε την ηλεκτρονική σας διεύθυνση.", 
    "Fill it in.": "Συμπληρώστε τη.", 
    "Sign In": "Είσοδος", 
    "optional": "προαιρετικό", 
    "Delete": "Διαγραφή", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Κάτι προέκυψε. Παρακαλούμε αναφέρετέ το στο desmos.com support. (Error __error_num__)", 
    "Delete All": "Διαγραφή όλων", 
    "Try typing __sample_expression__": "Δοκιμάστε να πληκτρολογήσετε __sample_expression__", 
    "Apr": "Απρ", 
    "Image": "Εικόνα", 
    "__number__ weeks ago": "πριν από __number__ εβδομάδες", 
    "no, thanks": "Όχι, ευχαριστώ", 
    "Now try pressing Enter.": "Τώρα δοκιμάστε να πατήσετε Enter.", 
    "Recover Password": "Ανάκτηση κωδικού πρόσβασης", 
    "Want us to consider featuring it?": "Θα θέλατε να το προτείνετε;", 
    "Learn More": "Μάθετε περισσότερα", 
    "Tours": "Περιηγήσεις", 
    "Open Graph": "Άνοιγμα γραφήματος", 
    "type your question or suggestion...": "Πληκτρολογήστε την ερώτηση ή την πρότασή σας...", 
    "size:": "Μέγεθος:", 
    "Terms of Use": "Όροι χρήσης", 
    "expression": "έκφραση", 
    "Drag the handle to change the value.": "Σύρετε για να αλλάξετε την τιμή.", 
    "New Blank Graph": "Νέο κενό γράφημα", 
    "Feb": "Φεβ", 
    "BBCode": "BBCode", 
    "Aug": "Αυγ", 
    "This graph has been deleted.": "Αυτό το γράφημα έχει διαγραφεί.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Περιορίστε το μήκος αυτής  της γραμμής με την προσθήκη __sample_expression__ στο τέλος.", 
    "image": "εικόνα", 
    "Projector Mode": "Λειτουργία παρουσίασης", 
    "Send a Copy to Google Drive": "Στείλτε ένα αντίγραφο στο Google Drive", 
    "just now": "μόλις τώρα", 
    "Open Graph (ctrl+o)": "Άνοιγμα γραφήματος (ctrl + o)", 
    "Link to Google": "Σύνδεση με το Google", 
    "Click here to create a new blank expression.": "Κάνετε κλικ εδώ για να δημιουργήσετε μια νέα κενή έκφραση.", 
    "Degrees": "Μοίρες", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Τώρα ας περιορίσουμε το εύρος. Προσθέστε την __sample_expression__ στο τέλος.", 
    "Desmos is in Maintenance Mode.": "Ο Desmos βρίσκεται σε κατάσταση συντήρησης.", 
    "table": "πίνακας", 
    "loading...": "φόρτωση...", 
    "Forgot your password?": "Ξεχάσατε τον κωδικό σας;", 
    "Hide List": "Απόκρυψη λίστας", 
    "one hour ago": "πριν από μία ώρα", 
    "Start by graphing a function.": "Ξεκινήστε σχεδιάζοντας τη γραφική παράσταση μιας συνάρτησης.", 
    "You're a slider pro!": "Είστε πλέον αστέρι στους δρομείς!", 
    "Jun": "Ιουν", 
    "You're a restrictions star!": "Είστε αστέρι στους περιορισμούς!", 
    "Jul": "Ιουλ", 
    "Let's make a scatter plot!": "Ας σχεδιάσουμε ένα διάγραμμα διασποράς!", 
    "Edit Account": "Επεξεργασία λογαριασμού", 
    "more": "περισσότερα", 
    "Function '__dependency__' is not defined.": "Η συνάρτηση '__dependency__' δεν έχει οριστεί.", 
    "Restrictions": "Περιορισμοί", 
    "Click here to continue editing this table.": "Κάντε κλικ εδώ για να συνεχίσετε την επεξεργασία αυτού του πίνακα.", 
    "Click here to only show the dots.": "Κάντε κλικ εδώ για να εμφανίζονται μόνο οι τελείες.", 
    "Click the \"Edit List\" button.": "Κάντε κλικ στο κουμπί \"Επεξεργασία λίστας\".", 
    "Sign in": "Είσοδος", 
    "Sorry, we didn't find any graphs with that title.": "Συγνώμη, δεν βρέθηκε γράφημα με αυτόν τον τίτλο.", 
    "Try typing all of __sample_expression__": "Δοκιμάστε να πληκτρολογήσετε όλες τις __sample_expression__", 
    "Dec": "Δεκ", 
    "folder": "φάκελος", 
    "Edit List": "Επεξεργασία λίστας", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Το Desmos βρίσκεται προσωρινά σε κατάσταση συντήρησης. Μπορείτε να χρησιμοποιήσετε απλά γραφήματα, όμως δεν θα μπορείτε να συνδεθείτε στο λογαριασμό σας, να ανοίξετε τα γραφήματά σας ή να αποθηκεύσετε αλλαγές. Ζητούμε συγνώμη για την αναστάτωση.", 
    "Nice Graph!": "Ωραία γραφική παράσταση!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Ευχαριστούμε για την ανατροφοδότηση &ndash; Θα επικοινωνήσουμε μαζί σας σύντομα!", 
    "Feedback": "Ανατροφοδότηση", 
    "Sep": "Σεπ", 
    "Convert to Table": "Μετατροπή σε Πίνακα", 
    "Redo (ctrl+y)": "Επανάληψη (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Η μεταβλητή  '__dependency__'  δεν μπορεί να χρησιμοποιηθεί ως συνάρτηση.", 
    "__number__ days ago": "Πριν από __number__ μέρες", 
    "Tell us on Facebook": "Πείτε μας στο Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Ο Desmos βρίσκεται σε κατάσταση συντήρησης, δεν θα μπορείτε να αποθηκεύσετε τις αλλαγές σας σε αυτό το γράφημα. Ζητάμε συγνώμη για την αναστάτωση!", 
    "Desmos User Guide": "Εγχειρίδιο Desmos", 
    "Done": "Τέλος", 
    "Desmos Graphing Calculator": "Γραφική Αριθμομηχανή Desmos", 
    "Cancel": "Ακύρωση", 
    "Send to:": "Αποστολή προς:", 
    "on __month__ __day__, __year__": "Στις __day__ __month__, __year__", 
    "Move the parabola.": "Μετακινήστε την παραβολή.", 
    "Save (ctrl+s)": "Αποθήκευση (ctrl + s)", 
    "You're a table wizard!": "Βρίσκεστε σε οδηγό για πίνακες!", 
    "Share Graph": "Μοιραστείτε το γράφημα", 
    "Sign In with Your Google Account": "Συνδεθείτε με τον λογαριασμό Google σας", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Υποστηρίζουμε μόνο λυμένες διπλές ανισότητες. Δοκιμάστε να διαγράψετε μια πλευρά της ανισότητας.", 
    "Click here to make a new blank expression.": "Κάντε κλικ εδώ για να δημιουργήσετε μια νέα κενή έκφραση.", 
    "Last trick!": "Τελευταίο κόλπο!", 
    "Send Feedback": "Αποστολή σχολίων", 
    "search by title...": "Αναζήτηση βάσει τίτλου...", 
    "Share this link:": "Μοιραστείτε αυτό το σύνδεσμο:", 
    "Please enter your feedback.": "Παρακαλούμε εισάγετε τα σχόλιά σας.", 
    "functions": "συναρτήσεις", 
    "Mar": "Μαρ", 
    "Language": "Γλώσσα", 
    "May": "Μάι", 
    "message sent": "Το μήνυμα εστάλη", 
    "Save As or Rename (ctrl+shift+s)": "Αποθήκευση ως ή μετονομασία (ctrl + shift + s)", 
    "Awesome!": "Τέλεια!", 
    "Sign Out": "Έξοδος", 
    "Click back to continue editing.": "Κάντε κλικ στην επιλογή πίσω για να συνεχίσετε την επεξεργασία.", 
    "Just fill in one more...": "Συμπληρώστε μόνο μία ακόμα...", 
    "Use your Email Address": "Χρησιμοποιήστε τη διεύθυνση ηλεκτρονικού ταχυδρομείου σας", 
    "to save and share your graphs!": "για να αποθηκεύσετε και να δημοσιεύσετε τα γραφήματά σας!", 
    "Name:": "Όνομα:", 
    "Add Item": "Προσθήκη στοιχείου", 
    "Click to show the list of expressions.": "Κάντε κλικ για να εμφανίσετε τη λίστα των εκφράσεων.", 
    "Graph Paper": "Επιφάνεια γραφήματος", 
    "yesterday": "χθες", 
    "add slider:": "προσθήκη παραμέτρου:", 
    "Please provide an email so that we can write back.": "Σας παρακαλούμε να στείλετε ένα email ώστε να μπορούμε να σας απαντήσουμε.", 
    "Opened '__graphTitle__'": "Ανοίχθηκε το '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Κάνοντας κλικ στο \"__btn__,\" αναγνωρίζετε ότι έχετε διαβάσει και αποδεχθεί τους __terms_of_use_link__ μας.", 
    "HTML Embed Code": "Ενσωματωμένος HTML κώδικας", 
    "Message: <i>(optional)</i>": "Μήνυμα: <i>(προαιρετικό)</i>", 
    "Sign In with Desmos": "Συνδεθείτε μέσω Desmos", 
    "one minute ago": "πριν από ένα λεπτό", 
    "Password:": "Κωδικός πρόσβασης:", 
    "or": "ή", 
    "We only support implicit equations of x and y.": "Υποστηρίζονται μόνο εξισώσεις γεωμετρικών τόπων των x και y.", 
    "Message sent. Please check your email for a password recovery link.": "Το μήνυμα εστάλη. Παρακαλούμε ελέγξτε το ηλεκτρονικό σας ταχυδρομείο για ένα σύνδεσμο ανάκτησης κωδικού πρόσβασης.", 
    "Email:": "Ηλεκτρονικό ταχυδρομείο:", 
    "enter": "εισάγετε", 
    "Let's make some sliders!": "Ας προσθέσουμε μερικές παραμέτρους!", 
    "Go down to the next row to add more data.": "Προχωρήστε στην επόμενη γραμμή για να προσθέσετε περισσότερα δεδομένα.", 
    "Let's make a function. First: click here to create a new blank expression.": "Ας δημιουργήσουμε μια συνάρτηση. Πρώτον: κάντε κλικ εδώ για να δημιουργήσετε μια νέα κενή έκφραση.", 
    "yeah!": "Ναι!"
},"id":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Jendela login terblokir. Harap ijinkan popup dari desmos.com untuk sign in dengan Google.", 
    "all": "Semua", 
    "Image upload is not supported in this browser.": "Pengunggahan gambar tidak didukung oleh peramban ini.", 
    "style:": "style:", 
    "Jan": "Jan", 
    "Try adding an equals sign to turn this into an equation.": "Coba tambahkan tanda sama untuk menjadikannya sebuah persamaan.", 
    "Please enter your email address. We will send a password recovery link to you.": "Harap masukkan alamat email Anda. Kami akan mengirimkan link pemulihan password kepada Anda.", 
    "Undo (ctrl+z)": "Batalkan (ctrl + z)", 
    "Update Password": "Pembarui Sandi", 
    "Function '__dependency__' requires an argument. __supplement__": "Fungsi '__dependency__' memerlukan 1 argumen. __supplement__", 
    "Sign Out": "Keluar", 
    "Share your graph with the world!": "Berbagi grafik Anda dengan dunia!", 
    "Oct": "Okt", 
    "Sign In with Google": "Masuk dengan akun Google+", 
    "We don't solve complicated single-variable equations yet.": "Kita belum mampu memecahkan persamaan satu-variabel yang rumit seperti ini.", 
    "Dec": "Des", 
    "__number__ hours ago": "__number__ jam yang lalu", 
    "Click and hold on this icon until the options menu opens up.": "Klik dan tahan ikon ini sampai membuka menu opsi.", 
    "Hide this warning.": "Sembunyikan peringatan ini.", 
    "Undo": "Batalkan", 
    "Untitled Graph": "Grafik tanpa judul", 
    "Nice!": "Bagus!", 
    "... and select the \"table\" option.": "... dan pilih opsi \"tabel\".", 
    "sending...": "mengirim...", 
    "Grid": "Grid", 
    "Go \"Hands-free\"": "Coba \"Hands-free\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Kita hanya dapat memplot ketidaksetaraan ketika salah satu variabel kuadrat atau linier.", 
    "step:": "langkah:", 
    "Share Graph": "Bagi Grafik", 
    "Tweet @desmos": "Tweet @desmos", 
    "Points are written like this: (1, 2).": "Titik dituliskan seperti ini: (1, 2).", 
    "Angles": "Sudut", 
    "This message will self-destruct in __seconds__...": "Pesan ini akan hilang sendiri dalam __seconds__...", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Fungsi '__dependency__' hanya memerlukan 1 argumen. __supplement__", 
    "Radians": "Radian", 
    "New graph created.": "Grafik yang baru telah dibuat.", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Ketik nomor yang valid di sini.", 
    "example": "contoh", 
    "Link to your Google Account": "Menautkan ke akun Google Anda", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' dan '__lastSymbol__' tidak dapat didefinisikan dalam satu sama lain.", 
    "Embed": "Satukan", 
    "color:": "warna:", 
    "Click to return to your expressions.": "Klik untuk kembali ke ekspresi Anda.", 
    "Title:": "Judul:", 
    "A B C": "A B C", 
    "Ask us on Twitter": "Tanya kami di Twitter", 
    "You did not select a file": "Anda belum memilih berkas", 
    "Click to return to this graph.": "Klik untuk kembali ke grafik ini.", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Petunjuk: tekan tombol 'lebih' pada keypad untuk menemukan tombol { }", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos bekerja paling baik pada versi Android yang Anda gunakan jika Anda menggunakan Chrome Browser.", 
    "Your Name:": "Namamu:", 
    "add slider:": "Tambahkan slider:", 
    "Update Account": "Perbarui Account", 
    "enter a note...": "Masukkan catatan...", 
    "Current Password:": "Kata Sandi Sekarang:", 
    "Now click here to add the sliders.": "Sekarang klik di sini untuk menambahkan slider.", 
    "Add Item": "Tambahkan Item", 
    "Press play to animate the slider.": "Tekan play untuk menghidupkan slider.", 
    "Click here to add a new item.": "Klik di sini untuk menambah item baru.", 
    "Don't forget the \"y=\"!": "Jangan lupa \"y =\"!", 
    "Fill in this whole row.": "Isi seluruh baris ini.", 
    "Invalid width.": "Lebar tidak valid.", 
    "Invalid x coordinate.": "Koordinat x tidak valid.", 
    "Unsupported Browser": "Peramban yang tidak didukung", 
    "Create Account": "Buat Akun", 
    "Too many variables. Try defining '__variables__'.": "Terlalu banyak variabel.  Coba definisikan '__variables__'.", 
    "what's this?": "Apa ini?", 
    "Table headers must be simple expressions. __supplement__": "Header tabel harus kalimat sederhana. __supplement__", 
    "Let's get started!": "Mari kita mulai!", 
    "Sorry, we didn't find any graphs with that title.": "Maaf, kami tidak menemukan apapun grafik dengan nama itu.", 
    "Please provide an email so that we can write back.": "Harap memberikan email sehingga kita dapat membalas.", 
    "Function definitions are not allowed.": "Definisi fungsi tidak diperbolehkan.", 
    "Convert this to a table.": "Mengubah ini ke tabel.", 
    "Too many variables, I don't know what to do with this.": "Terlalu banyak variabel, aku tidak tahu apa yang harus dilakukan dengan ini.", 
    "Definitions are nested too deeply.": "Definisi berjenjang terlalu dalam.", 
    "Send": "Kirimkan", 
    "FAQs": "Pertanyaan yg sering diajukan", 
    "Sliders": "Penggeser", 
    "Change this equation to __sample_expression__": "Ubah persamaan ini ke __sample_expression__", 
    "Click anywhere to close the drawing options.": "Klik di manapun untuk menutup pilihan gambar.", 
    "Print": "Cetak", 
    "Move right to add a new column.": "Gerakkan ke kanan untuk menambahkan kolom baru.", 
    "Duplicate": "Duplikasi", 
    "Email": "Email", 
    "saved": "tersimpan", 
    "Desmos User Guide": "Panduan Pengguna Desmos", 
    "Brilliant!": "Brilian!", 
    "Now graph: __sample_expression__": "Sekarang grafik: __sample_expression__", 
    "Repeat Password:": "Ulangi Password:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Apakah Anda yakin Anda ingin meninggalkan grafik ini? Pekerjaan Anda yang belum disimpan akan hilang.", 
    "Try graphing a straight line, like __sample_expression__": "Coba gambar grafik garis lurus, seperti __sample_expression__", 
    "__number__ minutes ago": "__number__ menit yang lalu", 
    "Type any number here.": "Ketik nomor apapun di sini.", 
    "Resources": "Sumber Daya", 
    "Advanced Tables": "Tabel lanjutan", 
    "Invalid height.": "Tinggi tidak valid.", 
    "Edit List": "Mengedit daftar", 
    "Logged in with Clever!": "Log in dengan Clever!", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Anda telah mendefinisikan '__dependency__' di lebih dari satu tempat. Coba memilih sebuah variabel yang berbeda, atau menghapus beberapa definisi dari '__dependency__'.", 
    "New Password:": "Kata Sandi Baru:", 
    "We only plot inequalities of x and y, or r and θ.": "Kami hanya plot ketidaksetaraan x dan y, atau r dan θ.", 
    "Click here to generate a table.": "Klik di sini untuk menghasilkan daftar.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Coba tambahkan '__lhs__' ke awal persamaan ini.", 
    "Share your thoughts!": "Bagi pikiran Anda!", 
    "For example, try typing: __recommendation__.": "Sebagai contoh, coba mengetik: __recommendation__.", 
    "Click here to connect the dots.": "Klik disini untuk menghubungkan titik-titik.", 
    "Click here to create a new expression.": "Klik di sini untuk membuat ekspresi baru.", 
    "Didn't work? Try again!": "Tidak bekerja? Coba lagi!", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Batasi domain baris ini dengan menambahkan __sample_expression__ di akhir.", 
    "last week": "Minggu lalu", 
    "We'll never share or sell your email address.": "Kami tidak akan berbagi atau menjual alamat email Anda.", 
    "Fill it in.": "Mengisikan.", 
    "Square Grid": "Grid Persegi", 
    "Sign In": "Masuk", 
    "Show List": "Tunjukan daftar", 
    "optional": "opsional", 
    "We only plot double inequalities of x and y.": "Kami hanya plot ketidaksetaraan ganda dari x dan y.", 
    "Delete": "Hapus", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Ada yang tidak beres, laporkan hal ini kepada desmos.com. (Kesalahan __error_num__)", 
    "You haven't written anything yet.": "Anda belum menulis apa pun.", 
    "Try typing __sample_expression__": "Coba ketik __sample_expression__", 
    "Apr": "Apr", 
    "type your question or suggestion...": "ketikan pertanyaan atau saran Anda...", 
    "Image": "Gambar", 
    "__number__ weeks ago": "__number__ minggu yang lalu", 
    "no, thanks": "Tidak, terima kasih", 
    "Now try pressing Enter.": "Sekarang cobalah menekan Enter.", 
    "Recover Password": "Pulihkan password", 
    "Want us to consider featuring it?": "Ingin kita pertimbangkan menampilkan ini?", 
    "folder": "folder", 
    "Tours": "Tours", 
    "on __month__ __day__, __year__": "pada  __day__ __month__, __year__", 
    "You can't use '__symbol__' as an index because it's already defined.": "Anda tidak dapat menggunakan '__symbol__' sebagai indeks karena itu sudah didefinisikan.", 
    "You're a slider pro!": "Kau slider pro!", 
    "Terms of Use": "Syarat Penggunaan", 
    "Show Keypad": "Tampilkan tombol", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Fungsi '__dependency__' memerlukan argumen __assignment_arity__. __supplement__", 
    "Drag the handle to change the value.": "Tarik pegangan untuk mengubah nilai.", 
    "Drop Image Here": "Drop gambar di sini", 
    "Does not compute to constant.": "Tidak menghasilkan konstanta.", 
    "New Blank Graph": "Grafik kosong baru", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Agu", 
    "Tables": "Tabel", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Anda tidak dapat menggunakan '__dependency__' sebagai parameter fungsi ini karena '__dependency__' sudah didefinisikan.", 
    "image": "gambar", 
    "Projector Mode": "Mode Proyektor", 
    "For example, try typing: __dependency__(x).": "Sebagai contoh, coba mengetik: __dependency__(x).", 
    "Send a Copy to Google Drive": "Kirim salinan kepada Google Drive", 
    "just now": "barusan", 
    "Open Graph (ctrl+o)": "Buka Grafik (ctrl + o)", 
    "Link to Google": "Link ke Google", 
    "Click here to create a new blank expression.": "Klik di sini untuk membuat ekspresi kosong baru.", 
    "Show Grid Angles": "Tampilkan Sudut Grid", 
    "Degrees": "Derajat", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Sekarang mari kita batasi rentang. Tambahkan __sample_expression__ ke akhir.", 
    "You're a scatter plot whiz!": "Kau jagoan plot tersebar!", 
    "Desmos is in Maintenance Mode.": "Desmos sedang di mode pemeliharaan.", 
    "table": "tabel", 
    "loading...": "memuat...", 
    "Forgot your password?": "Lupa kata sandi?", 
    "The file \"__file__\" is not an image": "Berkas \"__file__\" bukan gambar", 
    "add label": "tambah label", 
    "one hour ago": "satu jam yang lalu", 
    "Start by graphing a function.": "Mulailah dengan grafik fungsi.", 
    "What do you want '__symbol__' to equal?": "'__symbol__' maunya sama dengan apa?", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Kau bintang pembatasan!", 
    "Jul": "Jul", 
    "X-Axis": "Sumbu X", 
    "Let's make a scatter plot!": "Mari kita membuat plot tersebar!", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Cobalah memasukkan '__symbols__' dan '__lastSymbol__' sebagai argumen dengan mendefinisikan fungsi sebagai '__newSignature__'.", 
    "Edit Account": "Edit Account", 
    "Inequalities are not allowed.": "Pertidaksamaan tidak diperbolehkan.", 
    "Function '__dependency__' is not defined.": "Fungsi '__dependency__' tidak terdefinisi.", 
    "Restrictions": "Batasan", 
    "Click here to continue editing this table.": "Klik di sini untuk melanjutkan mengedit tabel ini.", 
    "Click here to only show the dots.": "Klik di sini untuk hanya menunjukkan titik-titik.", 
    "Click the \"Edit List\" button.": "Klik tombol \"Edit Daftar\".", 
    "Sign in": "Masuk", 
    "Delete All": "Hapus Semua", 
    "Click here to download Google Chrome.": "Klik disini untuk mengunduh Google Chrome.", 
    "Remembered your password?": "Ingat password Anda?", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Cobalah memasukkan '__lastSymbol__' sebagai argumen dengan mendefinisikan fungsi sebagai '__newSignature__'.", 
    "This graph has been deleted.": "Grafik ini telah dihapus.", 
    "Hide Keypad": "Sembunyikan tombol", 
    "Download the User Guide": "Unduh panduan pengguna", 
    "Try typing all of __sample_expression__": "Coba mengetik semua __sample_expression__", 
    "Too complicated. Use parens.": "Terlalu rumit. Gunakan tanda kurung.", 
    "Nov": "Nop", 
    "Message: <i>(optional)</i>": "Pesan: <i>(opsional)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos sementara berada di mode pemeliharaan. Anda dapat membuka contoh grafik, tapi tidak dapat masuk, membuka grafik atau menyimpan perubahan. Kami minta maaf atas ketidaknyamanan.", 
    "Nice Graph!": "Grafik yang bagus!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Terima kasih untuk umpan balik &ndash; Anda akan mendengar dari kami segera!", 
    "Open Graph": "Buka Grafik", 
    "Sep": "Sep", 
    "Convert to Table": "Konversi ke Tabel", 
    "Redo (ctrl+y)": "Ulangi (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Variabel '__dependency__' tidak dapat digunakan sebagai fungsi.", 
    "__number__ days ago": "__number__ hari yang lalu", 
    "Tell us on Facebook": "Beritahu kami di Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos di mode pemeliharaan , Anda tidak dapat menyimpan perubahan ke grafik ini. Kami sedang minta maaf atas ketidaknyamanan yang terjadi!", 
    "Lists are not allowed.": "Daftar tidak diperbolehkan.", 
    "note": "Catatan", 
    "Learn more": "Pelajari lebih lanjut", 
    "Done": "Selesai", 
    "Desmos Graphing Calculator": "Desmos Graphing Calculator", 
    "Cancel": "Batalkan", 
    "Polar equations must be linear in r.": "Persamaan kutub harus linier dalam r.", 
    "more": "lebih", 
    "Step:": "Langkah:", 
    "Send to:": "Kirim ke:", 
    "Nested lists are not allowed.": "Daftar berjenjang tidak diperbolehkan.", 
    "Show Numbers": "Tampilkan angka", 
    "Move the parabola.": "Pindahkan parabola.", 
    "Hide List": "Sembunyikan daftar", 
    "Y-Axis": "Sumbu Y", 
    "Save (ctrl+s)": "Simpan (ctrl + s)", 
    "You're a table wizard!": "Kau jagoan soal tabel!", 
    "Table entries must be simple expressions. __supplement__": "Isi tabel harus kalimat sederhana. __supplement__", 
    "Sign In with Your Google Account": "Masuk dengan akun Google Anda", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Kami hanya mampun memecahkan ketidaksetaraan ganda. Coba hapus satu sisi ketidaksetaraan.", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Ketidaksetaraan ganda harus sama arahnya, misalnya 1 < y < 2.", 
    "Help": "Tolong", 
    "Click here to make a new blank expression.": "Klik di sini untuk membuat ekspresi kosong baru.", 
    "Last trick!": "Trik terakhir!", 
    "Send Feedback": "Kirim Umpan balik", 
    "search by title...": "Cari menurut judul...", 
    "Share this link:": "Berbagi link ini:", 
    "Please enter your feedback.": "Masukkan umpan balik Anda.", 
    "loading graphs...": "memuat grafik...", 
    "functions": "fungsi - fungsi", 
    "Mar": "Mar", 
    "Table created.": "Tabel telah dibuat.", 
    "Language": "Bahasa", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Petunjuk: Anda dapat mengetik y = x ^ 2, atau menggunakan <sup>2</sup> tombol pada tombol di bawah ini.", 
    "May": "Mei", 
    "message sent": "pesan terkirim", 
    "Feedback": "Masukan", 
    "Save As or Rename (ctrl+shift+s)": "Save As atau Ganti Nama (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "Kami tidak dapat plot θ sebagai fungsi dari r. Coba plot r(θ) sebagai gantinya.", 
    "Awesome!": "Keren!", 
    "Visiting anonymously from Clever.": "Berkunjung secara anonim dari Clever.", 
    "Click back to continue editing.": "Klik kembali untuk melanjutkan pengeditan.", 
    "Just fill in one more...": "Masukkan satu lagi...", 
    "Learn More": "Pelajari Lebih Banyak", 
    "Equations are not allowed.": "Persamaan tidak diperbolehkan.", 
    "Use your Email Address": "Gunakan alamat Email Anda", 
    "to save and share your graphs!": "untuk menyimpan dan berbagi grafik Anda!", 
    "Name:": "Nama:", 
    "Only __form__ is supported. Otherwise, use parens.": "Hanya __form__ yang didukung. Cobalah  menggunakan tanda kurung.", 
    "Click to show the list of expressions.": "Klik untuk menampilkan daftar ekspresi.", 
    "Graph Paper": "Kertas Grafik", 
    "Invalid y coordinate.": "Koordinat y tidak valid.", 
    "This is the name we'll use if we feature one of your graphs.": "Nama ini akan kita gunakan saat kita menggunakan salah satu grafik Anda.", 
    "Graph Settings": "Pengaturan Grafik", 
    "yesterday": "kemarin", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos sedang di mode pratinjau , sehingga Anda tidak akan dapat menyimpan grafik.", 
    "You can't redefine '__symbol__' because it's already defined.": "Anda tidak bisa mendefinisikan '__symbol__' karena itu sudah didefinisikan.", 
    "Points are not allowed.": "Poin tidak diperbolehkan.", 
    "Opened '__graphTitle__'": "Buka '__graphTitle__'", 
    "Save Changes (ctrl+s)": "Simpan perubahan (ctrl + s)", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Maaf, Anda tidak bisa membuat grafik __symbol__ sebagai fungsi dari apa pun.", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Dengan mengklik \"__btn__\", Anda menyatakan bahwa Anda telah membaca dan menerima __terms_of_use_link__ kami.", 
    "HTML Embed Code": "HTML Embed Code", 
    "Arrows:": "Panah:", 
    "No Unsaved Changes": "Tidak ada perubahan yang belum disimpan", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Hanya __form1__ dan __form2__ yang didukung. Cobalah menggunakan tanda kurung.", 
    "size:": "Ukuran:", 
    "Sign In with Desmos": "Masuk dengan Desmos", 
    "one minute ago": "satu menit yang lalu", 
    "Password:": "Kata Sandi:", 
    "or": "atau", 
    "Other Questions?": "Pertanyaan lain?", 
    "We only support implicit equations of x and y.": "Kami hanya mendukung persamaan implisit x dan y.", 
    "Message sent. Please check your email for a password recovery link.": "Pesan telah dikirim. Periksa email Anda untuk link pemulihan sandi.", 
    "Email:": "Email:", 
    "expression": "ekspresi", 
    "enter": "enter", 
    "center:": "Pusat:", 
    "Let's make some sliders!": "Mari kita membuat beberapa slider!", 
    "Error signing in with Clever.": "Tidak bisa masuk dengan Clever.", 
    "Go down to the next row to add more data.": "Turun ke baris berikutnya untuk menambahkan lebih banyak data.", 
    "Let's make a function. First: click here to create a new blank expression.": "Mari kita membuat sebuah fungsi. Pertama: klik di sini untuk membuat ekspresi kosong baru.", 
    "yeah!": "Ya!"
},"fa":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "صفحه‌ی ورود، مسدود شده است. لطفا popupهای desmos.com را بپذیرید تا بتوانید با گوگل وارد شوید.", 
    "Derivatives": "مشتق", 
    "all": "همه", 
    "Needs work": "نیاز به کار", 
    "Image upload is not supported in this browser.": "بارگذاری عکس در این مرورگر پشتیبانی نمی‌شود.", 
    "style:": "روش:", 
    "Jan": "ژانویه", 
    "Try adding an equals sign to turn this into an equation.": "علامت مساوی را اضافه کنید تا این عبارت را یه یک تساوی تبدیل کنید.", 
    "Please enter your email address. We will send a password recovery link to you.": "لطفا نشانی ایمیل خود را وارد کنید. ما یک لینک بازیابی رمز برای شما می‌فرستیم.", 
    "Undo (ctrl+z)": "خنثی‌کردن عمل قبلی (ctrl+z)", 
    "Update Password": "تغییر رمز", 
    "Share your graph with the world!": "نمودار خود را با دنیا به اشتراک بگذارید!", 
    "Oct": "اکتبر", 
    "Sign In with Google": "ورود با گوگل", 
    "We don't solve complicated single-variable equations yet.": "ما هنوز نمی‌توانیم معادلات تک‌متغیره‌ی پیچیده را حل کنیم.", 
    "Help Center": "مرکز راهنمایی", 
    "__number__ hours ago": "__number__ ساعت پیش", 
    "Inverse of a Function": "معکوس یک تابع", 
    "Click and hold on this icon until the options menu opens up.": "بر روی این آیکن کلیک کنید و فشار دهید تا فهرست گزینه‌ها باز شود.", 
    "Hide this warning.": "این هشدار را پنهان کن.", 
    "Undo": "خنثی کردن عمل قبل", 
    "Untitled Graph": "نمودار بدون عنوان", 
    "Nice!": "عالی!", 
    "... and select the \"table\" option.": "... و گزینه‌ی \"جدول\" را انتخاب کنید.", 
    "sending...": "در حال ارسال...", 
    "Grid": "شبکه‌بندی", 
    "Go \"Hands-free\"": "به \"بدون دخالت دست\" برو.", 
    "We can only plot inequalities when one variable is quadratic or linear.": "ما تنها نامعادلاتی را رسم می‌کنیم که متغیر آن خطی یا درجه‌ دو باشد.", 
    "step:": "گام:", 
    "Tweet @desmos": "توییت @desmos", 
    "Angles": "زاویه‌ها", 
    "This message will self-destruct in __seconds__...": "این پیام در __seconds__ ثانیه به طور خودکار بسته می‌شود...", 
    "X-Axis": "محور X", 
    "Radians": "رادیان", 
    "New graph created.": "نمودار جدید ساخته شد.", 
    "Uh-oh! Type a valid number here.": "اوه اوه! یک عدد درست اینجا بنویسید.", 
    "example": "نمونه", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "آیا وقت دارید به ما کمک کنید؟ رتبه ندی ها و پیشنهادات شما به دیگران کمک می کنند. ما را پیدا کنید و به ما کمک کنید تا ماشین حساب بهتری بسازیم. به ما بگویید چه فکر می کنید!", 
    "General Form": "فرم عمومی", 
    "Link to your Google Account": "به حساب گوگلتان پیوند دهید", 
    "Embed": "جایگذاری", 
    "color:": "رنگ:", 
    "Click to return to your expressions.": "برای بازگشت به عبارت خود کلیک کنید.", 
    "A B C": "الف ب پ", 
    "Ask us on Twitter": "از ما در توییتر بپرسید.", 
    "You did not select a file": "شما هیچ فایلی را انتخاب نکردید", 
    "Click to return to this graph.": "برای بازگشت به این نمودار کلیک کنید.", 
    "Your Name:": "نام شما:", 
    "Update Account": "بروزرسانی حساب", 
    "Duplicate": "تکراری", 
    "Current Password:": "رمز کنونی:", 
    "Now click here to add the sliders.": "اکنون برای اضافه‌شدن لغزنده، روی اینجا کلیک کنید.", 
    "Press play to animate the slider.": "برای این که لغزنده حرکت کند، Play را بزنید.", 
    "Click here to add a new item.": "برای اضافه‌کردن یک بخش دیگر، اینجا را کلیک کنید.", 
    "Don't forget the \"y=\"!": "\"=y\" را فراموش نکنید!", 
    "Fill in this whole row.": "این ردیف را کامل پر کنید.", 
    "Invalid width.": "پهنا نامعتبر است.", 
    "Invalid x coordinate.": "مختصه x نامعتبر است.", 
    "Create Account": "ساختن حساب", 
    "Tables": "جدول‌ها", 
    "what's this?": "این چیست؟", 
    "Let's get started!": "بیاید شروع کنیم!", 
    "This is the name we'll use if we feature one of your graphs.": "این نام زمانی استفاده می‌شود که ما یکی از نمودارهای شما را نمایش بدهیم.", 
    "Convert this to a table.": "این را به یک جدول تبدیل کنید.", 
    "We zoomed to fit your data.": "ما زوم کردیم تا داده های شما را جا بدهیم.", 
    "Send": "بفرست", 
    "FAQs": "سؤالات متداول", 
    "Sliders": "لغزنده‌ها", 
    "Change this equation to __sample_expression__": "این معادله را به __sample_expression__ تغییر دهید.", 
    "Click anywhere to close the drawing options.": "برای بسته‌شدن تنظیمات، بر روی یک جای دلخواه کلیک کنید.", 
    "Print": "چاپ", 
    "Move right to add a new column.": "به سمت راست بروید و یک ستون جدید اضافه کنید.", 
    "Circle": "دایره", 
    "Secant Line": "خط قاطع", 
    "Email": "ایمیل", 
    "Taylor Expansion of sin(x)": "گسترش تیلر سینوس(x)", 
    "saved": "ذخیره شد.", 
    "Feedback": "بازخورد", 
    "Brilliant!": "محشر بود!", 
    "Now graph: __sample_expression__": "حالا این را رسم کنید: __sample_expression__", 
    "Repeat Password:": "رمز را تکرار کنید:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "می‌��واهید این نمودار را ببندید؟ کارهای ذخیره‌نشده‌ی شما از بین خواهد رفت.", 
    "Try graphing a straight line, like __sample_expression__": "سعی کنید یه خط راست بکشید. مثل __sample_expression__", 
    "__number__ minutes ago": "__number__ دقیقه پیش", 
    "Type any number here.": "عددی را در اینجا بنویسید.", 
    "Resources": "منابع", 
    "Advanced Tables": "جدول‌های پیشرفته", 
    "Invalid height.": "ارتفاع نامعتبر است.", 
    "Title:": "عنوان:", 
    "Logged in with Clever!": "وارد شده با حساب (Clever)", 
    "All the Trig Functions": "تمام توابع مثلثاتی", 
    "New Password:": "رمز جدید:", 
    "We only plot inequalities of x and y, or r and θ.": "ما تنها نامعادلات y بر حسب x یا r برحسب θ را رسم می‌کنیم.", 
    "Click here to generate a table.": "برای ساختن یک جدول، بر روی این کلیک کنید.", 
    "Share your thoughts!": "نظرت را به اشتراک بگذار!", 
    "Click here to connect the dots.": "برای متصل کردن نقاط، اینجا را کلیک کنید.", 
    "Click here to create a new expression.": "برای ساختن یک عبارت تازه، اینجا را کلیک کنید.", 
    "Didn't work? Try again!": "کار نکرد؟ دوباره امتحان کنید!", 
    "last week": "هفته پیش", 
    "Factored Form": "فاکتور شده", 
    "Fill it in.": "این را پر کنید.", 
    "Sign In": "ورود", 
    "Show List": "نمایش فهرست", 
    "optional": "اختیاری", 
    "Delete": "حذف", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "در جایی خطایی رخ داده است؛ لطفا این را به بخش پشتیبانی desmos.com گزارش کنید. (خطا __error_num__)", 
    "Delete All": "حذف همه", 
    "Try typing __sample_expression__": "__sample_expression__ را تایپ کنید", 
    "Apr": "آوریل", 
    "Sorry, I don't understand this.": "ببخشید، من این را نمی فهمم.", 
    "Image": "شکل", 
    "__number__ weeks ago": "__number__ هفته پیش", 
    "no, thanks": "نه، ممنون", 
    "Now try pressing Enter.": "حالا Enter را فشار دهید.", 
    "Recover Password": "بازیابی رمز", 
    "Want us to consider featuring it?": "آیا می‌خواهید امکان ارائه آن را فراهم کنیم؟", 
    "folder": "پوشه", 
    "Tours": "راهنما", 
    "Reflections of a Function": "بازتاب یک تابع", 
    "type your question or suggestion...": "پیشنهاد یا پرسش خود را بنویسید...", 
    "Drop Image Here": "عکس را اینجا بینداز", 
    "Terms of Use": "شرایط استفاده", 
    "Show Keypad": "نمایش صفحه‌کلید", 
    "expression": "عبارت", 
    "Drag the handle to change the value.": "برای تغییر دادن مقدار، لغزنده را جابه‌جا کنید.", 
    "Does not compute to constant.": "عدد ثابت محاسبه نمی‌شود.", 
    "Y-Axis": "محور Y", 
    "New Blank Graph": "نمودار خالی تازه", 
    "Feb": "فوریه", 
    "BBCode": "کدBB", 
    "Aug": "آگوست", 
    "This graph has been deleted.": "این نمودار حذف شده است.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "دامنه‌ی این خط را با اضافه‌کردن  __sample_expression__ در انتها، محدود کنید.", 
    "image": "شکل", 
    "Projector Mode": "بر روی پروژکتور", 
    "Send a Copy to Google Drive": "یک کپی را به Google Drive بفرستید", 
    "just now": "همین الآن", 
    "Open Graph (ctrl+o)": "بازکردن نمودار (ctrl+o)", 
    "Link to Google": "پیوند به گوگل", 
    "Click here to create a new blank expression.": "برای ساختن یک عبارت تازه، اینجا را کلیک کنید.", 
    "Show Grid Angles": "نمایش شبکه‌بندی زاویه‌ها", 
    "Degrees": "درجه", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "حالا بیایید دامنه را محدودتر کنیم. به انتها __sample_expression__ را اضافه کنید.", 
    "You're a scatter plot whiz!": "شما خیلی‌خوب نقاط را بر روی نمودار می‌برید!", 
    "Desmos is in Maintenance Mode.": "Desmos بر روی حالت نگهداری است.", 
    "table": "جدول", 
    "Standard Form": "حالت استاندارد", 
    "loading...": "در حال بارگزاری...", 
    "Forgot your password?": "رمز خود را فراموش کرده‌اید؟", 
    "Calculus": "حساب دیفرانسیل و انتگرال", 
    "The file \"__file__\" is not an image": "فایل \"__file__\" فایل تصویری نیست", 
    "add label": "عنوان بگذارید", 
    "one hour ago": "یک ساعت پیش", 
    "Start by graphing a function.": "با کشیدن یک تابع شروع کنید.", 
    "You're a slider pro!": "شما در لغزاندن حرفه‌ای شده‌اید!", 
    "Jun": "ژوئن", 
    "You're a restrictions star!": "شما در ایجاد بازه یک قهرمان هستید!", 
    "Jul": "ژولای", 
    "Let's make a scatter plot!": "بیایید از چند نقطه، نمودار بکشیم!", 
    "Edit List": "ویرایش فهرست", 
    "Edit Account": "ویرایش حساب", 
    "I just want to graph": "فقط می خواهم نمودار رسم کنم", 
    "more": "بیشتر", 
    "Function '__dependency__' is not defined.": "تابع '__dependency__' تعریف نشده‌ است.", 
    "Restrictions": "بازه‌ها", 
    "Click here to continue editing this table.": "برای ادامه‌ی ویرایش جدول، این جا را کلیک کنید.", 
    "Click here to only show the dots.": "برای اینکه تنها نقطه‌ها نمایش داده شوند، این جا را کلیک کنید.", 
    "Click the \"Edit List\" button.": "کلید \"ویرایش فهرست\" را فشار دهید.", 
    "Sign in": "وارد شوید", 
    "Help": "کمک", 
    "Remembered your password?": "رمزتان را به‌یاد آوردید؟", 
    "Sorry, we didn't find any graphs with that title.": "ببخشید؛ ما نموداری با این عنوان پیدا نکردیم.", 
    "Hide Keypad": "پنهان کردن صفحه‌کلید", 
    "Try typing all of __sample_expression__": "سعی کنید کل این عبارت را بنویسید __sample_expression__", 
    "Dec": "دسامبر", 
    "Nov": "نوامبر", 
    "Message: <i>(optional)</i>": "پیغام:<i>(اختیاری)</i>", 
    "message sent": "پیغام فرستاده شد.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos موقتا بر روی حالت نگهداری است. شما می‌توانید نمونه نمودارها را باز کنید، اما نمی‌توانید وارد شوید، نمودارهای خودتان را باز کنید یا چیزی را ذخیره کنید. از شما پوزش می‌خواهیم.", 
    "Nice Graph!": "گراف خوبیه!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "از فرستادن بازخوردتان متشکریم&ndash;به‌ زودی از ما خواهید شنید!", 
    "Open Graph": "بازکردن نمودار", 
    "Sep": "سپتامبر", 
    "Convert to Table": "تبدیل به جدول", 
    "Redo (ctrl+y)": "دوباره انجام‌دادن عمل قبل (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "متغیر '__dependency__' نمی‌تواند به عنوان یک تابع استفاده شود.", 
    "__number__ days ago": "__number__ روز پیش", 
    "Tell us on Facebook": "در فیسبوک به ما بگویید", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos بر روی حالت نگهداری است؛ شما نمی‌توانید تغییرات در این نمودار را دخیره کنید. از شما پوزش می‌خواهیم!", 
    "Desmos User Guide": "راهنمای کاربری Desmos", 
    "Done": "انجام شد", 
    "Desmos Graphing Calculator": "ماشین‌حساب رسم نمودار Desmos", 
    "Cancel": "انصراف", 
    "Close": "بسته", 
    "Step:": "گام:", 
    "Send to:": "بفرست به:", 
    "on __month__ __day__, __year__": "در __day__ __month__, __year__", 
    "Show Numbers": "نمایش اعداد", 
    "Move the parabola.": "سهمی را تکان دهید.", 
    "Hide List": "پنهان کردن فهرست", 
    "Slope Intercept Form": "چگونه نمودارم را ذخیره کنم؟", 
    "Save (ctrl+s)": "ذخیره (ctrl+s)", 
    "You're a table wizard!": "شما در کشیدن جدول فوق‌العاده اید!", 
    "Share Graph": "به اشتراک گذاشتن نمودار", 
    "Sign In with Your Google Account": "با حساب گوگل خود وارد شوید", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "ما تنها نامعادلات دوتایی حل‌شده را پشتیبانی می‌کنیم. یک سمت نامعادله را حذف کنید.", 
    "Please provide an email so that we can write back.": "لطفا یک ایمیل ارائه کنید تا ما بتوانیم پاسخ آن را به شما بفرستیم.", 
    "Scaling Any Function": "مقیاس کردن هر تابع", 
    "Click here to make a new blank expression.": "برای ساختن یک عبارت تازه، اینجا را کلیک کنید.", 
    "Last trick!": "کلک آخر!", 
    "Send Feedback": "فرستادن بازخورد", 
    "search by title...": "جستجو بر اساس عنوان...", 
    "Share this link:": "این پیوند را به اشتراک بگذارید:", 
    "Please enter your feedback.": "لطفا بازخورد خود را وارد کنید.", 
    "loading graphs...": "بارگزاری نمودار...", 
    "functions": "تابع‌ها", 
    "Mar": "مارس", 
    "Table created.": "جدول ساخته شد.", 
    "Language": "زبان", 
    "No Unsaved Changes": "همه تغییرات ذخیره شده‌اند", 
    "May": "مِی", 
    "Tangent Line": "خط مماس", 
    "We'll never share or sell your email address.": "ما هیچ‌گاه نشانی ایمیل شما را نمی‌فروشیم و یا منتشر نمی‌کنیم.", 
    "Save As or Rename (ctrl+shift+s)": "تغییرنام یا ذخیره به عنوان (ctrl+shift+s)", 
    "Awesome!": "فوق‌العاده بود!", 
    "Sign Out": "خروج", 
    "Click back to continue editing.": "برای ادامه‌ی ویرایش، کلید بازگشت را فشار دهید.", 
    "Just fill in one more...": "فقط یکی دیگر را پر کنید...", 
    "Learn More": "بیشتر یاد بگیرید", 
    "Use your Email Address": "از آدرس ایمیل خود استفاده کنید", 
    "to save and share your graphs!": "برای ذخیره و به اشتراک گذاری نمودارها!", 
    "Name:": "نام:", 
    "Add Item": "افزودن مورد", 
    "Click to show the list of expressions.": "برای دیدن فهرستی از عبارت‌ها کلیک کنید.", 
    "Graph Paper": "کاغذ نمودار", 
    "Invalid y coordinate.": "مختصه y نامعتبر است.", 
    "I love it": "دوستش دارم", 
    "Graph Settings": "تنظیمات جدول", 
    "Lines": "خطوط", 
    "yesterday": "دیروز", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos در حالت نمایش است. شما نمی‌توانید نموداری را ذخیره کنید.", 
    "add slider:": "افزودن لغزنده:", 
    "How do I save my graph?": "چگونه نمودار خود را ذخیره کنم؟", 
    "Opened '__graphTitle__'": "'__graphTitle__' باز شده", 
    "Save Changes (ctrl+s)": "ذخیره تغییرات (ctrl+s)", 
    "Trigonometry": "مثلثات", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "با کلیک بر روی \"__btn__,\"، شما اذعان کرده‌اید که __terms_of_use_link__ را خوانده و پذیرفته‌اید.", 
    "HTML Embed Code": "جاسازی کد HTML", 
    "Arrows:": "پیکان‌ها:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "راهنمایی: می‌توانید y=x^2 را تایپ کنید، یا از کلید<sup>2</sup> در صفحه کلید زیر استفاده کنید.", 
    "Square Grid": "شبکه‌بندی مربعی", 
    "size:": "اندازه:", 
    "Sign In with Desmos": "با Desmos وارد شوید", 
    "one minute ago": "یک دقیقه پیش", 
    "Password:": "رمز:", 
    "or": "یا", 
    "Other Questions?": "سؤال دیگر؟", 
    "We only support implicit equations of x and y.": "ما تنها از معادلات ضمنی ِ x و y پشتیبانی می‌کنیم.", 
    "Message sent. Please check your email for a password recovery link.": "پیغام فرستاده شد. لطفا ایمیل خود را برای لینک بازیابی رمز، بررسی کنید.", 
    "Email:": "ایمیل:", 
    "enter": "وارد‌کردن", 
    "center:": "مرکز:", 
    "Let's make some sliders!": "بیایید چند لغزنده بسازیم!", 
    "Go down to the next row to add more data.": "به سطر بعدی بروید و نقاط بیشری وارد کنید.", 
    "Let's make a function. First: click here to create a new blank expression.": "بیایید یک تابع بسازیم. ابتدا: برای ساختن یک عبارت تازه، روی اینجا کلیک کنید.", 
    "yeah!": "آره!"
},"mk":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Прозорецот за логирање е блокиран. Ве молиме овозможете popups од desmos.com за да се регистрирате со Google.", 
    "all": "сите", 
    "style:": "стил:", 
    "Jan": "Јануари", 
    "Please enter your email address. We will send a password recovery link to you.": "Ве молиме внесете ја вашата email адреса. Ќе ви испратиме линк за обновување на лозинка.", 
    "Undo (ctrl+z)": "Назад (ctrl+z)", 
    "Update Password": "Ажурирај Лозинка", 
    "Share your graph with the world!": "Сподели го графикот со светот!", 
    "Oct": "Октомври", 
    "Sign In with Google": "Најави се со Google", 
    "We don't solve complicated single-variable equations yet.": "Сеуште не решаваме сложени равенки со една променлива.", 
    "__number__ hours ago": "пред __number__ часови", 
    "Click and hold on this icon until the options menu opens up.": "Кликнете и држете го тастерот притиснат на оваа икона се додека не се отвори менито со опции.", 
    "Undo": "Назад", 
    "Untitled Graph": "Неименуван график", 
    "Nice!": "Одлично!", 
    "... and select the \"table\" option.": "... и селектирајте ја \"табела\" опцијата.", 
    "Remembered your password?": "Ја запомнивте вашата лозинка?", 
    "Go \"Hands-free\"": "Оди на \"Hands-free\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Може да биде исцртано неравенство само кога една од променливите е квадратна или ��инеарна.", 
    "step:": "чекор:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Оваа порака ќе се самоуништи за __seconds__...", 
    "Radians": "Радијани", 
    "New graph created.": "Нов график е креиран.", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Напишете валиден број.", 
    "center:": "центар:", 
    "Link to your Google Account": "Link кон вашиот Google профил", 
    "Embed": "Вметни", 
    "color:": "боја:", 
    "Click to return to your expressions.": "Кликнете за да се вратите кај вашите изрази.", 
    "Help": "Помош", 
    "A B C": "A B C", 
    "Click to return to this graph.": "Кликнете за да се вратите во овој график.", 
    "Your Name:": "Вашето име:", 
    "Update Account": "Ажурирај го профилот", 
    "Duplicate": "Дупликат", 
    "Current Password:": "Тековна Лозинка:", 
    "Now click here to add the sliders.": "Сега кликнете тука за додавање на лизгачите.", 
    "Press play to animate the slider.": "Притиснете play за анимирање на лизгачот.", 
    "Click here to add a new item.": "Кликнете тука за додавање на нов елемент.", 
    "Don't forget the \"y=\"!": "Не заборавајте го \"y=\"!", 
    "Fill in this whole row.": "Пополни го целиот ред.", 
    "Create Account": "Креирај Профил", 
    "Tables": "Табели", 
    "what's this?": "што е ова?", 
    "Let's get started!": "Ајде да започнеме!", 
    "This is the name we'll use if we feature one of your graphs.": "Ова е името кое ќе го користиме ако додадеме некој од вашите графици.", 
    "Convert this to a table.": "Конвертирај го ова во табела.", 
    "Send": "Прати", 
    "Sliders": "Лизгачи", 
    "Change this equation to __sample_expression__": "Промени ја оваа равенка во __sample_expression__", 
    "Click anywhere to close the drawing options.": "Кликнете било каде за да ги затворите опциите за цртање.", 
    "Print": "Печати", 
    "Move right to add a new column.": "Одете десно за да додадете нова колона.", 
    "Email": "Email", 
    "saved": "зачувано", 
    "Brilliant!": "Брилијантно!", 
    "Now graph: __sample_expression__": "Сега исцртајте: __sample_expression__", 
    "Repeat Password:": "Повторете ја лозинката:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Дали сте сигурни дека сакате да го затворите овој график? Вашата незачувана работа ќе биде изгубена.", 
    "Try graphing a straight line, like __sample_expression__": "Обидете се да исцртате права линија, како __sample_expression__", 
    "__number__ minutes ago": "пред __number__ минути", 
    "Type any number here.": "Напишете било кој број тука.", 
    "Resources": "Ресурси", 
    "Advanced Tables": "Напредни Табели", 
    "example": "пример", 
    "Title:": "Наслов:", 
    "sending...": "се праќа...", 
    "New Password:": "Нова Лозинка:", 
    "We only plot inequalities of x and y, or r and θ.": "Ние цртаме само неравенства на x и y, или r и θ.", 
    "Click here to generate a table.": "Кликнете тука за генерирање на табела.", 
    "loading graphs...": "вчитување на графици...", 
    "Click here to connect the dots.": "Кликнете тука за да ��и поврзете точките.", 
    "Click here to create a new expression.": "Кликнете овде за да креирате нов израз.", 
    "Didn't work? Try again!": "Не работи? Обидете се повторно!", 
    "last week": "претходната недела", 
    "We'll never share or sell your email address.": "Никогаш нема да ја споделиме или продадеме вашата email адреса.", 
    "Fill it in.": "Пополнете.", 
    "Sign In": "Најави се", 
    "optional": "опционално", 
    "Delete": "Избриши", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Нешто не е во ред, ве молиме пријавете го ова до тимот за поддршка на desmos.com. (Грешка __error_num__)", 
    "Delete All": "Избриши се", 
    "Try typing __sample_expression__": "Обидете се со пишување на __sample_expression__", 
    "Apr": "Април", 
    "Image": "Слика", 
    "Start by graphing a function.": "Започнете со исцртување на функција на графикот.", 
    "no, thanks": "не, благодарам", 
    "Now try pressing Enter.": "Сега обидете се да притиснете Enter.", 
    "Recover Password": "Обнови Лозинка", 
    "Want us to consider featuring it?": "Сакате да размислиме за додавање на оваа карактеристика?", 
    "folder": "директориум", 
    "Tours": "Примери", 
    "Open Graph": "Отвори График", 
    "type your question or suggestion...": "напишете го вашето прашање или сугестија...", 
    "size:": "големина:", 
    "Terms of Use": "Услови на употреба", 
    "expression": "израз", 
    "Drag the handle to change the value.": "Повлечете го манипулаторот за да ја промените вредноста.", 
    "New Blank Graph": "Нов празен график", 
    "Feb": "Февруари", 
    "BBCode": "BBCode", 
    "Aug": "Август", 
    "This graph has been deleted.": "Овој график е избришан.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ограничете го доменот на оваа линија со додавање на __sample_expression__ на крајот.", 
    "image": "слика", 
    "Projector Mode": "Прикажи на проектор", 
    "Send a Copy to Google Drive": "Прати копија до Google Drive", 
    "just now": "само сега", 
    "Open Graph (ctrl+o)": "Отвори График (ctrl+o)", 
    "Link to Google": "Link кон Google", 
    "Click here to create a new blank expression.": "Кликнете тука за да креирате нов празен израз.", 
    "Degrees": "Степени", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Сега треба да се ограничи опсегот. Додадете __sample_expression__ на крајот.", 
    "You're a scatter plot whiz!": "Вие сте волшебник за нанесување точки на график!", 
    "Desmos is in Maintenance Mode.": "Desmos е во режим на одржување.", 
    "table": "табела", 
    "loading...": "вчитување...", 
    "Forgot your password?": "Ја заборавивте вашата лозинка?", 
    "Hide List": "Скриј ја листата", 
    "one hour ago": "пред еден час", 
    "__number__ weeks ago": "пред __number__ недели", 
    "You're a slider pro!": "Вие сте slider професионалец!", 
    "Jun": "Јуни", 
    "You're a restrictions star!": "Вие сте мајстор за ограничувања!", 
    "Jul": "Јули", 
    "Let's make a scatter plot!": "Ајде да ги нанесеме точките на графикот!", 
    "Edit Account": "Уреди Профил", 
    "more": "повеќе", 
    "Function '__dependency__' is not defined.": "Функцијата '__dependency__' не е дефинирана.", 
    "Restrictions": "Рестрикции", 
    "Click here to continue editing this table.": "Кликнете тука за да продолжите со уредување на оваа табела.", 
    "Click here to only show the dots.": "Кликнете тука за да се прикажат само точките.", 
    "Click the \"Edit List\" button.": "Кликнете на “Уреди ја листата“ копчето.", 
    "Sign in": "Најави се", 
    "Sorry, we didn't find any graphs with that title.": "Извинете, не пронајдовме график со тој наслов.", 
    "Try typing all of __sample_expression__": "Обидете се да напишете се од __sample_expression__", 
    "Dec": "Декември", 
    "Nov": "Ноември", 
    "Edit List": "Уреди ја листата", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos е привремено во режим на одржување. Можете да отворите примери со графици, но нема да можете да се најавите, да ги отворите вашите графици, или да зачувате промени. Се извинуваме за непријатностите.", 
    "Nice Graph!": "Добар График!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Ви благодариме за повратните информации &ndash; ќе добиете одговор наскоро!", 
    "Feedback": "Повратни информации", 
    "Sep": "Септември", 
    "Convert to Table": "Конвертирај во Табела", 
    "Redo (ctrl+y)": "Напред (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "Променливата '__dependency__' не може да се користи како функција.", 
    "__number__ days ago": "пред __number__ денови", 
    "Tell us on Facebook": "Кажете ни на Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos е во режим на одржување, нема да бидете во можност да ги зачувате промените во овој график. Се извинуваме за непријатностите!", 
    "Desmos User Guide": "Desmos упатство за корисникот", 
    "Done": "Готово", 
    "Desmos Graphing Calculator": "Десмос калкулатор за графици", 
    "Cancel": "Откажи", 
    "Send to:": "Испрати до:", 
    "on __month__ __day__, __year__": "на __day__ ,  __month__, __year__", 
    "Move the parabola.": "Поместете ја параболата.", 
    "Save (ctrl+s)": "Зачувај (ctrl+s)", 
    "You're a table wizard!": "Вие сте волшебник за табели!", 
    "Share Graph": "Сподели го графикот", 
    "Sign In with Your Google Account": "Најави се со Google Account", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Поддржуваме само решени двојни неравенства. Обидете се со бришење на едната страна на неравенството.", 
    "Click here to make a new blank expression.": "Кликнете тука за да креирате нов празен израз.", 
    "Last trick!": "Последен трик!", 
    "Send Feedback": "Испрати Feedback", 
    "search by title...": "пребарувај по нас��ов...", 
    "Share this link:": "Сподели го овој линк:", 
    "Please enter your feedback.": "Внесете ги вашите повратни информации.", 
    "functions": "функции", 
    "Mar": "Март", 
    "Language": "Јазик", 
    "May": "Мај", 
    "message sent": "пораката е испратена", 
    "Save As or Rename (ctrl+shift+s)": "Зачувај како или Преименувај (ctrl+shift+s)", 
    "Awesome!": "Прекрасно!", 
    "Sign Out": "Одјави се", 
    "Click back to continue editing.": "Кликнете “назад“ за да продолжите со уредувањето.", 
    "Just fill in one more...": "Пополни уште еден...", 
    "Learn More": "Научи Повеќе", 
    "Use your Email Address": "Искористете ја вашата email адреса", 
    "to save and share your graphs!": "за да ги зачуваш и споделиш твоите графици!", 
    "Name:": "Име:", 
    "Add Item": "Додај елемент", 
    "Click to show the list of expressions.": "Кликнете за приказ на листата со изрази.", 
    "Graph Paper": "Милиметарска хартија", 
    "yesterday": "вчера", 
    "add slider:": "додај лизгач:", 
    "Please provide an email so that we can write back.": "Ве молиме обезбедете email за да можeме да ви одговориме.", 
    "Opened '__graphTitle__'": "Отворен '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Со кликање на \"__btn__,\" вие потврдувате дека ги имате прочитано и се согласувате со нашите __terms_of_use_link__.", 
    "HTML Embed Code": "HTML код за вметнување", 
    "Message: <i>(optional)</i>": "Порака: <i>(опционално)</i>", 
    "Sign In with Desmos": "Најави се со Desmos", 
    "one minute ago": "пред една минута", 
    "Password:": "Лозинка:", 
    "or": "или", 
    "We only support implicit equations of x and y.": "Поддржуваме само имплицитни равенки на x и y.", 
    "Message sent. Please check your email for a password recovery link.": "Пораката е испратена. Ве молиме проверете го вашиот email за линк за обновување на лозинката.", 
    "Email:": "Email:", 
    "enter": "enter", 
    "Let's make some sliders!": "Ајде да направиме неколку лизгачи!", 
    "Go down to the next row to add more data.": "Одете долу кон новиот ред за да додадете повеќе податоци.", 
    "Let's make a function. First: click here to create a new blank expression.": "Ајде да направиме функција. Прво: кликнете тука за да креирате нов празен израз.", 
    "yeah!": "да!"
},"fr":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Fenêtre de connexion bloquée. Autorisez les popups à desmos.com pour vous connecter avec google.", 
    "all": "tous", 
    "Try adding an equals sign to turn this into an equation.": "Essayez d'ajouter un signe \"égal\" pour obtenir une équation.", 
    "Undo (ctrl+z)": "Annuler (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Quel effet a-t-il b sur la fonction g(x)?", 
    "Share your graph with the world!": "Partagez votre graphique avec le monde !", 
    "__number__ minutes ago": "Il y a __number__ minutes", 
    "Let's make a scatter plot!": "Traçons un nuage de points!", 
    "Hide this warning.": "Masquer cet avertissement.", 
    "Nice!": "Joli !", 
    "Nov": "Nov", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "La fonction «__dependency__ » nécessite 1 seul argument. __supplement__", 
    "saved": "Enregistré", 
    "center:": "centré :", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "«__symbols__ » et «__lastSymbol__ » ne peuvent être définis l'un en fonction de l'autre.", 
    "Click to return to this graph.": "Cliquez pour revenir au graphique.", 
    "Press play to animate the slider.": "Cliquez sur play pour animer le curseur.", 
    "Didn't work? Try again!": "Cela n'a pas fonctionné ? Réessayez!", 
    "Now, let's try a new model.": "Maintenant, nous allons essayer un nouveau modèle.", 
    "Tables": "Tableaux", 
    "Table headers must be simple expressions. __supplement__": "Les en-têtes de tableaux doivent être des expressions simples. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Fonction «__symbol__ » nécessite au moins un argument. Par exemple, essayez de taper : __symbol__ (1, 2).", 
    "Function definitions are not allowed.": "Les définitions de fonctions ne sont pas autorisées.", 
    "Too many variables, I don't know what to do with this.": "Trop de variables, je ne sais pas quoi faire avec cela.", 
    "Click here to download Google Chrome.": "Cliquez ici pour télécharger Google Chrome.", 
    "Circle": "Cercle", 
    "Secant Line": "Droite sécante", 
    "Polar Graphing": "Graphique polaire", 
    "Visualizing Slope": "Voir les accroissements de la pente", 
    "How can I change the color?": "Comment peux-je changer la couleur ?", 
    "Fill in the sample data:": "Remplir les données de l'échantillon :", 
    "Grid": "Grille", 
    "List index must not be a list.": "L'index de liste ne doit pas être une liste.", 
    "Invalid height.": "Hauteur non valide.", 
    "Click here to create a new expression.": "Cliquez ici pour créer une nouvelle expression.", 
    "New Password:": "Nouveau mot de passe :", 
    "Failed to find regression coefficients.": "Impossible de trouver les coefficients de régression.", 
    "For example, try typing: __recommendation__.": "Par exemple, essayez de taper : __recommendation__.", 
    "How do I share a link to my graph?": "Comment faire pour partager un lien à mon graphique ?", 
    "Regressions must contain at least one list of data.": "Les régressions doivent contenir au moins une liste de données.", 
    "sending...": "envoi...", 
    "Hide Keypad": "Masquer le clavier", 
    "last week": "La semaine dernière", 
    "Show List": "Voir la liste", 
    "We only plot double inequalities of x and y.": "On ne peut tracer que des doubles inégalités en x et y.", 
    "Nice work &ndash; Keep exploring!": "Beau travail  &ndash; Explorez sans fin !", 
    "Slope Intercept Form": "Forme avec la pente et l'ordonnée à l'origine", 
    "no, thanks": "Non merci", 
    "Recover Password": "Récupérer votre mot de passe", 
    "Terms of Use": "Conditions d'utilisation", 
    "Show Keypad": "Afficher le clavier", 
    "Aug": "Août", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Vous ne pouvez pas utiliser «__dependency__ » comme un paramètre de cette fonction car « __dependency__ » est déjà défini.", 
    "You're a scatter plot whiz!": "Vous êtes un expert en nuages de points !", 
    "Standard Form": "Forme générale", 
    "one hour ago": "Il y a une heure", 
    "You're a slider pro!": "Vous êtes un pro du curseur !", 
    "Delete": "Supprimer", 
    "drag:": "glisser:", 
    "more": "plus", 
    "Point Slope Form": "Forme avec la pente et un point", 
    "How is this app free?": "Pourquoi cette app est-elle gratuite?", 
    "Nice Graph!": "Beau graphique !", 
    "Feedback": "Vos commentaires", 
    "Desmos User Guide": "Guide de l'utilisateur de Desmos", 
    "example": "exemple", 
    "on __month__ __day__, __year__": "Le __month__ __day__, __year__", 
    "Graph Settings": "Paramètres du graphique", 
    "Share Graph": "Partager le graphique", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Les doubles inégalités doivent avoir le même sens. Ex : 1 < y < 2.", 
    "Show Numbers": "Afficher Graduations", 
    "Wave Interference": "Interférence d'onde", 
    "message sent": "message envoyé", 
    "Sign Out": "Se déconnecter", 
    "X-Axis": "Axe des x", 
    "Graph Paper": "Type de papier", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos est en mode aperçu, vous ne pourrez pas enregistrer les graphiques.", 
    "Save Changes (ctrl+s)": "Enregistrer les modifications (ctrl + s)", 
    "Regressions": "Régressions", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "En cliquant sur « __btn__ », vous reconnaissez que vous avez lu et acceptez nos __terms_of_use_link__.", 
    "Sign In with Desmos": "Connectez-vous à l'aide de Desmos", 
    "Password:": "Mot de passe :", 
    "Link to your Google Account": "Lien vers votre compte Google", 
    "Parabolas": "Paraboles", 
    "Email:": "Email :", 
    "enter": "Entrer", 
    "Derivatives": "Dérivées", 
    "Jan": "Janv", 
    "First column may not be __most__ or __last__.": "La première colonne ne peut pas être __most__ ou __last__.", 
    "Translating Any Function": "Traduire n'importe quelle fonction", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Les valeurs résiduelles sont la différence entre vos données et votre modèle. Cliquez ici pour les ajouter à votre tableau et les tracer sur le graphique.", 
    "Oct": "Oct", 
    "Sign In with Google": "Connectez-vous à l'aide de Google", 
    "Just fill in one more...": "Une dernière...", 
    "Untitled Graph": "Graphique sans titre", 
    "... and select the \"table\" option.": "... et sélectionnez l'option « tableau ».", 
    "Points are written like this: (1, 2).": "Les points sont notés ainsi : (1,2).", 
    "New graph created.": "Un nouveau graphique a été créé.", 
    "HTML Embed Code": "Code d'intégration HTML", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Vous avez une seconde pour nous aider ? Votre appréciation et  voscommentaires aident d'autres personnes  à nous trouver et nous aide à améliorer la calculatrice.", 
    "Click to return to your expressions.": "Cliquez pour revenir à vos expressions.", 
    "A B C": "A B C", 
    "enter a note...": "Entrez une remarque...", 
    "Only __form__ is supported. Otherwise, use parens.": "Seulement __form__ est pris en charge. Dans le cas contraire, utilisez les parenthèses.", 
    "Hyperbola": "Hyperbole", 
    "Unsupported Browser": "Navigateur non pris en charge", 
    "Show Grid Angles": "Afficher Angles", 
    "Let's get started!": "C'est parti !", 
    "This is the name we'll use if we feature one of your graphs.": "C'est le nom que nous utiliserons si nous présentons un de vos graphiques.", 
    "We zoomed to fit your data.": "Nous avons zoomé pour s'adapter à vos données.", 
    "FAQs": "Foire aux questions", 
    "Sliders": "Curseurs", 
    "Click anywhere to close the drawing options.": "Cliquez n'importe où pour fermer les options de dessin.", 
    "Print": "Imprimer", 
    "Move right to add a new column.": "Allez à droite pour ajouter une nouvelle colonne.", 
    "Repeat Password:": "Répétez le mot de passe :", 
    "Try graphing a straight line, like __sample_expression__": "Essayez de tracer une droite, telle que__sample_expression__", 
    "Conic Sections": "Sections coniques", 
    "Definitions are nested too deeply.": "Les définitions sont imbriquées trop profondément.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Essayez d'ajouter  '__lhs__' en début d'équation.", 
    "Tangent Line": "Droite tangente", 
    "Period and Amplitude": "Période et ampleur", 
    "Try typing __sample_expression__": "Essayez de taper __sample_expression__", 
    "Apr": "Avr", 
    "sample data": "exemples de données", 
    "Now try pressing Enter.": "Maintenant pressez Enter.", 
    "Lists are not allowed.": "Les listes ne sont pas autorisées.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "La fonction «__dependency__ » requiert les arguments  __assignment_arity__ et __supplement__", 
    "note": "remarque", 
    "Needs work": "Besoin d'être amélioré", 
    "BBCode": "BBCode", 
    "Projector Mode": "Mode projecteur", 
    "just now": "Tout à l'heure", 
    "I just want to graph": "Je veux faire un graphique", 
    "Click here to create a new blank expression.": "Cliquez ici pour ajouter une nouvelle expression vide.", 
    "Range cannot depend on free variable '__symbol__'.": "Le domaine ne peut dépendre d'une variable libre '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos est en Mode Maintenance.", 
    "The file \"__file__\" is not an image": "Le fichier « __file__ » n'est pas une image", 
    "add label": "Etiquette", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Modifier cette équation pour trouver un meilleur ajustement. Essayez, par exemple : <br>__equation__", 
    "__number__ weeks ago": "Il y a __number__ semaines", 
    "Drop Image Here": "Déposer l'Image ici", 
    "Open Graph (ctrl+o)": "Ouvrir un Graphique (ctrl+o)", 
    "What effect does h have on the function g(x)?": "Quel effet a-t-il h sur la fonction g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Essayez d'inclure «__symbols__ » et «__lastSymbol__ » comme arguments en définissant la fonction comme «__newSignature__ ».", 
    "Function '__dependency__' is not defined.": "La fonction '__dependency__' n'est pas définie.", 
    "Restrictions": "Restrictions", 
    "Click here to only show the dots.": "Cliquez ici pour voir seulement les points.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Essayez d'inclure «__lastSymbol__ » comme argument en définissant la fonction comme «__newSignature__ ».", 
    "Send": "Envoyer", 
    "Try typing all of __sample_expression__": "Essayez de tout taper __sample_expression__", 
    "Too complicated. Use parens.": "Trop compliqué.  Utilisez les parenthèses.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos est temporairement en mode maintenance. Vous pouvez ouvrir des exemples de graphiques, mais ne serez pas en mesure de vous connecter, d'ouvrir vos graphiques ou d'enregistrer des modifications. Nous sommes désolés pour la gêne occasionnée.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Merci pour vos commentaires - On vous répond bientôt !", 
    "Sep": "Sept", 
    "Redo (ctrl+y)": "Refaire (ctrl + y)", 
    "__number__ days ago": "Il y a __number__ jours", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos est en mode maintenance, vous ne serez pas en mesure d'enregistrer les modifications de ce graphique. Nous sommes désolés pour le dérangement !", 
    "Cancel": "Annuler", 
    "Send to:": "Envoyer à :", 
    "Open Graph": "Ouvrir un graphique", 
    "Table entries must be simple expressions. __supplement__": "Les valeurs d'un tableau doivent être des expressions simples. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Seules les doubles inégalités sont résolues. Supprimez un côté de l'inégalité.", 
    "Scaling Any Function": "Mise à l'échelle de toute fonction", 
    "Last trick!": "Dernier truc !", 
    "Share this link:": "Partagez ce lien :", 
    "Language": "Langues", 
    "Awesome!": "Impressionnant !", 
    "Click here to generate a table.": "Cliquez ici pour convertir en tableau.", 
    "to save and share your graphs!": "pour enregistrer et partager vos graphiques !", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos fonctionne mieux avec Android si vous utilisez le navigateur Chrome.", 
    "Invalid y coordinate.": "Ordonnée non valide.", 
    "I love it": "J'aime cela", 
    "We'll never share or sell your email address.": "Nous ne partagerons ou vendrons jamais votre adresse email.", 
    "Residuals": "Valeurs résiduelles", 
    "Points are not allowed.": "Les points ne sont pas autorisés.", 
    "Arrows:": "Flèches :", 
    "Edit List": "Editer la liste", 
    "Message sent. Please check your email for a password recovery link.": "Message envoyé. Veuillez vérifier votre adresse mail pour obtenir un lien de récupération de votre mot de passe.", 
    "Please provide an email so that we can write back.": "Veuillez fournir un email afin que nous puissions vous répondre.", 
    "Let's make some sliders!": "En avant pour découvrir les curseurs !", 
    "Go down to the next row to add more data.": "Allez à la ligne suivante pour ajouter davantage de données.", 
    "Let's make a function. First: click here to create a new blank expression.": "Traçons une fonction. Cliquez ici pour créer une nouvelle expression.", 
    "yeah!": "Oui !", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Error: Ligne __rowNum__, Colonne __colNum__ n'est pas un nombre.", 
    "Transformations": "Transformations", 
    "Image upload is not supported in this browser.": "Le téléchargement d'image n'est pas pris en charge par ce navigateur.", 
    "This column header can't be defined elsewhere in the calculator.": "Cet en-tête de colonne ne peut pas être défini ailleurs dans la calculatrice.", 
    "Update Password": "Mettre à jour le mot de passe", 
    "Resources": "Ressources", 
    "Help Center": "Centre d'aide", 
    "Drag the handle to change the value.": "Faites glisser la poignée pour modifier la valeur.", 
    "Undo": "Défaire", 
    "Now type: __equation__": "Maintenant, tapez : __equation__", 
    "What effect does a have on the function g(x)?": "Quel effet a-t-il a sur la fonction g(x)?", 
    "Sign in": "Connectez-vous", 
    "Type any number here.": "Entrez un nombre ici.", 
    "folder": "dossier", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Seules les inégalités ayant une variable au carré ou linéaire sont traçables.", 
    "Send a Copy to Google Drive": "Envoyer une copie sur Google Drive", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Angles", 
    "This message will self-destruct in __seconds__...": "Ce message s'autodétruira dans __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Astuce #2: dans notre clavier __twiddle__ se trouve dans la section « A B C ».", 
    "We don't solve single-variable equations involving lists yet.": "Pour l'instant on ne peut pas résoudre les équations à une variable impliquant des listes.", 
    "Ellipse with Foci": "Ellipses avec foyers", 
    "color:": "couleur :", 
    "... and select the \"expression\" option.": "... et sélectionnez l'option « expression ».", 
    "Help": "Aide", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Astuce : Appuyez sur le bouton de « A B C » du clavier pour trouver les { }", 
    "Nice. Let's check the model.": "Joli. Vérifions le modèle.", 
    "Logged in with Clever!": "Connecté avec Clever!", 
    "This graph has been deleted.": "Ce graphique a été supprimé.", 
    "Invalid width.": "Largeur non valide.", 
    "Create Account": "Créer un compte", 
    "First, let's get some data.": "Tout d'abord, obtenons des données.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos obtient tout son argent par le biais de partenariats. Intéressé par un partenariat avec Desmos ? Écrivez-nous à <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Maintenez appuyez sur le cercle coloré à gauche d'une équation ou d'une expression pour ouvrir la fenêtre des options de style et couleur.", 
    "Learn more": "En savoir plus", 
    "Brilliant!": "Génial !", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Êtes-vous sûr de vouloir quitter ce graphique ? Votre travail non enregistré sera perdu.", 
    "Step:": "Pas :", 
    "Parabola and Focus": "Parabole et Foyer", 
    "Advanced Tables": "Tableaux avancés", 
    "Title:": "Titre :", 
    "Current Password:": "Mot de passe actuel :", 
    "Click here to connect the dots.": "Cliquez ici pour relier les points.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Il y a eu une erreur, veuillez prévenir l'assistance sur desmos.com.  (Error __error_num__)", 
    "Sign In": "Connectez-vous", 
    "Polar Conic Sections": "Sections coniques polaires", 
    "optional": "optionnel", 
    "You haven't written anything yet.": "Vous n'avez encore rien écrit.", 
    "Sorry, we didn't find any graphs with that title.": "Désolé, nous n'avons pas trouvé de graphique avec ce titre.", 
    "Y-Axis": "Axe des y", 
    "Want us to consider featuring it?": "Est-ce que vous voulez l'inclure?", 
    "What effect does k have on the function g(x)?": "Quel effet a-t-il k sur la fonction g(x)?", 
    "Tours": "Visites guidées", 
    "Reflections of a Function": "Réflexion d'une fonction", 
    "expression": "expression", 
    "Close": "Fermer", 
    "send us feedback": "Vos commentaires", 
    "For example, try typing: __dependency__(x).": "Par exemple, essayez de taper : __dependency__(x).", 
    "Unit Circle": "Cercle unité", 
    "powered by": "propulsé par", 
    "table": "tableau", 
    "loading...": "chargement...", 
    "Forgot your password?": "Vous avez oublié votre mot de passe ?", 
    "Calculus": "Analyse", 
    "Click here to add a new table.": "Cliquez ici pour rajouter un nouveau tableau.", 
    "Jun": "Juin", 
    "You're a restrictions star!": "Vous êtes une star des restrictions !", 
    "Jul": "Juil", 
    "Inverse of a Function": "Inverse d'une fonction", 
    "Edit Account": "Éditer le compte", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Il n'est pas (encore!) possible de sauvegarder votre graphique sur cette app. Nous vous recommandons de visiter www.desmos.com/calculator et de vous connecter avec votre compte Desmos si vous souhaitez enregistrer votre graphique.", 
    "Delete All": "Effacer Tout", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Il n'est pas (encore!) possible de sauvegarder votre graphique sur cette app. Nous vous recommandons de visiter www.desmos.com/calculator et de vous connecter avec votre compte Desmos si vous souhaitez enregistrer votre graphique.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinusoïde d'amplitude « a » et de période « b »", 
    "what's this?": "Qu'est-ce que c'est ?", 
    "Done": "Fin", 
    "Desmos Graphing Calculator": "Le grapheur Desmos", 
    "'__symbol__' may not be used as a regression parameter.": "«__symbol__ » ne peut pas être utilisé comme un paramètre de régression.", 
    "Nested lists are not allowed.": "Les listes imbriquées ne sont pas autorisées.", 
    "Sign In with Your Google Account": "Connectez-vous avec votre compte Google", 
    "loading graphs...": "chargement des graphiques...", 
    "Click here to make a new blank expression.": "Cliquez ici pour ajouter une nouvelle expression vide.", 
    "Send Feedback": "Envoyez vos commentaires", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Maintenant, faisons une courbe des valeurs résiduelles.</b><br>Entrer la __residualVariable__ dans une nouvelle colonne du tableau.", 
    "Table created.": "Tableau créé.", 
    "Click back to continue editing.": "Cliquer à nouveau pour continuer l'édition.", 
    "Ranges must be arithmetic sequences.": "Les intervalles doivent être des séquences arithmétiques.", 
    "Enjoying Desmos?": "Vous aimez Desmos?", 
    "Name:": "Nom :", 
    "Add Item": "Ajouter", 
    "Click to show the list of expressions.": "Cliquez pour afficher la liste des expressions.", 
    "Function g(x) is a transformed version of function f(x).": "La fonction g(x) est une version transformée de la fonction f(x).", 
    "Lines": "Droites", 
    "yesterday": "hier", 
    "Hint #1: to get __y_1__ type __y1__.": "Astuce #1: pour obtenir les __y1__ tapez __y_1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "Vous ne pouvez pas redéfinir «__symbol__ », car il est déjà défini.", 
    "How do I save my graph?": "Comment puis-je sauvegarder mon graphique ?", 
    "Opened '__graphTitle__'": "« __graphTitle__ » est ouvert", 
    "Trigonometry": "Trigonométrie", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Désolé, vous ne pouvez pas tracer__symbol__ comme fonction de quoi que ce soit.", 
    "No Unsaved Changes": "Pas de modification non enregistrée", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Seuls __form1__ et  __form2__ sont pris en charge. Dans le cas contraire, l'utilisez les parenthèses.", 
    "one minute ago": "Il y a une minute", 
    "Vertex Form": "Forme canonique", 
    "Other Questions?": "D'autres questions ?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Dirigez-vous vers Google Docs et copiez-collez cette __sample_data_link__.", 
    "Square Grid": "Grille carrée", 
    "style:": "style :", 
    "Ask us on Twitter": "Rejoignez-nous sur Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "La fonction «__dependency__ » nécessite 1 seul argument. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "On ne sait pas encore résoudre les équations complexes à une seule variable.", 
    "__number__ hours ago": "il y a __number__ heures", 
    "Click and hold on this icon until the options menu opens up.": "Cliquez et maintenez sur cette icône jusqu'à ce que le menu options s'ouvre.", 
    "size:": "taille :", 
    "Remembered your password?": "Vous avez retrouvé votre mot de passe ?", 
    "Download the User Guide": "Télécharger le Guide de l'utilisateur", 
    "Go \"Hands-free\"": "\"Sans les mains !\"", 
    "step:": "pas :", 
    "Cannot index into something that is not a list.": "On ne peut pas indexer dans quelque chose qui n'est pas une liste.", 
    "Radians": "Radians", 
    "Let's start with some data!": "Commençons par quelques données !", 
    "Uh-oh! Type a valid number here.": "Oops ! Il faut taper un nombre.", 
    "Use your Email Address": "Utilisez votre adresse mail", 
    "General Form": "Forme générale", 
    "Embed": "Incorporer", 
    "You did not select a file": "Vous n'avez pas sélectionné de fichier", 
    "Standard Form with Tangent": "Forme générale et tangente", 
    "Your Name:": "Votre nom :", 
    "Two Point Form": "Forme avec deux points", 
    "Now click here to add the sliders.": "Maintenant, cliquez ici pour ajouter les curseurs.", 
    "Limacon": "Limaçon", 
    "Click here to add a new item.": "Cliquez ici pour ajouter un nouvel élément.", 
    "Don't forget the \"y=\"!": "N'oubliez pas le \"y =\" !", 
    "Fill in this whole row.": "Remplissez cette ligne entièrement.", 
    "Invalid x coordinate.": "Abscisse non valide.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Maintenant nous allons limiter l'étendue. Ajouter __sample_expression__ à la fin.", 
    "Too many variables. Try defining '__variables__'.": "Il y a trop de variables. Essayez de définir '__variables__'.", 
    "Parameters": "Paramètres", 
    "Update Account": "Mise à jour du compte", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Remarque : vous pouvez ajouter vos propres données en cliquant sur le bouton __plus_icon__.", 
    "Convert this to a table.": "Convertir en tableau.", 
    "Change this equation to __sample_expression__": "Changez cette équation en __sample_expression__", 
    "Email": "Email", 
    "Taylor Expansion of sin(x)": "Développement de Taylor de Sin (x)", 
    "rate it in the app store": "Notez-le dans l'app store", 
    "Now graph: __sample_expression__": "Voilà le graphe de : __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Vous avez défini «__dependency__ » à plusieurs endroits. Essayez de choisir une autre variable, ou de supprimer certaines des définitions de « __dependency__ ».", 
    "All the Trig Functions": "Toutes les fonctions trigonométriques", 
    "We only plot inequalities of x and y, or r and θ.": "Seules les inégalités de x et y, ou de r et θ sont traçables.", 
    "Share your thoughts!": "Partagez vos idées !", 
    "Factored Form": "Forme factorisée", 
    "Fill it in.": "Remplissez-le.", 
    "Sorry, I don't understand this.": "Désolé - je ne comprends pas cela.", 
    "Image": "Image", 
    "Learn More": "Pour en savoir plus", 
    "You can't use '__symbol__' as an index because it's already defined.": "Vous ne pouvez pas utiliser «__symbol__ » comme indice car il est déjà défini.", 
    "What do you want '__symbol__' to equal?": "A quoi voulez-vous que  '__symbol__' soit égal?", 
    "add slider:": "Ajouter un curseur :", 
    "or": "ou", 
    "Does not compute to constant.": "Ne calcule pas la constante.", 
    "New Blank Graph": "Nouveau graphique vide", 
    "Feb": "Fév", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restreignez le domaine de cette droite en ajoutant __sample_expression__ à la fin.", 
    "image": "image", 
    "Duplicate": "Dupliquer", 
    "Statistics": "Statistiques", 
    "Degrees": "Degrés", 
    "Hide List": "Masquer la liste", 
    "Start by graphing a function.": "Commencez par tracer une fonction.", 
    "Intercept Form": "Forme avec les coordonnées à l'origine", 
    "Tell us on Facebook": "Facebook", 
    "Inequalities are not allowed.": "Les inégalités ne sont pas autorisées.", 
    "Click here to continue editing this table.": "Cliquez ici pour continuer la modification de ce tableau.", 
    "Click the \"Edit List\" button.": "Cliquez sur le bouton « Editer la liste ».", 
    "Dec": "Déc", 
    "Convert to Table": "Convertir en tableau", 
    "Variable '__dependency__' can't be used as a function.": "La variable  '__dependency__' ne peut être utilisée comme nom de fonction.", 
    "Polar equations must be linear in r.": "Les équations polaires doivent être linéaires en r.", 
    "Move the parabola.": "Déplacez la parabole.", 
    "You're a table wizard!": "Vous êtes un magicien des tableaux !", 
    "Polar Rose": "Rosace polaire", 
    "Save (ctrl+s)": "Enregistrer (ctrl + s)", 
    "search by title...": "recherche par titre...", 
    "Logarithmic Spiral": "Spirale logarithmique", 
    "type your question or suggestion...": "tapez une question ou une suggestion...", 
    "functions": "Fonctions", 
    "Mar": "Mars", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Astuce : vous pouvez taper y = x ^ 2, ou utiliser la touche <sup>2</sup> sur le clavier ci-dessous.", 
    "May": "Mai", 
    "Save As or Rename (ctrl+shift+s)": "Enregistrer sous ou Renommer (ctrl + Maj + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "On ne peut pas tracer θ comme une fonction de r. Essayez plutôt de tracer r(θ).", 
    "Please enter your email address. We will send a password recovery link to you.": "Veuillez entrer votre adresse e-mail. Nous vous enverrons un lien de récupération de votre mot de passe.", 
    "Visiting anonymously from Clever.": "Visiteur anonyme de Clever.", 
    "Equations are not allowed.": "Les équations ne sont pas autorisées.", 
    "Phase": "Phase", 
    "Link to Google": "Connectez-vous à l'aide de Google", 
    "Message: <i>(optional)</i>": "Message: <i>(optionnel)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Cliquez sur l'icône à côté de chaque fonction trigonométrique pour l'activer ou la désactiver :", 
    "Please enter your feedback.": "Veuillez saisir vos commentaires s'il vous plaît.", 
    "We only support implicit equations of x and y.": "Seules les fonctions implicites de x et de y sont traçables.", 
    "Error signing in with Clever.": "Erreur lors de la signature avec Clever."
},"he":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "חלון הכניסה חסום. בבקשה אפשר חלונות קופצים מ desmos.com על מנת להיכנס באמצעות Google.", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "שגיאה: שורה __rowNum__, עמודה __colNum__ הוא לא מספר.", 
    "all": "כולם", 
    "Hyperbola": "היפרבולה", 
    "center:": "מרכז:", 
    "Image upload is not supported in this browser.": "העלאת תמונות לא נתמכת בדפדפן אינטרנט זה.", 
    "style:": "סגנון:", 
    "Show Grid Angles": "הצג זוויות רשת", 
    "Jan": "ינואר", 
    "Try adding an equals sign to turn this into an equation.": "תנסו להוסיף סימן שוויון על מנת להפוף ביטוי זה למשוואה.", 
    "Please enter your email address. We will send a password recovery link to you.": "אנא הזן את כתובת הדוא\"ל שלך. אנו נשלח לך קישור לשחזור הסיסמה.", 
    "Undo (ctrl+z)": "בטל (ctrl + z)", 
    "This column header can't be defined elsewhere in the calculator.": "כותרת העמודה לא יכולה להיות מוגדרת במקום אחר במחשבון.", 
    "Update Password": "עדכון סיסמה", 
    "Share your graph with the world!": "שתף את הגרף שלך עם העולם!", 
    "Oct": "אוקטובר", 
    "Sign In with Google": "היכנס באמצעות Google", 
    "We don't solve complicated single-variable equations yet.": "אנחנו לא פותרים משוואות מורכבות של משתנה אחד, עדיין.", 
    "Help Center": "מרכז תמיכה", 
    "__number__ hours ago": "לפני __number__ שעות", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "דסמוס במצב הצגת נתונים, לכן אין ביכולתך לשמור כרגע גרפים.", 
    "Click and hold on this icon until the options menu opens up.": "לחץ והחזק על אייקון זה עד שתפריט ' אפשרויות ' יפתח.", 
    "Hide this warning.": "הסתר אזהרה זו.", 
    "Undo": "ביטול", 
    "Untitled Graph": "גרף ללא שם", 
    "Now type: __equation__": "עתה הקלד: __equation__", 
    "Parabola and Focus": "פרבולה והמוקד שלה", 
    "Nice!": "נחמד!", 
    "... and select the \"table\" option.": "... ובחר באפשרות \"טבלה\".", 
    "Remembered your password?": "נזכרת בסיסמה?", 
    "Grid": "רשת", 
    "Go \"Hands-free\"": "\"ללא ידיים\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "אנו תומכים בשירטוט אי שיוויונים כאשר משתנה אחד הוא ריבועי או לינארי.", 
    "step:": "מרווח:", 
    "Share Graph": "שתף גרף", 
    "Tweet @desmos": "צייץ @desmos", 
    "Projector Mode": "מצב מקרן", 
    "Points are written like this: (1, 2).": "קואורדינטות צריכות להיכתב בצורה כזו: (1,2).", 
    "Advanced Tables": "טבלאות מתקדמות", 
    "Parameters": "פרמטרים", 
    "This message will self-destruct in __seconds__...": "הודעה זו תשמיד את עצמה בעוד  __seconds__...", 
    "X-Axis": "ציר ה-X", 
    "Radians": "רדיאנים", 
    "New graph created.": "גרף חדש נוצר.", 
    "Let's start with some data!": "בואו נתחיל עם קצת נתונים!", 
    "Uh-oh! Type a valid number here.": "אוי ואבוי! הקלד כאן מספר תקין.", 
    "Phase": "מופע", 
    "We don't solve single-variable equations involving lists yet.": "אנחנו עוד לא פותרים משוואות עם משתנה אחד הכוללים רשימות.", 
    "example": "דוגמה", 
    "drag:": "גרור:", 
    "Ellipse with Foci": "אליפסה והמוקדים שלה", 
    "Link to your Google Account": "קישור לחשבון Google שלך", 
    "Embed": "הטמע", 
    "color:": "צבע:", 
    "Click to return to your expressions.": "לחץ כדי לחזור למשוואות שלך.", 
    "A B C": "A B C", 
    "... and select the \"expression\" option.": "... ובחר את אופצית ה\"ביטוי\".", 
    "Ask us on Twitter": "שאל אותנו ב Twitter", 
    "You did not select a file": "לא בחרת קובץ", 
    "Click to return to this graph.": "לחץ כדי לחזור הגרף הזה.", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "דסמוס עובד במיטבו על גרסת האנדרויד שלך אם הנך משתמש בדפדפן קרום.", 
    "Nice. Let's check the model.": "נהדר, בואו נבדוק את המודל.", 
    "add slider:": "הוסף מחוון:", 
    "Update Account": "עדכון חשבון", 
    "Drop Image Here": "הכנס תמונה לכאן", 
    "Current Password:": "הסיסמה הנוכחית:", 
    "Now click here to add the sliders.": "עכשיו, לחץ כאן כדי להוסיף מחוון.", 
    "Send a Copy to Google Drive": "שמור עותק ב-Google Drive", 
    "Conic Sections": "חתכי חרוט", 
    "Press play to animate the slider.": "לחץ על החץ כדי להריץ את המחוון.", 
    "Click here to add a new item.": "לחץ כאן כדי להוסיף פריט חדש.", 
    "First column may not be __most__ or __last__.": "עמודה ראשונה לא תיתכן כ__most__ או כ__last__.", 
    "Fill in this whole row.": "השלימו את השורה.", 
    "Invalid width.": "רוחב בלתי כשיר.", 
    "Invalid x coordinate.": "קואורדינטות X בלתי כשירות.", 
    "All the Trig Functions": "כל הפונקציות הטריגונומטריות", 
    "Unsupported Browser": "דפדפן אינטרנט אינו נתמך", 
    "Create Account": "יצירת חשבון", 
    "First, let's get some data.": "בראשונה, בואו נשיג נתונים.", 
    "Too many variables. Try defining '__variables__'.": "יותר מידי משתנים, תנסו להגדיר __variables__.", 
    "what's this?": "מה זה?", 
    "Table headers must be simple expressions. __supplement__": "כותרות הטבלה חייבות להיות ביטוים פשוטים. __supplement__", 
    "Let's get started!": "בוא נתחיל!", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "ערכו משוואה זו על מנת למצוא התאמה יותר טובה. תנסו, לדוגמה: <br>__equation__", 
    "Function definitions are not allowed.": "הדגרות פונקציה לא מורשות.", 
    "Convert this to a table.": "המר את זה לטבלה.", 
    "Too many variables, I don't know what to do with this.": "יותר מידי משתנים, אני לא יודע מה לעשות במצב זה.", 
    "Logarithmic Spiral": "ספירלה לוגריתמית", 
    "Send": "שלח", 
    "FAQs": "שאלות הנשאלות בתחיפות", 
    "Sliders": "מחוונים", 
    "Change this equation to __sample_expression__": "שנה את המשוואה ל- __sample_expression__", 
    "Click anywhere to close the drawing options.": "לחץ במקום כלשהו כדי לסגור את אפשרויות הציור.", 
    "Print": "הדפסה", 
    "Move right to add a new column.": "זוז ימינה כדי להוסיף עמודה חדשה.", 
    "Circle": "מעגל", 
    "Email": "דוא\"ל", 
    "Taylor Expansion of sin(x)": "פיתוח טיילור של sin(x)", 
    "saved": "נשמר", 
    "Your Name:": "שמך:", 
    "Feedback": "משוב", 
    "Brilliant!": "מבריק!", 
    "Now graph: __sample_expression__": "עכשיו תשרטט: __sample_expression__", 
    "Repeat Password:": "אישור סיסמא:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "האם אתה בטוח שברצונך לעזוב את הגרף הזה? עבודה לא שמורה תאבד.", 
    "Save (ctrl+s)": "שמור (ctrl + s)", 
    "Try graphing a straight line, like __sample_expression__": "התחל בקו ישר, כמו __sample_expression__", 
    "__number__ minutes ago": "לפני __number__ דקות", 
    "Fill in the sample data:": "מלאו את דוגמית הנתונים:", 
    "Type any number here.": "הקלד כאן מספר כלשהו.", 
    "Resources": "משאבים", 
    "List index must not be a list.": "אינדקס רשימתי אינו יכול להיות רשימה.", 
    "Invalid height.": "גובה בלתי כשיר.", 
    "Title:": "כותרת:", 
    "sending...": "שולח...", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "הגדרתם את __dependency__ ביותר ממקום אחד. תנסו לבחור משתנה שונה או למחוק חלק מן ההגדרות של __dependency__.", 
    "Now, let's try a new model.": "עכשוי, בואו ננסה מודל חדש.", 
    "New Password:": "סיסמה חדשה:", 
    "We only plot inequalities of x and y, or r and θ.": "אנחנו רק משרטטים אי-שיוויון של x ו- y, או r ו θ.", 
    "Click here to generate a table.": "לחץ כאן כדי ליצור טבלה.", 
    "Try adding '__lhs__' to the beginning of this equation.": "תנסו להוסיף __lhs__ לתחילת משוואה זו.", 
    "Share your thoughts!": "חלוק מחשבותיך!", 
    "Duplicate": "שכפל", 
    "Click here to connect the dots.": "לחץ כאן כדי לחבר את הנקודות.", 
    "Click here to create a new expression.": "לחץ כאן כדי ליצור משוואה חדשה.", 
    "Didn't work? Try again!": "לא עבד? נסה שוב!", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "הגבל את התחום של הקו על-ידי הוספת __sample_expression__ בסוף.", 
    "last week": "בשבוע שעבר", 
    "We'll never share or sell your email address.": "אנחנו לעולם לא נשתף או נמכור את כתובת הדואר האלקטרוני שלך.", 
    "Fill it in.": "מלאו את זה.", 
    "Don't forget the \"y=\"!": ". אל תשכח \"=y\"!", 
    "Show List": "הצג רשימה", 
    "type your question or suggestion...": "הקלד שאלה או הצעה...", 
    "optional": "לא חובה", 
    "one hour ago": "לפני שעה", 
    "Nice work &ndash; Keep exploring!": "עבודה טובה &ndash; תמשיכו לחקור!", 
    "You haven't written anything yet.": "עוד לא הקלדת דבר.", 
    "Try typing __sample_expression__": "נסה להקליד __sample_expression__", 
    "Apr": "אפריל", 
    "Sorry, I don't understand this.": "מצטער, אני לא מבין את זה.", 
    "Image": "תמונה", 
    "__number__ weeks ago": "לפני __number__ שבועות", 
    "no, thanks": "לא, תודה", 
    "Now try pressing Enter.": "כעת נסה ללחוץ על Enter.", 
    "Recover Password": "שחזור סיסמה", 
    "Want us to consider featuring it?": "האם תרצה שנשקול להציג את זה?", 
    "folder": "תיקייה", 
    "Tours": "הדר��ות", 
    "on __month__ __day__, __year__": "ב-  __month__ __day__, __year__", 
    "Lists are not allowed.": "רשימות לא מורשות.", 
    "You're a slider pro!": "אתה מומחה למחוונים!", 
    "Terms of Use": "תנאי שימוש", 
    "Show Keypad": "הצד מקלדת", 
    "expression": "משוואה", 
    "Drag the handle to change the value.": "גרור את נקודת האחיזה כדי לשנות את הערך.", 
    "Angles": "זוויות", 
    "Does not compute to constant.": "הביטוי לא מתחשב לקבוע.", 
    "New Blank Graph": "גרף ריק חדש", 
    "Feb": "פברואר", 
    "BBCode": "BBCode", 
    "Aug": "אוגוסט", 
    "Tables": "טבלאות", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "אתם לא יכולים להשתמש ב__dependency__ כפרמטר של פונקציה זו מכיוון ש__dependency__ כבר מוגדר.", 
    "image": "תמונה", 
    "Sign In": "הירשם", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "משהו השתבש, אנא דווח לתמיכה של desmos.com. (שגיאה: __error_num__)", 
    "Unit Circle": "מעגל היחידה", 
    "just now": "ממש עכשיו", 
    "Open Graph (ctrl+o)": "פתח גרף (ctrl + o)", 
    "Link to Google": "קישור ל- Google", 
    "Click here to create a new blank expression.": "לחץ כאן כדי ליצור משוואה חדשה ריקה.", 
    "Statistics": "סטטיסטיקות", 
    "Degrees": "מעלות", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "עכשיו בוא נגביל את הטווח. הוסף __sample_expression__ בסוף.", 
    "You're a scatter plot whiz!": "ואוו! אתה יודע להכין טבלאות נתונים!", 
    "Desmos is in Maintenance Mode.": "Desmos בעבודות תחזוקה.", 
    "table": "טבלה", 
    "Add Item": "הוסף פריט", 
    "loading...": "טוען...", 
    "Forgot your password?": "שכחת את הסיסמא שלך?", 
    "The file \"__file__\" is not an image": "הקובץ \"__file__\" הוא לא קובץ נתמך", 
    "add label": "הוסף תווית", 
    "Click here to add a new table.": "לחץ כאן על מנת להוסיף טבלה חדשה.", 
    "Start by graphing a function.": "התחל על ידי כתיבת פונקציה.", 
    "What do you want '__symbol__' to equal?": "מה אתם רוצים __symbol__ להשוות?", 
    "Jun": "יוני", 
    "You're a restrictions star!": "אתה כוכב ההגבלות!", 
    "Jul": "יולי", 
    "Let's make a scatter plot!": "בוא נעשה טבלת ערכים!", 
    "Period and Amplitude": "זמן מחזור ומשרעת", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "הנכם מוזמנים להוסיף נתונים משלכם במקום, על ידי לחיצה את כפתור ה __plus_icon__.", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "אין דרך לשמור את הגרף שלך דרך האפליקציה (עדיין!). אנחנו ממליצים לך לבקר בכתובת www.desmos.com/calculator, ולהתחבר לחשבון הדסמוס שלך אם אתה רוצה לשמור את הגרף שלך.", 
    "Inequalities are not allowed.": "אי-שיוויונות לא מורשים.", 
    "Function '__dependency__' is not defined.": "הפונקציה '__dependency__' אינה מוגדרת.", 
    "Restrictions": "הגבלות", 
    "Click here to continue editing this table.": "לחץ כאן כדי להמשיך בעריכה הטבלה הזאת.", 
    "Click here to only show the dots.": "לחץ כאן כדי להראות נקודות בלבד.", 
    "Click the \"Edit List\" button.": "לחץ על הלחצן \"ערוך רשימה\".", 
    "Sign in": "התחבר", 
    "Delete All": "מחק הכל", 
    "Click here to download Google Chrome.": "לחץ כאן על מנת להריד את דפדפן האינטרנט קרום.", 
    "You can't use '__symbol__' as an index because it's already defined.": "אתם לא יכולים להשתמש ב __symbol__ כאינדקס מכיוון שהוא כבר מוגדר.", 
    "Sorry, we didn't find any graphs with that title.": "מצטערים, לא מצאנו שום גרף עם השם הזה.", 
    "This graph has been deleted.": "גרף זה נמחק.", 
    "Hide Keypad": "הסתר מקלדת", 
    "Download the User Guide": "הורד כעת את מדריך המשתמשים", 
    "Try typing all of __sample_expression__": "נסה להקליד את כל __sample_expression__", 
    "Use your Email Address": "השתמש בכתובת הדוא\"ל שלך", 
    "Dec": "דצמבר", 
    "Nov": "נובמבר", 
    "Edit List": "ערוך רשימה", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "גל סינוס עם משרעת \"a\" וזמן מחזור \"b\"", 
    "message sent": "ההודעה נשלחה", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos נמצא באופן זמני במצב תחזוקה. אתה יכול לפתוח את הגרפים לדוגמה, אבל לא תוכל להיכנס, לפתוח את הגרפים, או לשמור את השינויים . אנחנו מצטערים על אי הנוחות.", 
    "Nice Graph!": "גרף יפה!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "תודה על המשוב - תשמע מאיתנו בקרוב!", 
    "Open Graph": "פתח גרף", 
    "Sep": "ספטמבר", 
    "Convert to Table": "המר לטבלה", 
    "Redo (ctrl+y)": "בצע שוב (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "משתנה '__dependency__' אינו יכול לשמש כפונקציה.", 
    "__number__ days ago": "לפני __number__ ימים", 
    "Edit Account": "ערוך חשבון", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos במצב תחזוקה, לא תוכל לשמור שינויים בגרף הזה.  אנחנו מצטערים על אי הנוחות!", 
    "Desmos User Guide": "מדריך למשתמש", 
    "note": "הערה", 
    "Learn more": "למד עוד", 
    "Done": "בוצע", 
    "Desmos Graphing Calculator": "Desmos מחשבון גרפי", 
    "sample data": "דגימת נתונים", 
    "Cancel": "ביטול", 
    "more": "עוד", 
    "Send to:": "שלח אל:", 
    "Nested lists are not allowed.": "רשימות מקוננות אינן מורשות.", 
    "Show Numbers": "הצג מספרים", 
    "Move the parabola.": "הזז את הפרבולה.", 
    "Hide List": "הסתר את הרשימה", 
    "Y-Axis": "ציר ה-Y", 
    "Tell us on Facebook": "ספר לנו על זה בפייסבוק", 
    "You're a table wizard!": "אתה אשף טבלאות!", 
    "Table entries must be simple expressions. __supplement__": "קליטות הטבלה חייבות להיות ביטוים פשוטים. __supplement__", 
    "Sign In with Your Google Account": "היכנס באמצעות חשבון Google שלך", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "אנחנו תומכים רק אי-שוויונים כפולים פתורים. נסה למחוק צד אחד מהאי-שוויון.", 
    "Please provide an email so that we can write back.": "נא ספק דואר אלקטרוני כך אנחנו יכולים לענות.", 
    "Help": "עזרה", 
    "Click here to make a new blank expression.": "לחץ כאן כדי ליצור ביטוי משוואה ריקה.", 
    "Last trick!": "טריק אחרון!", 
    "Send Feedback": "שלח משוב", 
    "search by title...": "חיפוש לפי שם...", 
    "Share this link:": "שתף את הקישור הזה:", 
    "Please enter your feedback.": "הזן בבקשה את המשוב שלך.", 
    "loading graphs...": "טוען גרפים...", 
    "Other Questions?": "שאלות נוספות?", 
    "functions": "פונקציות", 
    "Mar": "מרץ", 
    "Table created.": "טבלה נוצרה.", 
    "Language": "שפה", 
    "No Unsaved Changes": "אין שינוים בלתי שמורים", 
    "May": "מאי", 
    "Tangent Line": "ישר משיק", 
    "Save As or Rename (ctrl+shift+s)": "שמירה בשם או שינוי שם (ctrl + shift + s)", 
    "Awesome!": "מגניב!", 
    "Sign Out": "צא", 
    "Click back to continue editing.": "לחץ \"חזור\" כדי להמשיך בעריכה.", 
    "Just fill in one more...": "מלא רק עוד אחד...", 
    "Learn More": "למידע נוסף", 
    "Equations are not allowed.": "משוואות לא מורשות.", 
    "Ranges must be arithmetic sequences.": "טווחים חייבים להיות רצף אריתמטי.", 
    "to save and share your graphs!": "לשמור ולשתף את הגרפים שלך!", 
    "Name:": "שם:", 
    "Delete": "מחק", 
    "Click to show the list of expressions.": "לחץ כדי להציג את רשימת המשוואות.", 
    "Graph Paper": "הגדרות הרשת", 
    "Invalid y coordinate.": "קואורדינטות Y בלתי כשירות.", 
    "This is the name we'll use if we feature one of your graphs.": "זה השם בו נשתמש אם נרצה להציג את אחד הגרפים שלך", 
    "Graph Settings": "הגדרות גרף", 
    "enter": "הכנס", 
    "Lines": "ישרים", 
    "yesterday": "אתמול", 
    "Hint #1: to get __y_1__ type __y1__.": "רמז #1: כדי לקבל __y_1__ הקלד __y1__.", 
    "Points are not allowed.": "קואורדינטות לא מורשות.", 
    "You can't redefine '__symbol__' because it's already defined.": "אתם לא יכולים להגדיר מחדש את __symbol__, הוא כבר מוגדר.", 
    "Range cannot depend on free variable '__symbol__'.": "טווח לא יכול להיות תלוי במשתנה החופשי __symbol__.", 
    "Opened '__graphTitle__'": "'__graphTitle__' נפתח", 
    "Save Changes (ctrl+s)": "שמירת שינוים (ctrl+s)", 
    "Trigonometry": "טריגונומטריה", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "מצטער, אתם עוד לא יכולים לפרוס על גרף את __symbol__ כפונקציה של משהו.", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "על ידי לחיצה על \"__btn__\", אתה מכיר בעובדה כי קראת והסכמת ל__terms_of_use_link__ שלנו.", 
    "HTML Embed Code": "הטמע קוד HTML", 
    "How do I save my graph?": "איך לשמור את הגרף?", 
    "Arrows:": "חצים:", 
    "Message: <i>(optional)</i>": "הודעה: <i>(אופציונלי)</i>", 
    "Square Grid": "רשת רבועה", 
    "size:": "גודל:", 
    "Sign In with Desmos": "היכנס באמצעות Desmos", 
    "one minute ago": "לפני דקה אחת", 
    "Password:": "סיסמה:", 
    "or": "או", 
    "Parabolas": "פרבולות", 
    "We only support implicit equations of x and y.": "אנחנו תומכים רק משוואות מרומזות של x ו-y.", 
    "Message sent. Please check your email for a password recovery link.": "ההודעה נשלחה. אנא בדוק את הדואר האלקטרוני שלך לשחזור הסיסמה.", 
    "Email:": "דוא\"ל:", 
    "How can I change the color?": "איך אפשר לשנות את הצבע?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "לכו לGoogle Docs ותעתיקו ותדביקו את זה: __sample_data_link__.", 
    "Let's make some sliders!": "בואו נעשה כמה מחוונים!", 
    "Go down to the next row to add more data.": "רד אל השורה הבאה כדי להוסיף נתונים נוספים.", 
    "Let's make a function. First: click here to create a new blank expression.": "בואו נכין פונקציה. בתור התחלה: לחץ כאן כדי ליצור משוואה חדשה ריקה.", 
    "yeah!": "כן!"
},"sv-SE":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Inloggningsfönstret blockerades. Tillåt popups från desmos.com för att logga in med Google.", 
    "Derivatives": "Derivator", 
    "all": "alla", 
    "Hyperbola": "Hyperbel", 
    "Ellipse with Foci": "Ellips med fokuspunkter", 
    "Needs work": "Kan förbättras", 
    "Image upload is not supported in this browser.": "Bilduppladdning stöds inte i denna webbläsare.", 
    "style:": "utseende:", 
    "Jan": "Jan", 
    "Try adding an equals sign to turn this into an equation.": "Prova att lägga ett likhetstecken att göra detta till en ekvation.", 
    "Please enter your email address. We will send a password recovery link to you.": "Vänligen fyll i din e-postadress. Vi kommer skicka dig en länk så att du kan återställa ditt lösenord.", 
    "Undo (ctrl+z)": "Ångra (ctrl + z)", 
    "This column header can't be defined elsewhere in the calculator.": "Denna kolumnrubrik får inte vara definierad någon annanstans.", 
    "Update Password": "Uppdatera lösenord", 
    "Sign Out": "Logga ut", 
    "Share your graph with the world!": "Dela din graf med världen!", 
    "Oct": "Okt", 
    "Sign In with Google": "Logga in med Google", 
    "We don't solve complicated single-variable equations yet.": "Vi kan inte lösa komplicerade singel-variabel ekvationer ännu.", 
    "Dec": "Dec", 
    "__number__ hours ago": "__number__ timmar sen", 
    "Click and hold on this icon until the options menu opens up.": "Klicka och håll på den här ikonen tills att menyn för alternativ öppnas.", 
    "send us feedback": "skicka oss respons", 
    "Hide this warning.": "Dölj denna varning.", 
    "Undo": "Ångra", 
    "Unsupported Browser": "Webbläsaren stöds ej", 
    "Untitled Graph": "Namnlös graf", 
    "Now type: __equation__": "Skriv nu: __equation__", 
    "Nice!": "Snyggt!", 
    "... and select the \"table\" option.": "...och välj \"tabell\".", 
    "sending...": "skickar...", 
    "Grid": "Rutnät", 
    "Go \"Hands-free\"": "Gå \"Hands-free\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Vi kan bara rita olikheter när en variabel är kvadratisk eller linjär.", 
    "step:": "steg:", 
    "How do I save my graph?": "Hur sparar jag min graf?", 
    "Tweet @desmos": "Twittra  @desmos", 
    "Projector Mode": "Projektor-läge", 
    "Points are written like this: (1, 2).": "Punkter skrivs så här: (1, 2).", 
    "Angles": "Vinklar", 
    "Parameters": "Parametrar", 
    "This message will self-destruct in __seconds__...": "Detta meddelande kommer självförstöras inom __seconds__...", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Funktionen \"__dependency__\" kräver endast 1 argument. __supplement__", 
    "Radians": "Radianer", 
    "New graph created.": "Ny graf skapad.", 
    "Uh-oh! Type a valid number here.": "Ånej! Skriv ett giltigt tal här.", 
    "We don't solve single-variable equations involving lists yet.": "Vi kan ännu inte lösa ekvationer i en variabel som innehåller listor.", 
    "example": "exempel", 
    "drag:": "dra:", 
    "General Form": "Standardform", 
    "Link to your Google Account": "Koppla till ditt Google-konto", 
    "Embed": "Bädda in", 
    "color:": "färg:", 
    "Click to return to your expressions.": "Klicka för att komma tillbaka till uttrycket.", 
    "Title:": "Titel:", 
    "A B C": "A B C", 
    "Ask us on Twitter": "Fråga oss på Twitter", 
    "You did not select a file": "Du valde inte en fil", 
    "Click to return to this graph.": "Klicka för att komma tillbaka till grafen.", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Tips: Tryck på \"A B C\"-knappen på tangentbordet för att hitta knappar för { }", 
    "Name:": "Namn:", 
    "Nice. Let's check the model.": "Snyggt. Nu tittar vi på modellen.", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos fungerar bäst på din version av Android om du använder Chrome som webbläsare.", 
    "Two Point Form": "Tvåpunktsform", 
    "enter a note...": "skriv en anteckning ...", 
    "Current Password:": "Nuvarande lösenord:", 
    "We'll never share or sell your email address.": "Vi kommer aldrig att dela eller sälja din e-postadress.", 
    "Now click here to add the sliders.": "Klicka här för att lägga till ett reglage.", 
    "Send a Copy to Google Drive": "Skicka en kopia till Google Drive", 
    "Add Item": "Lägg till objekt", 
    "Press play to animate the slider.": "Tryck på play för att animera reglaget.", 
    "Click here to add a new item.": "Klicka här för att lägga till ett nytt objekt.", 
    "First column may not be __most__ or __last__.": "Första kolumnen får inte vara __most__ eller __last__.", 
    "Fill in this whole row.": "Fyll i hela denna rad.", 
    "Invalid width.": "Ogiltig bredd.", 
    "Invalid x coordinate.": "ogiltig x koordinat.", 
    "All the Trig Functions": "Alla trigonometriska funktioner", 
    "Period and Amplitude": "Period och amplitud", 
    "Create Account": "Skapa ett konto", 
    "Too many variables. Try defining '__variables__'.": "För många variabler. Försök att definiera \"__variables__\".", 
    "Vertex Form": "Vertexform", 
    "Table headers must be simple expressions. __supplement__": "Tabellrubriker måste vara enkla uttryck. __supplement__", 
    "Let's get started!": "Låt oss komma igång!", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Redigera den här ekvationen för att hitta en bättre anpassning. Testa till exempel:<br>__equation__", 
    "Sorry, we didn't find any graphs with that title.": "Tyvärr, vi inte hittade några grafer med den titeln.", 
    "Update Account": "Uppdatera konto", 
    "Function definitions are not allowed.": "Definitioner av funktioner är inte tillåtna.", 
    "Convert this to a table.": "Konvertera detta till en tabell.", 
    "Too many variables, I don't know what to do with this.": "För många variabler. Jag vet inte vad jag ska göra med detta.", 
    "Click here to download Google Chrome.": "Klicka här för att ladda ner Google Chrome.", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Tryck och håll på den färgade cirkeln till vänster om en ekvation eller ett uttryck för att komma åt inställningar för utseende och färg.", 
    "FAQs": "Vanliga frågor", 
    "Sliders": "Reglage", 
    "Change this equation to __sample_expression__": "Ändra den här ekvationen till __sample_expression__", 
    "Click anywhere to close the drawing options.": "Klicka var som helst för att stänga ritnings alternativen.", 
    "Print": "Skriv ut", 
    "Move right to add a new column.": "Flytta till höger för att lägga till en ny kolumn.", 
    "Circle": "Cirkel", 
    "Secant Line": "Sekant", 
    "Email": "E-post", 
    "Taylor Expansion of sin(x)": "Taylorutveckling av sin(x)", 
    "Visualizing Slope": "Lutning med trappsteg", 
    "rate it in the app store": "betygsätt den i app store", 
    "Feedback": "Feedback", 
    "Brilliant!": "Lysande!", 
    "Now graph: __sample_expression__": "Rita nu en graf av: __sample_expression__", 
    "Repeat Password:": "Upprepa lösenord:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Är du säker på att du vill lämna den här grafen? Ditt osparade arbete kommer att försvinna.", 
    "Save (ctrl+s)": "Spara (ctrl+s)", 
    "Try graphing a straight line, like __sample_expression__": "Försök att skriva en funktion som ger en rak linje, t.ex. __sample_expression__", 
    "__number__ minutes ago": "__number__ minuter sen", 
    "Parabola and Focus": "Parabel och fokuspunkt", 
    "Type any number here.": "Skriv vilket tal som helst här.", 
    "Resources": "Resurser", 
    "Advanced Tables": "Avancerade tabeller", 
    "Invalid height.": "Ogiltig höjd.", 
    "Edit List": "Redigera lista", 
    "Logged in with Clever!": "Inloggad med Clever!", 
    "Conic Sections": "Kägelsnitt", 
    "Now, let's try a new model.": "Nu ska vi prova en ny modell.", 
    "New Password:": "Nytt lösenord:", 
    "Failed to find regression coefficients.": "Det gick inte att hitta någon regressionskoefficient.", 
    "We only plot inequalities of x and y, or r and θ.": "Vi kan bara rita in olikheter av x och y, eller r och θ.", 
    "Click here to generate a table.": "Klicka här för att generera en tabell.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Försök att lägga till '__lhs__' i början av den här ekvationen.", 
    "Share your thoughts!": "Dela dina tankar!", 
    "Duplicate": "Duplicera", 
    "Click here to connect the dots.": "Klicka här för att ansluta prickar.", 
    "How do I share a link to my graph?": "Hur delar jag en länk till min graf?", 
    "Regressions must contain at least one list of data.": "Regressioner måste innehålla minst en lista med data.", 
    "Click here to create a new expression.": "Klicka här för att skapa ett nytt uttryck.", 
    "Didn't work? Try again!": "Fungerade det inte? Försök igen!", 
    "last week": "förra veckan", 
    "Factored Form": "Faktorform", 
    "Fill it in.": "Fylla i den.", 
    "I just want to graph": "Jag vill bara rita grafer", 
    "Help Center": "Hjälpcenter", 
    "Square Grid": "Rutnät", 
    "Don't forget the \"y=\"!": "Glöm inte \"y =\"!", 
    "Show List": "Visa lista", 
    "type your question or suggestion...": "Skriv din fråga eller ditt förslag...", 
    "optional": "frivilligt", 
    "one hour ago": "en timme sen", 
    "Nice work &ndash; Keep exploring!": "Bra jobbat &ndash; fortsätt att utforska!", 
    "You haven't written anything yet.": "Du har inte skrivit något ännu.", 
    "Try typing __sample_expression__": "Försök att skriva __sample_expression__", 
    "Enjoying Desmos?": "Gillar du Desmos?", 
    "Apr": "Apr", 
    "Sorry, I don't understand this.": "Beklagar, jag förstår inte.", 
    "Image": "Bild", 
    "__number__ weeks ago": "__number__ veckor sen", 
    "no, thanks": "Nej, tack", 
    "Now try pressing Enter.": "Prova nu att trycka på RETUR.", 
    "Recover Password": "Återställ lösenord", 
    "Want us to consider featuring it?": "Vill du att vi ska överväga att visa upp den?", 
    "folder": "mapp", 
    "Tours": "Guider", 
    "on __month__ __day__, __year__": "På __day__ __month__, __year__", 
    "Lists are not allowed.": "Listor är inte tillåtna.", 
    "You're a slider pro!": "Du är en pro reglagare!", 
    "Terms of Use": "Villkor för användning", 
    "Show Keypad": "Visa tangentbordet", 
    "expression": "uttryck", 
    "Drag the handle to change the value.": "Dra i reglaget för att ändra värdet.", 
    "Drop Image Here": "Släpp bild här", 
    "Does not compute to constant.": "Beräknas inte till konstant.", 
    "Y-Axis": "Y-axeln", 
    "New Blank Graph": "Skapa en ny graf", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Aug", 
    "Tables": "Tabeller", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Begränsa linjens omfång genom att lägga till __sample_expression__ på slutet.", 
    "image": "bild", 
    "Sign In": "Logga in", 
    "For example, try typing: __dependency__(x).": "Prova till exempel att skriva: __dependency__(x).", 
    "Unit Circle": "Enhetscirkeln", 
    "just now": "just nu", 
    "Open Graph (ctrl+o)": "Öppna graf (ctrl+o)", 
    "Link to Google": "Koppla till Google", 
    "Click here to create a new blank expression.": "Klicka här för att skapa ett nytt tomt uttryck.", 
    "Statistics": "Statistik", 
    "Degrees": "Grader", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Nu ska vi begränsa grafens område. Lägg till __sample_expression__ i slutet av ekvationen.", 
    "You're a scatter plot whiz!": "Du är en sambandsdiagramsgud!", 
    "Desmos is in Maintenance Mode.": "Desmos är i underhållsläge.", 
    "table": "tabell", 
    "Standard Form": "Allmän form", 
    "loading...": "laddar...", 
    "Forgot your password?": "Har du glömt ditt lösenord?", 
    "Calculus": "Analys", 
    "The file \"__file__\" is not an image": "Filen \"__file__\" är inte en bild", 
    "add label": "lägg till etikett", 
    "Click here to add a new table.": "Klicka här för att infoga en ny tabell.", 
    "Start by graphing a function.": "Börja genom att skriva en funktion.", 
    "What do you want '__symbol__' to equal?": "Vad vill du att '__symbol__' ska vara lika med?", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Du är en begränsnings stjärna!", 
    "Jul": "Jul", 
    "Trigonometry": "Trigonometri", 
    "X-Axis": "X-axeln", 
    "Let's make a scatter plot!": "Låt oss göra ett sambandsdiagram!", 
    "Intercept Form": "Interceptform", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Försök att ta med \"__symbols__\" och \"__lastSymbol__\" som argument genom att definiera funktionen som \"__newSignature__\".", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Obs: du kan lägga till dina egna data i stället genom att klicka på knappen __plus_icon__.", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Det går inte att spara grafer i appen (ännu!). Vi rekommenderar dig att besöka www.desmos.com/calculator och logga in med ditt Desmoskonto om du vill spara din graf.", 
    "Inequalities are not allowed.": "Olikheter är inte tillåtna.", 
    "Function '__dependency__' is not defined.": "Funktionen '__dependency__' är inte definierad.", 
    "Restrictions": "Begräns-ningar", 
    "Click here to continue editing this table.": "Klicka här för att fortsätta redigera tabellen.", 
    "Click here to only show the dots.": "Klicka här för att bara visa prickar.", 
    "Point Slope Form": "Enpunktsform", 
    "We zoomed to fit your data.": "Vi har anpassat fönstret till dina data.", 
    "Click the \"Edit List\" button.": "Klicka på knappen \"Redigera lista\".", 
    "Sign in": "Logga in", 
    "Delete All": "Ta bort alla", 
    "How is this app free?": "Hur kan appen vara gratis?", 
    "Your Name:": "Ditt namn:", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Försök att ta med '__lastSymbol__' som ett argument genom att definiera funktionen som '__newSignature__'.", 
    "This graph has been deleted.": "Denna graf har tagits bort.", 
    "Send": "Skicka", 
    "Hide Keypad": "Göm tangentbordet", 
    "Try typing all of __sample_expression__": "Försök att skriva allt av __sample_expression__", 
    "Too complicated. Use parens.": "För komplicerat. Använd parenteser.", 
    "Nov": "Nov", 
    "Message: <i>(optional)</i>": "Meddelande: <i>(valfritt)</i>", 
    "message sent": "Meddelandet har skickats", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos är tillfälligt i underhållsläge. Du kan öppna exempel grafer, men du kommer inte kunna logga in, öppna dina grafer eller spara några ändringar. Vi ursäktar för besväret.", 
    "Nice Graph!": "Snygg graf!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Tack för din feedback &ndash; Vi kommer att höra av oss snart!", 
    "Open Graph": "Öppna Graf", 
    "Sep": "Sep", 
    "Convert to Table": "Konvertera till tabell", 
    "Redo (ctrl+y)": "Gör om (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Variabeln '__dependency__' kan inte användas som en funktion.", 
    "__number__ days ago": "__number__ dagar sen", 
    "Edit Account": "Redigera konto", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos är just nu i underhållsläge, du kommer inte spara ändringar till den här grafen. Vi ursäktar för besväret!", 
    "Desmos User Guide": "Desmos Användarguide", 
    "note": "anteckning", 
    "Learn more": "Ta reda på mer", 
    "Done": "Färdig", 
    "Desmos Graphing Calculator": "Desmos Grafräknare", 
    "sample data": "exempeldata", 
    "Cancel": "Avbryt", 
    "Close": "Stäng", 
    "more": "mer", 
    "Step:": "Steg:", 
    "Send to:": "Skicka till:", 
    "Nested lists are not allowed.": "Nästlade listor är inte tillåtna.", 
    "Show Numbers": "Visa tal", 
    "Move the parabola.": "Flytta parabolen.", 
    "Hide List": "Dölj lista", 
    "Slope Intercept Form": "k-form", 
    "Tell us on Facebook": "Skriv till oss på Facebook", 
    "You're a table wizard!": "Du är en tabell gud!", 
    "Share Graph": "Dela graf", 
    "Sign In with Your Google Account": "Logga in med ditt Google-konto", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Vi stöder endast lösta dubbla olikheter. Försöka ta bort ena sidan av olikheten.", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Dubbla olikhetstecken måste båda vara riktade åt samma håll, som 1 < y < 2.", 
    "Help": "Hjälp", 
    "Click here to make a new blank expression.": "Klicka här för att skapa ett nytt tomt uttryck.", 
    "Last trick!": "Sista tricket!", 
    "Send Feedback": "Skicka Feedback", 
    "search by title...": "Sök efter titel...", 
    "Share this link:": "Dela den här länken:", 
    "Please enter your feedback.": "Vänligen skriv in din feedback.", 
    "loading graphs...": "laddar grafer...", 
    "Other Questions?": "Andra frågor?", 
    "functions": "funktioner", 
    "Mar": "Mar", 
    "Table created.": "Tabell skapades.", 
    "Language": "Språk", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Tips: Du kan skriva y=x^2, eller använda a<sup>2</sup> knappen på knappsatsen nedan.", 
    "Delete": "Radera", 
    "May": "Maj", 
    "Tangent Line": "Tangent", 
    "HTML Embed Code": "HTML Embed Code", 
    "Save As or Rename (ctrl+shift+s)": "Spara som eller byt namn (Ctrl + Shift + S)", 
    "saved": "sparade", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "Vi kan inte avbilda θ som en funktion av r. Försök att rita r(θ) i stället.", 
    "Awesome!": "Fantastiskt!", 
    "Visiting anonymously from Clever.": "Besöker anonymt från Clever.", 
    "Click back to continue editing.": "Gå tillbaka för att fortsätta att redigera.", 
    "Just fill in one more...": "Bara fyll i en till...", 
    "Learn More": "Lär dig mer", 
    "Equations are not allowed.": "Ekvationer är inte tillåtna.", 
    "Use your Email Address": "Använda din e-postadress", 
    "Remembered your password?": "Kommer du ihåg ditt lösenord?", 
    "to save and share your graphs!": "för att spara och dela dina grafer!", 
    "Standard Form with Tangent": "Allmän form med tangent", 
    "Only __form__ is supported. Otherwise, use parens.": "Bara __form__ stöds. I annat fall, använd parenteser.", 
    "Click to show the list of expressions.": "Klicka för att visa listan av uttryck.", 
    "Graph Paper": "Rutat papper", 
    "Invalid y coordinate.": "Ogiltig y koordinat.", 
    "This is the name we'll use if we feature one of your graphs.": "Det här är namnet vi kommer att använda om vi väljer att visa upp din graf.", 
    "I love it": "Jag älskar det", 
    "Graph Settings": "Grafinställningar", 
    "enter": "Retur", 
    "Lines": "Linjer", 
    "yesterday": "igår", 
    "Hint #1: to get __y_1__ type __y1__.": "Ledtråd 1: för att få __y_1__, skriv __y1__.", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos är i förhandsvisningsläge, så du inte kommer att kunna spara grafer.", 
    "Please provide an email so that we can write back.": "Vänligen, skriv in en e-postadress så att vi kan skriva till dig.", 
    "add slider:": "Lägg till reglage:", 
    "Points are not allowed.": "Punkter är inte tillåtna.", 
    "Opened '__graphTitle__'": "Öppnade '__graphTitle__'", 
    "Save Changes (ctrl+s)": "Spara ändringar (ctrl+s)", 
    "Regressions": "Regressionsanalys", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Tyvärr kan du inte rita __symbol__ som en funktion av något än.", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Genom att klicka på \"__btn__\", bekräftar du att du har läst och accepterar våra __terms_of_use_link__.", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Ledtråd 2: __twiddle__ hittar du i \"A B C\"-delen av vårt skärmtangentbord.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Något gick fel, vänligen rapportera detta till demos.com support. (Fel __error_num__)", 
    "Arrows:": "Pilar:", 
    "No Unsaved Changes": "Inga osparade ändringar", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Bara __form1__ och __form2__ stöds. Använd i annat fall parenteser.", 
    "size:": "storlek:", 
    "Sign In with Desmos": "Logga in med Desmos", 
    "one minute ago": "en minut sen", 
    "Password:": "Lösenord:", 
    "or": "eller", 
    "Parabolas": "Parabler", 
    "We only support implicit equations of x and y.": "Vi stöder bara implicita ekvationer av x och y.", 
    "Message sent. Please check your email for a password recovery link.": "Meddelande skickat. Vänligen kontrollera din e-post efter en länk för att återställa ditt lösenord.", 
    "Email:": "E-post:", 
    "How can I change the color?": "Hur kan jag ändra färg?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Fortsätt till Google Docs och kopiera och klistra in denna __sample_data_link__.", 
    "Let's make some sliders!": "Låt oss göra några reglage!", 
    "what's this?": "Vad är det här?", 
    "Error signing in with Clever.": "Fel vid inloggning med Clever.", 
    "Go down to the next row to add more data.": "Gå ner till nästa rad för att lägga till mer data.", 
    "Let's make a function. First: click here to create a new blank expression.": "Nu ska vi skapa en funktion. Först: Klicka här för att skapa ett nytt tomt uttryck.", 
    "yeah!": "Ja!"
},"bg":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Входът е блокиран! Моля, позволете изскачащите прозорци от desmos.com за да влезете с Google.", 
    "all": "всичкo", 
    "style:": "стил:", 
    "Jan": "януари", 
    "Please enter your email address. We will send a password recovery link to you.": "Моля въведете своя имейл адрес. Ние ще Ви изпратим връзка за възстановяване на парола.", 
    "Undo (ctrl+z)": "Назад (ctrl + z)", 
    "Update Password": "Актуализиране на парола", 
    "Share your graph with the world!": "Споделете вашата графика със света!", 
    "Oct": "октомври", 
    "Sign In with Google": "Влезте с Google", 
    "We don't solve complicated single-variable equations yet.": "Ние не решаваме сложни уравнения  на една променлива все още.", 
    "__number__ hours ago": "__number__ часа преди", 
    "Click and hold on this icon until the options menu opens up.": "Натиснете и задръжте върху тази икона, докато се отвори менюто с опции.", 
    "Undo": "Отмени", 
    "Untitled Graph": "Неозаглавена графика", 
    "Nice!": "Хубаво!", 
    "... and select the \"table\" option.": "... и изберете опцията \"таблица\".", 
    "Remembered your password?": "Запомнихте ли паро��ата си?", 
    "Go \"Hands-free\"": "Отидете на \"Свободни ръце\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Можем да изобразим неравенство, само когато променливата е квадратна или линейна.", 
    "step:": "стъпка:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Това съобщение ще се самоунищожи след __seconds__...", 
    "Radians": "Радиани", 
    "New graph created.": "Новата графика е създадена.", 
    "Uh-oh! Type a valid number here.": "О-о! Въведете валидно число тук.", 
    "center:": "център:", 
    "Link to your Google Account": "Линк към профила си в Google", 
    "Embed": "За вграждане", 
    "color:": "цвят:", 
    "Click to return to your expressions.": "Щракнете, за да се върнете към Вашите изрази.", 
    "Help": "Помощ", 
    "A B C": "А B C", 
    "Click to return to this graph.": "Щракнете, за да се върнете към тази графика.", 
    "Your Name:": "Твоето име:", 
    "Update Account": "Актуализиране на акаунт", 
    "Duplicate": "Дубликат", 
    "Current Password:": "Текуща парола:", 
    "Now click here to add the sliders.": "Сега щракнете тук, за да добавите плъзгачите.", 
    "Press play to animate the slider.": "Натиснете play за да анимирате плъзгача.", 
    "Click here to add a new item.": "Щракнете тук, за да добавите нов елемент.", 
    "Don't forget the \"y=\"!": "Не забравяйте \"y =\"!", 
    "Fill in this whole row.": "Попълнете целия ред.", 
    "Create Account": "Създай профил", 
    "Tables": "Таблици", 
    "what's this?": "Какво е това?", 
    "Let's get started!": "Нека да започнем!", 
    "This is the name we'll use if we feature one of your graphs.": "Това е името, което ще използваме, ако ние покажем една от вашите графики.", 
    "Convert this to a table.": "Конвертирай в таблица.", 
    "Send": "Изпрати", 
    "Sliders": "Плъзгачи", 
    "Change this equation to __sample_expression__": "Променете това уравнение на __sample_expression__", 
    "Click anywhere to close the drawing options.": "Щракнете някъде, за да затворите опциите за чертане.", 
    "Print": "Печат", 
    "Move right to add a new column.": "Преместете надясно, за да добавите нова колона.", 
    "Email": "Имейл", 
    "saved": "записани", 
    "Brilliant!": "Брилянтен!", 
    "Now graph: __sample_expression__": "Сега постройте графиката: __sample_expression__", 
    "Repeat Password:": "Повторете парола:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Наистина ли искате да напуснете тази графика? Вашата незаписана работа ще бъде загубена.", 
    "Try graphing a straight line, like __sample_expression__": "Опитайте построяване на графика на права линия, като __sample_expression__", 
    "__number__ minutes ago": "__number__ минути", 
    "Type any number here.": "Въведете произволно число тук.", 
    "Resources": "Ресурси", 
    "Advanced Tables": "Разширени таблици", 
    "example": "пример", 
    "Title:": "Заглавие:", 
    "sending...": "Изпращане на...", 
    "New Password:": "Нова парола:", 
    "We only plot inequalities of x and y, or r and θ.": "Ние чертаем само неравенства на x и y или r и θ.", 
    "Click here to generate a table.": "Щракнете тук, за да се генерира таблица.", 
    "loading graphs...": "Зареждане на графики...", 
    "Click here to connect the dots.": "Щракнете тук, за да свържете точките.", 
    "Click here to create a new expression.": "Щракнете тук, за да създадете нов израз.", 
    "Didn't work? Try again!": "Не работи? Опитайте отново!", 
    "last week": "миналата седмица", 
    "We'll never share or sell your email address.": "Ние никога не споделяме или продаваме вашия имейл адрес.", 
    "Fill it in.": "Попълнете!", 
    "Sign In": "Влизане", 
    "optional": "по избор", 
    "Delete": "Изтриване", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Нещо се обърка, моля свържете се с поддръжка на desmos.com. (Грешка __error_num__)", 
    "Delete All": "Изтрий всички", 
    "Try typing __sample_expression__": "Опитайте да въведете __sample_expression__", 
    "Apr": "април", 
    "Image": "Изображение", 
    "Start by graphing a function.": "Започнете с построяване на графика на функция.", 
    "no, thanks": "Не, благодаря", 
    "Now try pressing Enter.": "Сега опитайте да натиснете Enter.", 
    "Recover Password": "Възстановяване на парола", 
    "Want us to consider featuring it?": "Искате ли мнението ни?", 
    "folder": "папка", 
    "Tours": "Разходки", 
    "Open Graph": "Отваряне на графика", 
    "type your question or suggestion...": "Въведете вашия въпрос или предложение...", 
    "size:": "размер:", 
    "Terms of Use": "Условия за ползване", 
    "expression": "израз", 
    "Drag the handle to change the value.": "Плъзнете манипулатора за промяна на стойността.", 
    "New Blank Graph": "Нова празна графика", 
    "Feb": "февруари", 
    "BBCode": "BBCode", 
    "Aug": "август", 
    "This graph has been deleted.": "Тази графика е изтрита.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ограничаване на областта на този ред чрез добавяне на __sample_expression__ до края.", 
    "image": "изображение", 
    "Projector Mode": "Режим за проектор", 
    "Send a Copy to Google Drive": "Изпрати копие до Google Drive", 
    "just now": "точно сега", 
    "Open Graph (ctrl+o)": "Зареждане на графика (ctrl + o)", 
    "Link to Google": "Връзка към Google", 
    "Click here to create a new blank expression.": "Щракнете тук, за да създадете нов празен израз.", 
    "Degrees": "Градуси", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Сега нека да ограничим диапазона. Добавете __sample_expression__ към края.", 
    "You're a scatter plot whiz!": "Вие сте майстор на точковите графики!", 
    "Desmos is in Maintenance Mode.": "Desmos е в режим на поддръжка.", 
    "table": "таблица", 
    "loading...": "зареждане...", 
    "Forgot your password?": "Забравили сте паролата си?", 
    "Hide List": "Скрий списъка", 
    "one hour ago": "преди един час", 
    "__number__ weeks ago": "__number__ седмици преди", 
    "You're a slider pro!": "Вие сте слайдер професионалист!", 
    "Jun": "юни", 
    "You're a restrictions star!": "Вие сте майстор на ограниченията!", 
    "Jul": "юли", 
    "Let's make a scatter plot!": "Нека да направим точкова графика!", 
    "Edit Account": "Редактиране на профила", 
    "more": "още", 
    "Function '__dependency__' is not defined.": "Функцията '__dependency__' не е дефинирана.", 
    "Restrictions": "Ограничения", 
    "Click here to continue editing this table.": "Щракнете тук, за да продължите редактирането на тази таблица.", 
    "Click here to only show the dots.": "Щракнете тук, за да се показват само точки.", 
    "Click the \"Edit List\" button.": "Щракнете върху бутона \"Редактиране на списък\".", 
    "Sign in": "Влизане", 
    "Sorry, we didn't find any graphs with that title.": "За съжаление, не намерихме никакви графики с това заглавие.", 
    "Try typing all of __sample_expression__": "Опитайте да въведете всичко на __sample_expression__", 
    "Dec": "декември", 
    "Nov": "ноември", 
    "Edit List": "Редактиране на списък", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos временно е в режим на поддръжка. Можете да отворите примерни графики, но няма да можете да влезете, да отворите графики или запишете промените. Ние много съжаляваме за неудобството.", 
    "Nice Graph!": "Хубава графика!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Благодаря за мнението &ndash; ще се свържем с Вас скоро!", 
    "Feedback": "Обратна връзка", 
    "Sep": "септември", 
    "Convert to Table": "Конвертиране към таблица", 
    "Redo (ctrl+y)": "Напред (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Променливата '__dependency__' не може да се използва като функция.", 
    "__number__ days ago": "преди __number__ дни", 
    "Tell us on Facebook": "Кажете ни на Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos е в режим на поддръжка, не можете да запишете промените в тази графика. Ние много съжаляваме за неудобството!", 
    "Desmos User Guide": "Ръководство за потребителя Desmos", 
    "Done": "Готово!", 
    "Desmos Graphing Calculator": "Desmos графичен калкулатор", 
    "Cancel": "Отказ", 
    "Send to:": "Изпрати до:", 
    "on __month__ __day__, __year__": "на __month__ __day__, __year__", 
    "Move the parabola.": "Преместете параболата.", 
    "Save (ctrl+s)": "Записване (ctrl + s)", 
    "You're a table wizard!": "Вие сте съветникът за таблица!", 
    "Share Graph": "Споделяне графика", 
    "Sign In with Your Google Account": "Влезте с профила в Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Можем да поддържаме само двойни неравенства. Опитайте да изтриете едната страна на неравенството.", 
    "Click here to make a new blank expression.": "Щракнете тук, ��а да направите нов празен израз.", 
    "Last trick!": "Последен трик!", 
    "Send Feedback": "Изпрати обратна връзка", 
    "search by title...": "Търсене по заглавие...", 
    "Share this link:": "Сподели този линк:", 
    "Please enter your feedback.": "Моля, въведете вашето мнение.", 
    "functions": "функции", 
    "Mar": "март", 
    "Language": "Език", 
    "May": "май", 
    "message sent": "съобщението е изпратено", 
    "Save As or Rename (ctrl+shift+s)": "Запиши като...  или преименуване (ctrl + shift + s)", 
    "Awesome!": "Жестоко!", 
    "Sign Out": "Излизане", 
    "Click back to continue editing.": "Щракнете върху ''назад'', за да продължите редактирането.", 
    "Just fill in one more...": "Просто попълнете още един...", 
    "Learn More": "Научете повече", 
    "Use your Email Address": "Използвайте вашия имейл адрес", 
    "to save and share your graphs!": "за да запишете и споделяте вашите графики!", 
    "Name:": "Име:", 
    "Add Item": "Добавяне на елемент", 
    "Click to show the list of expressions.": "Щракнете, за да покажете списък с изрази.", 
    "Graph Paper": "Милиметрова хартия", 
    "yesterday": "вчера", 
    "add slider:": "Добавяне на плъзгач:", 
    "Please provide an email so that we can write back.": "Моля, посочете имейл, така че да Ви пишем обратно.", 
    "Opened '__graphTitle__'": "Отвори '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Като щракнете върху \"__btn__,\" вие потвърждавате, че сте прочели и приемате нашите __terms_of_use_link__.", 
    "HTML Embed Code": "HTML код за вграждане", 
    "Message: <i>(optional)</i>": "Съобщение: <i>(или)</i>", 
    "Sign In with Desmos": "Влезте с Desmos", 
    "one minute ago": "преди една минута", 
    "Password:": "Парола:", 
    "or": "или", 
    "We only support implicit equations of x and y.": "Поддържаме само имплицитни уравнения на x и y.", 
    "Message sent. Please check your email for a password recovery link.": "Съобщението е изпратено. Моля, проверете електронната си поща за връзка за възстановяване на парола.", 
    "Email:": "Имейл:", 
    "enter": "enter", 
    "Let's make some sliders!": "Да направим няколко плъзгачи!", 
    "Go down to the next row to add more data.": "Отидете на следващия ред, за да добавите още данни.", 
    "Let's make a function. First: click here to create a new blank expression.": "Нека да направим функция. Първо: кликнете тук за да създадете нов празен израз.", 
    "yeah!": "Браво!"
},"nl":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Het aanmeldvenster is geblokkeerd.\nSta pop-ups van desmos.com toe om via Google aan te melden.", 
    "all": "allemaal", 
    "Try adding an equals sign to turn this into an equation.": "Probeer een gelijkteken toe te voegen om hier een vergelijking van te maken.", 
    "Undo (ctrl+z)": "Ongedaan maken (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Welk effect heeft b op de functie g(x)?", 
    "Share your graph with the world!": "Uw grafiek delen met de wereld!", 
    "__number__ minutes ago": "__number__ minuten geleden", 
    "Let's make a scatter plot!": "Laten we een puntenwolk gaan maken!", 
    "Hide this warning.": "Verberg deze waarschuwing.", 
    "Nice!": "Mooi!", 
    "Nov": "nov", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Functie '__dependency__' heeft slechts 1 argument nodig. __supplement__", 
    "saved": "opgeslagen", 
    "center:": "Midden:", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' en '__lastSymbol__' kunnen niet in elkaar worden uitgedrukt.", 
    "Click to return to this graph.": "Klik om naar deze tekening terug te gaan.", 
    "Press play to animate the slider.": "Druk op afspelen om de schuifregelaar te animeren.", 
    "Didn't work? Try again!": "Werkte het niet? Probeer opnieuw!", 
    "Now, let's try a new model.": "Laten we eens een nieuw model proberen.", 
    "Tables": "Tabellen", 
    "Table headers must be simple expressions. __supplement__": "Tabelkoppen moet enkelvoudige expressies zijn. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Functie '__symbol__' vereist ten minste één argument. Probeer bijvoorbeeld: __symbol__(1, 2).", 
    "Function definitions are not allowed.": "Functiedefinities zijn niet toegestaan.", 
    "Too many variables, I don't know what to do with this.": "Te veel variabelen, ik weet niet wat ik hiermee moet doen.", 
    "Click here to download Google Chrome.": "Klik hier om Google Chrome te downloaden.", 
    "Circle": "Cirkel", 
    "Secant Line": "Snijlijn", 
    "Polar Graphing": "Poolcoördinaten", 
    "Visualizing Slope": "Visualiseren van de helling", 
    "How can I change the color?": "Hoe kan ik de kleur veranderen?", 
    "Fill in the sample data:": "Vul de voorbeeldgegevens in:", 
    "Grid": "Rooster", 
    "List index must not be a list.": "Lijstindex mag geen lijst zijn.", 
    "Invalid height.": "Ongeldige hoogte.", 
    "Click here to create a new expression.": "Klik hier om een nieuwe expressie te maken.", 
    "New Password:": "Nieuw wachtwoord:", 
    "Failed to find regression coefficients.": "Het is niet gelukt om regressiecoëfficiënten te vinden.", 
    "For example, try typing: __recommendation__.": "Bijvoorbeeld, probeer: __recommendation__.", 
    "How do I share a link to my graph?": "Hoe deel ik een link naar mijn grafiek?", 
    "Regressions must contain at least one list of data.": "Regressies moeten ten minste één lijst van gegevens bevatten.", 
    "sending...": "Aan het verzenden...", 
    "Hide Keypad": "Verberg toetsenbord", 
    "last week": "vorige week", 
    "Show List": "Toon lijst", 
    "We only plot double inequalities of x and y.": "We kunnen alleen dubbele ongelijkheden van x en y tekenen.", 
    "Nice work &ndash; Keep exploring!": "Goed werk &ndash; ga verder met verkennen!", 
    "Slope Intercept Form": "Helling en beginwaarde", 
    "no, thanks": "Nee, bedankt", 
    "Recover Password": "Wachtwoord herstellen", 
    "Terms of Use": "Gebruiksvoorwaarden", 
    "Show Keypad": "Toon toetsenbord", 
    "Aug": "aug", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Je kan '__dependency__' niet gebruiken als een parameter van deze functie omdat '__dependency__' al is gedefinieerd.", 
    "You're a scatter plot whiz!": "Je bent een specialist in puntenwolken!", 
    "Standard Form": "Standaardvorm", 
    "one hour ago": "een uur geleden", 
    "You're a slider pro!": "Je bent een schuifregelaar-pro!", 
    "Delete": "Verwijderen", 
    "drag:": "sleep:", 
    "more": "meer", 
    "Point Slope Form": "Punt en helling", 
    "How is this app free?": "Hoe kan het dat deze app gratis is?", 
    "Nice Graph!": "Leuke grafiek!", 
    "Feedback": "Feedback", 
    "Desmos User Guide": "Gebruikershandleiding van Desmos", 
    "example": "voorbeeld", 
    "on __month__ __day__, __year__": "op __day__ __month__, __year__", 
    "Graph Settings": "Grafiekinstellingen", 
    "Share Graph": "Grafiek delen", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Dubbele ongelijkheden moeten allebei dezelfde kant op staan, bijvoorbeeld 1< y < 2.", 
    "Show Numbers": "Toon getallen", 
    "Wave Interference": "Golfinterferentie", 
    "message sent": "bericht is verzonden", 
    "Sign Out": "Afmelden", 
    "X-Axis": "X-as", 
    "Graph Paper": "Grafiekpapier", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos is in de modus Afdrukvoorbeeld, zodat je geen grafieken kan opslaan.", 
    "Save Changes (ctrl+s)": "Sla wijzigingen op (ctrl + s)", 
    "Regressions": "Regressies", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Door te klikken op \"__btn__\", erkent u dat u onze __terms_of_use_link__ hebt gelezen en accepteert.", 
    "Sign In with Desmos": "Meld aan met Desmos-account", 
    "Password:": "Wachtwoord:", 
    "Link to your Google Account": "Koppelen aan uw Google-Account", 
    "Parabolas": "Parabolen", 
    "Email:": "E-mail:", 
    "enter": "Enter", 
    "Derivatives": "Afgeleiden", 
    "Jan": "jan", 
    "First column may not be __most__ or __last__.": "Eerste kolom mag niet __most__ of __last__ zijn.", 
    "Translating Any Function": "Transformeren van een willekeurige functie", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Residuen zijn het verschil tussen je gegevens en je model. Klik hier om ze aan je tabel toe te voegen in de grafiek te tekenen.", 
    "Oct": "okt", 
    "Sign In with Google": "Meld aan met Google", 
    "Just fill in one more...": "Nog ééntje...", 
    "Untitled Graph": "Ongetitelde grafiek", 
    "... and select the \"table\" option.": "... en selecteer de optie \"tabel\".", 
    "Points are written like this: (1, 2).": "Punten worden op deze manier geschreven: (1, 2).", 
    "New graph created.": "Nieuwe grafiek gemaakt.", 
    "HTML Embed Code": "HTML Invoegcode", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Heeft u misschien even om ons te helpen? Uw beoordelingen en feedback helpt zodat andere mensen ons vinden, en het helpt ons om de rekenmachine beter te maken.", 
    "Click to return to your expressions.": "Klik om terug te keren naar uw expressies.", 
    "A B C": "A B C", 
    "enter a note...": "Voeg aantekening toe...", 
    "Only __form__ is supported. Otherwise, use parens.": "Alleen __form__ wordt ondersteund; anders moet je haakjes gebruiken.", 
    "Hyperbola": "Hyperbool", 
    "Unsupported Browser": "Niet-ondersteunde browser", 
    "Show Grid Angles": "Toon rasterhoeken", 
    "Let's get started!": "Laten we beginnen!", 
    "This is the name we'll use if we feature one of your graphs.": "Dit is de naam die we zullen gebruiken als we één van uw grafieken gebruiken.", 
    "We zoomed to fit your data.": "We hebben de schaal aan je gegevens aangepast.", 
    "FAQs": "FAQs", 
    "Sliders": "Schuifre-gelaars", 
    "Click anywhere to close the drawing options.": "Klik ergens anders om de tekenopties te sluiten.", 
    "Print": "Afdrukken", 
    "Move right to add a new column.": "Ga naar rechts om een nieuwe kolom toe te voegen.", 
    "Repeat Password:": "Herhaal wachtwoord:", 
    "Try graphing a straight line, like __sample_expression__": "Probeer een rechte lijn te tekenen, zoals __sample_expression__", 
    "Conic Sections": "Kegelsneden", 
    "Definitions are nested too deeply.": "Definities zijn te diep genest.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Probeer ' __lhs__' aan het begin van deze vergelijking toe te voegen.", 
    "Tangent Line": "Raaklijn", 
    "Period and Amplitude": "Periode en amplitude", 
    "Try typing __sample_expression__": "Probeer __sample_expression__ in te voeren", 
    "Apr": "apr", 
    "sample data": "voorbeeldgegevens", 
    "Now try pressing Enter.": "Druk eens op Enter.", 
    "Lists are not allowed.": "Lijsten zijn niet toegestaan.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Functie '__dependency__' heeft __assignment_arity__ argumenten. __supplement__", 
    "note": "opmerking", 
    "Needs work": "Moet beter", 
    "BBCode": "BBCode", 
    "Projector Mode": "Projector modus", 
    "just now": "daarnet", 
    "Click here to create a new blank expression.": "Klik hier om een nieuwe lege expressie te maken.", 
    "Range cannot depend on free variable '__symbol__'.": "Bereik mag niet afhankelijk zijn vrije variabele '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos is in onderhoud.", 
    "The file \"__file__\" is not an image": "Het bestand \"__file__\" is geen afbeelding", 
    "add label": "Voeg label toe", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Bewerk deze vergelijking om te zoeken naar een betere pasvorm. Probeeer bijvoorbeeld: <br>__equation__", 
    "__number__ weeks ago": "__number__ weken geleden", 
    "Drop Image Here": "Sleep afbeelding hierheen", 
    "Open Graph (ctrl+o)": "Open grafiek (ctrl+o)", 
    "What effect does h have on the function g(x)?": "Welk effect heeft h op de functie g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Probeer '__symbols__' en '__lastSymbol__' toe te voegen als argumenten door de functie als '__newSignature__' te definiëren.", 
    "Function '__dependency__' is not defined.": "Functie '__dependency__' is niet gedefinieerd.", 
    "Restrictions": "Beperkingen", 
    "Click here to only show the dots.": "Klik hier om alleen de puntjes te laten zien.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Probeer '__lastSymbol__' toe te voegen als argument door de functie als '__newSignature__' te definiëren.", 
    "Send": "Verzend", 
    "Try typing all of __sample_expression__": "Probeer alles te typen van __sample_expression__", 
    "Too complicated. Use parens.": "Te moeilijk. Gebruik haakjes.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos is tijdelijk in onderhoud. U voorbeeldgrafieken openen, maar U kan niet inloggen, uw grafieken openen of wijzigingen opslaan. Sorry voor het ongemak.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Bedankt voor de feedback &ndash; u hoort binnenkort van ons!", 
    "Sep": "sep", 
    "Redo (ctrl+y)": "Opnieuw uitvoeren (ctrl + y)", 
    "__number__ days ago": "__number__ dagen geleden", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos is in onderhoud, U kunt geen wijzigingen bewaren in deze grafiek. Sorry voor het ongemak!", 
    "Cancel": "Annuleren", 
    "Send to:": "Verzenden aan:", 
    "Open Graph": "Open grafiek", 
    "Table entries must be simple expressions. __supplement__": "Tabelelementen moeten enkelvoudige uitdrukkingen zijn. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Wij ondersteunen alleen opgeloste dubbele ongelijkheden. Probeer één kant van de ongelijkheid te verwijderen.", 
    "Scaling Any Function": "Vergroten van een willekeurige functie", 
    "Last trick!": "Laatste truc!", 
    "Share this link:": "Deel deze link:", 
    "Language": "Taal", 
    "Awesome!": "Fantastisch!", 
    "Click here to generate a table.": "Klik hier om een tabel te genereren.", 
    "to save and share your graphs!": "om uw grafieken te bewaren en te delen!", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos werkt het beste op jouw versie van Android als je de Chrome Browser gebruikt.", 
    "Invalid y coordinate.": "Ongeldige y-coördinaat.", 
    "I love it": "Ik vind het geweldig", 
    "We'll never share or sell your email address.": "Wij zullen nooit uw e-mailadres delen of verkopen.", 
    "Residuals": "Afwijkingen", 
    "Points are not allowed.": "Punten zijn niet toegestaan.", 
    "Arrows:": "Pijlen:", 
    "Edit List": "Bewerk lijst", 
    "Message sent. Please check your email for a password recovery link.": "Bericht verzonden. Controleer uw e-mail voor een link om het wachtwoord te herstellen.", 
    "Please provide an email so that we can write back.": "Geef alstublieft een e-mailadres zodat we terug kunnen schrijven.", 
    "Let's make some sliders!": "Laten we wat schuifregelaars gaan maken!", 
    "Go down to the next row to add more data.": "Ga naar de volgende rij om meer gegevens toe te voegen.", 
    "Let's make a function. First: click here to create a new blank expression.": "Laten we een functie gaan maken. Klik eerst hier om een nieuwe lege expressie te maken.", 
    "yeah!": "Ja!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Fout: Rij __rowNum__, kolom __colNum__ is geen getal.", 
    "Transformations": "Transformaties", 
    "Image upload is not supported in this browser.": "Uploaden van afbeeldingen wordt niet ondersteund in deze browser.", 
    "This column header can't be defined elsewhere in the calculator.": "Deze kolomkop kan niet elders in de calculator worden gedefinieerd.", 
    "Update Password": "Wachtwoord bijwerken", 
    "Resources": "bestanden", 
    "Help Center": "Help en Ondersteuning", 
    "Drag the handle to change the value.": "Sleep de greep om de waarde te wijzigen.", 
    "Undo": "Ongedaan maken", 
    "Now type: __equation__": "Typ nu: __equation__", 
    "What effect does a have on the function g(x)?": "Welk effect heeft a op de functie g(x)?", 
    "Sign in": "Aanmelden", 
    "Type any number here.": "Typ hier een willekeurig getal.", 
    "folder": "map", 
    "We can only plot inequalities when one variable is quadratic or linear.": "We kunnen alleen ongelijkheden tekenen als één variabele kwadratisch of lineair is.", 
    "Send a Copy to Google Drive": "Stuur een kopie naar Google Drive", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Hoeken", 
    "This message will self-destruct in __seconds__...": "Dit bericht vernietigt zichzelf in __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Tip #2: __twiddle__ zit in ons schermtoetsenbord bij 'A B C'.", 
    "We don't solve single-variable equations involving lists yet.": "Vergelijkingen met één variabele die lijsten gebruiken worden nog niet ondersteund.", 
    "Ellipse with Foci": "Ellips met brandpunten", 
    "color:": "kleur:", 
    "... and select the \"expression\" option.": "... en selecteer de optie \"uitdrukking\".", 
    "Help": "Help", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Tip: druk op de knop 'A B C' op het toetsenbord om de knoppen { } te laten zien", 
    "Nice. Let's check the model.": "Mooi. Laten we het model eens bekijken.", 
    "Logged in with Clever!": "Aangemeld met Clever!", 
    "This graph has been deleted.": "Deze grafiek is verwijderd.", 
    "Invalid width.": "Ongeldige breedte.", 
    "Create Account": "Maak account aan", 
    "First, let's get some data.": "Ten eerste, laten we wat gegevens invoeren.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos verdient geld door middel van partnerschappen. Bent u geïnteresseerd in samenwerking met Desmos? Email ons op <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Raak de gekleurde cirkel aan de linkerkant van een vergelijking of uitdrukking lang aan om de stijl- en kleuropties te openen.", 
    "Learn more": "Meer informatie", 
    "Brilliant!": "Geweldig!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Bent u er zeker van om deze grafiek te verlaten? Uw niet opgeslagen werk wordt verwijderd.", 
    "Step:": "Stapgrootte:", 
    "Parabola and Focus": "Parabool en brandpunt", 
    "Advanced Tables": "Tabellen voor gevorderden", 
    "Title:": "Titel:", 
    "Current Password:": "Huidig wachtwoord:", 
    "Click here to connect the dots.": "Klik hier om de puntjes te verbinden.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Er is Iets verkeerd gegaan, geef dit alstublieft door aan desmos.com support. (Error __error_num__)", 
    "Sign In": "Aanmelden", 
    "Polar Conic Sections": "Polaire kegelsneden", 
    "optional": "optioneel", 
    "You haven't written anything yet.": "Je hebt nog niks opgeschreven.", 
    "Sorry, we didn't find any graphs with that title.": "Sorry, we konden geen grafieken met die titel vinden.", 
    "Y-Axis": "Y-as", 
    "Want us to consider featuring it?": "WIlt U dat wij overwegen om hem in het zonnetje te zetten?", 
    "What effect does k have on the function g(x)?": "Welk effect heeft k op de functie g(x)?", 
    "Tours": "Rondleidingen", 
    "Reflections of a Function": "Spiegelingen van een functie", 
    "expression": "uitdrukking", 
    "Close": "Sluiten", 
    "send us feedback": "Stuur ons uw feedback", 
    "For example, try typing: __dependency__(x).": "Bijvoorbeeld, probeer in te voeren: __dependency__(x).", 
    "Unit Circle": "Eenheidscirkel", 
    "powered by": "mogelijk gemaakt door", 
    "table": "tabel", 
    "loading...": "Aan het laden...", 
    "Forgot your password?": "Wachtwoord vergeten?", 
    "Calculus": "Analyse", 
    "Click here to add a new table.": "Klik hier om een nieuwe tabel toe te voegen.", 
    "Jun": "jun", 
    "You're a restrictions star!": "Je bent een ster in beperkingen!", 
    "Jul": "jul", 
    "Inverse of a Function": "Inversie van een functie", 
    "Edit Account": "Account bewerken", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Er is (nog!) geen manier om je grafiek op te slaan met de app. We raden aan om naar www.desmos.com/calculator te gaan, en daar met je Desmos account in te loggen als je je grafiek op wil slaan.", 
    "Delete All": "Verwijder alle", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Er is (nog!) geen manier om je grafiek te delen met behulp van de app. We raden aan om naar www.desmos.com/calculator te gaan en in te loggen met je Desmos account als je een link naar je grafiek wil delen.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinusoïde met amplitude \"a\" en periode \"b\"", 
    "what's this?": "wat is dit?", 
    "Done": "Klaar", 
    "Desmos Graphing Calculator": "Desmos grafische rekenmachine", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' kan niet als regressieparameter worden gebruikt.", 
    "Nested lists are not allowed.": "Geneste lijsten zijn niet toegestaan.", 
    "Sign In with Your Google Account": "Meld aan met Google-account", 
    "loading graphs...": "grafieken worden geladen...", 
    "Click here to make a new blank expression.": "Klik hier om een nieuwe lege expressie te maken.", 
    "Send Feedback": "Feedback verzenden", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Laten we nu de residuen tekenen.</b><br>Typ __residualVariable__ in een nieuwe tabelkolom.", 
    "Table created.": "Tabel gemaakt.", 
    "Click back to continue editing.": "Klik terug als u wilt doorgaan met bewerken.", 
    "Ranges must be arithmetic sequences.": "Bereiken moet rekenkundige reeksen zijn.", 
    "Enjoying Desmos?": "Vind je Desmos leuk?", 
    "Name:": "Naam:", 
    "Add Item": "Voeg item toe", 
    "Click to show the list of expressions.": "Klik om de lijst van expressies te zien.", 
    "Function g(x) is a transformed version of function f(x).": "Functie g(x) is een getransformeerde versie van functie f(x).", 
    "Lines": "Lijnen", 
    "yesterday": "gisteren", 
    "Hint #1: to get __y_1__ type __y1__.": "Tip #1: om __y_1__ te krijgen voer je __y1__ in.", 
    "You can't redefine '__symbol__' because it's already defined.": "Je kan '__symbol__' niet nogmaals definiëren.", 
    "How do I save my graph?": "Hoe bewaar ik mijn grafiek?", 
    "Opened '__graphTitle__'": "'__graphTitle__' geopend", 
    "Trigonometry": "Goniometrie", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Sorry, je kan __symbol__ nog niet als een grafiek van iets tekenen.", 
    "No Unsaved Changes": "Geen niet-opgeslagen wijzigingen", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Alleen __form1__ en __form2__ worden ondersteund. In alle andere gevallen moet je haakjes gebruiken.", 
    "one minute ago": "een minuut geleden", 
    "Vertex Form": "Met gegeven top", 
    "Other Questions?": "Nog andere vragen?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Ga naar Google Docs en plak daar deze __sample_data_link__.", 
    "Square Grid": "Vierkant rooster", 
    "style:": "stijl:", 
    "Ask us on Twitter": "Vraag het ons op Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "Functie '__dependency__' vereist een argument. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Oplossen van ingewikkelde één-variabele vergelijkingen wordt nog niet ondersteund.", 
    "__number__ hours ago": "__number__ uren geleden", 
    "Click and hold on this icon until the options menu opens up.": "Klik op dit pictogram en hou vast totdat het optiemenu opent.", 
    "size:": "grootte:", 
    "Remembered your password?": "Uw wachtwoord vergeten?", 
    "Download the User Guide": "Download de handleiding", 
    "Go \"Hands-free\"": "Met losse handen", 
    "step:": "stap:", 
    "Cannot index into something that is not a list.": "Kan geen index gebruiken in iets dat geen lijst is.", 
    "Radians": "Radialen", 
    "Let's start with some data!": "Laten we beginnen met een paar gegevens!", 
    "Uh-oh! Type a valid number here.": "Oeps! Typ hier een geldig nummer.", 
    "Use your Email Address": "Gebruik uw e-mailadres", 
    "General Form": "Algemene vorm", 
    "Embed": "Insluiten", 
    "You did not select a file": "Je hebt geen bestand geselecteerd", 
    "Standard Form with Tangent": "Standaardvorm met raaklijn", 
    "Your Name:": "Uw naam:", 
    "Two Point Form": "Door twee punten", 
    "Now click here to add the sliders.": "Klik nu hier om de schuifregelaars toe te voegen.", 
    "Limacon": "Limaçon", 
    "Click here to add a new item.": "Klik hier om een nieuw item toe te voegen.", 
    "Don't forget the \"y=\"!": "Vergeet de \"y =\" niet!", 
    "Fill in this whole row.": "Vul deze hele rij in.", 
    "Invalid x coordinate.": "Ongeldige x-coördinaat.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Laten we nu het gegevensbereik gaan beperken. Voeg __sample_expression__ toe aan het einde.", 
    "Too many variables. Try defining '__variables__'.": "Te veel variabelen.  Probeer '__variables__' te definiëren.", 
    "Parameters": "Parameters", 
    "Update Account": "Account bijwerken", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Opmerking: je kunt in plaats hiervan je eigen gegevens toevoegen door op de knop __plus_icon__ te klikken.", 
    "Convert this to a table.": "Zet dit om naar een tabel.", 
    "Change this equation to __sample_expression__": "Wijzig deze vergelijking in __sample_expression__", 
    "Email": "E-mail", 
    "Taylor Expansion of sin(x)": "Taylorexpansie van sin(x)", 
    "rate it in the app store": "Geef de app een beoordeling in de app store", 
    "Now graph: __sample_expression__": "Teken nu: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Je hebt '__dependency__' op meer dan één plaats gedefiniëerd. Probeer een andere variabele, of verwijder een aantal definities van '__dependency__'.", 
    "All the Trig Functions": "Alle goniometrische functies", 
    "We only plot inequalities of x and y, or r and θ.": "We tekenen alleen ongelijkheden van x en y, of r en θ.", 
    "Share your thoughts!": "Deel je gedachten!", 
    "Factored Form": "Ontbonden in factoren", 
    "Fill it in.": "Vul het in.", 
    "Sorry, I don't understand this.": "Sorry, dit begrijp ik niet.", 
    "Image": "Afbeelding", 
    "Learn More": "Meer informatie", 
    "You can't use '__symbol__' as an index because it's already defined.": "Je kan '__symbol__' niet als een index gebruiken omdat het al gedefinieerd.", 
    "What do you want '__symbol__' to equal?": "Waar moet '__symbol__' gelijk aan zijn?", 
    "add slider:": "schuifregelaar toevoegen:", 
    "or": "of", 
    "Does not compute to constant.": "Levert geen constante op.", 
    "New Blank Graph": "Nieuwe lege grafiek", 
    "Feb": "feb", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Beperk het domein van deze lijn door aan het eind __sample_expression__ toe te voegen.", 
    "image": "afbeelding", 
    "Duplicate": "Dupliceer", 
    "Statistics": "Statistieken", 
    "Degrees": "Graden", 
    "Hide List": "Verberg lijst", 
    "Start by graphing a function.": "Begin met een grafiek te tekenen.", 
    "Intercept Form": "Asafsnijdingen", 
    "Tell us on Facebook": "Vertel het ons op Facebook", 
    "Inequalities are not allowed.": "Ongelijkheden zijn niet toegestaan.", 
    "Click here to continue editing this table.": "Klik hier als u wilt doorgaan met het bewerken van deze tabel.", 
    "Click the \"Edit List\" button.": "Klik op de knop \"Lijst bewerken\".", 
    "Dec": "dec", 
    "Convert to Table": "Converteer naar tabel", 
    "Variable '__dependency__' can't be used as a function.": "Variabele '__dependency__' kan niet als een functie worden gebruikt .", 
    "Polar equations must be linear in r.": "Vergelijkingen met poolcoördinaten moeten lineair in r zijn.", 
    "Move the parabola.": "Verplaats de parabool.", 
    "You're a table wizard!": "Je bent een tabellengoeroe!", 
    "Polar Rose": "Polaire roos", 
    "Save (ctrl+s)": "Opslaan (ctrl+s)", 
    "search by title...": "zoek op titel...", 
    "Logarithmic Spiral": "Logaritmische spiraal", 
    "type your question or suggestion...": "Geef uw vraag of suggestie...", 
    "functions": "functies", 
    "Mar": "mrt", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Tip: je kan y = x ^ 2 typen of de <sup>2</sup>-knop op het toetsenblok hieronder gebruiken.", 
    "May": "mei", 
    "Save As or Rename (ctrl+shift+s)": "Opslaan als of naam wijzigen (ctrl+shift+s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "We kunnen niet θ tekenen als een functie van r. Proberen in plaats daarvan r(θ) te tekenen.", 
    "Please enter your email address. We will send a password recovery link to you.": "Voer uw e-mailadres in. We zullen een link naar u verzenden om het wachtwoord te herstellen.", 
    "Visiting anonymously from Clever.": "Anoniem op bezoek vanaf Clever.", 
    "Equations are not allowed.": "Vergelijkingen zijn niet toegestaan.", 
    "Phase": "Fase", 
    "Link to Google": "Link naar Google", 
    "Message: <i>(optional)</i>": "Bericht: <i>(optioneel)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Klik op het icoon naast de goniometrische functie om hem aan of uit te zetten:", 
    "Please enter your feedback.": "Geef alstublieft uw mening.", 
    "We only support implicit equations of x and y.": "We ondersteunen alleen impliciete vergelijkingen van x en y.", 
    "Error signing in with Clever.": "Probleem met het inloggen met Clever."
},"cs":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Okno přihlášení zablokováno. Abyste se přihlásili účtem Google, povolte prosím na desmos.com vyskakovací okna.", 
    "all": "vše", 
    "style:": "styl:", 
    "Jan": "led", 
    "Please enter your email address. We will send a password recovery link to you.": "Zadejte prosím svou e-mailovou adresu. Pošleme vám odkaz k obnovení hesla.", 
    "Undo (ctrl+z)": "Vrátit (ctrl+z)", 
    "Update Password": "Aktualizovat heslo", 
    "Share your graph with the world!": "Podělte se o svůj graf se světem!", 
    "Oct": "říj", 
    "Sign In with Google": "Přihlásit se účtem Google", 
    "We don't solve complicated single-variable equations yet.": "Složité rovnice jedné proměnné zatím nepočítáme.", 
    "__number__ hours ago": "před __number__ hodinami", 
    "Click and hold on this icon until the options menu opens up.": "Klikněte na tuto ikonu a držte tlačítko, dokud se neotevře menu.", 
    "Undo": "Zpět", 
    "Untitled Graph": "Nepojmenovaný Graf", 
    "Nice!": "Pěkné!", 
    "... and select the \"table\" option.": "... a vyberte možnost „tabulka“.", 
    "Remembered your password?": "Vzpomněli jste si na své heslo?", 
    "Go \"Hands-free\"": "Teď „bez držení“", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Umíme vykreslit pouze nerovnosti, kde je jedna proměnná kvadratická či lineární.", 
    "step:": "krok:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Tato zpráva se sama zničí za __seconds__...", 
    "Radians": "Radiány", 
    "New graph created.": "Vytvořen nový graf.", 
    "Uh-oh! Type a valid number here.": "O ou! Sem zadejte platné číslo.", 
    "center:": "střed:", 
    "Link to your Google Account": "Propojit s vaším účtem Google", 
    "Embed": "Embed", 
    "color:": "barva:", 
    "Click to return to your expressions.": "Kliknutím se vrátíte ke svým výrazům.", 
    "Help": "Pomoc", 
    "A B C": "A B C", 
    "Click to return to this graph.": "Kliknutím se vrátíte k tomuto grafu.", 
    "Your Name:": "Jméno:", 
    "Update Account": "Aktualizovat účet", 
    "Duplicate": "Duplikovat", 
    "Current Password:": "Současné heslo:", 
    "Now click here to add the sliders.": "Teď přidejte posuvníky kliknutím sem.", 
    "Send a Copy to Google Drive": "Odeslat kopii na Disk Google", 
    "Press play to animate the slider.": "Posuvník rozhýbete stisknutím šipky.", 
    "Click here to add a new item.": "Přidejte novou položku kliknutím sem.", 
    "Don't forget the \"y=\"!": "Nezapomeňte na „y=“!", 
    "Fill in this whole row.": "Vyplňte celý řádek.", 
    "Create Account": "Vytvořit účet", 
    "Tables": "Tabulky", 
    "what's this?": "co to je?", 
    "Let's get started!": "Pojďme začít!", 
    "This is the name we'll use if we feature one of your graphs.": "Toto jméno použijeme pokud zveřejníme některý z vašich grafů.", 
    "Convert this to a table.": "Převeďte ji na tabulku.", 
    "Send": "Odeslat", 
    "Sliders": "Posuvníky", 
    "Change this equation to __sample_expression__": "Změňte tuto rovnici na __sample_expression__", 
    "Click anywhere to close the drawing options.": "Možnosti vykreslování zavřete kliknutím kamkoli.", 
    "Print": "Tisk", 
    "Move right to add a new column.": "Přidejte nový sloupec přesunutím vpravo.", 
    "Circle": "Kruh", 
    "Email": "Email", 
    "saved": "uloženo", 
    "Brilliant!": "Skvělé!", 
    "Now graph: __sample_expression__": "Teď vykreslete: __sample_expression__", 
    "Repeat Password:": "Opakujte heslo:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Jste si jisti, že chcete zavřít tento graf? Neuložené změny budou ztraceny!", 
    "Try graphing a straight line, like __sample_expression__": "Zkuste vykreslit přímku, třeba __sample_expression__", 
    "__number__ minutes ago": "před __number__ minutami", 
    "Type any number here.": "Zadejte libovolné číslo.", 
    "Resources": "Zdroje", 
    "Advanced Tables": "Pokročilé tabulky", 
    "example": "příklad", 
    "Title:": "Název:", 
    "sending...": "posílám...", 
    "New Password:": "Nové heslo:", 
    "We only plot inequalities of x and y, or r and θ.": "Vykreslujeme pouze nerovnice x a y nebo r a θ.", 
    "Click here to generate a table.": "Vygenerujte tabulku kliknutím sem.", 
    "loading graphs...": "načítání grafů...", 
    "Click here to connect the dots.": "Kliknutím sem body spojíte.", 
    "Click here to create a new expression.": "Vytvořte nový výraz kliknutím sem.", 
    "Didn't work? Try again!": "Nefungovalo to? Zkuste to znovu!", 
    "last week": "minulý týden", 
    "We'll never share or sell your email address.": "Vaši e-mailovou adresu nikdy nezveřejníme ani neprodáme.", 
    "Fill it in.": "Vyplňte.", 
    "Sign In": "Přihlásit se", 
    "optional": "dobrovolný", 
    "Delete": "Vymazat", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Něco se pokazilo, nahlaste to prosím na podporu desmos.com. (Chyba __error_num__)", 
    "Delete All": "Smazat vše", 
    "Try typing __sample_expression__": "Zkuste napsat __sample_expression__", 
    "Apr": "dub", 
    "Image": "Obrázek", 
    "Start by graphing a function.": "Začněte vykreslením funkce.", 
    "no, thanks": "ne, díky", 
    "Now try pressing Enter.": "Teď zkuste stisknout Enter.", 
    "Recover Password": "Obnovit heslo", 
    "Want us to consider featuring it?": "Chcete, abychom zvážili uveřejnění?", 
    "folder": "složka", 
    "Tours": "Prohlídky", 
    "Open Graph": "Otevřít graf", 
    "type your question or suggestion...": "zadejte svůj dotaz či připomínku…", 
    "size:": "velikost:", 
    "Terms of Use": "Podmínky užití", 
    "expression": "výraz", 
    "Drag the handle to change the value.": "Hodnotu změníte přetažením úchytu.", 
    "New Blank Graph": "Nový prázdný graf", 
    "Feb": "úno", 
    "BBCode": "BBCode", 
    "Aug": "srp", 
    "This graph has been deleted.": "Tento graf byl odstraněn.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Omezte definiční obor této přímky tím, že na konec přidáte __sample_expression__.", 
    "image": "obrázek", 
    "Projector Mode": "Projektorový režim", 
    "Unit Circle": "Jednotková kružnice", 
    "just now": "právě teď", 
    "Open Graph (ctrl+o)": "Otevřít graf (ctrl+o)", 
    "Link to Google": "Propojit s Googlem", 
    "Click here to create a new blank expression.": "Kliknutím sem vytvoříte nový prázdný výraz.", 
    "Degrees": "Stupně", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Teď omezme rozsah. Přidejte na konec __sample_expression__.", 
    "You're a scatter plot whiz!": "Na bodové grafy jste machr!", 
    "Desmos is in Maintenance Mode.": "Desmos je v režimu údržby.", 
    "table": "tabulka", 
    "loading...": "načítání…", 
    "Forgot your password?": "Zapomněli jste heslo?", 
    "Hide List": "Skrýt seznam", 
    "one hour ago": "před hodinou", 
    "__number__ weeks ago": "před __number__ týdny", 
    "You're a slider pro!": "Jste posuvníkový odborník!", 
    "Jun": "čer", 
    "You're a restrictions star!": "Jste hvězda omezení!", 
    "Jul": "čvc", 
    "Let's make a scatter plot!": "Udělejme si bodový graf!", 
    "Edit Account": "Upravit účet", 
    "more": "více", 
    "Function '__dependency__' is not defined.": "Funkce '__dependency__' není definována.", 
    "Restrictions": "Omezení", 
    "Click here to continue editing this table.": "V úpravách této tabulky pokračujte kliknutím sem.", 
    "Click here to only show the dots.": "Kliknutím sem zobrazte jen body.", 
    "Click the \"Edit List\" button.": "Klikněte na tlačítko „Upravit seznam“.", 
    "Sign in": "Přihlásit se", 
    "Sorry, we didn't find any graphs with that title.": "Bohužel jsem nenalezl žádný graf tohoto názvu.", 
    "Try typing all of __sample_expression__": "Zkuste napsat vše z __sample_expression__", 
    "Dec": "pro", 
    "Nov": "lis", 
    "Edit List": "Upravit seznam", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos je dočasně v režimu údržby. Můžete otevírat příklady grafů, ale nebudete se moci přihlásit, otevírat své grafy ani ukládat změny. Za nepříjemnosti se omlouváme.", 
    "Nice Graph!": "Pěkný graf!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Díky za vaši zpětnou vazbu; brzy na ni zareagujeme.", 
    "Feedback": "Zpětná vazba", 
    "Sep": "zář", 
    "Convert to Table": "Převést na tabulku", 
    "Redo (ctrl+y)": "Znovu (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "Proměnnou  '__dependency__' nelze použít jako funkci.", 
    "__number__ days ago": "před __number__ dny", 
    "Tell us on Facebook": "Dejte vědět na Facebooku", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos je v režimu údržby, změny grafu nebudete moci uložit. Za nepříjemnosti se moc omlouváme!", 
    "Desmos User Guide": "Uživatelská příručka Desmosu", 
    "Done": "Hotovo", 
    "Desmos Graphing Calculator": "Desmos", 
    "Cancel": "zrušit", 
    "Send to:": "Poslat na:", 
    "on __month__ __day__, __year__": "__day__ __month__ __year__", 
    "Move the parabola.": "Přesuňte parabolu.", 
    "Save (ctrl+s)": "Uložit (ctrl+s)", 
    "You're a table wizard!": "Jste tabulkový mág!", 
    "Share Graph": "Sdílet graf", 
    "Sign In with Your Google Account": "Přihlásit se účtem Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Dvojité nerovnice podporujeme pouze řešené. Zkuste vymazat jednu ze stran nerovnice.", 
    "Click here to make a new blank expression.": "Kliknutím sem vytvořte nový prázdný výraz.", 
    "Last trick!": "Poslední trik!", 
    "Send Feedback": "Zpětná vazba", 
    "search by title...": "hledat podle názvu…", 
    "Share this link:": "Sdílejte tento odkaz:", 
    "Please enter your feedback.": "Zadejte prosím vaši zpětnou vazbu.", 
    "functions": "funkce", 
    "Mar": "bře", 
    "Language": "Jazyk", 
    "May": "kvě", 
    "message sent": "zpráva odeslána", 
    "Save As or Rename (ctrl+shift+s)": "Uložit jako nebo Přejmenovat (ctrl+shift+s)", 
    "Awesome!": "Úžasné!", 
    "Sign Out": "Odhlásit se", 
    "Click back to continue editing.": "V úpravách pokračujte kliknutím zpět.", 
    "Just fill in one more...": "Vyplňte ještě jeden...", 
    "Learn More": "Zjistit více", 
    "Use your Email Address": "Použít e-mailovou adresu", 
    "to save and share your graphs!": "abyste mohli grafy ukládat a sdílet!", 
    "Name:": "Jméno:", 
    "Add Item": "Přidat položku", 
    "Click to show the list of expressions.": "Kliknutím zobrazíte seznam výrazů.", 
    "Graph Paper": "Grafový papír", 
    "yesterday": "včera", 
    "add slider:": "přidat posuvník:", 
    "Please provide an email so that we can write back.": "Poskytněte nám prosím svůj e-mail, abychom vám mohli odepsat.", 
    "Opened '__graphTitle__'": "Otevřen '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Kliknutím na \"__btn__,\" potvrzujete, že jste četli a souhlasíte s našimi __terms_of_use_link__.", 
    "HTML Embed Code": "HTML kód pro vložení", 
    "Message: <i>(optional)</i>": "Zpráva: <i>(volitelné)</i>", 
    "Sign In with Desmos": "Přihlásit se účtem Desmos", 
    "one minute ago": "před minutou", 
    "Password:": "Heslo:", 
    "or": "nebo", 
    "Parabolas": "Paraboly", 
    "We only support implicit equations of x and y.": "Podporujeme pouze implicitní rovnice x a y.", 
    "Message sent. Please check your email for a password recovery link.": "Zpráva odeslána. Pro odkaz k obnovení hesla prosím zkontrolujte svůj e-mail.", 
    "Email:": "Email:", 
    "enter": "enter", 
    "Let's make some sliders!": "Udělejme si pár posuvníků!", 
    "Go down to the next row to add more data.": "Přidat další data můžete na dalším řádku níže.", 
    "Let's make a function. First: click here to create a new blank expression.": "Vytvořme funkci. Za prvé: Kliknutím sem vytvořte nový prázdný výraz.", 
    "yeah!": "jo!"
},"lv":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Pieslēgšanās logs bloķēts. Lūdzu, atļaujiet uznirstošos logus no desmos.com, lai pieslēgtos, izmantojot Google.", 
    "all": "visiem", 
    "style:": "stils:", 
    "Jan": "jan", 
    "Please enter your email address. We will send a password recovery link to you.": "Lūdzu, ieraksti savu e-pasta adresi. Mēs Tev nosūtīsim paroles atgūšanas saiti.", 
    "Undo (ctrl+z)": "Atsaukt (ctrl + z)", 
    "Update Password": "Atjaunināt paroli", 
    "Share your graph with the world!": "Dalies ar savu diagrammu ar pārējo pasauli!", 
    "Oct": "okt", 
    "Sign In with Google": "Pieraksties, izmantojot Google", 
    "We don't solve complicated single-variable equations yet.": "Mēs pagaidām vēl nerisinām sarežģītus viena mainīgā vienādojumus.", 
    "__number__ hours ago": "pirms __number__ stundām", 
    "Click and hold on this icon until the options menu opens up.": "Noklikšķini un turi uz šīs ikonas, līdz parādās iestatījumu izvēlne.", 
    "Undo": "Atsaukt", 
    "Untitled Graph": "Nenosaukta diagramma", 
    "Nice!": "Super!", 
    "... and select the \"table\" option.": "... un izvēlies \"tabula\".", 
    "Remembered your password?": "Atceries savu paroli?", 
    "Go \"Hands-free\"": "Pamēģini \"bezroku sistēmu\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Mēs varam uzzīmēt grafikus tikai tām nevienādībām, kur viens mainīgais ir kvadrātisks vai lineārs.", 
    "step:": "solis:", 
    "Tweet @desmos": "@desmos", 
    "This message will self-destruct in __seconds__...": "Šī ziņa pašiznīcināsies pēc __seconds__...", 
    "Radians": "Radiāni", 
    "New graph created.": "Izveidota jauna diagramma.", 
    "Uh-oh! Type a valid number here.": "Ups! Šeit ieraksti derīgu skaitli.", 
    "center:": "centra:", 
    "Link to your Google Account": "Savienot ar savu Google kontu", 
    "Embed": "Iegult", 
    "color:": "krāsa:", 
    "Click to return to your expressions.": "Klikšķini šeit, lai atgrieztos pie savām izteiksmēm.", 
    "Help": "Palīdzība", 
    "A B C": "A B C", 
    "Click to return to this graph.": "Klikšķini šeit, lai atgrieztos pie šīs diagrammas.", 
    "Your Name:": "Tavs vārds:", 
    "Update Account": "Atjaunināt kontu", 
    "Duplicate": "Dublēt", 
    "Current Password:": "Pašreizējā parole:", 
    "Now click here to add the sliders.": "Tagad klikšķini šeit, lai pievienotu slīdni.", 
    "Press play to animate the slider.": "Spied šeit, lai animētu slīdni.", 
    "Click here to add a new item.": "Klikšķini šeit, lai pievienotu jaunu vienumu.", 
    "Don't forget the \"y=\"!": "Neazmirsti \"y=\"!", 
    "Fill in this whole row.": "Aizpildi visu rindu.", 
    "Create Account": "Izveido lietotāja kontu", 
    "Tables": "Tabulas", 
    "what's this?": "kas tas ir?", 
    "Let's get started!": "Sāksim!", 
    "This is the name we'll use if we feature one of your graphs.": "Šis ir vārds, ko izmantosim, ja izcelsim kādu no Tavām diagrammām.", 
    "Convert this to a table.": "Pārveidot šo par tabulu.", 
    "Send": "Sūtīt", 
    "Sliders": "Slīdņi", 
    "Change this equation to __sample_expression__": "Izmaini šo vienādojumu uz __sample_expression__", 
    "Click anywhere to close the drawing options.": "Klikšķini jebkur, lai aizvērtu diagrammas iestatījumus.", 
    "Print": "Drukāt", 
    "Move right to add a new column.": "Pārvietojies pa labi, lai pievienotu jaunu kolonnu.", 
    "Email": "E-pasts", 
    "saved": "saglabāts", 
    "Brilliant!": "Brīnišķīgi!", 
    "Now graph: __sample_expression__": "Tagad ieraksti: __sample_expression__", 
    "Repeat Password:": "Atkārto paroli:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Vai esi drošs, ka vēlies aizvērt šo grafiku? Tavs nesaglabātais darbs tiks pazaudēts.", 
    "Try graphing a straight line, like __sample_expression__": "Pamēģini attēlot taisnu līniju, piemēram __sample_expression__", 
    "__number__ minutes ago": "pirms __number__ minūtēm", 
    "Type any number here.": "Šeit ieraksti skaitli.", 
    "Resources": "Resursi", 
    "Advanced Tables": "Sarežģītākas tabulas", 
    "example": "piemērs", 
    "Title:": "Nosaukums:", 
    "sending...": "sūta...", 
    "New Password:": "Jaunā parole:", 
    "We only plot inequalities of x and y, or r and θ.": "Mēs zīmejam grafikus tikai nevienādībām ar x un y vai r un θ.", 
    "Click here to generate a table.": "Klikšķini šeit, lai automātiski izveidotu tabulu.", 
    "loading graphs...": "sagatavo diagrammu...", 
    "Click here to connect the dots.": "Klikšķini šeit, lai savienotu punktus.", 
    "Click here to create a new expression.": "Klikšķini šeit, lai izveidotu jaunu izteiksmi.", 
    "Didn't work? Try again!": "Nenostrādāja? Pamēģini vēlreiz!", 
    "last week": "pagājušonedēļ", 
    "We'll never share or sell your email address.": "Mēs nekad nedalīsimies ar un nepārdosim Tavu e-pasta adresi.", 
    "Fill it in.": "Aizpildi to.", 
    "Sign In": "Pieraksties", 
    "optional": "neobligāts", 
    "Delete": "Dzēst", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Kaut kas nogāja greizi. Lūdzu, pastāstiet par šo desmos.com. (Kļūda Nr. __error_num__)", 
    "Delete All": "Dzēst visu", 
    "Try typing __sample_expression__": "Pamēģini ierakstīt __sample_expression__", 
    "Apr": "apr", 
    "Image": "Attēls", 
    "Start by graphing a function.": "Sāc ar funkcijas attēlošanu.", 
    "no, thanks": "nē, paldies", 
    "Now try pressing Enter.": "Tagad pamēģini nospiest Enter.", 
    "Recover Password": "Atgūt paroli", 
    "Want us to consider featuring it?": "Vai vēlies, lai apsveram tās izcelšanu?", 
    "folder": "mape", 
    "Tours": "Vedņi", 
    "Open Graph": "Atvērt diagrammu", 
    "type your question or suggestion...": "Ieraksti savu jautājumu vai ieteikumu...", 
    "size:": "izmērs:", 
    "Terms of Use": "Lietošanas noteikumi", 
    "expression": "izteiksme", 
    "Drag the handle to change the value.": "Pavelc, lai mainītu vērtību.", 
    "New Blank Graph": "Jauna tukša diagramma", 
    "Feb": "feb", 
    "BBCode": "BBCode", 
    "Aug": "aug", 
    "This graph has been deleted.": "Šis grafiks ir izdzēsts.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ierobežo šīs rindiņas definīcijas apgabalu, tai beigās pievienojot __sample_expression__.", 
    "image": "attēls", 
    "Projector Mode": "Projektora režīms", 
    "Send a Copy to Google Drive": "Nosūtīt kopiju uz Google Disku", 
    "just now": "nupat", 
    "Open Graph (ctrl+o)": "Atvērt diagrammu (ctrl + o)", 
    "Link to Google": "Savienot ar Google", 
    "Click here to create a new blank expression.": "Klikšķini šeit, lai izveidotu jaunu tukšu izteiksmi.", 
    "Degrees": "Grādi", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Tagad pamēģināsim ierobežot definīcijas apgabalu. Beigās pievieno __sample_expression__.", 
    "You're a scatter plot whiz!": "Tu esi izkliedētās diagrammas meistars!", 
    "Desmos is in Maintenance Mode.": "Desmos ir uzturēšanas režīmā.", 
    "table": "tabula", 
    "loading...": "notiek ielāde...", 
    "Forgot your password?": "Aizmirsi savu paroli?", 
    "Hide List": "Paslēpt sarakstu", 
    "one hour ago": "pirms vienas stundas", 
    "__number__ weeks ago": "pirms __number__ nedēļām", 
    "You're a slider pro!": "Tu esi slīdņu meistars!", 
    "Jun": "jūn", 
    "You're a restrictions star!": "Tu esi ierobežojumu zvaigzne!", 
    "Jul": "jūl", 
    "Let's make a scatter plot!": "Izeidosim XY (izkaisīto) diagrammu!", 
    "Edit Account": "Rediģēt kontu", 
    "more": "vairāk", 
    "Function '__dependency__' is not defined.": "Funkcija '__dependency__' nav definēta.", 
    "Restrictions": "Ierobežojumi", 
    "Click here to continue editing this table.": "Klikšķini šeit, lai turpinātu rediģēt šo tabulu.", 
    "Click here to only show the dots.": "Klikšķini šeit, lai rādītu tikai punktus.", 
    "Click the \"Edit List\" button.": "Klikšķini \"Rediģēt sarakstu\" pogu.", 
    "Sign in": "Pieraksties", 
    "Sorry, we didn't find any graphs with that title.": "Atvainojamies, mēs neatradām nevienu diagrammu ar šādu nosaukumu.", 
    "Try typing all of __sample_expression__": "Pamēģini ierakstīt visu __sample_expression__", 
    "Dec": "dec", 
    "Nov": "nov", 
    "Edit List": "Rediģēt sarakstu", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos ir pagaidu uzturēšanas režīmā. Tu vari atvērt diagrammu paraugus, bet nevarēsi pierakstīties, atvērt savas diagrammas vai saglabāt izmaiņas. Atvainojamies par neērtībām!", 
    "Nice Graph!": "Jauka diagramma!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Paldies par atsauksmi &ndash; mēs drīz sazināsimies!", 
    "Feedback": "Atsauksmes", 
    "Sep": "sep", 
    "Convert to Table": "Pārveidot par tabulu", 
    "Redo (ctrl+y)": "Atcelt atsaukšanu (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Mainīgais '__dependency__' nevar tikt izmantots kā funkcija.", 
    "__number__ days ago": "pirms __number__ dienām", 
    "Tell us on Facebook": "Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos ir uzturēšanas režīmā. Tu nevarēsi saglabāt izmaiņas šajā diagrammā. Atvainojamies par neērtībām!", 
    "Desmos User Guide": "Desmos lietotāja instrukcija", 
    "Done": "Darīts", 
    "Desmos Graphing Calculator": "Desmos grafiskais kalkulators", 
    "Cancel": "Atcelt", 
    "Send to:": "Sūtīt uz:", 
    "on __month__ __day__, __year__": "__year__. gada __day__. __month__", 
    "Move the parabola.": "Pabīdi parabolu.", 
    "Save (ctrl+s)": "Saglabāt (ctrl + s)", 
    "You're a table wizard!": "Tu esi tabulu burvis!", 
    "Share Graph": "Dalies ar diagrammu", 
    "Sign In with Your Google Account": "Pieraksties, izmantojot savu Google kontu", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Mēs atbalstām tikai atrisinātas dubultās nevienādības. Pamēģini izdzēst vienu nevienādības pusi.", 
    "Click here to make a new blank expression.": "Klikšķini šeit, lai izveidotu jaunu tukšu izteiksmi.", 
    "Last trick!": "Pēdējais triks!", 
    "Send Feedback": "Nosūtīt atsauksmi", 
    "search by title...": "meklēt pēc nosaukuma...", 
    "Share this link:": "Dalies ar šo saiti:", 
    "Please enter your feedback.": "Lūdzu, ierakstiet savus komentārus.", 
    "functions": "funkcijas", 
    "Mar": "mar", 
    "Language": "Valoda", 
    "May": "mai", 
    "message sent": "ziņojums nosūtīts", 
    "Save As or Rename (ctrl+shift+s)": "Saglabāt kā vai pārdēvēt (ctrl + shift + s)", 
    "Awesome!": "Izcili!", 
    "Sign Out": "Izrakstīties", 
    "Click back to continue editing.": "Klikšķini atpakaļ tabulā, lai turpinātu rediģēšanu.", 
    "Just fill in one more...": "Aizpildi vēl tikai vienu...", 
    "Learn More": "Uzzini vairāk", 
    "Use your Email Address": "Izmanto savu e-pasta adresi", 
    "to save and share your graphs!": "lai saglabātu un dalītos ar savām diagrammām!", 
    "Name:": "Vārds:", 
    "Add Item": "Pievienot", 
    "Click to show the list of expressions.": "Klikšķini šeit, lai parādītu sarakstu ar izteiksmēm.", 
    "Graph Paper": "Koordinātu plakne", 
    "yesterday": "vakar", 
    "add slider:": "pievienot slīdni:", 
    "Please provide an email so that we can write back.": "Lūdzu ierakstiet savu e-pasta adresi, lai mēs varētu atbildēt.", 
    "Opened '__graphTitle__'": "Atvēra '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Noklikšķinot uz \"__btn__\", Tu atzīsti, ka esi izlasījis un pieņem mūsu __terms_of_use_link__.", 
    "HTML Embed Code": "HTML iegulšanas kods", 
    "Message: <i>(optional)</i>": "Ziņojums: <i>(nav obligāts)</i>", 
    "Sign In with Desmos": "Pieraksties, izmantojot Desmos", 
    "one minute ago": "pirms vienas minūtes", 
    "Password:": "Parole:", 
    "or": "vai", 
    "We only support implicit equations of x and y.": "Mēs atbalstām noklusētos vienādojumus tikai mainīgajiem x un y.", 
    "Message sent. Please check your email for a password recovery link.": "Ziņojums nosūtīts. Lūdzu, pārbaudi savu e-pastu - tajā vajadzētu būt paroles atgūšanas saitei.", 
    "Email:": "E-pasts:", 
    "enter": "enter", 
    "Let's make some sliders!": "Izveidosim dažus slīdņus!", 
    "Go down to the next row to add more data.": "Ej uz nākamo rindu, lai pievienotu vairāk datus.", 
    "Let's make a function. First: click here to create a new blank expression.": "Izveidosim funkciju. Pirmkārt, klikšķini šeit, lai izveidotu jaunu tukšu izteiksmi.", 
    "yeah!": "jā!"
},"pl":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Zablokowane okno logowania. Proszę pozwolić na wyskakujące okienka z desmos.com aby zalogować się przez Google.", 
    "all": "wszystko", 
    "Try adding an equals sign to turn this into an equation.": "Spróbuj dodać znak równości, aby przekształcić to w równanie.", 
    "Undo (ctrl+z)": "Cofnij (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Jaki wpływ ma b na funkcję g(x)?", 
    "Share your graph with the world!": "Udostępnij swój wykres światu!", 
    "__number__ minutes ago": "__number__ minut temu", 
    "Let's make a scatter plot!": "Zróbmy wykres punktowy!", 
    "Hide this warning.": "Ukryj to ostrzeżenie.", 
    "Nice!": "Ładnie!", 
    "Nov": "Listopad", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Funkcja \"__dependency__\" wymaga tylko 1 argumentu. __supplement__", 
    "saved": "zapisane", 
    "center:": "centrum:", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' i '__lastSymbol__' nie mogą być definiowane w zależności od siebie.", 
    "Click to return to this graph.": "Kliknij, aby powrócić do tego wykresu.", 
    "Press play to animate the slider.": "Naciśnij play aby animować suwak.", 
    "Didn't work? Try again!": "Nie działa? Próbuj ponownie!", 
    "Now, let's try a new model.": "Teraz spróbujmy nowy model.", 
    "Tables": "Tabelki", 
    "Table headers must be simple expressions. __supplement__": "Nagłówki tabeli muszą być prostymi wyrażeniami. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Funkcja \"__symbol__\" wymaga co najmniej jednego argumentu. Na przykład, spróbuj wpisać: __symbol__ (1, 2).", 
    "Function definitions are not allowed.": "Definiowanie funkcji nie jest dozwolone.", 
    "Too many variables, I don't know what to do with this.": "Zbyt wiele zmiennych, nie wiem co z tym zrobić.", 
    "Click here to download Google Chrome.": "Kliknij tutaj, aby pobrać Google Chrome.", 
    "Circle": "Okrąg", 
    "Secant Line": "Sieczna", 
    "Polar Graphing": "Wykres biegunowy", 
    "Visualizing Slope": "Wizualizacja współczynnika kierunkowego", 
    "How can I change the color?": "Jak można zmienić kolor?", 
    "Fill in the sample data:": "Wprowadź przykładowe dane:", 
    "Grid": "Siatka", 
    "List index must not be a list.": "Indeks listy nie może być listą.", 
    "Invalid height.": "Nieprawidłowa wysokość.", 
    "Click here to create a new expression.": "Kliknij tutaj, aby utworzyć nowe wyrażenie.", 
    "New Password:": "Nowe hasło:", 
    "Failed to find regression coefficients.": "Nie udało się znaleźć współczynników regresji.", 
    "For example, try typing: __recommendation__.": "Na przykład, spróbuj wpisać: __recommendation__.", 
    "How do I share a link to my graph?": "Jak udostępnić link do mojego wykresu?", 
    "Regressions must contain at least one list of data.": "Regresja musi zawierać co najmniej jedną listę danych.", 
    "sending...": "wysyłanie...", 
    "Hide Keypad": "Ukryj klawiaturę", 
    "last week": "W zeszłym tygodniu", 
    "Show List": "Pokaż listę", 
    "We only plot double inequalities of x and y.": "Podwójne nierówności można wykreślić tylko z x i y.", 
    "Nice work &ndash; Keep exploring!": "Dobra robota &ndash; Badaj dalej!", 
    "Slope Intercept Form": "Postać kierunkowa", 
    "no, thanks": "Nie, dziękuję", 
    "Recover Password": "Odzyskaj hasło", 
    "Terms of Use": "Warunki użytkowania", 
    "Show Keypad": "Pokaż klawiaturę", 
    "Aug": "Sierpień", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Nie możesz użyć '__dependency__' jako parametru funkcji, bo '__dependency__' jest już zdefiniowane.", 
    "You're a scatter plot whiz!": "Jesteś specem od wykresów punktowych!", 
    "Standard Form": "Postać ogólna", 
    "one hour ago": "godzinę temu", 
    "You're a slider pro!": "Jesteś specjalistą od suwaków!", 
    "Delete": "Usuń", 
    "drag:": "przeciągnij:", 
    "more": "więcej", 
    "Point Slope Form": "Postać kierunkowa przez punkt", 
    "How is this app free?": "Dlaczego ta aplikacja jest za darmo?", 
    "Nice Graph!": "Ładny wykres!", 
    "Feedback": "Informacja zwrotna", 
    "Desmos User Guide": "Podręcznik użytkownika Desmos", 
    "example": "przykład", 
    "on __month__ __day__, __year__": "z__day__ __month__, __year__", 
    "Graph Settings": "Ustawienia wykresu", 
    "Share Graph": "Udostępnij wykres", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Podwójne nierówności muszą mieć znaki w tym samym kierunku, np. 1 < y < 2.", 
    "Show Numbers": "Pokaż liczby", 
    "Wave Interference": "Interferencja fal", 
    "message sent": "wiadomość wysłana", 
    "Sign Out": "Wyloguj", 
    "X-Axis": "Oś X", 
    "Graph Paper": "Układ współrzędnych", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos jest w trybie podglądu, więc nie będzie mógł zapisać wykresów.", 
    "Save Changes (ctrl+s)": "Zapisz zmiany (Ctrl + s)", 
    "Regressions": "Regresje", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Klikając \"__btn__\", użytkownik potwierdza, że przeczytał i zaakceptował nasze __terms_of_use_link__.", 
    "Sign In with Desmos": "Zaloguj się z Desmos", 
    "Password:": "Hasło:", 
    "Link to your Google Account": "Połącz się z kontem Google", 
    "Parabolas": "Parabole", 
    "Email:": "Email:", 
    "enter": "enter", 
    "Derivatives": "Pochodne", 
    "Jan": "Styczeń", 
    "First column may not be __most__ or __last__.": "Pierwsza kolumna nie może być __most__ lub __last__.", 
    "Translating Any Function": "Translacja dowolnej funkcji", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Rezydua są różnicą między danymi i modelem. Kliknij tutaj, aby dodać je do tabeli i umieścić na wykresie.", 
    "Oct": "Październik", 
    "Sign In with Google": "Zaloguj się przez Google", 
    "Just fill in one more...": "Wystarczy wypełnić jeszcze jeden...", 
    "Untitled Graph": "Niezatytułowany wykres", 
    "... and select the \"table\" option.": "... i wybierz opcję \"tabela\".", 
    "Points are written like this: (1, 2).": "Punkty są zapisywane tak: (1, 2).", 
    "New graph created.": "Nowy wykres utworzony.", 
    "HTML Embed Code": "Kod osadzenia HTML", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Czy masz chwilę, aby nam pomóc? Oceny i opinie pomogą innym ludziom znaleźć nas, a nam pomogą udoskonalić ten kalkulator. Powiedz nam, co myślisz!", 
    "Click to return to your expressions.": "Kliknij, aby powrócić do wyrażenia.", 
    "A B C": "A B C", 
    "enter a note...": "wprowadź notatkę...", 
    "Only __form__ is supported. Otherwise, use parens.": "Obsługiwane jest tylko __form__. W przeciwnym razie, należy użyć nawiasów.", 
    "Hyperbola": "Hiperbola", 
    "Unsupported Browser": "Nieobsługiwana przeglądarka", 
    "Show Grid Angles": "Pokaż kąty siatki", 
    "Let's get started!": "Zaczynajmy!", 
    "This is the name we'll use if we feature one of your graphs.": "Tej nazwy użyjemy, jeśli będziemy przedstawiali któryś z Twoich wykresów.", 
    "We zoomed to fit your data.": "Wielkość dopasowano do danych.", 
    "FAQs": "Najczęściej zadawane pytania", 
    "Sliders": "Suwaki", 
    "Click anywhere to close the drawing options.": "Kliknij w dowolnym miejscu, aby zamknąć opcje rysowania.", 
    "Print": "Drukuj", 
    "Move right to add a new column.": "Przesuń w prawo aby dodać nową kolumnę.", 
    "Repeat Password:": "Powtórz hasło:", 
    "Try graphing a straight line, like __sample_expression__": "Spróbuj wykresu linii prostej, jak __sample_expression__", 
    "Conic Sections": "Krzywe stożkowe", 
    "Definitions are nested too deeply.": "Definicje są zagnieżdżone zbyt głęboko.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Spróbuj dodać \"__lhs__\" na początku tego równania.", 
    "Tangent Line": "Styczna", 
    "Period and Amplitude": "Okres i amplituda", 
    "Try typing __sample_expression__": "Spróbuj wpisać __sample_expression__", 
    "Apr": "Kwiecień", 
    "sample data": "przykładowe dane", 
    "Now try pressing Enter.": "Spróbuj teraz, naciskając klawisz Enter.", 
    "Lists are not allowed.": "Listy nie są dozwolone.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Funkcja \"__dependency__\" wymaga argumentów __assignment_arity__. __supplement__", 
    "note": "notatka", 
    "Needs work": "Wymaga pracy", 
    "BBCode": "BBCode", 
    "Projector Mode": "Tryb projektora", 
    "just now": "przed chwilą", 
    "I just want to graph": "Chcę tylko wykresu", 
    "Click here to create a new blank expression.": "Kliknij tutaj, aby utworzyć miejsce na nowe wyrażenie.", 
    "Range cannot depend on free variable '__symbol__'.": "Zakres nie może zależeć od zmiennej wolnej '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos jest w trybie konserwacji.", 
    "The file \"__file__\" is not an image": "Plik \"__file__\" nie jest obrazem", 
    "add label": "Dodaj etykietę", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Edytuj równanie, żeby znaleźć lepsze dopasowanie. Spróbuj, na przykład: <br>__equation__", 
    "__number__ weeks ago": "__number__ tygodni temu", 
    "Drop Image Here": "Upuść obraz tutaj", 
    "Open Graph (ctrl+o)": "Otwórz wykres (ctrl + o)", 
    "What effect does h have on the function g(x)?": "Jaki wpływ ma h na funkcję g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Spróbuj łącznie z '__symbols__' i '__lastSymbol__' jako argumentami, definiując funkcję jako '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "Funkcja '__dependency__' nie jest zdefiniowana.", 
    "Restrictions": "Ograniczenia", 
    "Click here to only show the dots.": "Kliknij tutaj, aby wyświetlić tylko punkty.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Spróbuj łącznie z '__lastSymbol__' jako argumentem, definiując funkcję jako '__newSignature__'.", 
    "Send": "Wyślij", 
    "Try typing all of __sample_expression__": "Spróbuj wpisać wszystkie __sample_expression__", 
    "Too complicated. Use parens.": "Zbyt skomplikowane.  Użyj nawiasów.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos jest tymczasowo w trybie konserwacji. Możesz otworzyć przykładowe wykresy, ale nie będziesz mógł zalogować się, otworzyć swoje wykresy, czy zapisać zmian. Przepraszamy za niedogodności.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Dzięki za opinię &ndash; odezwiemy się wkrótce!", 
    "Sep": "Wrzesień", 
    "Redo (ctrl+y)": "Ponów (ctrl+y)", 
    "__number__ days ago": "__number__ dni temu", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos jest w trybie konserwacji, nie będziesz mógł zapisać zmian w tym wykresie. Przykro nam z powodu niedogodności!", 
    "Cancel": "Anuluj", 
    "Send to:": "Wyślij do:", 
    "Open Graph": "Otwórz wykres", 
    "Table entries must be simple expressions. __supplement__": "Wpisy w tabeli muszą być prostymi wyrażeniami. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Obsługujemy tylko rozwiązane podwójne nierówności. Spróbuj usunąć jedną stronę nierówności.", 
    "Scaling Any Function": "Skalowanie dowolnej funkcji", 
    "Last trick!": "Ostatni trik!", 
    "Share this link:": "Poleć ten link:", 
    "Language": "Język", 
    "Awesome!": "Niesamowite!", 
    "Click here to generate a table.": "Kliknij tutaj, aby wygenerować tabelkę.", 
    "to save and share your graphs!": "aby zapisać i udostępnić swoje wykresy!", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos najlepiej działa na Twojej wersji Androida, jeśli używasz przeglądarki Chrome.", 
    "Invalid y coordinate.": "Nieprawidłowa współrzędna y.", 
    "I love it": "Kocham to", 
    "We'll never share or sell your email address.": "Nigdy nie udostępnimy i nie sprzedamy Twojego adresu e-mail.", 
    "Residuals": "Rezydua", 
    "Points are not allowed.": "Punkty nie są dozwolone.", 
    "Arrows:": "Strzałki:", 
    "Edit List": "Edytuj listę", 
    "Message sent. Please check your email for a password recovery link.": "Wiadomość wysłana. Znajdź w mailu link odzyskiwania hasła.", 
    "Please provide an email so that we can write back.": "Proszę podać maila, żebyśmy mogli odpisać.", 
    "Let's make some sliders!": "Stwórzmy jakieś suwaki!", 
    "Go down to the next row to add more data.": "Zejdź na dół do następnego wiersza, aby dodać więcej danych.", 
    "Let's make a function. First: click here to create a new blank expression.": "Stwórzmy funkcję. Po pierwsze: kliknij tutaj, aby utworzyć miejsce na nowe wyrażenie.", 
    "yeah!": "Tak!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Błąd: Wiersz __rowNum__, Kolumna __colNum__  nie jest liczbą.", 
    "Transformations": "Przekształcenia", 
    "Image upload is not supported in this browser.": "Ta przeglądarka nie obsługuje przesyłania obrazu.", 
    "This column header can't be defined elsewhere in the calculator.": "Ten nagłówek kolumny nie może być zdefiniowany gdzie indziej w kalkulatorze.", 
    "Update Password": "Aktualizacja hasła", 
    "Resources": "Zasoby", 
    "Help Center": "Centrum pomocy", 
    "Drag the handle to change the value.": "Przeciągnij suwak, aby zmienić wartość.", 
    "Undo": "Cofnij", 
    "Now type: __equation__": "Teraz wpisz: __equation__", 
    "What effect does a have on the function g(x)?": "Jaki wpływ ma a na funkcję g(x)?", 
    "Sign in": "Zaloguj się", 
    "Type any number here.": "Wpisz tutaj dowolną liczbę.", 
    "folder": "folder", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Możemy utworzyć wykres nierówności tylko gdy jedna ze zmiennych jest liniowa lub kwadratowa.", 
    "Send a Copy to Google Drive": "Wyślij kopię na dysk Google", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Kąty", 
    "This message will self-destruct in __seconds__...": "Ta wiadomość zniknie za __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Porada #2: __twiddle__ jest na naszej klawiaturze ekranowej w sekcji \"A B C\".", 
    "We don't solve single-variable equations involving lists yet.": "Nie możemy jeszcze rozwiązywać równań z jedną niewiadomą, zawierających listy.", 
    "Ellipse with Foci": "Elipsa i jej ogniska", 
    "color:": "kolor:", 
    "... and select the \"expression\" option.": "... i wybierz opcję \"wyrażenie\".", 
    "Help": "Pomoc", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Wskazówka: naciśnij przycisk \"A B C\" na klawiaturze, aby znaleźć przycisk { }", 
    "Nice. Let's check the model.": "Ładnie. Sprawdźmy model.", 
    "Logged in with Clever!": "Zalogowany z Clever!", 
    "This graph has been deleted.": "Ten wykres został usunięty.", 
    "Invalid width.": "Nieprawidłowa szerokość.", 
    "Create Account": "Utwórz konto", 
    "First, let's get some data.": "Najpierw, uzyskajmy jakieś dane.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos zarabia wszystkie swoje pieniądze poprzez partnerstwo. Jesteś zainteresowany współpracą z Desmos? Napisz do nas na <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Długo przytrzymać kolorowe kółko na lewo od równania lub wyrażenia, aby otworzyć opcje stylów i kolorów.", 
    "Learn more": "Dowiedz się więcej", 
    "Brilliant!": "Genialnie!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Czy na pewno chcesz opuścić ten wykres? Niezapisana praca zostanie utracona.", 
    "Step:": "Interwał:", 
    "Parabola and Focus": "Parabola i ognisko", 
    "Advanced Tables": "Tabelki rozszerzone", 
    "Title:": "Tytuł:", 
    "Current Password:": "Aktualne hasło:", 
    "Click here to connect the dots.": "Kliknij tutaj, aby połączyć punkty.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Coś poszło nie tak, prosimy o zgłoszenie tego do pomocy desmos.com (Błąd __error_num__)", 
    "Sign In": "Zaloguj się", 
    "Polar Conic Sections": "Krzywe stożkowe we współrzędnych biegunowych", 
    "optional": "opcjonalnie", 
    "You haven't written anything yet.": "Nie napisałeś jeszcze niczego.", 
    "Sorry, we didn't find any graphs with that title.": "Niestety nie znaleźliśmy żadnych wykresów z tym tytułem.", 
    "Y-Axis": "Oś Y", 
    "Want us to consider featuring it?": "Chcesz abyśmy rozważyli publikację?", 
    "What effect does k have on the function g(x)?": "Jaki wpływ ma k na funkcję g(x)?", 
    "Tours": "Szkolenie", 
    "Reflections of a Function": "Odbicia wykresu funkcji", 
    "expression": "wyrażenie", 
    "Close": "Zamknij", 
    "send us feedback": "prześlij opinię", 
    "For example, try typing: __dependency__(x).": "Na przykład, spróbuj wpisać: __dependency__(x).", 
    "Unit Circle": "Okrąg jednostkowy", 
    "powered by": "zasilany przez", 
    "table": "tabelka", 
    "loading...": "ładowanie...", 
    "Forgot your password?": "Nie pamiętasz hasła?", 
    "Calculus": "Analiza matematyczna", 
    "Click here to add a new table.": "Kliknij tutaj, aby dodać nową tabelkę.", 
    "Jun": "Czerwiec", 
    "You're a restrictions star!": "Jesteś gwiazdą ograniczeń!", 
    "Jul": "Lipiec", 
    "Inverse of a Function": "Funkcja odwrotna", 
    "Edit Account": "Edytuj konto", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Nie ma sposobu, aby zapisać wykres za pośrednictwem aplikacji (jeszcze!). Jeśli chcesz zapisać wykres, zalecamy odwiedzenie www.desmos.com/calculator i zalogowanie się na swoje konto Desmos.", 
    "Delete All": "Usuń wszystko", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Nie ma sposobu, aby udostępnić wykres za pośrednictwem aplikacji (jeszcze!). Jeśli chcesz udostępnić link do swojego wykresu, zalecamy odwiedzenie www.desmos.com/calculator i zalogowanie się na swoje konto Desmos.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinusoida z amplitudą \"a\" i okresem \"b\"", 
    "what's this?": "Co to jest?", 
    "Done": "Zrobione", 
    "Desmos Graphing Calculator": "Kalkulator graficzny Desmos", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' nie może być użyte jako parametr regresji.", 
    "Nested lists are not allowed.": "Listy zagnieżdżone nie są dozwolone.", 
    "Sign In with Your Google Account": "Zaloguj się za pomocą konta Google", 
    "loading graphs...": "ładowanie wykresu...", 
    "Click here to make a new blank expression.": "Kliknij tutaj, aby utworzyć miejsce na nowe wyrażenie.", 
    "Send Feedback": "Prześlij opinię", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Teraz nanieśmy rezydua na wykres.</b><br>Wpisz __residualVariable__ w nowej kolumnie tabeli.", 
    "Table created.": "Tabela została utworzona.", 
    "Click back to continue editing.": "Kliknij przycisk Wstecz, aby kontynuować edycję.", 
    "Ranges must be arithmetic sequences.": "Zakresy muszą być ciągami arytmetycznymi.", 
    "Enjoying Desmos?": "Podoba Ci się Desmos?", 
    "Name:": "Imię:", 
    "Add Item": "Dodaj element", 
    "Click to show the list of expressions.": "Kliknij, aby wyświetlić listę wyrażeń.", 
    "Function g(x) is a transformed version of function f(x).": "Funkcja g(x) jest przekształceniem funkcji f (x).", 
    "Lines": "Proste", 
    "yesterday": "wczoraj", 
    "Hint #1: to get __y_1__ type __y1__.": "Porada #1: żeby uzyskać __y_1__ wpisz __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "Nie można przedefiniować '__symbol__' , bo to jest już zdefiniowane.", 
    "How do I save my graph?": "Jak mogę zapisać mój wykres?", 
    "Opened '__graphTitle__'": "Otworzono \"__graphTitle__\"", 
    "Trigonometry": "Trygonometria", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Niestety, nie można jeszcze wykreślić __symbol__ w funkcji czegokolwiek.", 
    "No Unsaved Changes": "Brak niezapisanych zmian", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Obsługiwane są tylko __form1__ i __form2__. W przeciwnym razie, należy użyć nawiasów.", 
    "one minute ago": "minutę temu", 
    "Vertex Form": "Postać kanoniczna", 
    "Other Questions?": "Inne pytania?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Udaj się do Google Docs i skopiuj i wklej __sample_data_link__.", 
    "Square Grid": "Ta sama skala osi", 
    "style:": "styl:", 
    "Ask us on Twitter": "Zapytaj nas na Twitterze", 
    "Function '__dependency__' requires an argument. __supplement__": "Funkcja \"__dependency__\" wymaga argumentu. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Nie rozwiązujemy jeszcze  skomplikowanych równań z jedną niewiadomą.", 
    "__number__ hours ago": "__number__ godzin temu", 
    "Click and hold on this icon until the options menu opens up.": "Kliknij i przytrzymaj na tej ikonie, dopóki nie otworzą się opcje menu.", 
    "size:": "rozmiar:", 
    "Remembered your password?": "Zapamiętać hasło?", 
    "Download the User Guide": "Pobierz Podręcznik użytkownika", 
    "Go \"Hands-free\"": "Po prostu obejrzyj!", 
    "step:": "krok:", 
    "Cannot index into something that is not a list.": "Nie można indeksować czegoś co nie jest listą.", 
    "Radians": "Radiany", 
    "Let's start with some data!": "Zacznijmy z paroma danymi!", 
    "Uh-oh! Type a valid number here.": "O nie! Wpisz prawidłową liczbę tutaj.", 
    "Use your Email Address": "Użyj adresu E-mail", 
    "General Form": "Postać ogólna", 
    "Embed": "Osadź", 
    "You did not select a file": "Nie wybrano pliku", 
    "Standard Form with Tangent": "Postać ogólna ze styczną", 
    "Your Name:": "Imię i nazwisko:", 
    "Two Point Form": "Postać przez dwa punkty", 
    "Now click here to add the sliders.": "Teraz kliknij tutaj, aby dodać suwaki.", 
    "Limacon": "Ślimak Pascala", 
    "Click here to add a new item.": "Kliknij tutaj, aby dodać nowy element.", 
    "Don't forget the \"y=\"!": "Nie zapomnij \"y =\"!", 
    "Fill in this whole row.": "Wypełnij cały rząd.", 
    "Invalid x coordinate.": "Nieprawidłowa współrzędna x.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Teraz ograniczmy zakres. Dodaj na końcu __sample_expression__ .", 
    "Too many variables. Try defining '__variables__'.": "Zbyt wiele zmiennych.  Spróbuj zdefiniować '__variables__'.", 
    "Parameters": "Parametry", 
    "Update Account": "Aktualizacja konta", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Uwaga: zamiast tego można dodać własne dane, klikając przycisk __plus_icon__.", 
    "Convert this to a table.": "Przetwórz to na tabelkę.", 
    "Change this equation to __sample_expression__": "Zmień to równanie na __sample_expression__", 
    "Email": "Email", 
    "Taylor Expansion of sin(x)": "Rozwinięcie Taylora funkcji sin(x)", 
    "rate it in the app store": "oceń go w app store", 
    "Now graph: __sample_expression__": "Teraz wykres: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "'__dependency__' jest zdefiniowane w więcej niż jednym miejscu. Spróbuj wybrać inną zmienną lub usuń niektóre definicje '__dependency__'.", 
    "All the Trig Functions": "Wszystkie funkcje trygonometryczne", 
    "We only plot inequalities of x and y, or r and θ.": "Tworzymy wykresy nierówności tylko z x i y lub r i θ.", 
    "Share your thoughts!": "Podziel się swoją opinią!", 
    "Factored Form": "Postać iloczynowa", 
    "Fill it in.": "Wypełnij.", 
    "Sorry, I don't understand this.": "Niestety, nie rozumiem tego.", 
    "Image": "Obraz", 
    "Learn More": "Dowiedz się więcej", 
    "You can't use '__symbol__' as an index because it's already defined.": "Nie można użyć '__symbol__'  jako indeksu, bo to jest już zdefiniowane.", 
    "What do you want '__symbol__' to equal?": "Czemu ma się równać \"__symbol__\"?", 
    "add slider:": "dodaj suwak:", 
    "or": "lub", 
    "Does not compute to constant.": "Stała nie jest obliczana.", 
    "New Blank Graph": "Nowy, pusty wykres", 
    "Feb": "Luty", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ogranicz zakres tej linii przez dodanie na końcu __sample_expression__ .", 
    "image": "obraz", 
    "Duplicate": "Duplikuj", 
    "Statistics": "Statystyka", 
    "Degrees": "Stopnie", 
    "Hide List": "Ukryj listę", 
    "Start by graphing a function.": "Zacznij od wykresów funkcji.", 
    "Intercept Form": "Postać odcinkowa", 
    "Tell us on Facebook": "Facebook", 
    "Inequalities are not allowed.": "Nierówności nie są dozwolone.", 
    "Click here to continue editing this table.": "Kliknij tutaj, aby kontynuować edycję tej tabeli.", 
    "Click the \"Edit List\" button.": "Kliknij przycisk \"Edytuj listę\".", 
    "Dec": "Grudzień", 
    "Convert to Table": "Konwertuj do tabeli", 
    "Variable '__dependency__' can't be used as a function.": "Zmienna '__dependency__' nie może być użyta na oznaczenie funkcji.", 
    "Polar equations must be linear in r.": "W równaniach biegunowych r musi być liniowe.", 
    "Move the parabola.": "Przesuń parabolę.", 
    "You're a table wizard!": "Jesteś Kreatorem tabel!", 
    "Polar Rose": "Róża polarna", 
    "Save (ctrl+s)": "Zapisz (ctrl + s)", 
    "search by title...": "Szukaj według tytułu...", 
    "Logarithmic Spiral": "Spirala logarytmiczna", 
    "type your question or suggestion...": "Wpisz swoje pytanie lub sugestię...", 
    "functions": "funkcje", 
    "Mar": "Marzec", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Wskazówka: można wpisać y = x ^ 2 lub użyć przycisku na klawiaturze poniżej a<sup>2</sup>.", 
    "May": "Maj", 
    "Save As or Rename (ctrl+shift+s)": "Zapisz jako lub zmień nazwę (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "Nie można wykreślić θ jako funkcji od r. Spróbuj, zamiast tego, wykresu r(θ).", 
    "Please enter your email address. We will send a password recovery link to you.": "Podaj swój adres e-mail. Wyślemy Ci link do odzyskiwania hasła .", 
    "Visiting anonymously from Clever.": "Wizyta anonimowo z Clever.", 
    "Equations are not allowed.": "Równania nie są dozwolone.", 
    "Phase": "Faza", 
    "Link to Google": "Link do Google", 
    "Message: <i>(optional)</i>": "Wiadomość: <i>(opcjonalnie)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Kliknij ikonę obok każdej z funkcji trygonometrycznych, aby ją włączyć lub wyłączyć:", 
    "Please enter your feedback.": "Podaj swoją opinię.", 
    "We only support implicit equations of x and y.": "Obsługujemy równania uwikłane tylko z x i y.", 
    "Error signing in with Clever.": "Błąd przy logowaniu z Clever."
},"hu":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "A bejelentkezés blokkolva. Kérjük engedélyezze a beugró ablakokat, hogy be tudjon lépni a Google-ba.", 
    "Feb": "Febr", 
    "Aug": "Aug", 
    "Image upload is not supported in this browser.": "Ez a böngésző nem támogatja a kép feltöltését.", 
    "For example, try typing: __dependency__(x).": "Akkor próbálkozzon ezzel a beírással: __dependency__(x).", 
    "just now": "épp most", 
    "Jan": "Jan", 
    "Jul": "Júl", 
    "Function '__dependency__' requires an argument. __supplement__": "A függvény \"__dependency__\" egy argumentumot igényel. __supplement__", 
    "Oct": "Okt", 
    "The file \"__file__\" is not an image": "Ez a fájl \"__file__\" nem kép", 
    "functions": "funkciók", 
    "Mar": "Márc", 
    "Table created.": "Táblázat létrehozva.", 
    "__number__ hours ago": "__number__ óra óta", 
    "No Unsaved Changes": "Minden változás elmentve", 
    "__number__ weeks ago": "__number__ hete", 
    "Brilliant!": "Zseniális!", 
    "Dec": "Dec", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Biztos abban, hogy eldobja a grafikont? Munkái elvesznek.", 
    "Jun": "Jún", 
    "Awesome!": "Remek!", 
    "__number__ minutes ago": "__number__ perc ezelőtt", 
    "Untitled Graph": "Érvénytelen grafikon", 
    "Invalid height.": "A magasság érvénytelen.", 
    "Nov": "Nov", 
    "more": "több", 
    "Definitions are nested too deeply.": "Meghatározások túl mélyen vannak beágyazva.", 
    "Invalid y coordinate.": "Érvénytelen y koordináta.", 
    "For example, try typing: __recommendation__.": "Próbálja meg beírni, hogy __recommendation__.", 
    "This message will self-destruct in __seconds__...": "__seconds__ másodperc után az üzenet megsemmisül...", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "A függvény \"__dependency__\" csak 1 argumentumot igényel. __supplement__", 
    "Click here to create a new expression.": "Kattintson ide, hogy hozzon létre egy új kifejezést.", 
    "last week": "múlt héten", 
    "yesterday": "tegnap", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Valami elromlott, kérjük jelezze a desmos.com támogatására. (Hiba-__error_num__)", 
    "Opened '__graphTitle__'": "'__graphTitle__' megnyitva", 
    "Save Changes (ctrl+s)": "Változások mentése (ctrl+s)", 
    "one hour ago": "egy órával ezelőtt", 
    "You did not select a file": "Nem választott ki fájlt", 
    "Sep": "Szept", 
    "Apr": "Ápr", 
    "one minute ago": "egy perc ezelőtt", 
    "__number__ days ago": "__number__ nappal ezelőtt", 
    "Please enter your feedback.": "Kérjük, írja be a visszajelzést.", 
    "May": "Máj", 
    "A B C": "A B C", 
    "Desmos Graphing Calculator": "Desmos grafikus számológép", 
    "Invalid width.": "A szélesség érvénytelen.", 
    "Invalid x coordinate.": "Érvénytelen x koordináta.", 
    "or": "vagy", 
    "on __month__ __day__, __year__": "__year__.__month__.__day__."
},"ca":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "La finestra d'accés és bloquejada. Sisplau, feu que el vostre navegador desbloquegi les popups de desmos.com per poder accedir amb Google.", 
    "all": "tots", 
    "Try adding an equals sign to turn this into an equation.": "Proveu d'afegir un signe d'igualtat per convertir-ho en equació.", 
    "Undo (ctrl+z)": "Desfer (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Quin efecte té b sobre la funció g(x)?", 
    "Share your graph with the world!": "Compartiu la gràfica amb el món!", 
    "__number__ minutes ago": "fa __number__ minuts", 
    "Let's make a scatter plot!": "Anem a fer un núvol de punts!", 
    "Hide this warning.": "Amagar aquest avís.", 
    "Nice!": "Ben fet!", 
    "Nov": "Nov", 
    "Zoom In": "Ampliar", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "La funció '__dependency__' requereix només 1 argument. __supplement__", 
    "saved": "guardat", 
    "center:": "centre:", 
    "When __symbol__ is called with more than two arguments, no argument can be a list.": "Quan es fa servir __symbol__ amb més de dos arguments, cap dels dos pot ser una llista.", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' i '__lastSymbol__' no es poden definir un en funció de l'altre.", 
    "Click to return to this graph.": "Cliqueu per tornar a la gràfica.", 
    "Press play to animate the slider.": "Cliqueu el play per animar la barra lliscant.", 
    "Didn't work? Try again!": "No ha funcionat? Torneu-hi!", 
    "Now, let's try a new model.": "Provem ara un nou model.", 
    "Tables": "Taules", 
    "Table headers must be simple expressions. __supplement__": "Les capçaleres de les taules han de ser expressions simples. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "La funció '__symbol__' requereix com a mínim un argument. Per exemple, proveu d'escriure: __symbol__(1,2).", 
    "Function definitions are not allowed.": "Aquí no són permeses les definicions de funcions.", 
    "Too many variables, I don't know what to do with this.": "Hi ha massa variables. No sabem què fer-ne.", 
    "Logarithmic Spiral": "Espiral logarítmica", 
    "Circle": "Cercle", 
    "Secant Line": "Recta secant", 
    "Polar Graphing": "Gràfica polar", 
    "Visualizing Slope": "Visualització de la pendent", 
    "How can I change the color?": "Com puc canviar el color?", 
    "Fill in the sample data:": "Empleneu les dades:", 
    "Grid": "Quadrícula", 
    "List index must not be a list.": "L'índex de llista no pot ser una llista mateixa.", 
    "Invalid height.": "Alçada incorrecta.", 
    "Click here to create a new expression.": "Cliqueu aquí per crear una nova expressió.", 
    "New Password:": "Nova contrasenya:", 
    "Failed to find regression coefficients.": "No s'ha pogut trobar els coeficients de regressió.", 
    "For example, try typing: __recommendation__.": "Per exemple, proveu d'escriure: __recommendation__.", 
    "How do I share a link to my graph?": "Com puc compartir un enllaç a la meva gràfica?", 
    "Regressions must contain at least one list of data.": "Les regressions han de tenir com a mínim una llista de dades.", 
    "sending...": "enviant dades...", 
    "Hide Keypad": "Amagar teclat", 
    "last week": "setmana passada", 
    "Show List": "Mostrar llistat", 
    "We only plot double inequalities of x and y.": "Només plotegem inequacions de x i y.", 
    "Nice work &ndash; Keep exploring!": "Bona feina &ndash; Seguiu explorant!", 
    "Slope Intercept Form": "en forma explícita", 
    "no, thanks": "no, gràcies", 
    "Recover Password": "Recuperar contrasenya", 
    "Terms of Use": "Termes d'ús", 
    "Show Keypad": "Mostrar teclat", 
    "Aug": "Ago", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "No podeu fer servir '__dependency__' com a paràmetre per a aquesta funció perquè '__dependency__' ja està definit.", 
    "You're a scatter plot whiz!": "Ets un geni dels núvols de punts!", 
    "Standard Form": "Forma estàndard", 
    "one hour ago": "fa una hora", 
    "You're a slider pro!": "Ets un crac de les barres lliscants!", 
    "Delete": "Esborrar", 
    "drag:": "arrossegat:", 
    "more": "més", 
    "Point Slope Form": "forma punt-pendent", 
    "How is this app free?": "Com és que aquesta app és gratuïta?", 
    "Nice Graph!": "Però quina gràfica tan xula!", 
    "Feedback": "Comentaris", 
    "Desmos User Guide": "Guia d'usuari Desmos", 
    "example": "exemple", 
    "on __month__ __day__, __year__": "el __day__ - __month__ - __year__", 
    "Graph Settings": "Configuració", 
    "Share Graph": "Compartir Gràfica", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Les inequacions dobles han d'anar en el mateix sentit, com per exemple 1<y<2.", 
    "Show Numbers": "Mostra els números", 
    "Wave Interference": "Interferència d'ones", 
    "message sent": "missatge enviat", 
    "Sign Out": "Tancar la sessió", 
    "X-Axis": "Eix x", 
    "Graph Paper": "Full de gràfica", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos es troba en mode de previsualització, i això vol dir que no podreu guardar gràfiques.", 
    "Save Changes (ctrl+s)": "Desar els canvis (ctrl+s)", 
    "Regressions": "Regressions", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Clicant \"__btn__\" confirmeu que heu llegit i acceptat els nostres __terms_of_use_link__.", 
    "Sign In with Desmos": "Accediu amb Desmos", 
    "Password:": "Contrasenya:", 
    "Link to your Google Account": "Enllaç al vostre compte de Google", 
    "Parabolas": "Paràboles", 
    "Email:": "Adreça electrònica:", 
    "enter": "enter", 
    "Derivatives": "Derivades", 
    "Jan": "Gen", 
    "First column may not be __most__ or __last__.": "La primera columna no pot ser __most__ o bé __last__.", 
    "Translating Any Function": "Traslació de qualsevol funció", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Els residus són les deiferències entre les dades i el model. Cliqueu aquí per afegir-los a la vostra taula i plotejar-los a sobre la gràfica.", 
    "Oct": "Oct", 
    "Sign In with Google": "Inicieu la sessió amb Google", 
    "Just fill in one more...": "Empleneu-ne una més...", 
    "Untitled Graph": "Gràfica sense títol", 
    "... and select the \"table\" option.": "... i seleccioneu l'opció \"taula\".", 
    "Points are written like this: (1, 2).": "Els punts s'escriuren així: (1, 2).", 
    "New graph created.": "S'ha creat una nova gràfica.", 
    "HTML Embed Code": "Codi HTML per inserir", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Teniu un segon per ajudar-nos? Les vostres valoracions i comentaris poden ajudar a altres a trobar-nos, i ajudar-nos a millorar la calculador. Digueu-nos què en penseu!", 
    "Click to return to your expressions.": "Cliqueu per tornar a les expressions.", 
    "A B C": "A B C", 
    "enter a note...": "introduir una nota...", 
    "Only __form__ is supported. Otherwise, use parens.": "Només admetem __form__. Per a la resta, feu servir parèntesis.", 
    "Hyperbola": "Hipèrbola", 
    "Unsupported Browser": "Navegador no suportat", 
    "Save This Graph": "Desar aquesta gràfica", 
    "Show Grid Angles": "Mostra els angles de la quadrícula", 
    "Let's get started!": "Som-hi!", 
    "This is the name we'll use if we feature one of your graphs.": "Aquest és el nom que farem servir si comptem amb una de les vostres gràfiques.", 
    "We zoomed to fit your data.": "Hem fet un zoom per ajustar-ho a les vostres dades.", 
    "FAQs": "Preguntes freqüents", 
    "Sliders": "Barres lliscants", 
    "Click anywhere to close the drawing options.": "Cliqueu a qualsevol lloc per tancar les opcions de dibuix.", 
    "Print": "Imprimir", 
    "Move right to add a new column.": "Aneu a la dreta per afegir una nova columna.", 
    "Save": "Desar", 
    "Repeat Password:": "Repetiu la contrasenya:", 
    "Try graphing a straight line, like __sample_expression__": "Proveu de fer la gràfica d'una recta, com per exemple __sample_expression__", 
    "Conic Sections": "Seccions còniques", 
    "Definitions are nested too deeply.": "Les definicions estan jerarquitzades de forma massa llarga.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Proveu d'afegir '__lhs__' al principi d'aquesta equació.", 
    "Tangent Line": "Recta tangent", 
    "Period and Amplitude": "Període i amplitud", 
    "Try typing __sample_expression__": "Proveu d'entrar __sample_expression__", 
    "Apr": "Abr", 
    "sample data": "dades de mostra", 
    "Now try pressing Enter.": "I ara proveu de prémer l'Enter.", 
    "Lists are not allowed.": "Aquí no són permeses les llistes.", 
    "size:": "mida:", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "La funció '__dependency__' requereix __assignment_arity__ arguments. __supplement__", 
    "note": "nota", 
    "Needs work": "Necessita feina", 
    "BBCode": "BBCode", 
    "Projector Mode": "Mode Projector", 
    "just now": "ara mateix", 
    "I just want to graph": "Només vull fer la gràfica", 
    "Click here to create a new blank expression.": "Cliqueu aquí per fer una nova expressió en blanc.", 
    "Range cannot depend on free variable '__symbol__'.": "El rang no pot dependre de la variable lliure '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos es troba en mode de manteniment.", 
    "The file \"__file__\" is not an image": "El fitxer \"__file__\" no és una imatge", 
    "add label": "Afegir etiqueta", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Editeu aquesta equació per trobar un ajust millor. Proveu per exemple: <br>__equation__", 
    "__number__ weeks ago": "fa __number__ setmanes", 
    "Drop Image Here": "Poseu la imatge aquí", 
    "Open Graph (ctrl+o)": "Obrir gràfica (ctrl+o)", 
    "What effect does h have on the function g(x)?": "Quin efecte té h sobre la funció g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Proveu d'incloure '__symbols__' i '__lastSymbol__' com a arguments tot definint la funció com '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "La funció '__dependency__' no està definida.", 
    "Restrictions": "Restriccions", 
    "Click here to only show the dots.": "Cliqueu aquí per mostrar només els punts.", 
    "Click here to download Google Chrome.": "Cliqueu aquí per descarregar el Google Chrome.", 
    "Zoom Out": "Reduir", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Proveu d'incloure '__lastSymbol__' com a argument tot definint la funció com '__newSignature__'.", 
    "Send": "Enviar", 
    "Try typing all of __sample_expression__": "Proveu d'escriure tota la __sample_expression__", 
    "Too complicated. Use parens.": "Massa complicat. Feu servir parèntesis.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos es troba temporalment en mode de manteniment. Podeu obrir les gràfiques d'exemple, però no podeu accedir al sistema, obrir les vostres gràfiques o desar els canvis. Disculpeu les molèsties.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Gràcies per la resposta&ndash;aviat tindreu notícies nostres!", 
    "Sep": "Set", 
    "Redo (ctrl+y)": "Refer (ctrl + y)", 
    "__number__ days ago": "fa __number__ dies", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos es trioba en mode de manteniment. No podeu guardar els canvis d'aquesta gràfica. Disculpeu les molèsties!", 
    "Cancel": "Cancel·lar", 
    "Send to:": "Enviar a:", 
    "Open Graph": "Obrir gràfica", 
    "Table entries must be simple expressions. __supplement__": "Les entrades de la taula han de ser expressions simples. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Només resolem inequacions dobles com a màxim. Proveu d'esborrar un costat de la inequació.", 
    "Scaling Any Function": "Escalat de qualsevol funció", 
    "Last trick!": "Últim truc!", 
    "Share this link:": "Compartiu aquest enllaç:", 
    "Language": "Idioma", 
    "The first argument of '__symbol__' must be a list. For example, try typing: __recommendation__.": "El primer argument de '__symbol__' ha de ser una llista. Per exemple, proveu de posar: __recommendation__.", 
    "Awesome!": "Genial!", 
    "Click here to generate a table.": "Cliqueu aquí per generar una taula.", 
    "to save and share your graphs!": "per guardar i compartir les vostres gràfiques!", 
    "Standard Form with Tangent": "Forma estàndard amb tangent", 
    "Invalid y coordinate.": "Coordenada y incorrecta.", 
    "I love it": "M'encanta", 
    "We'll never share or sell your email address.": "Mai compartirem ni vendrem la vostra adreça electrònica.", 
    "Residuals": "Residus", 
    "Points are not allowed.": "Aquí no són permesos els punts.", 
    "Arrows:": "Fletxes:", 
    "Edit List": "Editar la llista", 
    "Message sent. Please check your email for a password recovery link.": "Missatge enviat. Si us plau reviseu el vostre correu i mireu si hi ha un enllaç de recuperació de contrasenya.", 
    "Please provide an email so that we can write back.": "Si us plau proporcioneu una adreça electrònica per tal que us poguem contactar.", 
    "Let's make some sliders!": "Anem a posar unes barres lliscants!", 
    "Go down to the next row to add more data.": "Seguiu a la línia de sota per afegir més dades.", 
    "Let's make a function. First: click here to create a new blank expression.": "Anem a fer una funció. Primer: cliqueu aquí per crear una nova expressió en blanc.", 
    "yeah!": "oh i tant!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Error. La fila __rowNum__, columna __colNum__ no és un número.", 
    "Transformations": "Transformacions", 
    "Image upload is not supported in this browser.": "Amb aquest navegador no podeu pujar imatges.", 
    "This column header can't be defined elsewhere in the calculator.": "La capçalera d'aquesta columna no es pot definir en cap altre lloc de la calculadora.", 
    "Update Password": "Actualitzar contrasenya", 
    "Resources": "Recursos", 
    "Help Center": "Centre d'ajuda", 
    "Drag the handle to change the value.": "Arrossegueu el suport per canviar-ne el valor.", 
    "Undo": "Desfer", 
    "Now type: __equation__": "Ara entreu: __equation__", 
    "What effect does a have on the function g(x)?": "Quin efecte té a sobre la funció g(x)?", 
    "Sign in": "Inicia sessió", 
    "Type any number here.": "Aquí entreu qualsevol número.", 
    "folder": "carpeta", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Només plotegem inequacions quan una variable és quadràtica o lineal.", 
    "Send a Copy to Google Drive": "Enviar una còpia a Google Drive", 
    "Tweet @desmos": "Piuleu @desmos", 
    "Angles": "Angles", 
    "This message will self-destruct in __seconds__...": "Aquest missatge s'autodestruirà en __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Pista 2: __twiddle__ és al nostre teclat virtual, a la secció 'A B C'.", 
    "We don't solve single-variable equations involving lists yet.": "Encara no resolem equacions d'una sola variable que comprenen llistes.", 
    "Default Zoom": "Zoom per defecte", 
    "Ellipse with Foci": "El·lipse amb focus", 
    "color:": "color:", 
    "... and select the \"expression\" option.": "... i seleccioneu l'opció \"expressió\".", 
    "Help": "Ajuda", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Pista: cliqueu el botó 'A B C' al teclat per trobar els botons de { }", 
    "Nice. Let's check the model.": "Ben fet. Anem a veure com ha quedat.", 
    "Logged in with Clever!": "Us heu identificat amb Clever!", 
    "This graph has been deleted.": "Aquesta gràfica s'ha eliminat.", 
    "Invalid width.": "Amplada incorrecta.", 
    "Create Account": "Crear un compte", 
    "First, let's get some data.": "Primer, posem unes quantes dades.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos obté diners mitjançant altres societats. Esteu interessats a col·laborar amb Desmos? Escriviu-nos a <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Premeu una estona el cercle de color que hi ha a l'esquerra d'una equació o expressió per obrir les opcions de color i estil.", 
    "Learn more": "Més informació", 
    "Brilliant!": "Fantàstic!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Segur que voleu deixar estar aquesta gràfica? Perdreu la feina no desada.", 
    "Step:": "Pas:", 
    "Parabola and Focus": "Paràbola i focus", 
    "Advanced Tables": "Taules avançades", 
    "Title:": "Títol:", 
    "Current Password:": "Contrasenya actual:", 
    "Click here to connect the dots.": "Cliqueu aquí per connectar els punts.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Hi ha hagut algun problema. Sisplau, informeu-ho a l'equip de suport de desmos.com (Error __error_num__)", 
    "Sign In": "Accedir", 
    "Polar Conic Sections": "Seccions còniques polars", 
    "optional": "opcional", 
    "You haven't written anything yet.": "Encara no heu escrit res.", 
    "Sorry, we didn't find any graphs with that title.": "Ho sentim, però no trobem cap gràfica amb aquest títol.", 
    "Y-Axis": "Eix y", 
    "Want us to consider featuring it?": "Us semblaria bé que la publiquéssim al llistat de les gràfiques predeterminades?", 
    "What effect does k have on the function g(x)?": "Quin efecte té k sobre la funció g(x)?", 
    "Tours": "Tutorial", 
    "Reflections of a Function": "Reflexions d'una funció", 
    "expression": "expressió", 
    "Close": "Tancar", 
    "send us feedback": "envieu-nos comentaris", 
    "For example, try typing: __dependency__(x).": "Per exemple, proveu d'escriure: __dependency__(x).", 
    "Unit Circle": "Cercle unitari", 
    "powered by": "Funciona amb", 
    "table": "taula", 
    "loading...": "carregant...", 
    "Forgot your password?": "Heu oblidat la constrasenya?", 
    "Calculus": "Càlcul", 
    "Make a New Copy": "Fer una nova còpia", 
    "Click here to add a new table.": "Cliqueu aquí per afegir una nova taula.", 
    "Jun": "Jun", 
    "You're a restrictions star!": "És un crac de les restriccions!", 
    "Jul": "Jul", 
    "Inverse of a Function": "Inversa d'una funció", 
    "Edit Account": "Editar el Compte", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "No es pot guardar la vostra gràfica amb l'app (encara!). Us recomanem que visiteu www.desmos.com/calculator i accediu al vostre de Desmos compte si voleu guardar la gràfica.", 
    "Delete All": "Esborrar-ho tot", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "No es pot compartir la vostra gràfica amb l'app (encara!). Us recomanem que aneu a www.desmos.com/calculator i accediu al vostre compte Demos si voleu compartir un enllaç a la vostra gràfica.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinusoide amb amplitud \"a\" i període \"b\"", 
    "what's this?": "què és això?", 
    "Done": "Fet", 
    "Desmos Graphing Calculator": "Calculadora Gràfica Desmos", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' no es pot fer servir com a paràmetre de regressió.", 
    "Nested lists are not allowed.": "No es permeten llistes jerarquitzades.", 
    "Sign In with Your Google Account": "Accediu amb el vostre compte de Google", 
    "loading graphs...": "carregant gràfiques...", 
    "Click here to make a new blank expression.": "Cliqueu aquí per fer una nova expressió en blanc.", 
    "Send Feedback": "Enviar comentaris", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Ara plotegem el residu.</b><br>Entreu __residualVariable__ en una nova columna.", 
    "Table created.": "Taula creada.", 
    "Click back to continue editing.": "Cliqueu enrera per continuar editant.", 
    "Ranges must be arithmetic sequences.": "Els rangs han de ser seqüències aritmètiques.", 
    "Enjoying Desmos?": "Gaudint de Desmos?", 
    "Name:": "Nom:", 
    "Add Item": "Afegir un element", 
    "Click to show the list of expressions.": "Cliqueu per mostrar un llistat d'expressions.", 
    "Logged in successfully!": "Accés correcte!", 
    "Function g(x) is a transformed version of function f(x).": "La funció g(x) és una versió transformada de la funció f(x).", 
    "Lines": "Rectes", 
    "yesterday": "ahir", 
    "Hint #1: to get __y_1__ type __y1__.": "Pista 1: per obtenir __y_1__ entreu __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "No podeu redefinir '__symbol__' perquè ja està definit.", 
    "Function '__symbol__' requires 2 arguments. For example, try typing: __recommendation__.": "La funció '__symbol__' necessita 2 arguments. Per exemple, proveu de posar: __recommendation__.", 
    "How do I save my graph?": "Com guardo la meva gràfica?", 
    "Opened '__graphTitle__'": "Heu obert '__graphTitle__'", 
    "Trigonometry": "Trigonometria", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Ho sentim, però encara no es pot fer la gràfica __symbol__ com a funció de res.", 
    "No Unsaved Changes": "Hi ha canvis no desats", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Només admetem __form1__ i __form2__. Per a la resta feu servir parèntesis.", 
    "one minute ago": "fa un minut", 
    "Vertex Form": "Forma de vèrtex", 
    "Other Questions?": "Altres preguntes?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Aneu a Google Docs i copieu/enganxeu aquest enllaç: __sample_data_link__.", 
    "Square Grid": "Quadrícula quadrada", 
    "style:": "estil:", 
    "Ask us on Twitter": "Pregunteu-nos al Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "La funció '__dependency__' requereix un argument. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Encara no resolem equacions complicades d'una sola variable.", 
    "__number__ hours ago": "fa __number__ hores", 
    "Click and hold on this icon until the options menu opens up.": "Cliqueu aquesta icona i mantingueu-la premuda fins que el menú de les opcions aparegui.", 
    "Learn more.": "Més informació.", 
    "Remembered your password?": "Recordeu la vostra contrasenya?", 
    "Download the User Guide": "Descarregar la guia d'usuari", 
    "Go \"Hands-free\"": "Passeu a \"Mans lliures\"", 
    "step:": "pas:", 
    "Cannot index into something that is not a list.": "No es pot indexar sobre alguna cosa que no sigui una llista.", 
    "Radians": "Radians", 
    "Let's start with some data!": "Comencem amb algunes dades!", 
    "Uh-oh! Type a valid number here.": "Ui, ui, ui... Aquí hi heu de posar un número correcte.", 
    "Use your Email Address": "Feu servir la vostra Adreça Electrònica", 
    "General Form": "en forma general", 
    "Embed": "Inserir", 
    "You did not select a file": "No heu seleccionat cap fitxer", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos funcionarà millor en la vostra versió d'Android si feu anar el Chrome.", 
    "Your Name:": "El vostre nom:", 
    "Two Point Form": "en forma de dos punts", 
    "Now click here to add the sliders.": "I ara cliqueu aquí per afegir barres lliscants.", 
    "Limacon": "Limaçon", 
    "Click here to add a new item.": "Cliqueu aquí per afegir un nou element.", 
    "Don't forget the \"y=\"!": "No us oblideu de posar \"y=\"!", 
    "Fill in this whole row.": "Empleneu la fila sencera.", 
    "Invalid x coordinate.": "Coordenada x incorrecta.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "I ara restringirem el rang. Afegiu __sample_expression__ al final.", 
    "Too many variables. Try defining '__variables__'.": "Hi ha massa variables. Caldria definir '__variables__'.", 
    "Parameters": "Paràmetres", 
    "Update Account": "Actualitzeu el compte", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Nota: podeu afegir les vostres pròpies dades clicant el botó __plus_icon__.", 
    "Convert this to a table.": "Convertiu-ho a una taula.", 
    "Change this equation to __sample_expression__": "Canvieu aquesta equació a __sample_expression__", 
    "Email": "Adreça electrònica", 
    "Taylor Expansion of sin(x)": "Sèrie de Taylor de sin(x)", 
    "rate it in the app store": "valorar-lo a la botiga d'apps", 
    "Now graph: __sample_expression__": "I ara feu la gràfica de: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Heu definit '__dependency__' més d'un cop. Proveu d'escollir una altra variable, o esborreu algunes definicions de '__dependency__'.", 
    "All the Trig Functions": "Totes les funcions trigonomètriques", 
    "We only plot inequalities of x and y, or r and θ.": "Només plotegem inequacions de x i y, o bé de r i θ.", 
    "Share your thoughts!": "Comparteix els teus pensaments!", 
    "Factored Form": "Forma factoritzada", 
    "Fill it in.": "Empleneu.", 
    "Both arguments of '__symbol__' must be lists. For example, try typing: __recommendation__.": "Els dos arguments de '__symbol__' han de ser llistes. Per exemple, proveu de posar: __recommendation__.", 
    "Sorry, I don't understand this.": "Ho sento però no entenc això que has escrit.", 
    "Image": "Imatge", 
    "Learn More": "Més informació", 
    "You can't use '__symbol__' as an index because it's already defined.": "No podeu fer servir '__symbol__' com a índex perquè ja està definit.", 
    "What do you want '__symbol__' to equal?": "A què vols igualar '__symbol__'?", 
    "add slider:": "afegir barra lliscant:", 
    "or": "o bé", 
    "Does not compute to constant.": "No és una constant.", 
    "New Blank Graph": "Nova gràfica en blanc", 
    "Feb": "Feb", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restringiu el domini d'aquesta recta tot afegint __sample_expression__ al final.", 
    "image": "imatge", 
    "Duplicate": "Duplicat", 
    "Statistics": "Estadístiques", 
    "Degrees": "Graus", 
    "Hide List": "Amagar la llista", 
    "Start by graphing a function.": "Comenceu per fer la gràfica d'una funció.", 
    "Intercept Form": "en forma simètrica", 
    "Tell us on Facebook": "Explica'ns-ho al Facebook", 
    "Inequalities are not allowed.": "Aquí no són permeses les inequacions.", 
    "Click here to continue editing this table.": "Cliqueu aquí per continuar editant aquesta taula.", 
    "Click the \"Edit List\" button.": "Cliqueu el botó \"Editar Llista\".", 
    "Dec": "Des", 
    "Convert to Table": "Convertiu a una taula", 
    "Variable '__dependency__' can't be used as a function.": "La variable '__dependency__' no es pot fer servir com a funció.", 
    "This equation contains fine detail that has not been fully resolved.": "Aquesta equació conté petits detalls que no s'han pogut resoldre del tot.", 
    "Polar equations must be linear in r.": "Les equacions en polars han de ser lineals en r.", 
    "Move the parabola.": "Moveu la paràbola.", 
    "You're a table wizard!": "Sou un crac de les taules!", 
    "Polar Rose": "Rosa polar", 
    "Save (ctrl+s)": "Guardar (ctrl+s)", 
    "search by title...": "cercar per títol...", 
    "type your question or suggestion...": "escriviu la vostra pregunta o suggeriment...", 
    "functions": "funcions", 
    "Mar": "Mar", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Pista: podeu entrar y=x^2, o fer servir el botó a<sup>2</sup> del teclat de sota.", 
    "May": "Mai", 
    "Save As or Rename (ctrl+shift+s)": "Guardar Com o Renombrar (ctrl+shift+s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "No podem plotejar θ com a funció de r. Enlloc d'això, proveu de plotejar r(θ).", 
    "Please enter your email address. We will send a password recovery link to you.": "Sisplau introduïu la vostra adreça electrònica. Us enviarem un enllaç per recuperar la contrasenya.", 
    "Visiting anonymously from Clever.": "Esteu fent una visita anònima des de Clever.", 
    "Equations are not allowed.": "Aquí no són permeses les equacions.", 
    "Phase": "Fase", 
    "Link to Google": "Enllaç a Google", 
    "Create an Account": "Creeu-vos un compte", 
    "Message: <i>(optional)</i>": "Missatge: <i>(opcional)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Fes clic en la icona del costat de cada funció trigonomètrica per a activar-la o desactivar-la:", 
    "Please enter your feedback.": "Sisplau, digueu-nos què en penseu.", 
    "We only support implicit equations of x and y.": "Només treballem amb equacions implícites de x i y.", 
    "Error signing in with Clever.": "Hi ha hagut algun error accedint amb Clever."
},"es-ES":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "La ventana de inicio está bloqueda. Por favor, permita las ventanas emergentes de desmos.com para iniciar sesión con Google.", 
    "all": "todo", 
    "Try adding an equals sign to turn this into an equation.": "Inténtelo añadiendo un signo de igual para convertir esto en una ecuación.", 
    "Undo (ctrl+z)": "Deshacer (ctrl + z)", 
    "What effect does b have on the function g(x)?": "¿Cuál es el efecto que tiene b sobre la función g(x)?", 
    "Share your graph with the world!": "¡Compartir su gráfica con el mundo!", 
    "__number__ minutes ago": "hace __number__ minutos", 
    "Let's make a scatter plot!": "¡Hagamos un diagrama de dispersión!", 
    "Hide this warning.": "Ocultar esta advertencia.", 
    "Nice!": "¡Agradable!", 
    "Nov": "noviembre", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "La función '__dependency__' requiere solamente un argumento. __supplement__", 
    "saved": "guardada", 
    "center:": "centro:", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' y '__lastSymbol__' no se pueden definir uno en términos del otro.", 
    "Click to return to this graph.": "Haga clic para regresar a esta gráfica.", 
    "Press play to animate the slider.": "Presione play para animar el deslizador.", 
    "Didn't work? Try again!": "¿No funcionó? ¡Inténtelo de nuevo!", 
    "Now, let's try a new model.": "Ahora, vamos a probar un nuevo modelo.", 
    "Tables": "Tablas", 
    "Table headers must be simple expressions. __supplement__": "Los encabezados de las tablas deben ser expresiones simples. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "La función '__symbol__' requiere al menos un argumento. Por ejemplo, intente escribir: __symbol__ (1, 2).", 
    "Function definitions are not allowed.": "Las definiciones de función no están permitidas.", 
    "Too many variables, I don't know what to do with this.": "Hay demasiadas variables, no sé qué hacer con esto.", 
    "Click here to download Google Chrome.": "Haga clic aquí para descargar Google Chrome.", 
    "Circle": "Circunferencia", 
    "Secant Line": "Recta secante", 
    "Polar Graphing": "Gráficas en coordenadas polares", 
    "Visualizing Slope": "Visualización de la pendiente", 
    "How can I change the color?": "¿Cómo puedo cambiar el color?", 
    "Fill in the sample data:": "Rellene con los datos de la muestra:", 
    "Grid": "Cuadrícula", 
    "List index must not be a list.": "El índice de una lista no debe ser una lista.", 
    "Invalid height.": "La altura no es válida.", 
    "Click here to create a new expression.": "Haga clic aquí para crear una nueva expresión.", 
    "New Password:": "Contraseña nueva:", 
    "Failed to find regression coefficients.": "No se encontraron coeficientes de regresión.", 
    "For example, try typing: __recommendation__.": "Por ejemplo, intente escribir: __recommendation__.", 
    "How do I share a link to my graph?": "¿Cómo comparto un enlace a mi gráfica?", 
    "Regressions must contain at least one list of data.": "Las regresiones deben contener al menos una lista de datos.", 
    "sending...": "enviando...", 
    "Hide Keypad": "Ocultar el teclado", 
    "last week": "la semana pasada", 
    "Show List": "Mostrar la lista", 
    "We only plot double inequalities of x and y.": "Sólo graficamos dobles desigualdades en x e y.", 
    "Nice work &ndash; Keep exploring!": "Buen trabajo &ndash; ¡Siga explorando!", 
    "Slope Intercept Form": "Forma punto - pendiente", 
    "no, thanks": "no, gracias", 
    "Recover Password": "Recuperar contraseña", 
    "Terms of Use": "Términos de uso", 
    "Show Keypad": "Mostrar el teclado", 
    "Aug": "agosto", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "No puede utilizar '__dependency__' como un parámetro de esta función porque '__dependency__' ya está definido.", 
    "You're a scatter plot whiz!": "¡Es usted un genio de los diagramas de dispersión!", 
    "Standard Form": "Forma estándar", 
    "one hour ago": "hace una hora", 
    "You're a slider pro!": "¡Usted es un deslizador profesional!", 
    "Delete": "Borrar", 
    "drag:": "arrastre:", 
    "more": "más", 
    "Point Slope Form": "Ecuación punto-pendiente de la recta", 
    "How is this app free?": "¿Cómo es gratuita esta aplicación?", 
    "Nice Graph!": "¡Una gráfica agradable!", 
    "Feedback": "Retroalimentación", 
    "Desmos User Guide": "Guía del usuario de Desmos", 
    "example": "ejemplo", 
    "on __month__ __day__, __year__": "el __day__ de __month__ de __year__", 
    "Graph Settings": "Configuración de las gráficas", 
    "Share Graph": "Compartir la gráfica", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Las dobles desigualdades deben ir en el mismo sentido, por ejemplo 1 < y < 2.", 
    "Show Numbers": "Mostrar los números", 
    "Wave Interference": "Interferencia de ondas", 
    "message sent": "mensaje enviado", 
    "Sign Out": "Cerrar sesión", 
    "X-Axis": "Eje X", 
    "Graph Paper": "Papel para graficar", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos está en modo de vista previa, de manera que usted no podrá guardar gráficas.", 
    "Save Changes (ctrl+s)": "Guardar los cambios (ctrl+s)", 
    "Regressions": "Regresiones", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Al hacer clic en \"__btn__,\"  usted reconoce que ha leído y acepta nuestros __terms_of_use_link__.", 
    "Sign In with Desmos": "Iniciar sesión con Desmos", 
    "Password:": "Contraseña:", 
    "Link to your Google Account": "Enlazar con su cuenta en Google", 
    "Parabolas": "Parábolas", 
    "Email:": "Email:", 
    "enter": "enter", 
    "Derivatives": "Derivadas", 
    "Jan": "enero", 
    "First column may not be __most__ or __last__.": "La primera columna no puede ser __most__ o __last__.", 
    "Translating Any Function": "Traslaciones de cualquier función", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Los residuos son la diferencia entre sus datos y su modelo. Haga clic aquí para añadirlos a su tabla y representarlos en la gráfica.", 
    "Oct": "octubre", 
    "Sign In with Google": "Iniciar sesión con Google", 
    "Just fill in one more...": "Solamente llene uno más...", 
    "Untitled Graph": "Gráfico sin título", 
    "... and select the \"table\" option.": "... y seleccione la opción \"tabla\".", 
    "Points are written like this: (1, 2).": "Los puntos se escriben así: (1, 2).", 
    "New graph created.": "Se ha creado una nueva gráfica.", 
    "HTML Embed Code": "Incrustar código HTML", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Tienes un segundo para ayudarnos? Tus calificaciones y comentarios nos ayudan a que otras personas nos encuentren, y nos ayudan a realizar una mejor calculadora. Dinos que es lo que piensas!", 
    "Click to return to your expressions.": "Haga clic para regresar a sus expresiones.", 
    "A B C": "A B C", 
    "enter a note...": "Introduzca una nota...", 
    "Only __form__ is supported. Otherwise, use parens.": "Solamente es compatible __form__. En otro caso, use paréntesis.", 
    "Hyperbola": "Hipérbola", 
    "Unsupported Browser": "Navegador no soportado", 
    "Show Grid Angles": "Mostrar los ángulos de la cuadrícula", 
    "Let's get started!": "¡Comencemos!", 
    "This is the name we'll use if we feature one of your graphs.": "Este es el nombre que utilizaremos si presentamos una de sus gráficas.", 
    "We zoomed to fit your data.": "Hicimos zoom para ajustar sus datos.", 
    "FAQs": "Preguntas frecuentes", 
    "Sliders": "Deslizadores", 
    "Click anywhere to close the drawing options.": "Haga clic en cualquier parte para cerrar las opciones de dibujo.", 
    "Print": "Imprimir", 
    "Move right to add a new column.": "Muévase a la derecha para agregar una nueva columna.", 
    "Repeat Password:": "Repita su contraseña:", 
    "Try graphing a straight line, like __sample_expression__": "Intente graficar una recta, como __sample_expression__", 
    "Conic Sections": "Secciones cónicas", 
    "Definitions are nested too deeply.": "Las definiciones están anidadas demasiado profundamente.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Inténtelo añadiendo '__lhs__' al inicio de esta ecuación.", 
    "Tangent Line": "Recta tangente", 
    "Period and Amplitude": "Periodo y amplitud", 
    "Try typing __sample_expression__": "Intente escribiendo __sample_expression__", 
    "Apr": "abril", 
    "sample data": "datos de la muestra", 
    "Now try pressing Enter.": "Ahora intente presionar la tecla Enter.", 
    "Lists are not allowed.": "Las listas no están permitidas.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "La función '__dependency__' requiere argumentos __assignment_arity__. __supplement__", 
    "note": "nota", 
    "Needs work": "Necesita trabajo", 
    "BBCode": "BBCode", 
    "Projector Mode": "Modo de proyección", 
    "just now": "en este momento", 
    "I just want to graph": "Sólo quiero graficar", 
    "Click here to create a new blank expression.": "Haga clic aquí para crear una nueva expresión en blanco.", 
    "Range cannot depend on free variable '__symbol__'.": "El rango no puede depender de una variable libre '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos se encuentra en mantenimiento.", 
    "The file \"__file__\" is not an image": "El archivo \"__file__\" no es una imagen", 
    "add label": "Añadir una etiqueta", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Edite esta ecuación para encontrar un mejor ajuste. Probar, por ejemplo: <br>__equation__", 
    "__number__ weeks ago": "hace __number__ semanas", 
    "Drop Image Here": "Suelte aquí la imagen", 
    "Open Graph (ctrl+o)": "Abrir gráfica (ctrl + o)", 
    "What effect does h have on the function g(x)?": "¿Cuál es el efecto que tiene h sobre la función g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Inténtelo incluyendo'__symbols__' y '__lastSymbol__' como argumentos definiendo la función como '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "La función '__dependency__' no está definida.", 
    "Restrictions": "Restricciones", 
    "Click here to only show the dots.": "Haga clic aquí para mostrar solamente los puntos.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Inténtelo incluyendo '__lastSymbol__' como argumento definiendo la función como '__newSignature__'.", 
    "Send": "Enviar", 
    "Try typing all of __sample_expression__": "Intente escribir completamente __sample_expression__", 
    "Too complicated. Use parens.": "Demasiado complicado. Utilice paréntesis.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos está temporalmente en mantenimiento. Usted puede abrir las gráficas de ejemplo pero no podrá iniciar sesión, abrir sus gráficas o guardar cualquier cambio. Lamentamos mucho las molestias que esto ocasiona.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Gracias por la retroalimentación &ndash; ¡pronto tendrá noticias nuestras!", 
    "Sep": "septiembre", 
    "Redo (ctrl+y)": "Rehacer (ctrl + y)", 
    "__number__ days ago": "hace __number__ días", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos está en mantenimiento, usted no podrá guardar los cambios a esta gráfica. ¡Lamentamos mucho los inconvenientes!", 
    "Cancel": "Cancelar", 
    "Send to:": "Enviar a:", 
    "Open Graph": "Abrir Gráfica", 
    "Table entries must be simple expressions. __supplement__": "Las entradas de las tablas deben ser expresiones simples. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Solamente tenemos soporte para dobles desigualdades resueltas. Inténtelo borrando un lado de la desigualdad.", 
    "Scaling Any Function": "Cambios de escala sobre cualquier función", 
    "Last trick!": "¡Último truco!", 
    "Share this link:": "Compartir este enlace:", 
    "Language": "Idioma", 
    "Awesome!": "¡Impresionante!", 
    "Click here to generate a table.": "Haga clic aquí para generar una tabla.", 
    "to save and share your graphs!": "¡para guardar y compartir sus gráficas!", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos funciona mejor en su versión de Android si utiliza el navegador Chrome.", 
    "Invalid y coordinate.": "La coordenada y no es válida.", 
    "I love it": "Me encanta", 
    "We'll never share or sell your email address.": "Nunca compartiremos o venderemos su dirección de correo electrónico.", 
    "Residuals": "Residuos", 
    "Points are not allowed.": "No se permiten puntos.", 
    "Arrows:": "Flechas:", 
    "Edit List": "Editar lista", 
    "Message sent. Please check your email for a password recovery link.": "Mensaje enviado. Por favor revise su cuenta de correo electrónico para un enlace de recuperación de contraseña.", 
    "Please provide an email so that we can write back.": "Por favor, proporcione una dirección de correo electrónico para que podamos responderle.", 
    "Let's make some sliders!": "¡Hagamos algunos deslizadores!", 
    "Go down to the next row to add more data.": "Vaya al siguiente renglón para agregar más datos.", 
    "Let's make a function. First: click here to create a new blank expression.": "Hagamos una función. Primero: haga clic aquí para crear una nueva expresión en blanco.", 
    "yeah!": "¡sí!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Error: Fila __rowNum__, columna __colNum__ no es un número.", 
    "Transformations": "Transformaciones", 
    "Image upload is not supported in this browser.": "En este navegador no es posible cargar una imagen.", 
    "This column header can't be defined elsewhere in the calculator.": "Este encabezado de columna no puede definirse en otras partes de la calculadora.", 
    "Update Password": "Actualice su Contraseña", 
    "Resources": "Recursos", 
    "Help Center": "Centro de ayuda", 
    "Drag the handle to change the value.": "Arrastre el control para cambiar el valor.", 
    "Undo": "Deshacer", 
    "Now type: __equation__": "Ahora escriba: __equation__", 
    "What effect does a have on the function g(x)?": "¿Cuál es el efecto que tiene a sobre la función g(x)?", 
    "Sign in": "Inicie sesión", 
    "Type any number here.": "Escriba aquí cualquier número.", 
    "folder": "carpeta", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Solamente podemos graficar desigualdades en las que una de las variables es cuadrática o lineal.", 
    "Send a Copy to Google Drive": "Enviar una copia a Google Drive", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Ángulos", 
    "This message will self-destruct in __seconds__...": "Este mensaje se autodestruirá en __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Consejo #2: __twiddle__ está en nuestro teclado en pantalla en la sección de 'ABC'.", 
    "We don't solve single-variable equations involving lists yet.": "Todavía no resolvemos ecuaciones en una sola variable incorporando listas.", 
    "Ellipse with Foci": "Elipse con focos", 
    "color:": "color:", 
    "... and select the \"expression\" option.": "... y seleccione la opción \"expresión\".", 
    "Help": "Ayuda", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Sugerencia: Presione el botón de  'A B C' en el teclado para encontrar los botones { }", 
    "Nice. Let's check the model.": "Bien. Vamos a ver el modelo.", 
    "Logged in with Clever!": "Sesión iniciada con Clever!", 
    "This graph has been deleted.": "Esta gráfica ha sido eliminada.", 
    "Invalid width.": "El ancho no es válido.", 
    "Create Account": "Crear cuenta", 
    "First, let's get some data.": "En primer lugar, vamos a obtener algunos datos.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos genera sus ingresos asociándose con otros. ¿Interesado en asociarse con Desmos? Escríbanos a <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\"> partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Sostenga por un momento el círculo coloreado situado a la izquierda de una ecuación o expresión para abrir las opciones de estilo y color.", 
    "Learn more": "Aprenda más", 
    "Brilliant!": "¡Brillante!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "¿Está seguro de querer abandonar esta gráfica? ¡El trabajo que no haya guardado se perderá.", 
    "Step:": "Paso:", 
    "Parabola and Focus": "Parábola y foco", 
    "Advanced Tables": "Tablas avanzadas", 
    "Title:": "Título:", 
    "Current Password:": "Contraseña actual:", 
    "Click here to connect the dots.": "Haga clic aquí para conectar los puntos.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Algo salió mal; por favor reporte esto al equipo de apoyo de desmos.com. (Error__error_num__)", 
    "Sign In": "Inicie Sesión", 
    "Polar Conic Sections": "Secciones cónicas en coordenadas polares", 
    "optional": "opcional", 
    "You haven't written anything yet.": "Aún no ha escrito nada.", 
    "Sorry, we didn't find any graphs with that title.": "Lo siento, no encontramos ninguna gráfica con ese título.", 
    "Y-Axis": "Eje Y", 
    "Want us to consider featuring it?": "¿Le gustaría que consideráramos presentarla?", 
    "What effect does k have on the function g(x)?": "¿Cuál es el efecto que tiene k sobre la función g(x)?", 
    "Tours": "Recorridos guiados", 
    "Reflections of a Function": "Reflexiones de una función", 
    "expression": "expresión", 
    "Close": "Cerrar", 
    "send us feedback": "envíenos comentarios", 
    "For example, try typing: __dependency__(x).": "Por ejemplo, intente escribir: __dependency__(x).", 
    "Unit Circle": "Círculo unitario", 
    "powered by": "impulsado por", 
    "table": "tabla", 
    "loading...": "cargando...", 
    "Forgot your password?": "¿Olvidó su contraseña?", 
    "Calculus": "Cálculo", 
    "Click here to add a new table.": "Haga clic aquí para agregar una nueva tabla.", 
    "Jun": "junio", 
    "You're a restrictions star!": "¡Es usted una estrella de las restricciones!", 
    "Jul": "julio", 
    "Inverse of a Function": "Inversa de una función", 
    "Edit Account": "Editar cuenta", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "No hay una forma de guardar la gráfica a través de la aplicación (¡todavía!). Le recomendamos visitar www.desmos.com/calculator y acceder con su cuenta de Desmos, si desea guardar su gráfica.", 
    "Delete All": "Borrar Todo", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "No hay una forma de compartir la gráfica a través de la aplicación (¡todavía!). Le recomendamos visitar www.desmos.com/calculator y acceder con su cuenta de Desmos, si desea compartir un enlace a su gráfica.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Senoidal con amplitud \"a\" y periodo \"b\"", 
    "what's this?": "¿qué es esto?", 
    "Done": "Hecho", 
    "Desmos Graphing Calculator": "Calculadora Gráficadora Desmos", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' no puede utilizarse como un parámetro de la regresión.", 
    "Nested lists are not allowed.": "No se admiten listas anidadas.", 
    "Sign In with Your Google Account": "Iniciar sesión con su cuenta de Google", 
    "loading graphs...": "cargando gráficas...", 
    "Click here to make a new blank expression.": "Haga clic aquí para crear una nueva expresión en blanco.", 
    "Send Feedback": "Enviar retroalimentación", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Ahora tracemos los residuos.</b><br>Escriba __residualVariable__ en una nueva columna de la tabla.", 
    "Table created.": "Tabla creada.", 
    "Click back to continue editing.": "Haga clic de nuevo para seguir editando.", 
    "Ranges must be arithmetic sequences.": "Los rangos deben ser sucesiones aritméticas.", 
    "Enjoying Desmos?": "Disfrutando de Desmos?", 
    "Name:": "Nombre:", 
    "Add Item": "Agregar elemento", 
    "Click to show the list of expressions.": "Haga clic para mostrar la lista de expresiones.", 
    "Function g(x) is a transformed version of function f(x).": "La función g(x) es una versión transformada de la función f(x).", 
    "Lines": "Rectas", 
    "yesterday": "ayer", 
    "Hint #1: to get __y_1__ type __y1__.": "Consejo #1: para obtener __y_1__ escriba __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "No puede redefinir '__symbol__' porque ya está definido.", 
    "How do I save my graph?": "¿Cómo guardo mi gráfica?", 
    "Opened '__graphTitle__'": "Se ha abierto '__graphTitle__'", 
    "Trigonometry": "Trigonometría", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Lo sentimos, todavía no se puede graficar __symbol__ como función de algo.", 
    "No Unsaved Changes": "No hay cambios no guardados", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Solamente son compatibles __form1__ y __form2__. En otro caso, use paréntesis.", 
    "one minute ago": "hace un minuto", 
    "Vertex Form": "Forma vértice", 
    "Other Questions?": "¿Otras preguntas?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Vaya a Google Docs y copie y pegue este __sample_data_link__.", 
    "Square Grid": "Cuadrícula con la misma escala", 
    "style:": "estilo:", 
    "Ask us on Twitter": "Pregúntanos en Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "La función '__dependency__' requiere un argumento. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Aún no resolvemos ecuaciones complicadas en una sola variable.", 
    "__number__ hours ago": "hace __number__ horas", 
    "Click and hold on this icon until the options menu opens up.": "Haga clic y manténgalo sobre este icono hasta que las opciones del menú aparezcan.", 
    "size:": "tamaño:", 
    "Remembered your password?": "¿Recuerda su contraseña?", 
    "Download the User Guide": "Descargar a la Guía del usuario", 
    "Go \"Hands-free\"": "Vaya a \"Manos libres\"", 
    "step:": "paso:", 
    "Cannot index into something that is not a list.": "No se puede indexar en algo que no es una lista.", 
    "Radians": "Radianes", 
    "Let's start with some data!": "¡Vamos a comenzar con algunos datos!", 
    "Uh-oh! Type a valid number here.": "¡Uy! Escriba aquí un número válido.", 
    "Use your Email Address": "Utilice su dirección de correo electrónico", 
    "General Form": "Ecuación general de la recta", 
    "Embed": "Incrustar", 
    "You did not select a file": "No ha seleccionado un archivo", 
    "Standard Form with Tangent": "Forma estándar con tangente", 
    "Your Name:": "Su nombre:", 
    "Two Point Form": "Ecuación de la recta dados dos puntos", 
    "Now click here to add the sliders.": "Ahora haga clic aquí para agregar los deslizadores.", 
    "Limacon": "Limaçon", 
    "Click here to add a new item.": "Haga clic aquí para agregar un nuevo elemento.", 
    "Don't forget the \"y=\"!": "¡No olvide la \"y=\"!", 
    "Fill in this whole row.": "Llene completamente este rengón.", 
    "Invalid x coordinate.": "La coordenada x no es válida.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Ahora vamos a restringir el rango de valores. Añada __sample_expression__ al final.", 
    "Too many variables. Try defining '__variables__'.": "Hay demasiadas variables. Inténtelo definiendo '__variables__'.", 
    "Parameters": "Parámetros", 
    "Update Account": "Actualice su cuenta", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Nota: en su lugar usted puede agregar sus propios datos haciendo clic en el botón __plus_icon__.", 
    "Convert this to a table.": "Convertir esto en una tabla.", 
    "Change this equation to __sample_expression__": "Cambie esta ecuación a __sample_expression__", 
    "Email": "Email", 
    "Taylor Expansion of sin(x)": "Expansión en serie de Taylor de sen(x)", 
    "rate it in the app store": "votar en app store", 
    "Now graph: __sample_expression__": "Ahora grafique: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Usted ha definido '__dependency__' en más de un lugar. Trate de seleccionar una variable diferente, o de eliminar algunas de las definiciones de '__dependency__'.", 
    "All the Trig Functions": "Todas las funciones trigonométricas", 
    "We only plot inequalities of x and y, or r and θ.": "Solamente graficamos desigualdades en x & y, o en r & θ.", 
    "Share your thoughts!": "¡Comparta sus pensamientos!", 
    "Factored Form": "Forma factorizada", 
    "Fill it in.": "Llene.", 
    "Sorry, I don't understand this.": "Lo siento, no comprendo esto.", 
    "Image": "Imagen", 
    "Learn More": "Aprenda más", 
    "You can't use '__symbol__' as an index because it's already defined.": "No puede utilizar '__symbol__' como un índice porque ya está definido.", 
    "What do you want '__symbol__' to equal?": "¿A qué quiere igualar '__symbol__'?", 
    "add slider:": "Agregar control deslizante:", 
    "or": "o", 
    "Does not compute to constant.": "No calcula una constante.", 
    "New Blank Graph": "Nueva gráfica en blanco", 
    "Feb": "febrero", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restrinja el dominio de esta recta añadiendo __sample_expression__ al final.", 
    "image": "imagen", 
    "Duplicate": "Duplicar", 
    "Statistics": "Estadística", 
    "Degrees": "grados", 
    "Hide List": "Ocultar lista", 
    "Start by graphing a function.": "Comience graficando una función.", 
    "Intercept Form": "Ecuación simétrica de la recta", 
    "Tell us on Facebook": "Díganos en Facebook", 
    "Inequalities are not allowed.": "No se permiten las desigualdades.", 
    "Click here to continue editing this table.": "Haga clic aquí para continuar editando esta tabla.", 
    "Click the \"Edit List\" button.": "Haga clic en el botón \"Editar lista\".", 
    "Dec": "diciembre", 
    "Convert to Table": "Convertir a tabla", 
    "Variable '__dependency__' can't be used as a function.": "La variable '__dependency__' no puede utilizarse como una función.", 
    "Polar equations must be linear in r.": "Las ecuaciones polares deben ser lineales en r.", 
    "Move the parabola.": "Mueva la parábola.", 
    "You're a table wizard!": "¡Es usted un mago de las tablas!", 
    "Polar Rose": "Rosa polar", 
    "Save (ctrl+s)": "Guardar (crtl + s)", 
    "search by title...": "buscar una gráfica por título...", 
    "Logarithmic Spiral": "Espiral logarítmica", 
    "type your question or suggestion...": "escriba su pregunta o sugerencia...", 
    "functions": "funciones", 
    "Mar": "marzo", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Sugerencia: puede escribir y = x ^ 2, o usar el botón <sup>2</sup> en el teclado a continuación.", 
    "May": "mayo", 
    "Save As or Rename (ctrl+shift+s)": "Guardar como o Cambiar nombre (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "No podemos graficar θ como como función de r. A cambio, pruebe a graficar r(θ).", 
    "Please enter your email address. We will send a password recovery link to you.": "Por favor, proporcione su dirección de correo electrónico. Le enviaremos un enlace de recuperación de contraseña.", 
    "Visiting anonymously from Clever.": "Visita anónima desde Clever.", 
    "Equations are not allowed.": "Las ecuaciones no están permitidas.", 
    "Phase": "Fase", 
    "Link to Google": "Enlace a Google", 
    "Message: <i>(optional)</i>": "Mensaje: <i>(opcional)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Haga clic en el icono al lado de cada función trigonométrica para activarla o desactivarla:", 
    "Please enter your feedback.": "Por favor, proporcione su retroalimentación.", 
    "We only support implicit equations of x and y.": "Solamente tenemos soporte para las ecuaciones implícitas en x & y.", 
    "Error signing in with Clever.": "Error al iniciar con Clever."
},"sl":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Vpisno okno je blokirano. Prosimo, da dovolite popup okna za vpis z vašim Google računom.", 
    "all": "vse", 
    "style:": "Stil:", 
    "Jan": "Jan", 
    "Please enter your email address. We will send a password recovery link to you.": "Vnesite vaš e-mail naslov. Poslali vam bomo povezavo za obnovitev vašega gesla.", 
    "Undo (ctrl+z)": "Razveljavi (ctrl+z)", 
    "Update Password": "Posodobi geslo", 
    "Share your graph with the world!": "Deli graf s celim svetom!", 
    "Oct": "Okt", 
    "Sign In with Google": "Vpis z Google računom", 
    "We don't solve complicated single-variable equations yet.": "Zapletenih enačb z eno spremenljivko še ne rešujemo.", 
    "__number__ hours ago": "__number__ ur nazaj", 
    "Click and hold on this icon until the options menu opens up.": "Kliknite in držite to ikono dokler se ne odpre meni.", 
    "Undo": "Razveljavi", 
    "Untitled Graph": "Neimenovan graf", 
    "Nice!": "Lepo!", 
    "... and select the \"table\" option.": "... in izberite opcijo \"Tabela\".", 
    "Remembered your password?": "Ste pozabili geslo?", 
    "Go \"Hands-free\"": "Poskusite samo opazovati!", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Narišemo lahko samo neenačbe, ko je ena spremenljivka linearna ali kvadratna.", 
    "step:": "korak:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "To sporočilo se bo uničilo v __seconds__...", 
    "Radians": "Radiani", 
    "New graph created.": "Nov graf je ustvarjen.", 
    "Uh-oh! Type a valid number here.": "Vnesite veljavno število.", 
    "center:": "središče:", 
    "Link to your Google Account": "Povežite se z vašim Google računom", 
    "Embed": "Vstavi", 
    "color:": "Barva:", 
    "Click to return to your expressions.": "Kliknite, če se želite vrniti k vašim izrazom.", 
    "Help": "Pomoč", 
    "A B C": "A B C", 
    "Click to return to this graph.": "Kliknite, če se želite vrniti na graf.", 
    "Your Name:": "Vaše ime:", 
    "Update Account": "Posodobi račun", 
    "Duplicate": "Podvoji", 
    "Current Password:": "Trenutno geslo:", 
    "Now click here to add the sliders.": "Zdaj kliknite tukaj, če želite dodati drsnike.", 
    "Press play to animate the slider.": "Pritisnite predvajaj, za animacijo.", 
    "Click here to add a new item.": "Kliknite tukaj za dodajenje novega elementa.", 
    "Don't forget the \"y=\"!": "Ne pozabite na \"y =\"!", 
    "Fill in this whole row.": "Izpolnite to vrstico.", 
    "Create Account": "Ustvari račun", 
    "Tables": "Tabele", 
    "what's this?": "kaj je to?", 
    "Let's get started!": "Začnimo!", 
    "This is the name we'll use if we feature one of your graphs.": "To ime bomo uporabljali, če bomo objavili vaš graf.", 
    "Convert this to a table.": "Pretvorite v tabelo.", 
    "Send": "Pošlji", 
    "Sliders": "Drsniki", 
    "Change this equation to __sample_expression__": "Spremenite to enačbo v __sample_expression__", 
    "Click anywhere to close the drawing options.": "Kliknite kjerkoli, da zaprete dodatne možnosti.", 
    "Print": "Printaj", 
    "Move right to add a new column.": "Premaknite se desno, če želite dodati nov stolpec.", 
    "Email": "E-mail", 
    "saved": "shranjeno", 
    "Brilliant!": "Briljantno!", 
    "Now graph: __sample_expression__": "Nov graf: __sample_expression__", 
    "Repeat Password:": "Ponovi geslo:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Ste prepričani, da želite zapustiti to stran? Shranite vaše delo preden odidete.", 
    "Try graphing a straight line, like __sample_expression__": "Poskusite narisati ravno črto, kot npr. __sample_expression__", 
    "__number__ minutes ago": "__number__ minut nazaj", 
    "Type any number here.": "Tukaj vnesite poljubno število.", 
    "Resources": "Dodatni viri", 
    "Advanced Tables": "Napredne tabele", 
    "example": "primer", 
    "Title:": "Naslov:", 
    "sending...": "pošiljanje ...", 
    "New Password:": "Novo geslo:", 
    "We only plot inequalities of x and y, or r and θ.": "Za neenačbe uporabljamo x ali y, r ali θ.", 
    "Click here to generate a table.": "Kliknite tukaj, če želite ustvariti tabelo.", 
    "loading graphs...": "nalaganje grafov ...", 
    "Click here to connect the dots.": "Kliknite tukaj, da točke povežete.", 
    "Click here to create a new expression.": "Kliknite tukaj, da ustvarite nov izraz.", 
    "Didn't work? Try again!": "Ne deluje? Poskusite znova!", 
    "last week": "prejšnji teden", 
    "We'll never share or sell your email address.": "Vaš e-mail naslov je na varnem.", 
    "Fill it in.": "Izpolnite.", 
    "Sign In": "Prijava", 
    "optional": "neobvezno", 
    "Delete": "Izbriši", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Prišlo je do napake. Sporočite podpori desmos.com. (Napaka __error_num__)", 
    "Delete All": "Zbriši vse", 
    "Try typing __sample_expression__": "Poskusite vtipkati __sample_expression__", 
    "Apr": "Apr", 
    "Image": "Slika", 
    "Start by graphing a function.": "Začnite z risanjem funkcije.", 
    "no, thanks": "ne, hvala", 
    "Now try pressing Enter.": "Zdaj poskusite pritisniti Enter.", 
    "Recover Password": "Obnovi geslo", 
    "Want us to consider featuring it?": "Bi želeli, da objavimo vaš graf?", 
    "folder": "mapa", 
    "Tours": "Voden ogled", 
    "Open Graph": "Odpri graf", 
    "type your question or suggestion...": "Vnesite vaše vprašanje ali komentar ...", 
    "size:": "velikost:", 
    "Terms of Use": "Pogoji uporabe", 
    "expression": "Izraz", 
    "Drag the handle to change the value.": "Povlecite drsnik za spremembno vrednosti.", 
    "New Blank Graph": "Nov prazen graf", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Aug", 
    "This graph has been deleted.": "Graf je bil izbrisan.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Omejite definicijsko območje te funkcije, s tem, da ne koncu dodate __sample_expression__.", 
    "image": "slika", 
    "Projector Mode": "Projekcijski način", 
    "Send a Copy to Google Drive": "Pošlji kopijo na moj Google Drive", 
    "just now": "zdaj", 
    "Open Graph (ctrl+o)": "Odpri graf (ctrl+o)", 
    "Link to Google": "Povezava na Google", 
    "Click here to create a new blank expression.": "Kliknite tukaj, da ustvarite nov prazen izraz.", 
    "Degrees": "Stopinje", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Omejimo zalogo vrednosti. Na koncu dodajte __sample_expression__.", 
    "You're a scatter plot whiz!": "Sedaj veste kako narisati razsevni grafikon!", 
    "Desmos is in Maintenance Mode.": "Trenutno potekajo vzdrževalna dela.", 
    "table": "tabela", 
    "loading...": "Nalaganje ...", 
    "Forgot your password?": "Pozabili geslo?", 
    "Hide List": "Skrij seznam", 
    "one hour ago": "eno uro nazaj", 
    "__number__ weeks ago": "__number__ tednov nazaj", 
    "You're a slider pro!": "Zdaj obvladate drsnike!", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Sedaj obvladate omejitve!", 
    "Jul": "Jul", 
    "Let's make a scatter plot!": "Oblikujmo razsevni grafikon!", 
    "Edit Account": "Uredi račun", 
    "more": "več", 
    "Function '__dependency__' is not defined.": "Funkcija '__dependency__' ni definirana.", 
    "Restrictions": "Omejitve", 
    "Click here to continue editing this table.": "Kliknite tukaj, če želite nadaljevati urejanje tabele.", 
    "Click here to only show the dots.": "Kliknite tukaj za prikaz točk.", 
    "Click the \"Edit List\" button.": "Kliknite gumb \"Uredi seznam\".", 
    "Sign in": "Prijava", 
    "Sorry, we didn't find any graphs with that title.": "Oprostite, grafa s tem naslovom ni.", 
    "Try typing all of __sample_expression__": "Poskusite vtipkati __sample_expression__", 
    "Dec": "Dec", 
    "Nov": "Nov", 
    "Edit List": "Uredi seznam", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Trenutno potekajo vzdrževalna dela. Lahko odprete grafe s primeri, vendar se ne morete vpisati, odpreti shranjenih grafov ali shranjevati sprememb. Za nevšečnosti se opravičujemo.", 
    "Nice Graph!": "Odličen graf!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Hvala za vaše mnenje &ndash; kmalu se vam oglasimo!", 
    "Feedback": "Vaše mnenje", 
    "Sep": "Sep", 
    "Convert to Table": "Pretvori v tabelo", 
    "Redo (ctrl+y)": "Korak naprej (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "Spremenljivka '__dependency__' ne more biti uporabljena kot funkcija.", 
    "__number__ days ago": "__number__ dni nazaj", 
    "Tell us on Facebook": "Sporočite nam na Facebooku", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Trenutno potekajo vzdrževalna dela, zato ne boste mogli shraniti vašega grafa. Za nevšečnosti se opravičujemo!", 
    "Desmos User Guide": "Desmos priročnik za uporabo", 
    "Done": "Končano", 
    "Desmos Graphing Calculator": "Desmos grafični kalkulator", 
    "Cancel": "Prekliči", 
    "Send to:": "Pošlji:", 
    "on __month__ __day__, __year__": "na __day__ __month__, __year__", 
    "Move the parabola.": "Premaknite parabolo.", 
    "Save (ctrl+s)": "Shrani (ctrl+s)", 
    "You're a table wizard!": "Sedaj obvladate tabele!", 
    "Share Graph": "Deli graf", 
    "Sign In with Your Google Account": "Prijava z Google računom", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Podpiramo samo rešene dvojne neenačbe. Poskusite izbrisati eno stran neenačbe.", 
    "Click here to make a new blank expression.": "Kliknite tukaj, da ustvarite nov prazen izraz.", 
    "Last trick!": "Zadnji trik!", 
    "Send Feedback": "Napiši mnenje", 
    "search by title...": "iskanje po naslovu ...", 
    "Share this link:": "Deli povezavo:", 
    "Please enter your feedback.": "Vnesite vaše mnenje.", 
    "functions": "funkcije", 
    "Mar": "Mar", 
    "Language": "Jezik", 
    "May": "Maj", 
    "message sent": "Sporočilo poslano", 
    "Save As or Rename (ctrl+shift+s)": "Shrani kot ali Preimenuj (ctrl+shift+s)", 
    "Awesome!": "Fantastično!", 
    "Sign Out": "Odjava", 
    "Click back to continue editing.": "Kliknite nazaj za nadaljevanje urejanja.", 
    "Just fill in one more...": "Izpolnite še eno ...", 
    "Learn More": "Več o tem", 
    "Use your Email Address": "Uporabite vaš e-mail naslov", 
    "to save and share your graphs!": "in shranite ter delite svoje grafe!", 
    "Name:": "Ime:", 
    "Add Item": "Dodaj element", 
    "Click to show the list of expressions.": "Kliknite, če želite prikaz seznam izrazov.", 
    "Graph Paper": "Lastnosti grafa", 
    "yesterday": "včeraj", 
    "add slider:": "dodaj drsnik:", 
    "Please provide an email so that we can write back.": "Vpišite vaš e-mail, da vam bomo lahko odgovorili.", 
    "Opened '__graphTitle__'": "Odprt '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "S klikom na \"__btn__,\" ste prebrali in se strinjate z našimi pogoji uporabe __terms_of_use_link__.", 
    "HTML Embed Code": "HTML koda", 
    "Message: <i>(optional)</i>": "Sporočilo: <i>(neobvezno)</i>", 
    "Sign In with Desmos": "Prijavite se v Desmos", 
    "one minute ago": "eno minuto nazaj", 
    "Password:": "Geslo:", 
    "or": "ali", 
    "We only support implicit equations of x and y.": "Podpiramo samo implicitne enačbe x in y.", 
    "Message sent. Please check your email for a password recovery link.": "Sporočilo poslano. Na vaš naslov smo poslali povezavo za obnovitev vašega gesla.", 
    "Email:": "E-mail:", 
    "enter": "vnesite", 
    "Let's make some sliders!": "Naredimo nekaj drsnikov!", 
    "Go down to the next row to add more data.": "Pojdite v naslednjo vrstico, če želite dodati več podatkov.", 
    "Let's make a function. First: click here to create a new blank expression.": "Narišimo funkcijo. Najprej kliknite tukaj, da ustvarite nov izraz.", 
    "yeah!": "seveda!"
},"en-GB":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Login window blocked. Please allow popups from desmos.com to sign in with Google.", 
    "all": "all", 
    "Try adding an equals sign to turn this into an equation.": "Try adding an equals sign to turn this into an equation.", 
    "Undo (ctrl+z)": "Undo (ctrl+z)", 
    "What effect does b have on the function g(x)?": "What effect does b have on the function g(x)?", 
    "Share your graph with the world!": "Share your graph with the world!", 
    "__number__ minutes ago": "__number__ minutes ago", 
    "Let's make a scatter plot!": "Let's make a scatter plot!", 
    "Hide this warning.": "Hide this warning.", 
    "Nice!": "Nice!", 
    "Nov": "Nov", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Function '__dependency__ ' requires only 1 argument. __supplement__", 
    "saved": "saved", 
    "center:": "centre:", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__ ' and '__lastSymbol__ ' can't be defined in terms of each other.", 
    "Click to return to this graph.": "Click to return to this graph.", 
    "Press play to animate the slider.": "Press play to animate the slider.", 
    "Didn't work? Try again!": "Didn't work? Try again!", 
    "Now, let's try a new model.": "Now, let's try a new model.", 
    "Tables": "Tables", 
    "Table headers must be simple expressions. __supplement__": "Table headers must be simple expressions. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Function '__symbol__ ' requires at least one argument. For example, try typing: __symbol__ (1, 2).", 
    "Function definitions are not allowed.": "Function definitions are not allowed.", 
    "Too many variables, I don't know what to do with this.": "Too many variables, I don't know what to do with this.", 
    "Click here to download Google Chrome.": "Click here to download Google Chrome.", 
    "Circle": "Circle", 
    "Secant Line": "Secant Line", 
    "Polar Graphing": "Polar Graphing", 
    "Visualizing Slope": "Visualising Slope", 
    "How can I change the color?": "How can I change the colour?", 
    "Fill in the sample data:": "Fill in the sample data:", 
    "Grid": "Grid", 
    "List index must not be a list.": "List index must not be a list.", 
    "Invalid height.": "Invalid height.", 
    "Click here to create a new expression.": "Click here to create a new expression.", 
    "New Password:": "New Password:", 
    "Failed to find regression coefficients.": "Failed to find regression coefficients.", 
    "For example, try typing: __recommendation__.": "For example, try typing: __recommendation__.", 
    "How do I share a link to my graph?": "How do I share a link to my graph?", 
    "Regressions must contain at least one list of data.": "Regressions must contain at least one list of data.", 
    "sending...": "sending...", 
    "Hide Keypad": "Hide Keypad", 
    "last week": "last week", 
    "Show List": "Show List", 
    "We only plot double inequalities of x and y.": "We only plot double inequalities of x and y.", 
    "Nice work &ndash; Keep exploring!": "Nice work &ndash; Keep exploring!", 
    "Slope Intercept Form": "Slope Intercept Form", 
    "no, thanks": "no, thanks", 
    "Recover Password": "Recover Password", 
    "Terms of Use": "Terms of Use", 
    "Show Keypad": "Show Keypad", 
    "Aug": "Aug", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "You can't use '__dependency__ ' as a parameter of this function because ' __dependency__ ' is already defined.", 
    "You're a scatter plot whiz!": "You're a scatter plot whiz!", 
    "Standard Form": "Standard Form", 
    "one hour ago": "one hour ago", 
    "You're a slider pro!": "You're a slider pro!", 
    "Delete": "Delete", 
    "drag:": "drag:", 
    "more": "more", 
    "Point Slope Form": "Point Slope Form", 
    "How is this app free?": "How is this app free?", 
    "Nice Graph!": "Nice Graph!", 
    "Feedback": "Feedback", 
    "Desmos User Guide": "Desmos User Guide", 
    "example": "example", 
    "on __month__ __day__, __year__": "on __month__ __day__, __year__", 
    "Graph Settings": "Graph Settings", 
    "Share Graph": "Share Graph", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Double inequalities must both go the same way, e.g. 1 < y < 2.", 
    "Show Numbers": "Show Numbers", 
    "Wave Interference": "Wave Interference", 
    "message sent": "message sent", 
    "Sign Out": "Sign Out", 
    "X-Axis": "X-axis", 
    "Graph Paper": "Graph Paper", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos is in preview mode, so you won't be able to save graphs.", 
    "Save Changes (ctrl+s)": "Save Changes (control + s)", 
    "Regressions": "Regressions", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.", 
    "Sign In with Desmos": "Sign In with Desmos", 
    "Password:": "Password:", 
    "Link to your Google Account": "Link to your Google Account", 
    "Parabolas": "Parabolas", 
    "Email:": "Email:", 
    "enter": "enter", 
    "Derivatives": "Derivatives", 
    "Jan": "Jan", 
    "First column may not be __most__ or __last__.": "First column may not be __most__ or __last__.", 
    "Translating Any Function": "Translating Any Function", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.", 
    "Oct": "Oct", 
    "Sign In with Google": "Sign In with Google", 
    "Just fill in one more...": "Just fill in one more...", 
    "Untitled Graph": "Untitled Graph", 
    "... and select the \"table\" option.": "... and select the \"table\" option.", 
    "Points are written like this: (1, 2).": "Points are written like this: (1, 2).", 
    "New graph created.": "New graph created.", 
    "HTML Embed Code": "HTML Embed Code", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!", 
    "Click to return to your expressions.": "Click to return to your expressions.", 
    "A B C": "A B C", 
    "enter a note...": "enter a note...", 
    "Only __form__ is supported. Otherwise, use parens.": "Only __form__ is supported. Otherwise, use brackets.", 
    "Hyperbola": "Hyperbola", 
    "Unsupported Browser": "Unsupported Browser", 
    "Show Grid Angles": "Show Grid Angles", 
    "Let's get started!": "Let's get started!", 
    "This is the name we'll use if we feature one of your graphs.": "This is the name we'll use if we feature one of your graphs.", 
    "We zoomed to fit your data.": "We zoomed to fit your data.", 
    "FAQs": "FAQs", 
    "Sliders": "Sliders", 
    "Click anywhere to close the drawing options.": "Click anywhere to close the drawing options.", 
    "Print": "Print", 
    "Move right to add a new column.": "Move right to add a new column.", 
    "Repeat Password:": "Repeat Password:", 
    "Try graphing a straight line, like __sample_expression__": "Try graphing a straight line, like __sample_expression__", 
    "Conic Sections": "Conic Sections", 
    "Definitions are nested too deeply.": "Definitions are nested too deeply.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Try adding '__lhs__ ' to the beginning of this equation.", 
    "Tangent Line": "Tangent Line", 
    "Period and Amplitude": "Period and Amplitude", 
    "Try typing __sample_expression__": "Try typing __sample_expression__", 
    "Apr": "Apr", 
    "sample data": "sample data", 
    "Now try pressing Enter.": "Now try pressing Enter.", 
    "Lists are not allowed.": "Lists are not allowed.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Function '__dependency__ ' requires __assignment_arity__ arguments. __supplement__", 
    "note": "note", 
    "Needs work": "Needs work", 
    "BBCode": "BBCode", 
    "Projector Mode": "Projector Mode", 
    "just now": "just now", 
    "I just want to graph": "I just want to graph", 
    "Click here to create a new blank expression.": "Click here to make a new blank expression.", 
    "Range cannot depend on free variable '__symbol__'.": "Range cannot depend on free variable '__symbol__ '.", 
    "Desmos is in Maintenance Mode.": "Desmos is in Maintenance Mode.", 
    "The file \"__file__\" is not an image": "The file \"__file__\" is not an image", 
    "add label": "add label", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Edit this equation to find a better fit. Try, for example: <br>__equation__", 
    "__number__ weeks ago": "__number__ weeks ago", 
    "Drop Image Here": "Drop Image Here", 
    "Open Graph (ctrl+o)": "Open Graph (ctrl+o)", 
    "What effect does h have on the function g(x)?": "What effect does h have on the function g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Try including '__symbols__ ' and '__lastSymbol__ ' as arguments by defining the function as '__newSignature__ '.", 
    "Function '__dependency__' is not defined.": "Function '__dependency__ ' is not defined.", 
    "Restrictions": "Restrictions", 
    "Click here to only show the dots.": "Click here to only show the dots.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Try including '__lastSymbol__ ' as an argument by defining the function as '__newSignature__ '.", 
    "Send": "Send", 
    "Try typing all of __sample_expression__": "Try typing all of __sample_expression__", 
    "Too complicated. Use parens.": "Too complicated. Use brackets.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Thanks for the feedback &ndash; you'll hear from us soon!", 
    "Sep": "Sep", 
    "Redo (ctrl+y)": "Redo (ctrl+y)", 
    "__number__ days ago": "__number__ days ago", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!", 
    "Cancel": "Cancel", 
    "Send to:": "Send to:", 
    "Open Graph": "Open Graph", 
    "Table entries must be simple expressions. __supplement__": "Table entries must be simple expressions. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "We only support solved double inequalities. Try deleting one side of the inequality.", 
    "Scaling Any Function": "Scaling Any Function", 
    "Last trick!": "Last trick!", 
    "Share this link:": "Share this link:", 
    "Language": "Language", 
    "Awesome!": "Awesome!", 
    "Click here to generate a table.": "Click here to generate a table.", 
    "to save and share your graphs!": "to save and share your graphs!", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos works best on your version of Android if you use the Chrome Browser.", 
    "Invalid y coordinate.": "Invalid y coordinate.", 
    "I love it": "I love it", 
    "We'll never share or sell your email address.": "We'll never share or sell your email address.", 
    "Residuals": "Residuals", 
    "Points are not allowed.": "Points are not allowed.", 
    "Arrows:": "Arrows:", 
    "Edit List": "Edit List", 
    "Message sent. Please check your email for a password recovery link.": "Message sent. Please check your email for a password recovery link.", 
    "Please provide an email so that we can write back.": "Please provide an email so that we can write back.", 
    "Let's make some sliders!": "Let's make some sliders!", 
    "Go down to the next row to add more data.": "Go down to the next row to add more data.", 
    "Let's make a function. First: click here to create a new blank expression.": "Let's make a function. First: click here to create a new blank expression.", 
    "yeah!": "yes!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Error: Row __rowNum__, Column __colNum__ isn't a number.", 
    "Transformations": "Transformations", 
    "Image upload is not supported in this browser.": "Image upload is not supported in this browser.", 
    "This column header can't be defined elsewhere in the calculator.": "This column header can't be defined elsewhere in the calculator.", 
    "Update Password": "Update Password", 
    "Resources": "Resources", 
    "Help Center": "Help Center", 
    "Drag the handle to change the value.": "Drag the handle to change the value.", 
    "Undo": "Undo", 
    "Now type: __equation__": "Now type: __equation__", 
    "What effect does a have on the function g(x)?": "What effect does a have on the function g (x)?", 
    "Sign in": "Sign in", 
    "Type any number here.": "Type any number here.", 
    "folder": "folder", 
    "We can only plot inequalities when one variable is quadratic or linear.": "We can only plot inequalities when one variable is quadratic or linear.", 
    "Send a Copy to Google Drive": "Send a Copy to Google Drive", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Angles", 
    "This message will self-destruct in __seconds__...": "This message will self-destruct in __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Hint #2: __twiddle__ is in our onscreen keypad in the ' A B C ' section.", 
    "We don't solve single-variable equations involving lists yet.": "We don't solve single-variable equations involving lists yet.", 
    "Ellipse with Foci": "Ellipse with Foci", 
    "color:": "colour:", 
    "... and select the \"expression\" option.": "... and select the \"expression\" option.", 
    "Help": "Help", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Hint: press the ' A B C ' button on the keypad to find the { } buttons", 
    "Nice. Let's check the model.": "Nice. Let's check the model.", 
    "Logged in with Clever!": "Logged in with Clever!", 
    "This graph has been deleted.": "This graph has been deleted.", 
    "Invalid width.": "Invalid width.", 
    "Create Account": "Create Account", 
    "First, let's get some data.": "First, let's get some data.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target = \"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Long-hold the coloured circle to the left of an equation or expression to open the style and colour options.", 
    "Learn more": "Learn More", 
    "Brilliant!": "Brilliant!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Are you sure you want to leave this graph? Your unsaved work will be lost.", 
    "Step:": "Step:", 
    "Parabola and Focus": "Parabola and Focus", 
    "Advanced Tables": "Advanced Tables", 
    "Title:": "Title:", 
    "Current Password:": "Current Password:", 
    "Click here to connect the dots.": "Click here to connect the dots.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Something went wrong, please report this to desmos.com support. (Error __error_num__)", 
    "Sign In": "Sign In", 
    "Polar Conic Sections": "Polar Conic Sections", 
    "optional": "optional", 
    "You haven't written anything yet.": "You haven't written anything yet.", 
    "Sorry, we didn't find any graphs with that title.": "Sorry, we didn't find any graphs with that title.", 
    "Y-Axis": "Y-Axis", 
    "Want us to consider featuring it?": "Want us to consider featuring it?", 
    "What effect does k have on the function g(x)?": "What effect does k have on the function g (x)?", 
    "Tours": "Tours", 
    "Reflections of a Function": "Reflections of a Function", 
    "expression": "expression", 
    "Close": "Close", 
    "send us feedback": "send us feedback", 
    "For example, try typing: __dependency__(x).": "For example, try typing: __dependency__(x).", 
    "Unit Circle": "Unit Circle", 
    "powered by": "powered by", 
    "table": "table", 
    "loading...": "loading...", 
    "Forgot your password?": "Forgot your password?", 
    "Calculus": "Calculus", 
    "Click here to add a new table.": "Click here to add a new table.", 
    "Jun": "Jun", 
    "You're a restrictions star!": "You're a restrictions star!", 
    "Jul": "Jul", 
    "Inverse of a Function": "Inverse of a Function", 
    "Edit Account": "Edit Account", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.", 
    "Delete All": "Delete All", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinusoid with amplitude \"a\" and period \"b\"", 
    "what's this?": "what's this?", 
    "Done": "Done", 
    "Desmos Graphing Calculator": "Desmos Graphing Calculator", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__ ' may not be used as a regression parameter.", 
    "Nested lists are not allowed.": "Nested lists are not allowed.", 
    "Sign In with Your Google Account": "Sign In with Your Google Account", 
    "loading graphs...": "loading graphs...", 
    "Click here to make a new blank expression.": "Click here to make a new blank expression.", 
    "Send Feedback": "Send Feedback", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>now let's plot the residuals. </b><br>type __residualVariable__ in a new table column.", 
    "Table created.": "Table created.", 
    "Click back to continue editing.": "Click back to continue editing.", 
    "Ranges must be arithmetic sequences.": "Ranges must be arithmetic sequences.", 
    "Enjoying Desmos?": "Enjoying Desmos?", 
    "Name:": "Name:", 
    "Add Item": "Add Item", 
    "Click to show the list of expressions.": "Click to show the list of expressions.", 
    "Function g(x) is a transformed version of function f(x).": "Function g (x) is a transformed version of function f (x).", 
    "Lines": "Lines", 
    "yesterday": "yesterday", 
    "Hint #1: to get __y_1__ type __y1__.": "Hint #1: to get __y_1__ type __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "You can't redefine '__symbol__ ' because it's already defined.", 
    "How do I save my graph?": "How do I save my graph?", 
    "Opened '__graphTitle__'": "Opened '__graphTitle__'", 
    "Trigonometry": "Trigonometry", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Sorry, you can't graph __symbol__ as a function of anything yet.", 
    "No Unsaved Changes": "No Unsaved Changes", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Only __form1__ and __form2__ are supported. Otherwise, use brackets.", 
    "one minute ago": "one minute ago", 
    "Vertex Form": "Vertex Form", 
    "Other Questions?": "Other Questions?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Head over to Google Docs and copy and paste this __sample_data_link__.", 
    "Square Grid": "Square Grid", 
    "style:": "style:", 
    "Ask us on Twitter": "Ask us on Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "Function '__dependency__ ' requires an argument. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "We don't solve complicated single-variable equations yet.", 
    "__number__ hours ago": "__number__ hours ago", 
    "Click and hold on this icon until the options menu opens up.": "Click and hold on this icon until the options menu opens up.", 
    "size:": "size:", 
    "Remembered your password?": "Remembered your password?", 
    "Download the User Guide": "Download the User Guide", 
    "Go \"Hands-free\"": "Go \"Hands-free\"", 
    "step:": "step:", 
    "Cannot index into something that is not a list.": "Cannot index into something that is not a list.", 
    "Radians": "Radians", 
    "Let's start with some data!": "Let's start with some data!", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Type a valid number here.", 
    "Use your Email Address": "Use your Email Address", 
    "General Form": "General Form", 
    "Embed": "Embed", 
    "You did not select a file": "You did not select a file", 
    "Standard Form with Tangent": "Standard Form with Tangent", 
    "Your Name:": "Your Name:", 
    "Two Point Form": "Two Point Form", 
    "Now click here to add the sliders.": "Now click here to add the sliders.", 
    "Limacon": "Limacon", 
    "Click here to add a new item.": "Click here to add a new item.", 
    "Don't forget the \"y=\"!": "Don't forget the \"y =\"!", 
    "Fill in this whole row.": "Fill in this whole row.", 
    "Invalid x coordinate.": "Invalid x coordinate.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Now let's restrict the range. Add __sample_expression__ to the end.", 
    "Too many variables. Try defining '__variables__'.": "Too many variables. Try defining '__variables__ '.", 
    "Parameters": "Parameters", 
    "Update Account": "Update Account", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Note: you can add your own data instead by clicking the __plus_icon__ button.", 
    "Convert this to a table.": "Convert this to a table.", 
    "Change this equation to __sample_expression__": "Change this equation to __sample_expression__", 
    "Email": "Email", 
    "Taylor Expansion of sin(x)": "Taylor Expansion of sin (x)", 
    "rate it in the app store": "rate it in the app store", 
    "Now graph: __sample_expression__": "Now graph: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "You've defined '__dependency__ ' in more than one place. Try picking a different variable, or deleting some of the definitions of ' __dependency__ '.", 
    "All the Trig Functions": "All the Trig Functions", 
    "We only plot inequalities of x and y, or r and θ.": "We only plot inequalities of x and y, or r and θ.", 
    "Share your thoughts!": "Share your thoughts!", 
    "Factored Form": "Factorised Form", 
    "Fill it in.": "Fill it in.", 
    "Sorry, I don't understand this.": "Sorry, I don't understand this.", 
    "Image": "Image", 
    "Learn More": "Learn More", 
    "You can't use '__symbol__' as an index because it's already defined.": "You can't use '__symbol__ ' as an index because it's already defined.", 
    "What do you want '__symbol__' to equal?": "What do you want '__symbol__ ' to equal?", 
    "add slider:": "add slider:", 
    "or": "or", 
    "Does not compute to constant.": "Does not compute to constant.", 
    "New Blank Graph": "New Blank Graph", 
    "Feb": "Feb", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restrict the domain of this line by adding __sample_expression__ to the end.", 
    "image": "image", 
    "Duplicate": "Duplicate", 
    "Statistics": "Statistics", 
    "Degrees": "Degrees", 
    "Hide List": "Hide List", 
    "Start by graphing a function.": "Start by graphing a function.", 
    "Intercept Form": "Intercept Form", 
    "Tell us on Facebook": "Tell us on Facebook", 
    "Inequalities are not allowed.": "Inequalities are not allowed.", 
    "Click here to continue editing this table.": "Click here to continue editing this table.", 
    "Click the \"Edit List\" button.": "Click the \"Edit List\" button.", 
    "Dec": "Dec", 
    "Convert to Table": "Convert to Table", 
    "Variable '__dependency__' can't be used as a function.": "Variable '__dependency__ ' can't be used as a function.", 
    "Polar equations must be linear in r.": "Polar equations must be linear in r.", 
    "Move the parabola.": "Move the parabola.", 
    "You're a table wizard!": "Your a table wizard!", 
    "Polar Rose": "Polar Rose", 
    "Save (ctrl+s)": "Save (ctrl+s)", 
    "search by title...": "search by title...", 
    "Logarithmic Spiral": "Logarithmic Spiral", 
    "type your question or suggestion...": "type your question or suggestion...", 
    "functions": "functions", 
    "Mar": "Mar", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Hint: you can type y = x ^ 2, or use the a<sup>2</sup> button on the keypad below.", 
    "May": "May", 
    "Save As or Rename (ctrl+shift+s)": "Save As or Rename (ctrl+shift+s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "We can't plot θ as a function of r. Try plotting r (θ) instead.", 
    "Please enter your email address. We will send a password recovery link to you.": "Please enter your email address. We will send a password recovery link to you.", 
    "Visiting anonymously from Clever.": "Visiting anonymously from Clever.", 
    "Equations are not allowed.": "Equations are not allowed.", 
    "Phase": "Phase", 
    "Link to Google": "Link to Google", 
    "Message: <i>(optional)</i>": "Message: <i>(optional)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Click on the icon next to each trig function to turn it on or off:", 
    "Please enter your feedback.": "Please enter your feedback.", 
    "We only support implicit equations of x and y.": "We only support implicit equations of x and y.", 
    "Error signing in with Clever.": "Error signing in with Clever."
},"vi":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Đăng nhập bị chặn. Xin vui lòng chạy quảng cáo từ desmos.com để có thể đăng nhập bằng Google.", 
    "all": "tất cả", 
    "Image upload is not supported in this browser.": "Tải hình ảnh không được hỗ trợ trong trình duyệt n��y.", 
    "style:": "kiểu:", 
    "Jan": "Tháng Một", 
    "Please enter your email address. We will send a password recovery link to you.": "Vui lòng nhập địa chỉ email của bạn. Chúng tôi sẽ gửi cho bạn link để phục hồi mật khẩu .", 
    "Undo (ctrl+z)": "Hoàn tác (ctrl + z)", 
    "Update Password": "Cập nhật mật khẩu", 
    "Share your graph with the world!": "Chia sẻ đồ thị của bạn với cả thế giới!", 
    "Oct": "Tháng Mười", 
    "Sign In with Google": "Đăng nhập bằng Google", 
    "We don't solve complicated single-variable equations yet.": "Chúng tôi không thể giải phương trình một biến này được.", 
    "__number__ hours ago": "__number__ giờ trước đây", 
    "Click and hold on this icon until the options menu opens up.": "Bấm và giữ vào biểu tượng này cho đến khi trình đơn tùy chọn mở ra.", 
    "Undo": "Hoàn tác", 
    "Untitled Graph": "Đồ thị chưa có tiêu đề", 
    "Nice!": "Rất tốt!", 
    "... and select the \"table\" option.": "... và chọn \"bảng\".", 
    "Remembered your password?": "Nhớ mật khẩu của bạn?", 
    "Go \"Hands-free\"": "Dùng \"tay không\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Chúng tôi chỉ có thể vẽ được bất đẳng thức khi một biến số là bậc hai hoặc tuyến tính.", 
    "step:": "bước:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Tin này sẽ tự hủy trong __seconds__...", 
    "Radians": "Radian", 
    "New graph created.": "Đồ thị mới đã được tạo.", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Nhập một số hợp lệ ở đây.", 
    "center:": "Trung tâm:", 
    "Link to your Google Account": "Liên kết với tài khoản Google của bạn", 
    "Embed": "Nhúng", 
    "color:": "màu sắc:", 
    "Click to return to your expressions.": "Nhấn vào đây để trở về biểu thức của bạn.", 
    "A B C": "A B C", 
    "You did not select a file": "Bạn chưa chọn tập tin", 
    "Click to return to this graph.": "Nhấn vào đây để trở về biểu đồ.", 
    "Your Name:": "Tên bạn:", 
    "Update Account": "Cập nhật tài khoản", 
    "Duplicate": "Bản sao", 
    "Current Password:": "Mật khẩu hiện tại:", 
    "Now click here to add the sliders.": "Bây giờ click vào đây để thêm các thanh trượt.", 
    "Press play to animate the slider.": "Nhấn bắt đầu để chạy thanh trượt.", 
    "Click here to add a new item.": "Click vào đây để thêm một mục mới.", 
    "Don't forget the \"y=\"!": "Đừng quên \"y =\"!", 
    "Fill in this whole row.": "Điền vào toàn bộ hàng.", 
    "Create Account": "Tạo tài khoản", 
    "Tables": "Bảng", 
    "what's this?": "Đây là cái gì?", 
    "Let's get started!": "Hãy bắt đầu!", 
    "This is the name we'll use if we feature one of your graphs.": "Đây là tên sẽ được dùng khi chúng tôi dùng đồ thị của bạn làm ví dụ.", 
    "Convert this to a table.": "Chuyển đổi thành bảng.", 
    "Send": "Gửi", 
    "Sliders": "Thanh trượt", 
    "Change this equation to __sample_expression__": "Thay đổi phương trình này thành __sample_expression__", 
    "Click anywhere to close the drawing options.": "Nhấp vào bất cứ nơi nào để đóng tùy chọn vẽ.", 
    "Print": "In", 
    "Move right to add a new column.": "Di chuyển sang phải để thêm một cột mới.", 
    "Email": "Email", 
    "saved": "lưu", 
    "Brilliant!": "Tuyệt vời!", 
    "Now graph: __sample_expression__": "Bây giờ vẽ biểu đồ này : __sample_expression__", 
    "Repeat Password:": "Lặp lại mật khẩu:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Bạn có chắc bạn muốn rời khỏi đồ thị này không? Những thông tin chưa được lưu sẽ bị mất.", 
    "Try graphing a straight line, like __sample_expression__": "Thử vẽ đồ thị một đường thẳng, như __sample_expression__", 
    "__number__ minutes ago": "__number__ phút trước", 
    "Type any number here.": "Nhập bất kỳ số nào ở đây.", 
    "Resources": "Tài nguyên", 
    "Advanced Tables": "Bảng nâng cao", 
    "example": "Ví dụ", 
    "Title:": "Tiêu đề:", 
    "sending...": "đang gửi...", 
    "New Password:": "Mật khẩu mới:", 
    "We only plot inequalities of x and y, or r and θ.": "Chúng tôi chỉ vẽ được đồ thị bất đẳng thức của x và y, hoặc r và theta.", 
    "Click here to generate a table.": "Click vào đây để tạo ra một bảng.", 
    "loading graphs...": "tải đồ thị...", 
    "Click here to connect the dots.": "Click vào đây để kết nối các dấu chấm.", 
    "Click here to create a new expression.": "Click vào đây để tạo ra một biểu thức mới.", 
    "Didn't work? Try again!": "Không được? Thử lại!", 
    "last week": "Tuần trước", 
    "We'll never share or sell your email address.": "Chúng tôi sẽ không bao giờ  tiết lộ hoặc bán email của bạn.", 
    "Fill it in.": "Điền vào.", 
    "Sign In": "Đăng nhập", 
    "optional": "tùy chọn", 
    "Delete": "Xóa", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Một cái gì đó đã sai, xin vui lòng báo cho bộ phận hỗ trợ desmos.com. (Lỗi __error_num__)", 
    "Delete All": "Xóa tất cả", 
    "Try typing __sample_expression__": "Hãy thử nhập __sample_expression__", 
    "Apr": "Tháng Tư", 
    "Image": "ảnh", 
    "Start by graphing a function.": "Bắt đầu bằng cách vẽ đồ thị hàm số.", 
    "no, thanks": "Không, cảm ơn", 
    "Now try pressing Enter.": "Bây giờ hãy nhấn Enter.", 
    "Recover Password": "Khôi phục mật khẩu", 
    "Want us to consider featuring it?": "Bạn có muốn chúng tôi dùng nó làm ví dụ?", 
    "folder": "thư mục", 
    "Tours": "Hướng dẫn", 
    "Open Graph": "Mở đồ thị", 
    "type your question or suggestion...": "nhập câu hỏi hoặc đề xuất của bạn...", 
    "size:": "Kích thước:", 
    "Terms of Use": "Điều khoản sử dụng", 
    "expression": "biểu thức", 
    "Drag the handle to change the value.": "Di chuyển chốt để thay đổi giá trị.", 
    "New Blank Graph": "Đồ thị trống mới", 
    "Feb": "Tháng Hai", 
    "BBCode": "BBCode", 
    "Aug": "Tháng Tám", 
    "This graph has been deleted.": "Đồ thị này đã được xóa.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Hạn chế phạm vi của dòng này bằng cách thêm __sample_expression__ vào cuối.", 
    "image": "ảnh", 
    "Projector Mode": "Chế độ máy chiếu", 
    "Send a Copy to Google Drive": "Gửi một bản sao đến Google Drive", 
    "just now": "hiện giờ", 
    "Open Graph (ctrl+o)": "Mở đồ thị (ctrl + o)", 
    "Link to Google": "Liên kết với Google", 
    "Click here to create a new blank expression.": "Click vào đây để tạo một biểu thức mới.", 
    "Degrees": "Độ", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Bây giờ chúng ta hãy giới hạn phạm vi. Thêm __sample_expression__ vào cuối.", 
    "You're a scatter plot whiz!": "Bạn là một thiên tài vẽ đồ thị!", 
    "Desmos is in Maintenance Mode.": "Desmos đang trong chế độ bảo trì.", 
    "table": "bảng", 
    "loading...": "Đang tải...", 
    "Forgot your password?": "Quên mật khẩu?", 
    "The file \"__file__\" is not an image": "File \"__file__\" không phải là một file hình", 
    "one hour ago": "một giờ trước đây", 
    "__number__ weeks ago": "__number__ tuần trước", 
    "You're a slider pro!": "Bạn sử dụng thanh trượt thật chuyên nghiệp!", 
    "Jun": "Tháng Sáu", 
    "You're a restrictions star!": "Bạn là một ngôi sao trong việc giới hạn vùng!", 
    "Jul": "Tháng Bảy", 
    "Let's make a scatter plot!": "Chúng ta hãy làm cho một scatter plot!", 
    "Edit Account": "Chỉnh sửa tài khoản", 
    "more": "thêm", 
    "Function '__dependency__' is not defined.": "Hàm số '__dependency__' không được xác định.", 
    "Restrictions": "Hạn chế", 
    "Click here to continue editing this table.": "Click vào đây để tiếp tục chỉnh sửa bảng này.", 
    "Click here to only show the dots.": "Click vào đây để chỉ hiển thị các dấu chấm.", 
    "Click the \"Edit List\" button.": "Nhấp vào nút \"Chỉnh sửa danh sách\".", 
    "Sign in": "Đăng nhập", 
    "Sorry, we didn't find any graphs with that title.": "Rất tiếc, chúng tôi không tìm thấy đồ thị với tiêu đề đó.", 
    "Try typing all of __sample_expression__": "Hãy thử nhập vào tất cả các __sample_expression__", 
    "Dec": "Tháng Mười Hai", 
    "Nov": "Tháng Mười Một", 
    "Edit List": "Chỉnh sửa danh sách", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos tạm thời đang trong chế độ bảo trì. Bạn có thể mở đồ thị ví dụ, nhưng không thể đăng nhập, mở đồ thị của bạn, hoặc lưu các thay đổi. Chúng tôi xin lỗi vì sự bất tiện này.", 
    "Nice Graph!": "Đồ thị rất đẹp!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Cảm ơn bạn đã phản hồi &ndash; Bạn sẽ nghe từ chúng tôi sớm!", 
    "Feedback": "Ý kiến phản hồi", 
    "Sep": "Tháng Chín", 
    "Convert to Table": "Đổi sang bảng", 
    "Redo (ctrl+y)": "Làm lại (ctrl + y)", 
    "Variable '__dependency__' can't be used as a function.": "Biến '__dependency__' không thể được sử dụng như là một hàm số.", 
    "__number__ days ago": "__number__ ngày trước", 
    "Tell us on Facebook": "Chia sẻ chúng tôi trên Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos đang trong chế độ bảo trì, bạn sẽ không thể lưu được những thay đổi cho đồ thị này. Chúng tôi rất xin lỗi vì sự bất tiện này!", 
    "Desmos User Guide": "Hướng dẫn sử dụng Desmos", 
    "Done": "Xong", 
    "Desmos Graphing Calculator": "Desmos Máy Tính Vẽ Đồ Thị", 
    "Cancel": "Hủy bỏ", 
    "Send to:": "Gửi đến:", 
    "on __month__ __day__, __year__": "Vào __day__ __month__, __year__", 
    "Move the parabola.": "Di chuyển hình parabol.", 
    "Hide List": "Ẩn danh sách", 
    "Save (ctrl+s)": "Lưu (ctrl+s)", 
    "You're a table wizard!": "Bạn thật sự là một thuật sĩ bàn tính !", 
    "Share Graph": "Chia sẻ đồ thị", 
    "Sign In with Your Google Account": "Đăng nhập bằng tài khoản Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Chúng tôi chỉ hỗ trợ giải bất đẳng thức hai vế. Thử xóa một bên của bất đẳng thức.", 
    "Click here to make a new blank expression.": "Click vào đây để tạo một biểu thức mới.", 
    "Last trick!": "Mẹo Cuối!", 
    "Send Feedback": "Gửi phản hồi", 
    "search by title...": "Tìm kiếm theo tiêu đề...", 
    "Share this link:": "Chia sẻ link:", 
    "Please enter your feedback.": "Vui lòng nhập ý kiến phản hồi.", 
    "functions": "biểu thức", 
    "Mar": "Tháng Ba", 
    "Table created.": "Bảng đã tạo.", 
    "Language": "Ngôn ngữ", 
    "May": "Tháng Năm", 
    "message sent": "thông báo đã được gửi", 
    "Save As or Rename (ctrl+shift+s)": "Save As hoặc đổi tên (ctrl+shift+s)", 
    "Awesome!": "Tuyệt vời!", 
    "Sign Out": "Đăng xuất", 
    "Click back to continue editing.": "Bấm lùi lại để tiếp tục chỉnh sửa.", 
    "Just fill in one more...": "Chỉ cần điền vào một lần nữa...", 
    "Learn More": "Tìm hiểu thêm", 
    "Use your Email Address": "Sử dụng địa chỉ Email của bạn", 
    "to save and share your graphs!": "để lưu và chia sẻ đồ thị của bạn!", 
    "Name:": "Tên:", 
    "Add Item": "Thêm mục", 
    "Click to show the list of expressions.": "Nhấn vào đây để hiển thị danh sách các biểu thức.", 
    "Graph Paper": "Giấy vẽ đồ thị", 
    "yesterday": "hôm qua", 
    "Help": "Trợ giúp", 
    "add slider:": "thêm thanh trượt:", 
    "Please provide an email so that we can write back.": "Xin vui lòng cung cấp email của bạn để chúng tôi có thể hồi âm.", 
    "Opened '__graphTitle__'": "Mở '__graphTitle__'", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Khi nhấn vào \"__btn__,\" bạn xác nhận rằng bạn đã đọc và chấp nhận  __terms_of_use_link__ của chúng tôi.", 
    "HTML Embed Code": "Mã nhúng HTML", 
    "Message: <i>(optional)</i>": "Tin nhắn: <i>(tùy chọn)</i>", 
    "Sign In with Desmos": "Đăng nhập bằng Desmos", 
    "one minute ago": "một phút trước", 
    "Password:": "Mật khẩu:", 
    "or": "hoặc", 
    "We only support implicit equations of x and y.": "Chúng tôi chỉ hỗ trợ các phương trình với ẩn của x và y.", 
    "Message sent. Please check your email for a password recovery link.": "Tin nhắn đã được gửi. Xin vui lòng kiểm tra email của bạn để có đường link dùng phục hồi mật khẩu.", 
    "Email:": "Email:", 
    "enter": "nhập", 
    "Let's make some sliders!": "Chúng ta hãy tạo một số thanh trượt!", 
    "Go down to the next row to add more data.": "Đi đến dòng kế tiếp để thêm nhiều dữ liệu.", 
    "Let's make a function. First: click here to create a new blank expression.": "Chúng ta hãy tạo ra một hàm số. Đầu tiên: click vào đây để tạo ra một biểu thức mới.", 
    "yeah!": "yeah!"
},"hr":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Prozor za prijavu je blokiran. Dozvolite popup prozore sa desmos.com da biste se prijavili s Googleom.", 
    "all": "sve", 
    "Try adding an equals sign to turn this into an equation.": "Pokušajte s dodavanjem znaka \"=\" da pretvorite ovo u jednadžbu.", 
    "Undo (ctrl+z)": "Poništi (Ctrl + Z)", 
    "What effect does b have on the function g(x)?": "Kakav utjecaj ima b na funkciju g(x)?", 
    "Share your graph with the world!": "Podijeli svoj graf s ostatkom svijeta!", 
    "__number__ minutes ago": "prije __number__ minuta", 
    "Let's make a scatter plot!": "Napravimo raspršeni graf!", 
    "Hide this warning.": "Sakrij ovo upozorenje.", 
    "Nice!": "Lijepo!", 
    "Nov": "Stu", 
    "Zoom In": "Povećavanje", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Funkcija '__dependency__' zahtijeva samo 1 argument. __supplement__", 
    "saved": "spremljeno", 
    "center:": "Centar:", 
    "When __symbol__ is called with more than two arguments, no argument can be a list.": "Kad se __symbol__ poziva s više od dva argumenta, niti jedan ne može biti lista.", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "\"__symbols__\" i \"__lastSymbol__\" se ne mogu međusobno definirati.", 
    "Click to return to this graph.": "Klikni da biste se vratili u ovaj graf.", 
    "Press play to animate the slider.": "Pritisnite \"Kreni\" da biste započeli animaciju.", 
    "Didn't work? Try again!": "Nije uspjelo? Pokušajte ponovo!", 
    "Now, let's try a new model.": "Sad, pokušajmo novi model.", 
    "Tables": "Tablice", 
    "Table headers must be simple expressions. __supplement__": "Zaglavlja tablice moraju biti jednostavni izrazi. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Funkcija \"__symbol__\" zahtijeva bar jedan argument. Npr., pokušaj utipkati: __symbol__(1, 2).", 
    "Function definitions are not allowed.": "Definicije funkcija nisu dozvoljene.", 
    "Too many variables, I don't know what to do with this.": "Previše varijabli. Neznam što da radim s ovim.", 
    "Logarithmic Spiral": "Logaritamska spirala", 
    "Circle": "Kružnica", 
    "Secant Line": "Sekanta", 
    "Polar Graphing": "Polarni sustav", 
    "Visualizing Slope": "Vizualizacija nagiba", 
    "How can I change the color?": "Kako mogu promijeniti boju?", 
    "Fill in the sample data:": "Popuni sa probnim podacima:", 
    "Grid": "Mreža", 
    "List index must not be a list.": "Indeks liste ne smije biti lista.", 
    "Invalid height.": "Nevaljana visina.", 
    "Click here to create a new expression.": "Klikni ovdje da stvoriš novi izraz.", 
    "New Password:": "Nova lozinka:", 
    "Failed to find regression coefficients.": "Neuspjeh pri nalaženju regresijskih koeficijenata.", 
    "For example, try typing: __recommendation__.": "Npr, pokušajte napisati: __recommendation__.", 
    "How do I share a link to my graph?": "Kako da podijelim moj graf?", 
    "Regressions must contain at least one list of data.": "Regresije moraju sadržavati bar jednu listu podataka.", 
    "sending...": "šaljem...", 
    "Hide Keypad": "Sakrij tipkovnicu", 
    "last week": "Prošli tjedan", 
    "Show List": "Pokaži popis", 
    "We only plot double inequalities of x and y.": "Možemo samo nacrtati duple nejednakosti od x i y.", 
    "Nice work &ndash; Keep exploring!": "Odličan posao, &ndash;, nastavi s istraživanjem!", 
    "Slope Intercept Form": "Implicitni oblik", 
    "no, thanks": "Ne, hvala", 
    "Recover Password": "Vrati lozinku", 
    "Terms of Use": "Uvjeti korištenja", 
    "Show Keypad": "Pokaži tipkovnicu", 
    "Aug": "Kol", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Ne možete koristiti \"__dependency__\" kao parametar ove funkcije jer je \"__dependency__\" već definirano.", 
    "You're a scatter plot whiz!": "Ti si čarobnjak raspršenih grafova!", 
    "Standard Form": "Implicitni oblik", 
    "one hour ago": "prije jedan sat", 
    "You're a slider pro!": "Vi ste profesionalac za klizače!", 
    "Delete": "Obriši", 
    "drag:": "povlačenje:", 
    "more": "više", 
    "Point Slope Form": "Pravac s nagibom i točkom kroz koju prolazi", 
    "How is this app free?": "Kako je ova aplikacija besplatna?", 
    "Nice Graph!": "Lijep graf!", 
    "Feedback": "Povratna informacija", 
    "Desmos User Guide": "Desmos uputa za korištenje", 
    "example": "primjer", 
    "on __month__ __day__, __year__": "na __month__ __day__ __year__", 
    "Graph Settings": "Postavke grafa", 
    "Share Graph": "Podijeli graf", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Dvostruke nejednakosti moraju ići u istom smjeru, npr. 1 < y < 2.", 
    "Show Numbers": "Pokaži brojeve", 
    "Wave Interference": "Interferencija valova", 
    "message sent": "poruka poslana", 
    "Sign Out": "Odjavi se", 
    "X-Axis": "X-os", 
    "Graph Paper": "Mreža", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos je u načinu pretpregleda, pa nećete moći spremiti grafove.", 
    "Save Changes (ctrl+s)": "Spremi promjene (Ctrl + s)", 
    "Regressions": "Vraćanje", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Pritiskom na \"__btn__\", potvršujete da ste pročitali i prihvatili naše __terms_of_use_link__.", 
    "Sign In with Desmos": "Prijavite se s Desmos računom", 
    "Password:": "Lozinka:", 
    "Link to your Google Account": "Poveži sa svojim Googleovim računom", 
    "Parabolas": "Parabole", 
    "Email:": "E-mail:", 
    "enter": "enter", 
    "Derivatives": "Derivacije", 
    "Jan": "Sij", 
    "First column may not be __most__ or __last__.": "Prvi stupac ne smije biti __most__ ili __last__.", 
    "Translating Any Function": "Translacija bilo koje funkcije", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Reziduali predstavljaju onaj dio varijabilnosti koji nije moguće objasniti modelom. Klikni ovdje da ih dodaš u tablicu i nacrtaš na grafu.", 
    "Oct": "Lis", 
    "Sign In with Google": "Prijavite se s Googleom", 
    "Just fill in one more...": "Popuni još samo jedan...", 
    "Untitled Graph": "Bezimeni graf", 
    "... and select the \"table\" option.": "... i odaberi opciju \"tablica\".", 
    "Points are written like this: (1, 2).": "Točke se prikazuju ovako: (1, 2).", 
    "New graph created.": "Novi graf stvoren.", 
    "HTML Embed Code": "HTML Embed Code", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "Imate li sekundu da nam pomognete? Vaša ocjena i povratna informacija nam pomaže da nas drugi ljudi pronađu i pomaže nam bolje računati. Recite nam što mislite!", 
    "Click to return to your expressions.": "Kliknite da biste se vratili u izraze.", 
    "A B C": "A B C", 
    "enter a note...": "Unesite napomenu...", 
    "Only __form__ is supported. Otherwise, use parens.": "Samo je __form__ podržan, u suprotnom koristite zagrade.", 
    "Hyperbola": "Hiperbola", 
    "Unsupported Browser": "Preglednik nije podržan", 
    "Save This Graph": "Spremi ovaj graf", 
    "Show Grid Angles": "Pokaži polarnu mrežu", 
    "Let's get started!": "Počnimo!", 
    "This is the name we'll use if we feature one of your graphs.": "Ovo ime koje ćemo koristiti ako budemo istaknuli neki od vaših grafova.", 
    "We zoomed to fit your data.": "Zoomirali smo da se podaci bolje vide.", 
    "FAQs": "Pitanja i odgovori", 
    "Sliders": "Klizači", 
    "Click anywhere to close the drawing options.": "Stisni bilo gdje da zatvoriš opcije crtanja.", 
    "Print": "Ispiši", 
    "Move right to add a new column.": "Pomaknite se udesno da dodate novi stupac.", 
    "Save": "Spremi", 
    "Repeat Password:": "Ponovite novu lozinku:", 
    "Try graphing a straight line, like __sample_expression__": "Pokušaj nacrtati pravac, poput __sample_expression__", 
    "Conic Sections": "Čunjosječnice (konike)", 
    "Definitions are nested too deeply.": "Definicije su učahurene preduboko.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Pokušajte s dodavanjem \"__lhs__\" na početak ove jednadžbe.", 
    "Tangent Line": "Tangenta", 
    "Period and Amplitude": "Period i amplituda", 
    "Try typing __sample_expression__": "Pokušajte utipkati __sample_expression__", 
    "Apr": "Tra", 
    "sample data": "Probni podaci", 
    "Now try pressing Enter.": "Pokušaj pritisnuti Enter.", 
    "Lists are not allowed.": "Liste nisu dozvoljene.", 
    "size:": "Veličina:", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Funkcija '__dependency__' zahtijeva __assignment_arity__ argumente. __supplement__", 
    "note": "napomena", 
    "Needs work": "Treba posla", 
    "BBCode": "BBCode", 
    "Projector Mode": "Projektorski način", 
    "just now": "upravo sada", 
    "I just want to graph": "Samo želim crtati", 
    "Click here to create a new blank expression.": "Stisni ovdje da napravite novi prazan izraz.", 
    "Range cannot depend on free variable '__symbol__'.": "Raspon ne može ovisiti o slobodnoj varijabli \"__symbol__\".", 
    "Desmos is in Maintenance Mode.": "Desmos je u načinu održavanja.", 
    "The file \"__file__\" is not an image": "Datoteka \"__file__\" nije slika", 
    "add label": "dodaj oznaku", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Uredi ovu jednadžbu da bolje odgovara podacima. Pokušaj, npr., sa:<br>__equation__", 
    "__number__ weeks ago": "prije __number__ tjedana", 
    "Drop Image Here": "Spusti sliku ovdje", 
    "Open Graph (ctrl+o)": "Otvori graf (Ctrl + O)", 
    "What effect does h have on the function g(x)?": "Kakav utjecaj ima h na funkciju g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Pokušajte uključiti '__symbols__' i '__lastSymbol__' kao argumente definiranjem funkcije kao '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "Funkcija \"__dependency__\" nije definirana.", 
    "Restrictions": "Ograničenja", 
    "Click here to only show the dots.": "Kliknite ovdje kako biste prikazali samo točke.", 
    "Click here to download Google Chrome.": "Kliknite ovdje da biste preuzeli Google Chrome.", 
    "Zoom Out": "Smanjivanje", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Pokušajte uključiti '__lastSymbol__' kao argument definiranjem funkcije kao '__newSignature__'.", 
    "Send": "Pošalji", 
    "Try typing all of __sample_expression__": "Probaj utipkati sve od __sample_expression__", 
    "Too complicated. Use parens.": "Prekomplicirano. Koristite zagrade.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos je privremeno u načinu održavanja. Možete otvoriti primjere grafova, ali nećete se moći prijaviti, otvoriti svoje grafove ili spremiti promjene. Ispričavamo se zbog neugodnosti.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Hvala Vam za povratnu informaciju &ndash;, još ćemo se čuti uskoro!", 
    "Sep": "Ruj", 
    "Redo (ctrl+y)": "Ponovi (Ctrl + Y)", 
    "__number__ days ago": "prije __number__ dana", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos je u načinu održavanja, nećete moći spremiti promjene na grafu. Ispričavamo se zbog neugodnosti!", 
    "Cancel": "Odustani", 
    "Send to:": "Pošalji na:", 
    "Open Graph": "Otvori graf", 
    "Table entries must be simple expressions. __supplement__": "Unosi u tablicu moraju biti jednostavni izrazi. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Možemo podržati samo riješene dvostruke nejednakosti. Pokušajte obrisati jednu stanu nejednakosti.", 
    "Scaling Any Function": "Skaliranje bilo koje funkcije", 
    "Last trick!": "Posljednji trik!", 
    "Share this link:": "Podijeli ovaj link:", 
    "Language": "Jezik", 
    "The first argument of '__symbol__' must be a list. For example, try typing: __recommendation__.": "Prvi argument od '__symbol__' mora biti lista. Na primjer, pokušajte upisati: __recommendation__.", 
    "Awesome!": "Bravo!", 
    "Click here to generate a table.": "Kliknite ovdje da biste stvorili tablicu.", 
    "to save and share your graphs!": "spremiti i podijeliti vaše grafove!", 
    "Standard Form with Tangent": "Implicitni oblik s tangentom", 
    "Invalid y coordinate.": "Nevaljana y koordinata.", 
    "I love it": "Obožavam", 
    "We'll never share or sell your email address.": "Mi nikad nećemo dijeliti ili prodavati vašu e-mail adresu.", 
    "Residuals": "Reziduali", 
    "Points are not allowed.": "Točke nisu dozvoljene.", 
    "Arrows:": "Strelica:", 
    "Edit List": "Uredi popis", 
    "Message sent. Please check your email for a password recovery link.": "Poruka poslana. Molimo Vas, provjerite vaš e-mail za lik za oporavak lozinke.", 
    "Please provide an email so that we can write back.": "Dajte nam email tako da Vam možemo odgovoriti.", 
    "Let's make some sliders!": "Napravimo neke klizače!", 
    "Go down to the next row to add more data.": "Idi dolje do slijedećeg reda da dodaš nove podatke.", 
    "Let's make a function. First: click here to create a new blank expression.": "Idemo napraviti funkciju. Prvo: klikni ovdje da napraviš novi prazni izraz.", 
    "yeah!": "da!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Greška: red __rowNum__, stupac __colNum__ nije broj.", 
    "Transformations": "Transformacije", 
    "Image upload is not supported in this browser.": "Ucitavanje slika nije podržano u ovom pretraživaču.", 
    "This column header can't be defined elsewhere in the calculator.": "Ovo zaglavlje stupca ne može biti definirano drugdje u crtaču.", 
    "Update Password": "Ažurirajte lozinku", 
    "Resources": "Izvori", 
    "Help Center": "Centar za pomoć", 
    "Drag the handle to change the value.": "Vucite ručku da biste promijenili vrijednost.", 
    "Undo": "Poništi", 
    "Now type: __equation__": "Sad utipkaj: __equation__", 
    "What effect does a have on the function g(x)?": "Kakav utjecaj ima a na funkciju g(x)?", 
    "Sign in": "Prijavite se", 
    "Type any number here.": "Unesite bilo koji broj ovdje.", 
    "folder": "mapa", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Mi samo možemo nacrtati nejednakosti kad je jedna varijabla linearna ili kvadratna.", 
    "Send a Copy to Google Drive": "Pošalji kopiju na Google Drive", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Kutovi", 
    "This message will self-destruct in __seconds__...": "Ova poruka će se sama ugasiti za __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Pomoć br. 2: __twiddle__ je na našoj onscreen tipkovnici pod \"A B C\".", 
    "We don't solve single-variable equations involving lists yet.": "Još  ne rješavamo jednadžbe s jednom nepoznanicom koje uključuju liste.", 
    "Default Zoom": "Zadano zumiranje", 
    "Ellipse with Foci": "Elipsa s žarištima", 
    "color:": "boja:", 
    "... and select the \"expression\" option.": "... i odaberi opciju \"izrazi\".", 
    "Help": "Pomoć", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Pomoć: stisni \"A B C\" gumb na tipkovnici da pronađeš { } gumbe", 
    "Nice. Let's check the model.": "Odlično. Sad provjeri model.", 
    "Logged in with Clever!": "Ulogirani s Cleverom!", 
    "This graph has been deleted.": "Ovaj graf je obrisan.", 
    "Invalid width.": "Nevaljana širina.", 
    "Create Account": "Stvori račun", 
    "First, let's get some data.": "Prvo, prikupimo neke podatke.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos prima sve prihode preko partnerstva. Zainteresirani za partnerovanje s Desmosom? Pošaljite nam e-mail na <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Dugo držite obojani krug lijevo od jednadžbe ili izraza da biste otvorili postavke stila i boje.", 
    "Learn more": "Saznajte više", 
    "Brilliant!": "Brilijantno!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Jeste li sigurni da želite napustiti ovaj graf? Sav nespremljeni uradak bit će izgubljen.", 
    "Step:": "Korak:", 
    "Parabola and Focus": "Parabola i žarište", 
    "Advanced Tables": "Napredne tablice", 
    "Title:": "Naslov:", 
    "Current Password:": "Sadašnja lozinka:", 
    "Click here to connect the dots.": "Stisni ovdje da povežeš točke.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Nešto je pošlo po zlu, molimo prijavite ovo desmos.com za podršku. (Error __error_num__)", 
    "Sign In": "Prijava", 
    "Polar Conic Sections": "Polarne čunjosječnice", 
    "optional": "Opcionalno", 
    "You haven't written anything yet.": "Niste još ništa napisali.", 
    "Sorry, we didn't find any graphs with that title.": "Žao nam je, nismo našli nikakve grafove s tim nazivom.", 
    "Y-Axis": "Y-os", 
    "Want us to consider featuring it?": "Želite da razmotrimo istaknuti vaš graf?", 
    "What effect does k have on the function g(x)?": "Kakav utjecaj ima k na funkciju g(x)?", 
    "Tours": "Tutorijali", 
    "Reflections of a Function": "Zrcaljenje funkcije", 
    "expression": "izraz", 
    "Close": "Zatvori", 
    "send us feedback": "pošaljite nam povratnu informaciju", 
    "For example, try typing: __dependency__(x).": "Npr, pokušajte upisati: __dependency__(x).", 
    "Unit Circle": "Jedinična kružnica", 
    "powered by": "pokreće ga", 
    "table": "tablica", 
    "loading...": "učitavanje...", 
    "Forgot your password?": "Zaboravili ste lozinku?", 
    "Calculus": "Viša matematika", 
    "Make a New Copy": "Napravi novu kopiju", 
    "Click here to add a new table.": "Klikni ovdje da dodaš novu tablicu.", 
    "Jun": "Lip", 
    "You're a restrictions star!": "Ti si zvijezda ograničenja!", 
    "Jul": "Srp", 
    "Inverse of a Function": "Inverz funkcije", 
    "Edit Account": "Uredi račun", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Ne postoji način da spremite Vaš graf kroz aplikaciju (još!). Preporučujemo da posjetite www.desmos.com/calculator, i da se prijavite s Vašim Desmos računom ako želite spremiti Vaš graf.", 
    "Delete All": "Obriši sve", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Ne postoji način da podijelite Vaš graf kroz aplikaciju (još!). Preporučujemo da posjetite www.desmos.com/calculator, i da se prijavite s Vašim Desmos računom ako želite podijeliti Vaš graf.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinusoida s amplitudom \"a\" i periodom \"b\"", 
    "what's this?": "Što je ovo?", 
    "Done": "Dovršeno", 
    "Desmos Graphing Calculator": "Desmos Graphing Calculator", 
    "'__symbol__' may not be used as a regression parameter.": "\"__symbol__\" se ne smije koristiti kao regresijski paranetar.", 
    "Nested lists are not allowed.": "Ugniježđene liste nisu dopuštene.", 
    "Sign In with Your Google Account": "Prijavite se s Vašim Google računom", 
    "loading graphs...": "učitavanje grafova...", 
    "Click here to make a new blank expression.": "Stisni ovdje da napraviš novi prazan izraz.", 
    "Send Feedback": "Pošalji povratnu informaciju", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Sad nacrtaj reziduale.</b><br>Utipkaj __residualVariable__ u novom stupcu tablice.", 
    "Table created.": "Tablica stvorena.", 
    "Click back to continue editing.": "Klikni natrag da nastaviš s uređivanjem.", 
    "Ranges must be arithmetic sequences.": "Raspon mora biti aritmetički niz.", 
    "Enjoying Desmos?": "Uživate u Desmosu?", 
    "Name:": "Ime:", 
    "Add Item": "Dodaj stavku", 
    "Click to show the list of expressions.": "Kliknite da biste prikazali listu izraza.", 
    "Logged in successfully!": "Prijava uspješna!", 
    "Function g(x) is a transformed version of function f(x).": "Funkcija g(x) je transformirana verzija funkcije f(x).", 
    "Lines": "Pravci", 
    "yesterday": "jučer", 
    "Hint #1: to get __y_1__ type __y1__.": "Pomoć br. 1: da bi napisao __y_1__ utipkaj __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "Ne možete redefinirati \"__symbol__\" jer je već definirano.", 
    "Function '__symbol__' requires 2 arguments. For example, try typing: __recommendation__.": "Funkcija '__symbol__' zahtijeva 2 argumenta. Na primjer, upišite: __recommendation__.", 
    "How do I save my graph?": "Kako da spremim moj graf?", 
    "Opened '__graphTitle__'": "Otvoreno '__graphTitle__'", 
    "Trigonometry": "Trigonometrija", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Oprostite, ne možete nacrtati __symbol__ kao funkciju ničega.", 
    "No Unsaved Changes": "Nema nespremljenih promjena", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Samo __form1__ i __form2__ su podržani. U suprotnom, koristite zagrade.", 
    "one minute ago": "prije jednu minutu", 
    "Vertex Form": "Tjemeni oblik", 
    "Other Questions?": "Druga pitanja?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Odi do Google Docsa te kopiraj i zalijepi ovo __sample_data_link__.", 
    "Square Grid": "Kvadratna mreža", 
    "style:": "Stil:", 
    "Ask us on Twitter": "Pitaj nas na Twitteru", 
    "Function '__dependency__' requires an argument. __supplement__": "Funkcija '__dependency__' zahtijeva argument. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Još ne rješavamo komplicirane jednadžbe s jednom nepoznanicom još.", 
    "__number__ hours ago": "prije __number__ sati", 
    "Click and hold on this icon until the options menu opens up.": "Kliknite i držite ovu ikonu dok se ne otvori meni s opcijama.", 
    "Learn more.": "Saznajte više.", 
    "Remembered your password?": "Sjetili ste se lozinke?", 
    "Download the User Guide": "Preuzmi Uputu za korisnike", 
    "Go \"Hands-free\"": "Počnite gledati", 
    "step:": "Korak:", 
    "Cannot index into something that is not a list.": "Ne mogu indeksirati nešto što nije lista.", 
    "Radians": "Radijani", 
    "Let's start with some data!": "Počnimo s podacima!", 
    "Uh-oh! Type a valid number here.": "AJOJ! Utipkaj valjani broj ovdje.", 
    "Use your Email Address": "Koristite Vašu e-mail adresu", 
    "General Form": "Eksplicitni oblik", 
    "Embed": "Ugradi", 
    "You did not select a file": "Niste odabrali datoteku", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos radi najbolje na Vašoj verziji Androida ako koristite Chrome pretraživač.", 
    "Your Name:": "Vaše ime:", 
    "Two Point Form": "Jednadžba pravca kroz dvije točke", 
    "Now click here to add the sliders.": "Sad kliknite da biste dodali klizače.", 
    "Limacon": "\"Srčeko\"", 
    "Click here to add a new item.": "Klikni ovdje da dodaš novu stavku.", 
    "Don't forget the \"y=\"!": "Ne zaboravi \"y=\"!", 
    "Fill in this whole row.": "Popuni ovaj cijeli red.", 
    "Invalid x coordinate.": "Nevaljana x koordinata.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Sad ograničimo raspon. Dodaj __sample_expression__ na kraj.", 
    "Too many variables. Try defining '__variables__'.": "Previše varijabli. Pokušajte definirati '__variables__'.", 
    "Parameters": "Parametri", 
    "Update Account": "Ažurirajte račun", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Pažnja: možeš dodati vlastite podatke pritiskom na gumb __plus_icon__.", 
    "Convert this to a table.": "Pretvori ovo u tablicu.", 
    "Change this equation to __sample_expression__": "Promjeni ovu jednadžbu u __sample_expression__", 
    "Email": "E-mail", 
    "Taylor Expansion of sin(x)": "Taylorov niz za sin(x)", 
    "rate it in the app store": "ocijeni u trgovini aplikacijama", 
    "Now graph: __sample_expression__": "Sad nacrtaj: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Definirali ste \"__dependency__\" na višeod jednog mjesta. Pokušajte koristiti druge varijable, ili obrisati neke definicije \"__dependency__\".", 
    "All the Trig Functions": "Sve trigonometrijske funkcije", 
    "We only plot inequalities of x and y, or r and θ.": "Mi samo možemo crtati nejednakosti od x i y, ili r i θ.", 
    "Share your thoughts!": "Podijeli svoja razmišljanja!", 
    "Factored Form": "Oblik s nultočkama", 
    "Fill it in.": "Popuni.", 
    "Both arguments of '__symbol__' must be lists. For example, try typing: __recommendation__.": "Oba argumenta od '__symbol__' moraju biti liste. Na prijemr, pokušajte upisati: __recommendation__.", 
    "Sorry, I don't understand this.": "Žao mi je, ne razumijem ovo.", 
    "Image": "Slika", 
    "Learn More": "Saznaj više", 
    "You can't use '__symbol__' as an index because it's already defined.": "Ne možete koristiti \"__symbol__\" kao index jer je već definirano.", 
    "What do you want '__symbol__' to equal?": "Čemu želiš da je \"__symbol__\" jednako?", 
    "add slider:": "Dodaj klizač:", 
    "or": "ili", 
    "Does not compute to constant.": "Ne izračunava se konstanta.", 
    "New Blank Graph": "Novi prazan graf", 
    "Feb": "Velj", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ograniči domenu ove linije dodavanjem __sample_expression__ na kraj.", 
    "image": "slika", 
    "Duplicate": "Udvostruči", 
    "Statistics": "Statistika", 
    "Degrees": "Stupnjevi", 
    "Hide List": "Sakrij popis", 
    "Start by graphing a function.": "Počni s crtanjem funkcije.", 
    "Intercept Form": "Segmentni oblik", 
    "Tell us on Facebook": "Recite nam na Facebooku", 
    "Inequalities are not allowed.": "Nejednakosti nisu dozvoljene.", 
    "Click here to continue editing this table.": "Kliknite ovdje da biste nastavili uređivati ovu tablicu.", 
    "Click the \"Edit List\" button.": "Kliknite na gumb \"Uredi liste\".", 
    "Dec": "Pro", 
    "Convert to Table": "Pretvori u tablicu", 
    "Variable '__dependency__' can't be used as a function.": "Varijabla \"__dependency__\" se ne može koristiti kao funkcija.", 
    "This equation contains fine detail that has not been fully resolved.": "Ova jednadžba sadrži fine detalje koji nisu potpuno razriješeni.", 
    "Polar equations must be linear in r.": "Polarnim jednadžbama r mora biti linearan.", 
    "Move the parabola.": "Miči parabolu.", 
    "You're a table wizard!": "Vi ste čarobnjak za tablice!", 
    "Polar Rose": "Polarna ruža", 
    "Save (ctrl+s)": "Spremi (Ctrl + S)", 
    "search by title...": "Potraži po naslovu...", 
    "type your question or suggestion...": "Utipkaj svoje pitanje ili prijedlog...", 
    "functions": "funkcije", 
    "Mar": "Ožu", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Pomoć: možeš utipkati y = x^2, ili koristiti gumb <sup>2</sup> na tipkovnici ispod.", 
    "May": "Svi", 
    "Save As or Rename (ctrl+shift+s)": "Spremi kao ili Preimenuj (Ctrl + Shift + S)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "Ne možemo nacrtati θ kao funkciju od r. Pokušajte crtati r(θ) umjesto toga.", 
    "Please enter your email address. We will send a password recovery link to you.": "Molimo unesite vašu e-mail adresu. Poslat ćemo vam link za oporavak lozinke.", 
    "Visiting anonymously from Clever.": "Anonimno posjećivanje s Cleverom.", 
    "Equations are not allowed.": "Jednadžbe nisu dozvoljene.", 
    "Phase": "Faza", 
    "Link to Google": "Poveži s Googleom", 
    "Create an Account": "Stvorite račun", 
    "Message: <i>(optional)</i>": "Poruka: <i>(opcionalno)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Stisni na ikonu pokraj trig. funkcije da ju pokažeš ili sakriješ:", 
    "Please enter your feedback.": "Molimo, unesite vašu povratnu informaciju.", 
    "We only support implicit equations of x and y.": "Mi samo podržavamo implicitne jednadžbe od x i y.", 
    "Error signing in with Clever.": "Greška s ulogiranjem s Cleverom."
},"da":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Login-vindue blev blokeret. Tillad popups fra desmos.com for at logge på med Google.", 
    "all": "alle", 
    "Try adding an equals sign to turn this into an equation.": "Tilføj et lighedstegn for at gøre dette til en ligning.", 
    "Undo (ctrl+z)": "Fortryd (ctrl + z)", 
    "What effect does b have on the function g(x)?": "Hvad betyder b for funktionen g(x)?", 
    "Share your graph with the world!": "Del din graf med verden!", 
    "__number__ minutes ago": "__number__ minutter siden", 
    "Let's make a scatter plot!": "Lad os tegne et scatterplot!", 
    "Hide this warning.": "Skjul denne advarsel.", 
    "Nice!": "Ikke dårligt!", 
    "Nov": "Nov.", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "Funktionen '__dependency__' kræver kun 1 argument. __supplement__", 
    "saved": "gemt", 
    "center:": "center:", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "'__symbols__' og '__lastSymbol__' kan ikke defineres indbyrdes afhængigt.", 
    "Click to return to this graph.": "Klik her for at vende tilbage til denne graf.", 
    "Press play to animate the slider.": "Tryk på Afspil for at animere skyderen.", 
    "Didn't work? Try again!": "Virkede det ikke? Prøv igen!", 
    "Now, let's try a new model.": "Nu skal vi prøve med en ny model.", 
    "Tables": "Tabeller", 
    "Table headers must be simple expressions. __supplement__": "Tabeloverskrifter skal bestå af simple udtryk. __supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "Funktionen '__symbol__' skal have mindst ét argument. Skriv for eksempel: __symbol__ (1, 2).", 
    "Function definitions are not allowed.": "Definitioner af funktioner er ikke tilladt.", 
    "Too many variables, I don't know what to do with this.": "For mange variable. Jeg ved ikke, hvad der skal gøres med disse.", 
    "Click here to download Google Chrome.": "Klik her for at downloade Google Chrome.", 
    "Circle": "Cirkel", 
    "Secant Line": "Sekant", 
    "Polar Graphing": "Polar graftegning", 
    "Visualizing Slope": "Visualisér hældningen", 
    "How can I change the color?": "Hvordan ændrer jeg farven?", 
    "Fill in the sample data:": "Udfyld disse eksempeldata:", 
    "Grid": "Gitter", 
    "List index must not be a list.": "Listeindekset må ikke være en liste.", 
    "Invalid height.": "Ugyldig højde.", 
    "Click here to create a new expression.": "Klik her for at oprette et nyt udtryk.", 
    "New Password:": "Ny adgangskode:", 
    "Failed to find regression coefficients.": "Kunne ikke finde regressionskoefficienter.", 
    "For example, try typing: __recommendation__.": "Prøv for eksempel at skrive: __recommendation__.", 
    "How do I share a link to my graph?": "Hvordan deler jeg et link til min graf?", 
    "Regressions must contain at least one list of data.": "Regressioner skal indeholde mindst én række data.", 
    "sending...": "sender...", 
    "Hide Keypad": "Skjul skærmtastatur", 
    "last week": "Sidste uge", 
    "Show List": "Vis liste", 
    "We only plot double inequalities of x and y.": "Der kan kun afbildes dobbelt uligheder af x og y.", 
    "Nice work &ndash; Keep exploring!": "Godt arbejde – fortsæt  og bliv klogere!", 
    "Slope Intercept Form": "Hældning-skærings formel", 
    "no, thanks": "Nej tak", 
    "Recover Password": "Gendan kodeord", 
    "Terms of Use": "Vilkår og Betingelser", 
    "Show Keypad": "Vis skærmtastatur", 
    "Aug": "Aug.", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "Du kan ikke bruge '__dependency__' som parameter, idet funktionen '__dependency__' allerede er defineret.", 
    "You're a scatter plot whiz!": "Du er en scatterplot-guru!", 
    "Standard Form": "Standardform", 
    "one hour ago": "Én time siden", 
    "You're a slider pro!": "Du er en skyder-pro!", 
    "Delete": "Slet", 
    "drag:": "Træk:", 
    "more": "mere", 
    "Point Slope Form": "Punktformel", 
    "How is this app free?": "Hvorfor er denne app gratis?", 
    "Nice Graph!": "Flot graf!", 
    "Feedback": "Feedback", 
    "Desmos User Guide": "Desmos-brugervejledning", 
    "example": "eksempel", 
    "on __month__ __day__, __year__": "den __day__ __month__, __year__", 
    "Graph Settings": "Grafindstillinger", 
    "Share Graph": "Del Graf", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Dobbelt uligheder skal noteres 'ensrettet', fx 1 < y < 2.", 
    "Show Numbers": "Vis tal", 
    "Wave Interference": "Bølgeinterferens", 
    "message sent": "besked sendt", 
    "Sign Out": "Log ud", 
    "X-Axis": "X-akse", 
    "Graph Paper": "Grafpapir", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos er i preview tilstand, så du kan ikke gemme grafer.", 
    "Save Changes (ctrl+s)": "Gem ændringer (ctrl + s)", 
    "Regressions": "Regressioner", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Ved at klikke på \"__btn__\", accepterer du vores __terms_of_use_link__.", 
    "Sign In with Desmos": "Log på med Desmos", 
    "Password:": "Adgangskode:", 
    "Link to your Google Account": "Link til din Google-konto", 
    "Parabolas": "Parabler", 
    "Email:": "E-mail:", 
    "enter": "Indtast", 
    "Derivatives": "Afledninger", 
    "Jan": "Jan.", 
    "First column may not be __most__ or __last__.": "Første kolonne måikke være __most__ eller __last__.", 
    "Translating Any Function": "Forskyd en vilkårlig funktion", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "Residualer er forskellen mellem dine data og din model. Klik her for at føje dem til din tabel og plotte dem på grafen.", 
    "Oct": "Okt.", 
    "Sign In with Google": "Log ind med Google", 
    "Just fill in one more...": "Nu mangler du kun én mere...", 
    "Untitled Graph": "Ny graf", 
    "... and select the \"table\" option.": "... og vælge indstillingen \"tabel\".", 
    "Points are written like this: (1, 2).": "Punkter angives sådan: (1, 2).", 
    "New graph created.": "Ny graf oprettet.", 
    "HTML Embed Code": "HTML indlejringskode", 
    "Click to return to your expressions.": "Klik her for at vende tilbage til dine udtryk.", 
    "A B C": "A B C", 
    "enter a note...": "skriv en note...", 
    "Only __form__ is supported. Otherwise, use parens.": "Kun __form__ er understøttet. Brug eventuelt parentes.", 
    "Hyperbola": "Hyperbel", 
    "Unsupported Browser": "Ikke-understøttet Browser", 
    "Show Grid Angles": "Vis gittervinkler", 
    "Let's get started!": "Lad os komme i gang!", 
    "This is the name we'll use if we feature one of your graphs.": "Dette er det navn, vi vil bruge, hvis vi anvender en af dine grafer som eksempel.", 
    "We zoomed to fit your data.": "Grafen er nu tilpasset dine data.", 
    "FAQs": "FAQs", 
    "Sliders": "Skydere", 
    "Click anywhere to close the drawing options.": "Klik et vilkårligt sted for at lukke tegningsindstillingerne.", 
    "Print": "Udskriv", 
    "Move right to add a new column.": "Flyt til højre for at tilføje en ny kolonne.", 
    "Repeat Password:": "Gentag adgangskode:", 
    "Try graphing a straight line, like __sample_expression__": "Prøv at afbilde en ret linje, som fx. __sample_expression__", 
    "Conic Sections": "Keglesnit", 
    "Definitions are nested too deeply.": "Definitionerne er indlejret i for mange niveauer.", 
    "Try adding '__lhs__' to the beginning of this equation.": "Tilføj  '__lhs__' i begyndelsen af denne ligning.", 
    "Tangent Line": "Tangent", 
    "Period and Amplitude": "Periode og Amplitude", 
    "Try typing __sample_expression__": "Prøv at skrive __sample_expression__", 
    "Apr": "Apr.", 
    "sample data": "eksempeldata", 
    "Now try pressing Enter.": "Prøv nu at trykke på Enter.", 
    "Lists are not allowed.": "Lister er ikke tilladt.", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "Funktionen '__dependency__' kræver __assignment_arity__ argumenter. __supplement__", 
    "note": "note", 
    "BBCode": "BBCode", 
    "Projector Mode": "Projektortilstand", 
    "just now": "netop nu", 
    "Click here to create a new blank expression.": "Klik her for at oprette et nyt tomt udtryk.", 
    "Range cannot depend on free variable '__symbol__'.": "Intervallet kan ikke være afhængig af den fri variabel '__symbol__'.", 
    "Desmos is in Maintenance Mode.": "Desmos er under opdatering.", 
    "The file \"__file__\" is not an image": "Filen \"__file__\" er ikke et billede", 
    "add label": "Tilføj etiket", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "Ret ligningen, så du kan finde en nøjagtigere graf. Prøv for eksempel: <br>__equation__", 
    "__number__ weeks ago": "__number__ uger siden", 
    "Drop Image Here": "Slip billedet her", 
    "Open Graph (ctrl+o)": "Åbn Graf (ctrl + o)", 
    "What effect does h have on the function g(x)?": "Hvad betyder h for funktionen g(x)?", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "Inkludér '__symbols__' og '__lastSymbol__' som argumenter ved at definere funktionen som '__newSignature__'.", 
    "Function '__dependency__' is not defined.": "Funktionen '__dependency__' er ikke defineret.", 
    "Restrictions": "Restriktioner", 
    "Click here to only show the dots.": "Klik her for kun at vise punkterne.", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "Inkludér '__lastSymbol__' som et argument ved at definere funktionen som '__newSignature__'.", 
    "Send": "Send", 
    "Try typing all of __sample_expression__": "Prøv at skrive alle __sample_expression__", 
    "Too complicated. Use parens.": "For kompliceret. Brug parentes.", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos er under opdatering. Du kan åbne graf-eksempler, men ikke logge på, åbne dine egne grafer eller gemme eventuelle ændringer. Vi beklager ulejligheden.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Tak &ndash; du vil høre fra os snarest!", 
    "Sep": "Sep.", 
    "Redo (ctrl+y)": "Ophæv fortryd (ctrl + y)", 
    "__number__ days ago": "__number__ dage siden", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos er under opdatering. Du vil ikke kunne gemme ændringerne for denne graf. Vi beklager ulejligheden!", 
    "Cancel": "Annullér", 
    "Send to:": "Send til:", 
    "Open Graph": "Åbn graf", 
    "Table entries must be simple expressions. __supplement__": "Tabel-elementer skal bestå af simple udtryk. __supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Der understøttes kun løste dobbelt uligheder. Prøv at slette én side af uligheden.", 
    "Scaling Any Function": "Skalér en vilkårlig funktion", 
    "Last trick!": "Sidste trick!", 
    "Share this link:": "Del dette link:", 
    "Language": "Sprog", 
    "Awesome!": "Fantastisk!", 
    "Click here to generate a table.": "Klik her for at generere en tabel.", 
    "to save and share your graphs!": "for at gemme og dele dine grafer!", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos virker bedst på din version af Android, hvis du bruger Chrome-browseren.", 
    "Invalid y coordinate.": "Ugyldig y-koordinat.", 
    "We'll never share or sell your email address.": "Vi vil aldrig dele eller sælge din e-mail-adresse.", 
    "Residuals": "Residualer", 
    "Points are not allowed.": "Punkter er ikke tilladt.", 
    "Arrows:": "Pile:", 
    "Edit List": "Rediger liste", 
    "Message sent. Please check your email for a password recovery link.": "Vi har sendt dig et link til genopretning af dit pasord.  Tjek venligst din e-mail.", 
    "Please provide an email so that we can write back.": "Angiv venligst en e-mailadresse, så vi kan skrive tilbage.", 
    "Let's make some sliders!": "Nu skal vi oprette nogle skydere!", 
    "Go down to the next row to add more data.": "Gå ned til næste række for at tilføje data.", 
    "Let's make a function. First: click here to create a new blank expression.": "Lad os oprette en funktion. Først: Klik her for at oprette et nyt tomt udtryk.", 
    "yeah!": "Ja!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "Fejl: Rækken __rowNum__, kolonne __colNum__ er ikke et tal.", 
    "Transformations": "Transformationer", 
    "Image upload is not supported in this browser.": "Billedupload understøttes ikke i denne browser.", 
    "This column header can't be defined elsewhere in the calculator.": "Denne kolonneoverskrift kan ikke defineres andre steder.", 
    "Update Password": "Ret adgangskoden", 
    "Resources": "Ressourcer", 
    "Help Center": "Help Center", 
    "Drag the handle to change the value.": "Træk i grebet for at ændre værdien.", 
    "Undo": "Fortryd", 
    "Now type: __equation__": "Indtast nu: __equation__", 
    "What effect does a have on the function g(x)?": "Hvad betyder a for funktionen g(x)?", 
    "Sign in": "Log på", 
    "Type any number here.": "Skriv et vilkårligt tal her.", 
    "folder": "mappe", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Der kan kun afbildes uligheder, når én variabel er kvadratisk eller lineær.", 
    "Send a Copy to Google Drive": "Send en kopi til Google Drev", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Vinkler", 
    "This message will self-destruct in __seconds__...": "Denne meddelelse slettes om __seconds__...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "Tip 2: __twiddle__ finder du på skærm- tastaturet ved at klikke på 'A B C'.", 
    "We don't solve single-variable equations involving lists yet.": "Vi kan endnu ikke løse ligninger med netop én variabel, der omfatter lister endnu.", 
    "Ellipse with Foci": "Ellipse med fokuspunkter", 
    "color:": "farve:", 
    "... and select the \"expression\" option.": "... og vælg indstillingen \"udtryk\".", 
    "Help": "Hjælp", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "Tip: Tryk på 'A B C'-knappen skærmtastaturet for at finde knapperne { }", 
    "Nice. Let's check the model.": "Fint. Lad os tjekke modellen.", 
    "Logged in with Clever!": "Logget ind med Clever!", 
    "This graph has been deleted.": "Denne graf er blevet slettet.", 
    "Invalid width.": "Ugyldig bredde.", 
    "Create Account": "Opret brugerkonto", 
    "First, let's get some data.": "Vi skal først have fat i data.", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmos tjener sine penge via partnerskaber. Er du interesseret i at indgå et partnerskab med Desmos? Send en email til <a target=\"_blank\" ref=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "Hold venstre musetast nede på den farvede cirkel til venstre for ligningen for at vælge udseende af grafen.", 
    "Learn more": "Lær mere", 
    "Brilliant!": "Strålende!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Er du sikker på, du vil annullere? Ændringer vil gå tabt.", 
    "Step:": "trin:", 
    "Parabola and Focus": "Parabel og fokuspunkt", 
    "Advanced Tables": "Avancerede tabeller", 
    "Title:": "Titel:", 
    "Current Password:": "Nuværende Adgangskode:", 
    "Click here to connect the dots.": "Klik her for at forbinde punkterne.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Noget gik galt, du bedes rapportere dette til desmos.com support. (Fejl __error_num__)", 
    "Sign In": "Log på", 
    "Polar Conic Sections": "Polar Keglesnit", 
    "optional": "valgfri", 
    "You haven't written anything yet.": "Du har ikke skrevet noget endnu.", 
    "Sorry, we didn't find any graphs with that title.": "Desværre - der er ikke nogen grafer med denne titel.", 
    "Y-Axis": "Y-akse", 
    "Want us to consider featuring it?": "Vil du foreslå os at tilbyde dette i en senere version?", 
    "What effect does k have on the function g(x)?": "Hvad betyder k for funktionen g(x)?", 
    "Tours": "Vejledninger", 
    "Reflections of a Function": "Spejling af en funktion", 
    "expression": "udtryk", 
    "For example, try typing: __dependency__(x).": "Prøv for eksempel at skrive: __dependency__(x).", 
    "Unit Circle": "Enhedscirklen", 
    "powered by": "powered by", 
    "table": "tabel", 
    "loading...": "indlæser...", 
    "Forgot your password?": "Glemt adgangskode?", 
    "Calculus": "Differentialregning", 
    "Click here to add a new table.": "Klik her for at tilføje en ny tabel.", 
    "Jun": "Jun.", 
    "You're a restrictions star!": "Du kan sandelig jonglere med restriktioner!", 
    "Jul": "Jul.", 
    "Inverse of a Function": "Invers funktion", 
    "Edit Account": "Rediger brugerkonto", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "Det er ikke muligt at gemme din graf i app'en (endnu!). Gå istedet for til www.desmos.com/calculator og log ind på din Desmos-konto, hvis du vil gemme din graf.", 
    "Delete All": "Slet alle", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "Det er ikke muligt at dele din graf i app'en (endnu!). Gå istedet for til www.desmos.com/calculator og log ind på din Desmos-konto, hvis du vil dele din graf.", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "Sinuskurve med amplitude \"a\" og periode \"b\"", 
    "what's this?": "Hvad er det?", 
    "Done": "Færdig", 
    "Desmos Graphing Calculator": "Desmos Graphing Calculator", 
    "'__symbol__' may not be used as a regression parameter.": "'__symbol__' må ikke være en regressionsparameter.", 
    "Nested lists are not allowed.": "Indlejrede lister er ikke tilladt.", 
    "Sign In with Your Google Account": "Log ind med din Google-konto", 
    "loading graphs...": "indlæser grafer...", 
    "Click here to make a new blank expression.": "Klik her for at oprette et nyt tomt udtryk.", 
    "Send Feedback": "Send Feedback", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>Lad os nu plotte residualernr.</b><br>Skriv __residualVariable__ i en ny kolonne.", 
    "Table created.": "Tabellen blev oprettet.", 
    "Click back to continue editing.": "Klik på tilbage for at fortsætte med at redigere.", 
    "Ranges must be arithmetic sequences.": "Intervallerne skal være aritmetiske rækker.", 
    "Name:": "Navn:", 
    "Add Item": "Tilføj element", 
    "Click to show the list of expressions.": "Klik for at vise listen over udtryk.", 
    "Function g(x) is a transformed version of function f(x).": "Funktionen g(x) er en forskydning af funktionen f(x).", 
    "Lines": "Linjer", 
    "yesterday": "i går", 
    "Hint #1: to get __y_1__ type __y1__.": "Tip 1: for at få __y_1__ indtast __y1__.", 
    "You can't redefine '__symbol__' because it's already defined.": "Du kan ikke redefinere '__symbol__', idet det allerede er defineret.", 
    "How do I save my graph?": "Hvordan gemmer jeg min graf?", 
    "Opened '__graphTitle__'": "Indlæste '__graphTitle__'", 
    "Trigonometry": "Trigonometri", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "Desværre, du kan endnu ikke afbilde __symbol__ som en funktion af noget endnu.", 
    "No Unsaved Changes": "Ingen ikke-gemte ændringer", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "Kun __form1__ og __form2__ er understøttet. Brug eventuelt parentes.", 
    "one minute ago": "et minut siden", 
    "Vertex Form": "Toppunktsformel", 
    "Other Questions?": "Har du andre spørgsmål?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Gå til Google Docs for at kopiere og indsætte det __sample_data_link__.", 
    "Square Grid": "Kvadratgitter", 
    "style:": "style:", 
    "Ask us on Twitter": "Spørge os på Twitter", 
    "Function '__dependency__' requires an argument. __supplement__": "Funktionen '__dependency__' kræver kun 1 argument. __supplement__", 
    "We don't solve complicated single-variable equations yet.": "Der kan endnu ikke løses komplicerede enkelt-variabel ligninger.", 
    "__number__ hours ago": "__number__ timer siden", 
    "Click and hold on this icon until the options menu opens up.": "Klik og hold på denne ikon, indtil menuen 'valgmuligheder' åbner.", 
    "size:": "størrelse:", 
    "Remembered your password?": "Kan du huske din adgangskode?", 
    "Download the User Guide": "Download brugervejledningen", 
    "Go \"Hands-free\"": "Gå \"Hands-free\"", 
    "step:": "trin:", 
    "Cannot index into something that is not a list.": "Der kan ikke indekseres noget, der ikke er en liste.", 
    "Radians": "Radianer", 
    "Let's start with some data!": "Lad os starte med nogle data!", 
    "Uh-oh! Type a valid number here.": "Ups! Her skal du skrive et gyldigt tal.", 
    "Use your Email Address": "Bruge din E-mail-adresse", 
    "General Form": "Generel formel", 
    "Embed": "Indlejr", 
    "You did not select a file": "Du har ikke valg nogen fil", 
    "Standard Form with Tangent": "Standardform med tangent", 
    "Your Name:": "Dit navn:", 
    "Two Point Form": "To punkts formel", 
    "Now click here to add the sliders.": "Klik nu her for at tilføje flere skydere.", 
    "Limacon": "Limacon", 
    "Click here to add a new item.": "Klik her for at tilføje et nyt element.", 
    "Don't forget the \"y=\"!": "Glem ikke \"y =\"!", 
    "Fill in this whole row.": "Udfyld hele denne række.", 
    "Invalid x coordinate.": "Ugyldig x-koordinat.", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Lad os nu begrænse intervallet. Føj __sample_expression__ til slutningen.", 
    "Too many variables. Try defining '__variables__'.": "For mange variable. Definér '__variables__'.", 
    "Parameters": "Parametre", 
    "Update Account": "Opdater brugerkonto", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "Bemærk: du kan også tilføje dine egne data ved at klikke på knappen __plus_icon__.", 
    "Convert this to a table.": "Konvertere dette til en tabel.", 
    "Change this equation to __sample_expression__": "Ændr denne ligning til __sample_expression__", 
    "Email": "E-mail", 
    "Taylor Expansion of sin(x)": "Taylor-udvidelse af sin (x)", 
    "Now graph: __sample_expression__": "Afbild nu: __sample_expression__", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "Du har defineret '__dependency__' mere end ét sted. Prøve at vælge en anden variabel eller slette nogle af definitionerne af '__dependency__'.", 
    "All the Trig Functions": "Alle trigonometriske funktioner", 
    "We only plot inequalities of x and y, or r and θ.": "Der afbildes kun uligheder mellem x og y eller r og θ.", 
    "Share your thoughts!": "Hvad synes du?", 
    "Factored Form": "Faktoriseret form", 
    "Fill it in.": "Udfyld det.", 
    "Sorry, I don't understand this.": "Det forstår jeg ikke.", 
    "Image": "Billede", 
    "Learn More": "Læs mere", 
    "You can't use '__symbol__' as an index because it's already defined.": "Du kan ikke bruge '__symbol__' som indeks, da det allerede er defineret.", 
    "What do you want '__symbol__' to equal?": "Hvad ønsker du at '__symbol__' skal være lig med?", 
    "add slider:": "Tilføj skyder:", 
    "or": "eller", 
    "Does not compute to constant.": "Kan ikke være en konstant.", 
    "New Blank Graph": "Ny tom graf", 
    "Feb": "Feb.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Begræns domænet af denne linje ved at føje __sample_expression__ til slutningen.", 
    "image": "billede", 
    "Duplicate": "Duplikér", 
    "Statistics": "Statistik", 
    "Degrees": "Grader", 
    "Hide List": "Skjul liste", 
    "Start by graphing a function.": "Start ved at afbilde en funktion.", 
    "Intercept Form": "Skæringsformel", 
    "Tell us on Facebook": "Fortæl det på Facebook", 
    "Inequalities are not allowed.": "Uligheder er ikke tilladt.", 
    "Click here to continue editing this table.": "Klik her for at fortsætte med at redigere denne tabel.", 
    "Click the \"Edit List\" button.": "Klik på knappen \"Rediger liste\".", 
    "Dec": "Dec.", 
    "Convert to Table": "Konverter til tabel", 
    "Variable '__dependency__' can't be used as a function.": "Variablen '__dependency__' kan ikke bruges som en funktion.", 
    "Polar equations must be linear in r.": "Polære ligninger skal være lineære i r.", 
    "Move the parabola.": "Flyt parablen.", 
    "You're a table wizard!": "Du er en tabel-guru!", 
    "Polar Rose": "Polær Rose", 
    "Save (ctrl+s)": "Gem (ctrl + s)", 
    "search by title...": "Søg efter titel...", 
    "Logarithmic Spiral": "Logaritmiske Spiral", 
    "type your question or suggestion...": "Skriv dit spørgsmål eller forslag...", 
    "functions": "funktioner", 
    "Mar": "Mar.", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Tip: du kan skrive y = x ^ 2 eller bruge <sup>2</sup>-knappen på skærmtastaturet nedenfor.", 
    "May": "Maj.", 
    "Save As or Rename (ctrl+shift+s)": "Gem som eller Omdøb (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "θ kan ikke afbildes som en funktion af r. Forsøg at afbilde r(θ) i stedet for.", 
    "Please enter your email address. We will send a password recovery link to you.": "Indtast venligst din e-mail-adresse, så  sender vi dig et link til genoprettelse af dit pasord.", 
    "Visiting anonymously from Clever.": "Anonym sign-in via Clever.", 
    "Equations are not allowed.": "Ligninger er ikke tilladt.", 
    "Phase": "Fase", 
    "Link to Google": "Link til Google", 
    "Message: <i>(optional)</i>": "Besked: <i>(valgfri)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "Klik på ikonet ud for hver trigonometriske funktion for at slå det til eller fra:", 
    "Please enter your feedback.": "Giv venligst en tilbagemelding.", 
    "We only support implicit equations of x and y.": "Der understøttes kun implicitte ligninger i x og y.", 
    "Error signing in with Clever.": "Fejl ved sign-in via Clever."
},"th":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "หน้าต่างลงชื่อเข้าใช้ถูกบล็อก โปรดอนุญาตป็อปอัพจาก desmos.com เพื่อลงชื่อเข้าใช้ด้วย Google", 
    "all": "ทั้งหมด", 
    "Square Grid": "กริดจัตุรัส", 
    "style:": "รูปแบบ:", 
    "Jan": "ม.ค.", 
    "Try adding an equals sign to turn this into an equation.": "ลองใส่เครื่องหมายเท่ากับ เพื่อแปลงให้เป็นสมการ", 
    "Please enter your email address. We will send a password recovery link to you.": "โปรดกรอกอีเมลแอดเดรสของคุณ เราจะส่งลิงก์กู้คืนรหัสผ่านให้คุณ", 
    "Undo (ctrl+z)": "เลิกทำ (ctrl+z)", 
    "Update Password": "อัพเดตรหัสผ่าน", 
    "Share your graph with the world!": "แบ่งปันกราฟนี้ให้โลกเห็น!", 
    "Oct": "ต.ค.", 
    "Sign In with Google": "ลงชื่อเข้าใช้ด้วย Google", 
    "We don't solve complicated single-variable equations yet.": "เรายังไม่สามารถแก้สมการซับซ้อนตัวแปรเดียวได้ในตอนนี้", 
    "__number__ hours ago": "__number__ ชั่วโมงที่แล้ว", 
    "Click and hold on this icon until the options menu opens up.": "คลิกไอคอนนี้ค้างไว้จนกว่าเมนูตัวเลือกจะปรากฎขึ้น", 
    "Undo": "เลิกทำ", 
    "Untitled Graph": "กราฟไม่มีชื่อ", 
    "Nice!": "ดีมาก!", 
    "... and select the \"table\" option.": "... และเลือกตัวเลือก \"ตาราง\" .", 
    "Remembered your password?": "จำรหัสผ่านได้แล้วหรือ?", 
    "Grid": "กริด", 
    "Go \"Hands-free\"": "เลื่อนอัตโนมัติ", 
    "We can only plot inequalities when one variable is quadratic or linear.": "เราสามารถพล็อตอสมการซึ่งตัวแปรหนึ่งเป็นสมการกำลังสองหรือเชิงเส้นเท่านั้น", 
    "step:": "ขั้นตอน:", 
    "Tweet @desmos": "ทวีต @desmos", 
    "Angles": "มุม", 
    "This message will self-destruct in __seconds__...": "ข้อความนี้จะปิดตัวลงใน __seconds__...", 
    "X-Axis": "แกน X", 
    "Radians": "เรเดียน", 
    "New graph created.": "สร้างกราฟใหม่แล้ว", 
    "Uh-oh! Type a valid number here.": "โอ๊โอ! ใส่จำนวนที่ถูกต้องลงที่นี่", 
    "example": "ตัวอย่าง", 
    "General Form": "รูปแบบทั่วไป", 
    "Link to your Google Account": "เชื่อมกับบัญชี Google ของคุณ", 
    "Embed": "ฝัง", 
    "color:": "สี:", 
    "Click to return to your expressions.": "คลิกเพื่อกลับไปยังสมการของคุณ", 
    "A B C": "A B C", 
    "You did not select a file": "คุณยังไม่ได้เลือกไฟล์", 
    "Click to return to this graph.": "คลิกเพื่อกลับสู่กราฟนี้", 
    "Your Name:": "ชื่อของคุณ:", 
    "Two Point Form": "รูปแบบระหว่างสองจุด", 
    "Duplicate": "คัดลอก", 
    "Current Password:": "รหัสผ่านปัจจุบัน:", 
    "Now click here to add the sliders.": "คลิกที่นี่เพื่อเพิ่มตัวปรับค่า", 
    "Press play to animate the slider.": "กดปุ่มเล่น เพื่อเลื่อนตัวปรับค่าอัตโนมัติ", 
    "Click here to add a new item.": "คลิกที่นี่เพื่อเพิ่มวัตถุใหม่", 
    "Don't forget the \"y=\"!": "อย่าลืมใส่ \"y=\"!", 
    "Fill in this whole row.": "ใส่ข้อมูลทั้งแถวนี้", 
    "Invalid width.": "ความกว้างไม่ถูกต้อง", 
    "Invalid x coordinate.": "พิกัด x ไม่ถูกต้อง", 
    "Create Account": "สร้างบัญชีผู้ใช้", 
    "Tables": "ตาราง", 
    "what's this?": "นี่คืออะไร?", 
    "Let's get started!": "มาเริ่มต้นกันเลย!", 
    "Update Account": "อัพเดตบัญชีผู้ใช้", 
    "This is the name we'll use if we feature one of your graphs.": "นี่จะเป็นชื่อที่เราใช้หากเรานำเสนอกราฟของคุณ", 
    "Convert this to a table.": "แปลงสิ่งนี้ให้เป็นตาราง", 
    "Send": "ส่ง", 
    "Sliders": "ตัวปรับค่า", 
    "Change this equation to __sample_expression__": "เปลี่ยนสมการนี้เป็น __sample_expression__", 
    "Click anywhere to close the drawing options.": "คลิกที่���ดๆเพื่อปิดตัวเลือกการวาด", 
    "Print": "พิมพ์", 
    "Move right to add a new column.": "เลื่อนไปทางขวาเพื่อเพิ่มคอลัมน์ใหม่", 
    "Email": "อีเมล", 
    "saved": "บันทึกแล้ว", 
    "Brilliant!": "เยี่ยมไปเลย!", 
    "Now graph: __sample_expression__": "ลองวาดกราฟ: __sample_expression__", 
    "Repeat Password:": "ยืนยันรหัสผ่าน:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "คุณแน่ใจหรือที่จะทิ้งกราฟนี้? งานที่ยังไม่บันทึกของคุณจะสูญหาย", 
    "Try graphing a straight line, like __sample_expression__": "ลองวาดกราฟเส้นตรง, เช่น __sample_expression__", 
    "__number__ minutes ago": "__number__ นาทีที่แล้ว", 
    "Type any number here.": "พิมพ์ตัวเลขอะไรก็ได้ที่นี่", 
    "Resources": "ทรัพยากร", 
    "Advanced Tables": "ตารางขั้นสูง", 
    "Invalid height.": "ความสูงไม่ถูกต้อง", 
    "Title:": "ชื่อเรื่อง:", 
    "sending...": "กำลังส่ง...", 
    "New Password:": "รหัสผ่านใหม่:", 
    "We only plot inequalities of x and y, or r and θ.": "เราสามารถพล็อตอสมการของ x และ y หรือ r และ θ ได้เท่านั้น", 
    "Click here to generate a table.": "คลิกที่นี่เพื่อสร้างตาราง", 
    "Share your thoughts!": "แบ่งปันความคิดของคุณ!", 
    "Click here to connect the dots.": "คลิกที่นี่เพื่อลากเส้นเชื่อมจุด", 
    "Click here to create a new expression.": "คลิกที่นี่เพื่อสร้างสมการใหม่", 
    "Didn't work? Try again!": "ไม่ได้ผลหรือ? ลองดูอีกครั้ง!", 
    "last week": "สัปดาห์ก่อน", 
    "We'll never share or sell your email address.": "เราจะไม่เผยแพร่หรือขายอีเมลแอดเดรสของคุณ", 
    "Fill it in.": "ใส่ข้อมูลลงไป", 
    "Sign In": "ลงชื่อเข้าใช้", 
    "Show List": "แสดงลิสต์", 
    "optional": "ตามความสมัครใจ", 
    "Delete": "ลบ", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "มีบางอย่างผิดพลาด โปรดรายงานสิ่งนี้ให้ฝ่ายช่วยเหลือ desmos.com (ข้อผิดพลาด __error_num__)", 
    "Delete All": "ลบทั้งหมด", 
    "Try typing __sample_expression__": "ลองพิมพ์ __sample_expression__", 
    "Apr": "เม.ย.", 
    "Image": "รูปภาพ", 
    "__number__ weeks ago": "__number__ สัปดาห์ก่อน", 
    "no, thanks": "ไม่, ขอบคุณ", 
    "Now try pressing Enter.": "ทีนี้ลองกดปุ่ม Enter", 
    "Recover Password": "กู้คืนรหัสผ่าน", 
    "Want us to consider featuring it?": "ให้เราพิจารณาแนะนำสิ่งนี้ไหม?", 
    "folder": "แฟ้ม", 
    "Tours": "ทัวร์", 
    "Open Graph": "เปิดกราฟ", 
    "type your question or suggestion...": "พิมพ์คำถามหรือข้อเสนอแนะ...", 
    "Drop Image Here": "วางรูปภาพที่นี่", 
    "Terms of Use": "เ���ื่อนไขการใช้งาน", 
    "Show Keypad": "แสดงแป้นพิมพ์", 
    "expression": "สมการ", 
    "Drag the handle to change the value.": "ลากปุ่มเพื่อปรับค่า", 
    "Does not compute to constant.": "ไม่มีการคำนวณให้เป็นค่าคงตัว", 
    "Y-Axis": "แกน Y", 
    "New Blank Graph": "กราฟเปล่าใหม่", 
    "Feb": "ก.พ.", 
    "BBCode": "BBCode", 
    "Aug": "ส.ค.", 
    "This graph has been deleted.": "กราฟนี้ถูกลบแล้ว", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "จำกัดโดเมนของสมการนี้โดยเพิ่ม __sample_expression__ หลังสมการ", 
    "image": "รูปภาพ", 
    "Projector Mode": "โหมดภาพฉาย", 
    "Send a Copy to Google Drive": "ส่งสำเนาไปยัง Google ไดรฟ์", 
    "just now": "เมื่อสักครู่นี้", 
    "Open Graph (ctrl+o)": "เปิดกราฟ (ctrl+o)", 
    "Link to Google": "เชื่อมกับ Google", 
    "Click here to create a new blank expression.": "คลิกที่นี่เพื่อสร้างสมการเปล่าใหม่", 
    "Show Grid Angles": "แสดงมุมกริด", 
    "Degrees": "องศา", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "เอาล่ะ ทีนี้ลองจำกัดเรนจ์กัน เพิ่ม __sample_expression__ ต่อท้ายสมการ", 
    "You're a scatter plot whiz!": "คุณสร้างกราฟการกระจายได้แล้ว", 
    "Desmos is in Maintenance Mode.": "Desmos กำลังอยู่ในโหมดปรับปรุง", 
    "table": "ตาราง", 
    "loading...": "กำลังโหลด...", 
    "Forgot your password?": "ลืมรหัสผ่านหรือ?", 
    "The file \"__file__\" is not an image": "ไฟล์ \"__file__\" ไม่ใช่รูปภาพ", 
    "add label": "เพิ่มป้ายชื่อ", 
    "one hour ago": "หนึ่งชั่วโมงที่แล้ว", 
    "Start by graphing a function.": "เริ่มต้นโดยเขียนกราฟฟังก์ชัน", 
    "You're a slider pro!": "คุณสามารถสร้างตัวปรับค่าได้แล้ว!", 
    "Jun": "มิ.ย.", 
    "You're a restrictions star!": "คุณสามารถสร้างข้อจำกัดได้แล้ว!", 
    "Jul": "ก.ค.", 
    "Let's make a scatter plot!": "มาสร้างกราฟการกระจายกัน", 
    "Intercept Form": "รูปแบบจุดตัด", 
    "Edit List": "แก้ไขลิสต์", 
    "Edit Account": "ตั้งค่าบัญชี", 
    "more": "เพิ่มเติม", 
    "Function '__dependency__' is not defined.": "ฟังก์ชัน '__dependency__' ยังไม่มีนิยาม", 
    "Restrictions": "ข้อจำกัด", 
    "Click here to continue editing this table.": "คลิกที่นี่เพื่อแก้ไขตารางนี้ต่อไป", 
    "Click here to only show the dots.": "คลิกที่นี่เพื่อแสดงเฉพาะจุด", 
    "Point Slope Form": "รูปแบบความชัน-จุด", 
    "Click the \"Edit List\" button.": "คลิกที่ปุ่ม \"แก้ไขลิสต์\"", 
    "Sign in": "ลงชื่อเข้าใช้", 
    "Sorry, we didn't find any graphs with that title.": "ขออภัย เราไม่พบกราฟที่มืชื่อดังกล่าว", 
    "Hide Keypad": "ซ่อนแป้นพิมพ์", 
    "Try typing all of __sample_expression__": "ลองพิมพ์สมการ __sample_expression__ ทั้งหมดสิ", 
    "Dec": "ธ.ค.", 
    "Nov": "พ.ย.", 
    "Message: <i>(optional)</i>": "ข้อความ: <i>(ตามความสมัครใจ)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos กำลังอยู่ในโหมดปรับปรุงชั่วคราว คุณสามารถเปิดกราฟตัวอย่าง แต่ไม่สามารถที่จะลงชื่อเข้าใช้, เปิดกราฟ หรือบันทึกได้ ขออภัยในความไม่สะดวก", 
    "Nice Graph!": "กราฟสวยมาก!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "ขอบคุณสำหรับคำแนะนำ &ndash; คุณจะได้รับการตอบกลับในไม่ช้า", 
    "Feedback": "ข้อเสนอแนะ", 
    "Sep": "ก.ย.", 
    "Convert to Table": "แปลงเป็นตาราง", 
    "Redo (ctrl+y)": "ทำซ้ำ (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "ตัวแปร '__dependency__' ไม่สามารถใช้เป็นฟังก์ชันได้", 
    "__number__ days ago": "__number__ วันก่อน", 
    "Tell us on Facebook": "บอกเราทาง Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos กำลังอยู่ในโหมดปรับปรุง คุณไม่สามารถที่จะบันทึกการเปลี่ยนแปลงของกราฟได้ เราขออภัยในความไม่สะดวก!", 
    "Desmos User Guide": "คู่มือผู้ใช้ Desmos", 
    "Done": "เสร็จสิ้น", 
    "Desmos Graphing Calculator": "เครื่องคิดเลขกราฟ Desmos", 
    "Cancel": "ยกเลิก", 
    "Step:": "ช่วงกริด:", 
    "Send to:": "ส่งไปยัง:", 
    "on __month__ __day__, __year__": "ใน __day__ __month__ __year__", 
    "Show Numbers": "แสดงตัวเลข", 
    "Move the parabola.": "ย้ายพาราโบลา", 
    "Hide List": "ซ่อนลิสต์", 
    "Slope Intercept Form": "รูปแบบความชัน-จุดตัด", 
    "Save (ctrl+s)": "บันทึก (ctrl+s)", 
    "You're a table wizard!": "คุณสามารถสร้างตารางได้แล้ว!", 
    "Share Graph": "แบ่งปันกราฟ", 
    "Sign In with Your Google Account": "ลงชื่อเข้าใช้ด้วยบัญชี Google ของคุณ", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "เรารองรับเฉพาะอสมการคู่ที่แก้อสมการแล้ว ลองลบข้างหนึ่งออกจากอสมการ", 
    "Help": "ช่วยเหลือ", 
    "Click here to make a new blank expression.": "คลิกที่นี่เพื่อสร้างสมการเปล่า", 
    "Last trick!": "เทคนิคสุดท้าย!", 
    "Send Feedback": "ส่งข้อเสนอแนะ", 
    "search by title...": "ค้นหาโดยชื่อ...", 
    "Share this link:": "แบ่งปันลิงก์นี้:", 
    "Please enter your feedback.": "โปรดยืนยันข้อเสนอแนะของคุณ", 
    "loading graphs...": "กำลังโหลดกราฟ...", 
    "functions": "ฟังก์ชัน", 
    "Mar": "มี.ค.", 
    "Table created.": "สร้างตารางแล้ว", 
    "Language": "ภาษา", 
    "No Unsaved Changes": "ไม่มีการเปลี่ยนแปลงที่ไม่ได้บันทึก", 
    "May": "พ.ค.", 
    "message sent": "ข้อความส่งแล้ว", 
    "Save As or Rename (ctrl+shift+s)": "บันทึกเป็นหรือเปลี่ยนชื่อ (ctrl+shift+s)", 
    "Awesome!": "เยี่ยมมาก!", 
    "Sign Out": "ลงชื่อออก", 
    "Click back to continue editing.": "คลิกกลับ เพื่อแก้ไขต่อไป", 
    "Just fill in one more...": "ใส่ข้อมูลอีกแค่ช่องเดียวเท่านั้น...", 
    "Learn More": "เรียนรู้เพิ่มเติม", 
    "Use your Email Address": "ใช้อีเมลแอดเดรสของคุณ", 
    "to save and share your graphs!": "บันทึกและแบ่งปันกราฟของคุณ!", 
    "Name:": "ชื่อ:", 
    "Add Item": "เพิ่มวัตถุ", 
    "Click to show the list of expressions.": "คลิกเพื่อแสดงรายการสมการ", 
    "Graph Paper": "กระดาษกราฟ", 
    "Invalid y coordinate.": "พิกัด y ไม่ถูกต้อง", 
    "Graph Settings": "ตั้งค่ากราฟ", 
    "Lines": "เส้นตรง", 
    "yesterday": "เมื่อวาน", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos อยู่ในโหมดพรีวิว ดังนั้นคุณไม่สามารถบันทึกกราฟได้", 
    "add slider:": "เพิ่มตัวปรับค่า:", 
    "Please provide an email so that we can write back.": "กรุณาฝากอีเมลไว้เพื่อที่เราจะตอบกลับในภายหลัง", 
    "Opened '__graphTitle__'": "เปิด '__graphTitle__' แล้ว", 
    "Save Changes (ctrl+s)": "บันทึกการเปลี่ยนแปลง (ctrl+s)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "เมื่อคลิกปุ่ม \"__btn__,\" แสดงว่าคุณได้อ่านและยอมรับ __terms_of_use_link__ ของเราแล้ว.", 
    "HTML Embed Code": "รหัสฝัง HTML", 
    "Arrows:": "ลูกศร:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "คำใบ้: คุณสามารถพิมพ์ y=x^2, หรือใช้ปุ่ม<sup>2</sup> บนแป้นพิมพ์ด้านล่าง", 
    "size:": "ขนาด:", 
    "Sign In with Desmos": "ลงชื่อเข้าใช้ด้วย Desmos", 
    "one minute ago": "หนึ่งนาทีที่แล้ว", 
    "Password:": "รหัสผ่าน:", 
    "or": "หรือ", 
    "We only support implicit equations of x and y.": "เรารองรับเฉพาะสมการปริยายของ x และ y", 
    "Message sent. Please check your email for a password recovery link.": "ข้อความถูกส่งแล้ว โปรดตรวจสอบอีเมลสำหรับลิงก์กู้คืนรหัสผ่าน", 
    "Email:": "อีเมล:", 
    "enter": "enter", 
    "center:": "ศูนย์กลาง:", 
    "Let's make some sliders!": "มาสร้างตัวปรับค่ากัน!", 
    "Go down to the next row to add more data.": "ลงไปที่แถวถัดไปเพื่อเพิ่มข้อมูล", 
    "Let's make a function. First: click here to create a new blank expression.": "มาสร้างฟังก์ชันกัน ขั้นแรก: คลิกที่นี่เพื่อสร้างช่องสมการใหม่", 
    "yeah!": "แน่นอน!"
},"sq":{},"it":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Finestra di login bloccata. Consentire i pop-up da desmos.com per accedere con Google.", 
    "Derivatives": "Derivate", 
    "all": "tutto", 
    "Image upload is not supported in this browser.": "Il caricamento delle immagini non è supportato in questo browser.", 
    "style:": "stile:", 
    "Jan": "Gen", 
    "Try adding an equals sign to turn this into an equation.": "Prova ad aggiungere un segno di uguale per trasformarla in un'equazione.", 
    "Please enter your email address. We will send a password recovery link to you.": "Per favore inserisci un indirizzo email. Ti manderemo un link per recuperare la password in caso di smarrimento.", 
    "Undo (ctrl+z)": "Annulla operazione (ctrl+z)", 
    "Update Password": "Aggiorna Password", 
    "Share your graph with the world!": "Condividi il tuo grafico con il mondo!", 
    "Oct": "Ott", 
    "Sign In with Google": "Accedi con Google", 
    "We don't solve complicated single-variable equations yet.": "Non risolviamo ancora equazioni di singola variabile così complicate.", 
    "__number__ hours ago": "__number__ ore fa", 
    "Inverse of a Function": "Inversa di una funzione", 
    "Click and hold on this icon until the options menu opens up.": "Clicca tenendo premuto questa icona fino a che il menu delle opzioni non si apre.", 
    "Hide this warning.": "Nascondi questo avviso.", 
    "Undo": "Annulla", 
    "Untitled Graph": "Grafico senza nome", 
    "Nice!": "Ottimo!", 
    "... and select the \"table\" option.": "... e selezionare l'opzione \"tabella di valori\".", 
    "Remembered your password?": "Hai ritrovato la password?", 
    "Grid": "Griglia", 
    "Go \"Hands-free\"": "Vai \"Senza mani\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Possiamo disegnare disequazioni solo quando le singole variabili sono lineari o quadratiche.", 
    "step:": "step:", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Angoli", 
    "This message will self-destruct in __seconds__...": "Questo messaggio si autodistruggerà in __seconds__...", 
    "X-Axis": "Asse x", 
    "Radians": "Radianti", 
    "New graph created.": "nuovo grafico creato.", 
    "Let's start with some data!": "Cominciamo con qualche dato!", 
    "Uh-oh! Type a valid number here.": "Ops! Scrivi un numero valido.", 
    "Use your Email Address": "Usa il tuo indirizzo Email", 
    "example": "esempio", 
    "Ellipse with Foci": "Ellisse con fuochi", 
    "Link to your Google Account": "Collega al tuo Google Account", 
    "Embed": "Incorpora", 
    "color:": "Colore:", 
    "Click to return to your expressions.": "Clicca per tornare alle tue espressioni.", 
    "Title:": "Titolo:", 
    "A B C": "A B C", 
    "... and select the \"expression\" option.": "... e selezionare l'opzione \"espressione\".", 
    "You did not select a file": "Non hai selezionato alcun file", 
    "Click to return to this graph.": "Clicca per tornare a questo grafico.", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmos funziona al meglio sulla vostra versione di Android utilizzando il browser Chrome.", 
    "Your Name:": "Il tuo nome:", 
    "Update Account": "Aggiorna Account", 
    "Duplicate": "Duplica", 
    "Current Password:": "Password attuale:", 
    "Now click here to add the sliders.": "Adesso clicca qui per aggiungere gli slider.", 
    "Send a Copy to Google Drive": "Manda una copia a Google Drive", 
    "Press play to animate the slider.": "Premi play per animare lo slider.", 
    "Click here to add a new item.": "Fai clic qui per aggiungere un nuovo elemento.", 
    "Don't forget the \"y=\"!": "Non dimenticare l' \"y =\"!", 
    "Fill in this whole row.": "Riempi questa riga interamente.", 
    "Invalid width.": "Larghezza non valida.", 
    "Invalid x coordinate.": "Coordinata x non valida.", 
    "Unsupported Browser": "Browser non supportato", 
    "Create Account": "Crea account", 
    "Tables": "Tabelle di dati", 
    "what's this?": "Che cos'è?", 
    "Let's get started!": "Cominciamo!", 
    "This is the name we'll use if we feature one of your graphs.": "Questo è il nome che useremo se mettiamo in primo piano uno dei tuoi grafici.", 
    "Convert this to a table.": "Converti questo in una tabella di valori.", 
    "Click here to download Google Chrome.": "Clicca qui per scaricare Google Chrome.", 
    "Send": "Invia", 
    "FAQs": "FAQ", 
    "Sliders": "cursori", 
    "Change this equation to __sample_expression__": "Cambia questa equazione in  __sample_expression__", 
    "Click anywhere to close the drawing options.": "Clicca dove vuoi per chiudere le opzioni di disegno.", 
    "Print": "Stampa", 
    "Move right to add a new column.": "Muoviti a destra per aggiungere una nuova colonna.", 
    "Circle": "Cerchio", 
    "Secant Line": "Retta secante", 
    "Email": "Email", 
    "Taylor Expansion of sin(x)": "Espansione di Taylor di sin (x)", 
    "saved": "salvato", 
    "Brilliant!": "Ottimo!", 
    "Now graph: __sample_expression__": "Adesso disegna: __sample_expression__", 
    "Repeat Password:": "Ripeti la Password:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Sei sicuro di voler abbandonare questo grafico? I dati non salvati verranno persi.", 
    "Try graphing a straight line, like __sample_expression__": "Prova a disegnare una retta, come __sample_expression__", 
    "__number__ minutes ago": "__number__ minuti fa", 
    "Parabola and Focus": "Parabola e Fuoco", 
    "Type any number here.": "Scrivi qui un numero qualsisasi.", 
    "Resources": "Risorse", 
    "Advanced Tables": "Tabelle avanzate", 
    "Invalid height.": "Altezza non valida.", 
    "Edit List": "Modifica lista", 
    "sending...": "invio in corso...", 
    "Conic Sections": "Sezioni coniche", 
    "All the Trig Functions": "Tutte le funzioni trigonometriche", 
    "New Password:": "Nuova Password:", 
    "We only plot inequalities of x and y, or r and θ.": "Disegnamo solo disequazioni di x e y, oppure r e θ.", 
    "Click here to generate a table.": "Clicca qui per generare una tabella di valori.", 
    "Share your thoughts!": "Condividi la tua opinione!", 
    "Click here to connect the dots.": "Clicca qui per collegare i punti.", 
    "Click here to create a new expression.": "Clicca qui per creare una nuova espressione.", 
    "Didn't work? Try again!": "Non ha funzionato? Prova ancora!", 
    "last week": "settimana scorsa", 
    "Factored Form": "Forma factorizzata", 
    "Fill it in.": "Complilalo.", 
    "Sign In": "Accedi", 
    "Show List": "Mostra lista", 
    "optional": "opzionale", 
    "Period and Amplitude": "Periodo e ampiezza", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Qualcosa è andato storto, si prega di segnalarlo al supporto di desmos.com (Errore __error_num__)", 
    "Delete All": "Cancella tutto", 
    "Try typing __sample_expression__": "Prova a digitare __sample_expression__", 
    "Apr": "Apr", 
    "Image": "Immagine", 
    "__number__ weeks ago": "__number__ settimane fa", 
    "no, thanks": "No grazie", 
    "Now try pressing Enter.": "Adesso prova a premere Invio.", 
    "Recover Password": "Recupera password", 
    "Want us to consider featuring it?": "Vuoi che valutiamo se metterlo in primo piano?", 
    "folder": "cartella", 
    "Tours": "Tutorial", 
    "Open Graph": "Apri grafico", 
    "type your question or suggestion...": "Scrivi la tua domanda o suggerimento...", 
    "Drop Image Here": "Rilascia l'immagine qui", 
    "Terms of Use": "Condizioni di utilizzo", 
    "Show Keypad": "Visualizza tastiera", 
    "expression": "equazione", 
    "Drag the handle to change the value.": "Trascina il cursore per cambiare il valore.", 
    "Does not compute to constant.": "Non calcola le costanti.", 
    "New Blank Graph": "Nuovo grafico vuoto", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Ago", 
    "This graph has been deleted.": "Questo grafico è stato eliminato.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restringi il dominio di questa retta aggiungendo __sample_expression__ alla fine.", 
    "image": "immagine", 
    "Projector Mode": "Modalità proiettore", 
    "Unit Circle": "Cerchio unitario", 
    "just now": "proprio adesso", 
    "Open Graph (ctrl+o)": "Apri grafico (ctrl + o)", 
    "Link to Google": "Collega a Google", 
    "Click here to create a new blank expression.": "Clicca qui per creare una nuova espressione vuota.", 
    "Show Grid Angles": "Visualizza angoli della griglia", 
    "Degrees": "Gradi", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Adesso restringiamo il codominio. Aggiungi __sample_expression__ alla fine.", 
    "You're a scatter plot whiz!": "Sei un genio dei grafici a dispersione!", 
    "Desmos is in Maintenance Mode.": "Desmos è in modalità di manutenzione.", 
    "table": "tabella di valori", 
    "Standard Form": "Forma standard", 
    "loading...": "caricamento...", 
    "Forgot your password?": "Hai dimenticato la tua password?", 
    "Calculus": "Analisi", 
    "The file \"__file__\" is not an image": "Il file \"__file__\" non è un'immagine", 
    "add label": "Aggiungi etichetta", 
    "one hour ago": "un'ora fa", 
    "Start by graphing a function.": "Comincia disegnando una funzione.", 
    "You're a slider pro!": "Sei un pro degli slider!", 
    "Jun": "Giu", 
    "You're a restrictions star!": "Sei un mago delle restrizioni di dominio!", 
    "Jul": "Lug", 
    "Let's make a scatter plot!": "Facciamo un grafico a dispersione!", 
    "Delete": "Elimina", 
    "Edit Account": "Modifica account", 
    "Inequalities are not allowed.": "Le disuguaglianze non sono ammesse.", 
    "Function '__dependency__' is not defined.": "La funzione '__dependency__' non è definita.", 
    "Restrictions": "Restrizioni", 
    "Click here to continue editing this table.": "Clicca qui per continuare a modificare questa tabella.", 
    "Click here to only show the dots.": "Clicca qui per mostrare solo i punti.", 
    "Click the \"Edit List\" button.": "Clicca il pulsante \"Modifica Lista\".", 
    "Sign in": "Accedi", 
    "Sorry, we didn't find any graphs with that title.": "Siamo spiacenti, non abbiamo trovato alcun grafico con quel titolo.", 
    "Hide Keypad": "Nascondi tastiera", 
    "Try typing all of __sample_expression__": "Prova a scrivere tutte le __sample_expression__", 
    "Dec": "Dic", 
    "Nov": "Nov", 
    "Message: <i>(optional)</i>": "Messaggio: <i>(facoltativo)</i>", 
    "message sent": "messaggio inviato", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos è temporaneamente in modalità manutenzione. Puoi aprire grafici di esempio, ma non sarai in grado di accedere, aprire i grafici o salvare eventuali modifiche. Ci dispiace per l'inconveniente.", 
    "Nice Graph!": "Bel grafico!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Grazie per il feedback  &ndash; avrete presto una risposta!", 
    "Feedback": "Feedback", 
    "Sep": "Sett", 
    "Convert to Table": "Converti in tabella di valori", 
    "Redo (ctrl+y)": "Ripeti operazione (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "La variabile '__dependency__' non può essere utilizzata come funzione.", 
    "__number__ days ago": "__number__ giorni fa", 
    "Tell us on Facebook": "Diccelo su facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos è in modalità di manutenzione, non sarà possibile salvare modifiche a questo grafico. Ci dispiace per l'inconveniente!", 
    "Desmos User Guide": "Guida utente Desmos", 
    "Learn more": "Ulteriori informazioni", 
    "Done": "Fatto", 
    "Desmos Graphing Calculator": "Disegnatore di grafici Desmos", 
    "Cancel": "Annulla", 
    "Polar equations must be linear in r.": "Le equazioni polari devono essere lineari in r.", 
    "more": "altro", 
    "Step:": "Passo:", 
    "Send to:": "Invia a:", 
    "on __month__ __day__, __year__": "il __month__ __day__, __year__", 
    "Show Numbers": "Mostra numeri", 
    "Move the parabola.": "Muovi la parabola.", 
    "Hide List": "Nascondi lista", 
    "Y-Axis": "Asse y", 
    "Save (ctrl+s)": "Salva (ctrl + s)", 
    "You're a table wizard!": "Sei un mago delle tabelle!", 
    "Share Graph": "Condividi grafico", 
    "Sign In with Your Google Account": "Accedi con il tuo Account Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Supportiamo solo doppie disequazioni risolte. Prova a cancellare un membro della disequazione.", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "Le disuguaglianze doppie devono avere entrambe lo stesso segno, per esempio 1 < y < 2.", 
    "Help": "Aiuto", 
    "Click here to make a new blank expression.": "Clicca qui per creare una nuova espressione vuota.", 
    "Last trick!": "Ultimo trucco!", 
    "Send Feedback": "Lascia un feedback", 
    "search by title...": "ricerca per titolo...", 
    "Share this link:": "Condividi questo link:", 
    "Please enter your feedback.": "Inserisci il tuo feedback.", 
    "loading graphs...": "caricamento grafici...", 
    "Wave Interference": "Interferenza d'onda", 
    "functions": "funzioni", 
    "Mar": "Mar", 
    "Table created.": "Tabella creata.", 
    "Language": "Lingua", 
    "No Unsaved Changes": "Nessuna modifica non salvata", 
    "May": "Mag", 
    "Tangent Line": "Retta tangente", 
    "We'll never share or sell your email address.": "Non comunicheremo a nessuno nè venderemo il tuo indirizzo email.", 
    "Save As or Rename (ctrl+shift+s)": "Salva con nome o rinomina (ctrl + MAIUSC + s)", 
    "Awesome!": "Fantastico!", 
    "Sign Out": "Esci", 
    "Click back to continue editing.": "Clicca indietro per condinuare a modificare.", 
    "Just fill in one more...": "Aggiungine ancora uno...", 
    "Learn More": "Ulteriori informazioni", 
    "Equations are not allowed.": "Le equazioni non sono ammesse.", 
    "Ranges must be arithmetic sequences.": "Gli intervalli devono essere successioni aritmetiche.", 
    "to save and share your graphs!": "per salvare e condividere i tuoi grafici!", 
    "Name:": "Nome:", 
    "Add Item": "Aggiungi elemento", 
    "Click to show the list of expressions.": "Clicca per visualizzare l'elenco delle espressioni.", 
    "Graph Paper": "Tipo di carta del grafico", 
    "Invalid y coordinate.": "Coordinata y non valida.", 
    "Graph Settings": "Impostazioni grafico", 
    "Lines": "Linee", 
    "yesterday": "ieri", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos è in modalità di anteprima, quindi non sarà in grado di salvare i grafici.", 
    "add slider:": "aggiungi slider:", 
    "Please provide an email so that we can write back.": "Si prega di fornirci una email così che noi possiamo rispondere.", 
    "Opened '__graphTitle__'": "'__graphTitle__' è stato aperto", 
    "Save Changes (ctrl+s)": "Salva le modifiche (ctrl + s)", 
    "Trigonometry": "Trigonometria", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Cliccando su \"__btn__,\" dichiari di avere letto e accettato i nostri __terms_of_use_link__.", 
    "HTML Embed Code": "Codice HTML per incorporare HTML", 
    "Arrows:": "Frecce:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Suggerimento: è possibile digitare y = x ^ 2, o usare il tasto a<sup>2</sup> sulla tastiera sotto.", 
    "Square Grid": "Griglia proporzionale", 
    "size:": "dimensione:", 
    "Sign In with Desmos": "Accedi con Desmos", 
    "one minute ago": "un minuto fa", 
    "Password:": "Password:", 
    "or": "o", 
    "Parabolas": "Parabole", 
    "We only support implicit equations of x and y.": "Supportiamo solo equazioni implicite di x e y.", 
    "Message sent. Please check your email for a password recovery link.": "Messaggio inviato. Per favore il link che ti abbiamo mandato via email per recuperare la password in caso di smarrimento.", 
    "Email:": "Email:", 
    "enter": "invio", 
    "center:": "centro:", 
    "Let's make some sliders!": "Facciamo qualche slider!", 
    "Error signing in with Clever.": "Errore di autentificazione con Clever.", 
    "Go down to the next row to add more data.": "Vai giù alla prossima riga per aggiungere più dati.", 
    "Let's make a function. First: click here to create a new blank expression.": "Facciamo una funzione. Come prima cosa clicca qui per creare una nuova espressione vuota.", 
    "yeah!": "Sì!"
},"zh-CN":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "浏览器屏蔽了弹出窗口，请允许 desmos.com 弹出窗口以使用 Google 帐号登录。", 
    "all": "全部", 
    "Square Grid": "等比例栅格", 
    "style:": "风格：", 
    "Jan": "1月", 
    "Try adding an equals sign to turn this into an equation.": "增加一个等号才能构成方程。", 
    "Please enter your email address. We will send a password recovery link to you.": "请输入您的电子邮件地址，我们将向您发送密码重置链接。", 
    "Undo (ctrl+z)": "撤销 (ctrl+z)", 
    "Update Password": "更新密码", 
    "Share your graph with the world!": "把你的图形分享给全世界！", 
    "Oct": "10月", 
    "Sign In with Google": "用 Google 帐号登录", 
    "We don't solve complicated single-variable equations yet.": "我们还不能处理复杂的单变量表达式。", 
    "__number__ hours ago": "__number__小时前", 
    "Click and hold on this icon until the options menu opens up.": "点击图标不放直到打开选项菜单。", 
    "Undo": "撤销", 
    "Untitled Graph": "未命名图形", 
    "Nice!": "很好！", 
    "... and select the \"table\" option.": "……然后选择\"数据表\"选项", 
    "Remembered your password?": "记住密码？", 
    "Grid": "栅格", 
    "Go \"Hands-free\"": "进入“免提模式”", 
    "We can only plot inequalities when one variable is quadratic or linear.": "我们只能绘制含有二次或者线性变量的不等式。", 
    "step:": "步进：", 
    "Tweet @desmos": "推特 @desmos", 
    "Angles": "角度单位", 
    "This message will self-destruct in __seconds__...": "这条消息将会在 __seconds__ 后消失……", 
    "X-Axis": "X 轴", 
    "Radians": "弧度", 
    "New graph created.": "新图形成功创建。", 
    "Uh-oh! Type a valid number here.": "咦，请输入一个有效的数字。", 
    "example": "示例", 
    "Link to your Google Account": "连接到你的 Google 账户", 
    "Embed": "嵌入", 
    "color:": "颜色：", 
    "Click to return to your expressions.": "点击返回到你的表达式。", 
    "A B C": "A B C", 
    "You did not select a file": "您没有选择一个文件", 
    "Click to return to this graph.": "点击返回到图形。", 
    "Your Name:": "你的名字", 
    "Update Account": "更新帐户", 
    "Duplicate": "复制", 
    "Current Password:": "当前密码：", 
    "Now click here to add the sliders.": "现在单击此处添加滑块。", 
    "Press play to animate the slider.": "点击播放运动滑块。", 
    "Click here to add a new item.": "点击这里新增一个条目", 
    "Don't forget the \"y=\"!": "不要忘记 \"y=\"!", 
    "Fill in this whole row.": "填写整行", 
    "Invalid width.": "无效的宽度", 
    "Invalid x coordinate.": "无效的X坐标", 
    "Create Account": "创建帐号", 
    "Tables": "表格", 
    "what's this?": "这是什么？", 
    "Let's get started!": "让我们开始吧！", 
    "This is the name we'll use if we feature one of your graphs.": "这个名字将用来显示你的图形名称。", 
    "Convert this to a table.": "将其转换为数据表。", 
    "Send": "���送", 
    "Sliders": "滑块", 
    "Change this equation to __sample_expression__": "将此表达式更改为 __sample_expression__", 
    "Click anywhere to close the drawing options.": "点击任意位置关闭绘图选项。", 
    "Print": "打印", 
    "Move right to add a new column.": "移动到右边新建一列", 
    "Email": "邮件", 
    "saved": "已保存", 
    "Brilliant!": "干得漂亮！", 
    "Now graph: __sample_expression__": "现在作图： __sample_expression__", 
    "Repeat Password:": "重复密码：", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "你确定要离开图形吗？未保存的工作将会丢失。", 
    "Try graphing a straight line, like __sample_expression__": "试着画一条直线，比如 __sample_expression__ ", 
    "__number__ minutes ago": "__number__分钟前", 
    "Type any number here.": "在这里输入一个数字。", 
    "Resources": "资源", 
    "Advanced Tables": "高级数据表", 
    "Invalid height.": "无效的高度", 
    "Title:": "标题：", 
    "sending...": "发送中……", 
    "New Password:": "新密码：", 
    "We only plot inequalities of x and y, or r and θ.": "我们只能绘制 x 和 y 或者 r 和 θ 的不等式。", 
    "Click here to generate a table.": "单击此处生成一个数据表。", 
    "Share your thoughts!": "分享您的想法！", 
    "Click here to connect the dots.": "点击这里连接点。", 
    "Click here to create a new expression.": "点击这里新建表达式。", 
    "Didn't work? Try again!": "不起作用吗？再试一次！", 
    "last week": "上周", 
    "We'll never share or sell your email address.": "我们不会公开或出售你的邮件地址。", 
    "Fill it in.": "填写。", 
    "Sign In": "登录", 
    "Show List": "显示列表", 
    "optional": "可选", 
    "Delete": "删除", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "发生了一些错误，请向 desmos.com 提交报告。（错误代码：__error_num__）", 
    "Delete All": "清空", 
    "Try typing __sample_expression__": "尝试输入 __sample_expression__", 
    "Apr": "4月", 
    "Image": "图片", 
    "__number__ weeks ago": "__number__周前", 
    "no, thanks": "不，谢谢", 
    "Now try pressing Enter.": "现在尝试按 Enter 键。", 
    "Recover Password": "找回密码", 
    "Want us to consider featuring it?": "想让我们把你的图片作为特色图片？", 
    "folder": "文件夹", 
    "Tours": "向导", 
    "Open Graph": "打开图形", 
    "type your question or suggestion...": "请输入你的问题或建议……", 
    "Drop Image Here": "拖拽图片到此处", 
    "Terms of Use": "用户协议", 
    "Show Keypad": "显示键盘", 
    "expression": "表达式", 
    "Drag the handle to change the value.": "拖动滑块更改数值。", 
    "Does not compute to constant.": "计算结果不是常数", 
    "New Blank Graph": "新建空白图形", 
    "Feb": "2月", 
    "BBCode": "论坛BB代码", 
    "Aug": "8月", 
    "This graph has been deleted.": "这个图形已经被删除。", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "通过将 __sample_expression__ 添加到结束限制这条线的范围。", 
    "image": "图片", 
    "Projector Mode": "投影仪模式", 
    "Send a Copy to Google Drive": "发送一份副本到 Google 云端硬盘", 
    "just now": "刚刚", 
    "Open Graph (ctrl+o)": "打开图形 (ctrl+o)", 
    "Link to Google": "连接到 Google 帐号", 
    "Click here to create a new blank expression.": "点击这里新建一个空白表达式。", 
    "Show Grid Angles": "显示角坐标", 
    "Degrees": "角度", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "现在让我们来限制范围。把 __sample_expression__ 添加到结尾。", 
    "You're a scatter plot whiz!": "你是一个散点图高手！", 
    "Desmos is in Maintenance Mode.": "Desmos 正处于维护模式。", 
    "table": "表格", 
    "loading...": "加载中……", 
    "Forgot your password?": "忘记密码？", 
    "The file \"__file__\" is not an image": " \"__file__\" 文件不是图片", 
    "add label": "添加标签", 
    "one hour ago": "1小时前", 
    "Start by graphing a function.": "通过对函数作图开始。", 
    "You're a slider pro!": "你是个滑块专家！", 
    "Jun": "6月", 
    "You're a restrictions star!": "真棒！", 
    "Jul": "7月", 
    "Let's make a scatter plot!": "让我们来画散点图吧！", 
    "Edit List": "编辑列表", 
    "Edit Account": "编辑帐号", 
    "more": "更多", 
    "Function '__dependency__' is not defined.": "函数 '__dependency__' 未定义。", 
    "Restrictions": "限制图形", 
    "Click here to continue editing this table.": "点击这里继续编辑表格。", 
    "Click here to only show the dots.": "单击此处可以只显示点。", 
    "Click the \"Edit List\" button.": "点击「编辑列表」按钮。", 
    "Sign in": "登录", 
    "Sorry, we didn't find any graphs with that title.": "很抱歉，我们无法找到带有该标题的任何图形。", 
    "Hide Keypad": "隐藏键盘", 
    "Try typing all of __sample_expression__": "试着输入所有  __sample_expression__", 
    "Dec": "12月", 
    "Nov": "11月", 
    "Message: <i>(optional)</i>": "附加消息： <i>(可选)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos 正处于维护模式，你可以打开示例图形，但是不能登录、打开你的图形、保存更改。抱歉给您带来不便。", 
    "Nice Graph!": "好图 ！", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "感谢你的反馈 &ndash; 你很快就会收到回复。", 
    "Feedback": "反馈", 
    "Sep": "9月", 
    "Convert to Table": "转换为表格", 
    "Redo (ctrl+y)": "重做 (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "变量 '__dependency__' 不能当作函数使用。", 
    "__number__ days ago": "__number__天前", 
    "Tell us on Facebook": "在 Facebook 上联系我们", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos 正处于维护模式，你的图形改动将不会得到保存，很抱歉为您带来不便。", 
    "Desmos User Guide": "Desmos 用户指南", 
    "Done": "完成", 
    "Desmos Graphing Calculator": "Desmos图形计算器", 
    "Cancel": "取消", 
    "Step:": "步进：", 
    "Send to:": "发送给：", 
    "on __month__ __day__, __year__": "在__year____month____day__", 
    "Show Numbers": "显示刻度", 
    "Move the parabola.": "移动抛物线。", 
    "Hide List": "隐藏列表", 
    "Y-Axis": "Y 轴", 
    "Save (ctrl+s)": "保存 (ctrl+s)", 
    "You're a table wizard!": "你真是个表格巫师！", 
    "Share Graph": "分享图形", 
    "Sign In with Your Google Account": "用你的 Google 帐号登录", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "我们只能处理双向不等式，试着删除不等式一侧。", 
    "Help": "帮助", 
    "Click here to make a new blank expression.": "点击这里新建一个空白表达式。", 
    "Last trick!": "最后一个！", 
    "Send Feedback": "发送反馈", 
    "search by title...": "按标题搜索......", 
    "Share this link:": "分享这个链接：", 
    "Please enter your feedback.": "请输入您的反馈意见。", 
    "loading graphs...": "加载图形……", 
    "functions": "函数", 
    "Mar": "3月", 
    "Table created.": "表格已创建", 
    "Language": "更改语言", 
    "No Unsaved Changes": "没有未保存的更改", 
    "May": "5月", 
    "message sent": "消息已发送", 
    "Save As or Rename (ctrl+shift+s)": "另存为或重命名 (ctrl+shift+s)", 
    "Awesome!": "好棒！", 
    "Sign Out": "注销", 
    "Click back to continue editing.": "点击返回继续编辑。", 
    "Just fill in one more...": "只需要再填一个……", 
    "Learn More": "了解更多", 
    "Use your Email Address": "输入你的邮箱地址", 
    "to save and share your graphs!": "保存并分享你的图形！", 
    "Name:": "名字：", 
    "Add Item": "增加条目", 
    "Click to show the list of expressions.": "单击显示表达式列表。", 
    "Graph Paper": "图形画板", 
    "Invalid y coordinate.": "无效的 y 坐标", 
    "Graph Settings": "图形设置", 
    "yesterday": "昨天", 
    "Desmos is in preview mode, so you won't be able to save graphs.": " Desmos 目前正在预览模式，无法保存。", 
    "add slider:": "添加滑块：", 
    "Please provide an email so that we can write back.": "请提供一个邮件地址以便于我们与你联系。", 
    "Opened '__graphTitle__'": "已打开 '__graphTitle__'", 
    "Save Changes (ctrl+s)": "保存更改(ctrl + s)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "点击按钮 \"__btn__\" 表示你已经阅读并接受我们的__terms_of_use_link__ 。", 
    "HTML Embed Code": "HTML嵌入代码", 
    "Arrows:": "箭头：", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "提示：您可以输入 y = x ^2 或使用「a<sup>2</sup>」按钮。", 
    "size:": "大小：", 
    "Sign In with Desmos": "用 Desmos 帐号登录", 
    "one minute ago": "1分钟前", 
    "Password:": "密码：", 
    "or": "或", 
    "We only support implicit equations of x and y.": "我们只支持 x 和 y 的隐函数。", 
    "Message sent. Please check your email for a password recovery link.": "消息已发送，请检查你的邮箱找到密码重置链接。", 
    "Email:": "邮箱：", 
    "enter": "enter", 
    "center:": "中心：", 
    "Let's make some sliders!": "让我们来玩滑块吧！", 
    "Go down to the next row to add more data.": "向下转到下一行添加更多数据。", 
    "Let's make a function. First: click here to create a new blank expression.": "让我们来写个函数吧，首先：点击这里新建一个空白表达式。", 
    "yeah!": "是的 ！"
},"ja":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "ログインウインドウがブロックされました。Googleアカウントでサインインするためのウインドウを許可するように設定してください。", 
    "all": "すべて", 
    "Try adding an equals sign to turn this into an equation.": "方程式として扱うには、等号(=)を追加してください。", 
    "Undo (ctrl+z)": "元に戻す (ctrl + z)", 
    "What effect does b have on the function g(x)?": "bによってg(x)はどのように変化するでしょうか？", 
    "Share your graph with the world!": "グラフを共有しましょう！", 
    "__number__ minutes ago": "__number__ 分前", 
    "Let's make a scatter plot!": "散布図を書いてみよう!", 
    "Hide this warning.": "この警告を非表示にします。", 
    "Nice!": "いいですね!", 
    "Nov": "11 月", 
    "Zoom In": "拡大", 
    "Function '__dependency__' requires only 1 argument. __supplement__": "関数 '__dependency__' の引数は1つだけ必要です。__supplement__", 
    "saved": "保存しました", 
    "center:": "中央:", 
    "When __symbol__ is called with more than two arguments, no argument can be a list.": "__symbol__が2つ以上の引数を取れば、引数にリストを用いることはできません。", 
    "'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.": "__symbols__と__lastSymbol__を循環して定義することはできません。", 
    "Click to return to this graph.": "このグラフに戻るためにクリックしてください。", 
    "Press play to animate the slider.": "「再生」ボタンを押すとスライダーが自動的に変化します。", 
    "Didn't work? Try again!": "うまく動きませんか?　もう一度やってみましょう!", 
    "Now, let's try a new model.": "では、新しいモデルを試してみましょう。", 
    "Tables": "テーブル", 
    "Table headers must be simple expressions. __supplement__": "テーブルのヘッダーは単純な式である必要があります。__supplement__", 
    "Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).": "関数__symbol__には少なくとも1つの引数が必要です。例えば__symbol__(1, 2)と入力してみてください。", 
    "Function definitions are not allowed.": "ここでは関数を定義できません。", 
    "Too many variables, I don't know what to do with this.": "変数が多すぎるので正しくグラフを描くことができません。", 
    "Logarithmic Spiral": "対数螺旋", 
    "Circle": "円", 
    "Secant Line": "接線の近似", 
    "Polar Graphing": "極座標形式", 
    "Visualizing Slope": "傾きの可視化", 
    "How can I change the color?": "どうすれば色を変更できますか？", 
    "Fill in the sample data:": "サンプルを入力してください。", 
    "Grid": "格子", 
    "List index must not be a list.": "リストのインデックスにリストは使えません。", 
    "Invalid height.": "無効な高さです。", 
    "Click here to create a new expression.": "ここをクリックして、新しい数式を作成しましょう。", 
    "New Password:": "新しいパスワード :", 
    "Failed to find regression coefficients.": "回帰分析の係数を見つけることができませんでした。", 
    "For example, try typing: __recommendation__.": "例えば__recommendation__のようにタイプしてください。", 
    "How do I share a link to my graph?": "どうすればグラフをシェアできますか？", 
    "Regressions must contain at least one list of data.": "回帰分析には少なくとも1つのデータリストが必要です。", 
    "sending...": "送信中...", 
    "Hide Keypad": "キーパッドを隠す", 
    "last week": "先週", 
    "Show List": "リストを表示", 
    "We only plot double inequalities of x and y.": "xとyに関する挟まれた形の不等式しかプロットできません。", 
    "Nice work &ndash; Keep exploring!": "よくできました &ndash; その調子で続けましょう!", 
    "Slope Intercept Form": "切片と傾き", 
    "no, thanks": "いいえ、遠慮します", 
    "Recover Password": "パスワードの再設定", 
    "Terms of Use": "利用規約", 
    "Show Keypad": "キーパッドを表示", 
    "Aug": "8 月", 
    "You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.": "__dependency__をこの関数の引数として使用できません。__dependency__は既に定義されています。", 
    "You're a scatter plot whiz!": "散布図を使いこなせるようになりましたね！", 
    "Standard Form": "標準形", 
    "one hour ago": "1 時間前", 
    "You're a slider pro!": "立派なスライダー使いになりました!", 
    "Delete": "削除", 
    "drag:": "ドラッグ :", 
    "more": "その他", 
    "Point Slope Form": "点と傾き", 
    "How is this app free?": "このアプリは無料ですか？", 
    "Nice Graph!": "素敵なグラフ ！", 
    "Feedback": "ご意見/ご要望", 
    "Desmos User Guide": "Desmos ユーザーガイド", 
    "example": "用例", 
    "on __month__ __day__, __year__": "__year__年 __month__ __day__日", 
    "Graph Settings": "グラフの設定", 
    "Share Graph": "グラフの共有", 
    "Double inequalities must both go the same way, e.g. 1 < y < 2.": "2つの不等号は、同じ向きにする必要があります。例: 1 < y < 2", 
    "Show Numbers": "数字の表示", 
    "Wave Interference": "波の干渉", 
    "message sent": "メッセージが送付されました", 
    "Sign Out": "サインアウト", 
    "X-Axis": "X軸", 
    "Graph Paper": "グラフ表示", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmosはプレビューモードなので、グラフの保存はできません。", 
    "Save Changes (ctrl+s)": "上書き保存 (ctrl+s)", 
    "Regressions": "回帰分析", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "「__btn__」をクリックすると、私たちの__terms_of_use_link__に同意したこととなります。", 
    "Sign In with Desmos": "Desmosアカウントでサインイン", 
    "Password:": "パスワード:", 
    "Link to your Google Account": "Googleアカウントとリンク", 
    "Parabolas": "放物線", 
    "Email:": "メール:", 
    "enter": "enter", 
    "Derivatives": "微分", 
    "Jan": "1 月", 
    "First column may not be __most__ or __last__.": "最初の列には__most__または__last__を使えません。", 
    "Translating Any Function": "関数の平行移動", 
    "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph.": "残差はモデルとデータの差です。ここをクリックして残差をテーブルに追加し、グラフにプロットしましょう。", 
    "Oct": "10 月", 
    "Sign In with Google": "Googleアカウントでサインイン", 
    "Just fill in one more...": "もう1行だけ、入力してみましょう。", 
    "Untitled Graph": "無題のグラフ", 
    "... and select the \"table\" option.": "... 次に、「テーブル」を選びましょう。", 
    "Points are written like this: (1, 2).": "座標は (1,2) のように表記します。", 
    "New graph created.": "新しいグラフが作成されています。", 
    "HTML Embed Code": "埋め込み用HTMLソースコード", 
    "Do you have a second to help us out? Your ratings and feedback help other people find us, and help us make the calculator better. Tell us what you think!": "私たちに協力して頂けますか？レビューでフィードバックして頂ければこのアプリがより良いものになります。ご意見・ご感想をお聞かせください！", 
    "Click to return to your expressions.": "数式に戻るためにクリックしてください。", 
    "A B C": "A B C", 
    "enter a note...": "メモを入力する...", 
    "Only __form__ is supported. Otherwise, use parens.": "__form__のみがサポートされています。他の用例には括弧を使ってください。", 
    "Hyperbola": "双曲線", 
    "Unsupported Browser": "サポートされていないブラウザー", 
    "Save This Graph": "グラフを保存する", 
    "Show Grid Angles": "角度の表示", 
    "Let's get started!": "さあ、始めましょう!", 
    "This is the name we'll use if we feature one of your graphs.": "「お名前」は、私たちがあなたの作ったグラフを紹介したりする際に、使われます。", 
    "We zoomed to fit your data.": "データにあわせて拡大して表示しています。", 
    "FAQs": "よくある質問", 
    "Sliders": "スライダー", 
    "Click anywhere to close the drawing options.": "このメニューを閉じるには、画面のどこかをクリックします。", 
    "Print": "印刷", 
    "Move right to add a new column.": "新しい列を追加するために、右に移動します。", 
    "Save": "保存", 
    "Repeat Password:": "新しいパスワードを再度入力 :", 
    "Try graphing a straight line, like __sample_expression__": "__sample_expression__ のような直線グラフを描いてみましょう。", 
    "Conic Sections": "円錐曲線", 
    "Definitions are nested too deeply.": "入れ子になった定義が深すぎます。", 
    "Try adding '__lhs__' to the beginning of this equation.": "等式の最初に__lhs__を追加してみてください。", 
    "Tangent Line": "接線", 
    "Period and Amplitude": "振幅と周期", 
    "Try typing __sample_expression__": "__sample_expression__ を入力してみてください。", 
    "Apr": "4 月", 
    "sample data": "サンプルデータ", 
    "Now try pressing Enter.": "では、「enter」と書かれたボタンを押してみましょう。", 
    "Lists are not allowed.": "リスト形式はここでは使用できません。", 
    "size:": "サイズ:", 
    "Function '__dependency__' requires __assignment_arity__ arguments. __supplement__": "関数__dependency__は__assignment_arity__個の引数を取ります。__supplement__", 
    "note": "メモ", 
    "Needs work": "改善が必要", 
    "BBCode": "BBコード", 
    "Projector Mode": "プロジェクタ表示モード", 
    "just now": "たった今", 
    "I just want to graph": "早くグラフを描きたい", 
    "Click here to create a new blank expression.": "ここをクリックして、新しい数式を作成しましょう。", 
    "Range cannot depend on free variable '__symbol__'.": "範囲は変数__symbol__に依存できません。", 
    "Desmos is in Maintenance Mode.": "Desmosは現在、メンテナンス中です。", 
    "The file \"__file__\" is not an image": "\"__file__\" というファイルは画像ではありません。", 
    "add label": "ラベルの追加", 
    "Edit this equation to find a better fit. Try, for example:<br>__equation__": "式を変更してより良いモデルを作りましょう。例えば、次のように編集してみましょう。:<br>__equation__", 
    "__number__ weeks ago": "__number__ 週間前", 
    "Drop Image Here": "画像をここにドラッグ&ドロップ", 
    "Open Graph (ctrl+o)": "グラフを開く (ctrl + o)", 
    "What effect does h have on the function g(x)?": "hによってg(x)はどのように変化するでしょうか？", 
    "Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.": "関数__newSignature__の引数として__symbols__と__lastSymbol__を含むようにしてみてください。", 
    "Function '__dependency__' is not defined.": "関数 '__dependency__' は定義されていません。", 
    "Restrictions": "範囲指定", 
    "Click here to only show the dots.": "点のみを表示するために、ここをクリックします。", 
    "Click here to download Google Chrome.": "Google Chromeをダウンロードするには、ここをクリックします。", 
    "Zoom Out": "縮小", 
    "Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.": "関数__newSignature__の引数として__lastSymbol__を含むようにしてみてください。", 
    "Send": "送信", 
    "Try typing all of __sample_expression__": "__sample_expression__ のすべてを入力してみましょう。", 
    "Too complicated. Use parens.": "複雑すぎます。括弧を使用してください。", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmosは一時的にメンテナンス中です。サンプルのグラフを開くことはできますが、サインインをしてあなたのグラフを開いたり、変更内容を保存することはできません。ご迷惑をおかけして申し訳ありません。", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "フィードバックをありがとうございました。すぐにお返事します!", 
    "Sep": "9 月", 
    "Redo (ctrl+y)": "やり直す (ctrl + y)", 
    "__number__ days ago": "__number__ 日前", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmosがメンテナンス中のため、このグラフに行われた変更を保存できません。ご迷惑をおかけして申し訳ありません。", 
    "Cancel": "キャンセル", 
    "Send to:": "送信先 :", 
    "Open Graph": "グラフを開く", 
    "Table entries must be simple expressions. __supplement__": "テーブルの要素は単純な式である必要があります。__supplement__", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "解かれていた連立不等式だけサポートされています。不平等の一方の辺を削除してみてください。", 
    "Scaling Any Function": "関数の各軸方向の拡大縮小", 
    "Last trick!": "最後のトリックです!", 
    "Share this link:": "リンクを共有します：", 
    "Language": "言語", 
    "The first argument of '__symbol__' must be a list. For example, try typing: __recommendation__.": "__symbol__の最初の引数はリストである必要があります。例えば__recommendation__と入力してみてください。", 
    "Awesome!": "素晴らしい!", 
    "Click here to generate a table.": "ここをクリックしてテーブルを作成します。", 
    "to save and share your graphs!": "グラフの保存や共有ができます!", 
    "Standard Form with Tangent": "接線と標準形", 
    "Invalid y coordinate.": "無効なy座標です。", 
    "I love it": "気に入りました", 
    "We'll never share or sell your email address.": "私たちは、登録されたメールアドレスを他者と共有したり転売することはありません。", 
    "Residuals": "残差", 
    "Points are not allowed.": "座標形式はここでは使用できません。", 
    "Arrows:": "矢印 : ", 
    "Edit List": "リストの編集", 
    "Message sent. Please check your email for a password recovery link.": "メッセージを送信しました。パスワードの再設定を行うリンクが含まれていますので、メールを確認してください。", 
    "Please provide an email so that we can write back.": "回答をお送りするために、メールアドレスをお知らせいただけると助かります。", 
    "Let's make some sliders!": "いくつかのスライダーを作ってみましょう!", 
    "Go down to the next row to add more data.": "次の行に移動して、もっと数字を入力してみましょう。", 
    "Let's make a function. First: click here to create a new blank expression.": "関数を作ってみましょう。最初に： ここをクリックして、空算式を作成します。", 
    "yeah!": "はい、よろこんで!", 
    "Error: Row __rowNum__, Column __colNum__ isn't a number.": "エラー:__rowNum__行__colNum__列目は数字ではありません。", 
    "Transformations": "変換", 
    "Image upload is not supported in this browser.": "このブラウザでは画像のアップロードに対応していません。", 
    "This column header can't be defined elsewhere in the calculator.": "この列のヘッダーは既に定義されているので使用できません。", 
    "Update Password": "パスワードの更新", 
    "Resources": "参考資料", 
    "Help Center": "ヘルプセンター", 
    "Drag the handle to change the value.": "ハンドルをドラッグすると、値が変化します。", 
    "Undo": "元に戻す", 
    "Now type: __equation__": "では、これを入力してみましょう : __equation__", 
    "What effect does a have on the function g(x)?": "aによってg(x)はどのように変化するでしょうか？", 
    "Sign in": "サインイン", 
    "Type any number here.": "何でもいいので数字を入力してみましょう。", 
    "folder": "フォルダ", 
    "We can only plot inequalities when one variable is quadratic or linear.": "変数の1つが1次または2次である場合にのみ、不等式のグラフを描けます。", 
    "Send a Copy to Google Drive": "Googleドライブにコピーする", 
    "Tweet @desmos": "@desmos にツイート", 
    "Angles": "角度", 
    "This message will self-destruct in __seconds__...": "このメッセージは、__seconds__で自動的に消滅します...", 
    "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.": "ヒント#2:__twiddle__はA B Cと書かれたキーパッドにあります。", 
    "We don't solve single-variable equations involving lists yet.": "リストを含む方程式を解くことはできません。", 
    "Default Zoom": "デフォルト表示", 
    "Ellipse with Foci": "楕円と焦点", 
    "color:": "色 :", 
    "... and select the \"expression\" option.": "式をクリックして追加してください。", 
    "Help": "ヘルプ", 
    "Hint: press the 'A B C' button on the keypad to find the { } buttons": "ヒント: キーパッドの'A B C'ボタンを押すと、'{ }'ボタンを見つけることができます。", 
    "Nice. Let's check the model.": "よくできました！モデルをチェックしてみましょう。", 
    "Logged in with Clever!": "Cleverでログイン!", 
    "This graph has been deleted.": "このグラフは削除されました。", 
    "Invalid width.": "無効な幅です。", 
    "Create Account": "アカウント作成", 
    "First, let's get some data.": "データ処理を始めましょう", 
    "Desmos makes all of its money through partnerships. Interested in partnering with Desmos? Email us at <a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>": "Desmosは財源をパートナーシップを通じて募っています。Desmosとの提携に興味がありますか？<a target=\"_blank\" href=\"mailto:partnerships@desmos.com\">partnerships@desmos.com</a>までご連絡ください。", 
    "Long-hold the colored circle to the left of an equation or expression to open the style and color options.": "式の左側にある色のついた円を長押しすれば色やスタイルの変更ができます。", 
    "Learn more": "もっと詳しく", 
    "Brilliant!": "素晴らしい!", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "グラフを保存しなくてもよろしいですか？未保存の作業内容は失われます。", 
    "Step:": "目盛 :", 
    "Parabola and Focus": "放物線とその焦点", 
    "Advanced Tables": "テーブルの応用", 
    "Title:": "タイトル:", 
    "Current Password:": "現在のパスワード :", 
    "Click here to connect the dots.": "点の間に線を引くなら、ここをクリックしてください。", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "問題が発生したようです。お手数ですが、サポートにご連絡ください。 (Error __error_num__)", 
    "Sign In": "サインイン", 
    "Polar Conic Sections": "円錐曲線", 
    "optional": "省略可能", 
    "You haven't written anything yet.": "まだ何も書いていません。", 
    "Sorry, we didn't find any graphs with that title.": "そのタイトルのグラフは見つかりませんでした。", 
    "Y-Axis": "Y軸", 
    "Want us to consider featuring it?": "このグラフを他の人にも紹介したいですか?", 
    "What effect does k have on the function g(x)?": "kによってg(x)はどのように変化するでしょうか？", 
    "Tours": "機能紹介", 
    "Reflections of a Function": "各軸での鏡像", 
    "expression": "式", 
    "Close": "閉じる", 
    "send us feedback": "フィードバックを送る", 
    "For example, try typing: __dependency__(x).": "たとえば、次のように入力してください。 __dependency__(x)", 
    "Unit Circle": "単位円", 
    "powered by": "powered by", 
    "table": "テーブル", 
    "loading...": "読み込み中...", 
    "Forgot your password?": "パスワードをお忘れですか?", 
    "Calculus": "微分法", 
    "Make a New Copy": "コピーを作成", 
    "Click here to add a new table.": "新しいテーブルを追加するにはここをクリックします。", 
    "Jun": "6 月", 
    "You're a restrictions star!": "グラフの範囲を指定する名人です!", 
    "Jul": "7 月", 
    "Inverse of a Function": "逆関数", 
    "Edit Account": "アカウントの編集", 
    "There isn't a way to save your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to save your graph.": "グラフを保存する機能は(まだ)アプリにはありません。保存するにはwww.desmos.com/calculatorでサインインする必要があります。", 
    "Delete All": "全て削除", 
    "There isn't a way to share your graph through the app (yet!). We recommend visiting www.desmos.com/calculator, and signing in with your Desmos account if you want to share a link to your graph.": "グラフを共有する機能は(まだ)アプリにはありません。共有するにはwww.desmos.com/calculatorでサインインする必要があります。", 
    "Sinusoid with amplitude \"a\" and period \"b\"": "振幅がaで周期がbの正弦波", 
    "what's this?": "詳しく", 
    "Done": "完了", 
    "Desmos Graphing Calculator": "Desmos グラフ計算機", 
    "'__symbol__' may not be used as a regression parameter.": "__symbol__は既に回帰分析のパラメーターに使われています。", 
    "Nested lists are not allowed.": "入れ子になったリストは使用できません。", 
    "Sign In with Your Google Account": "あなたのGoogleアカウントでサインイン", 
    "loading graphs...": "グラフを読み込んでいます...", 
    "Click here to make a new blank expression.": "ここをクリックして、新しい数式を作成しましょう。", 
    "Send Feedback": "フィードバックの送信", 
    "<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.": "<b>近似曲線を描いてみましょぅ。</b><br>新しい表を作って、 __residualVariable__ を入力してみましょう。", 
    "Table created.": "テーブルが作成されました。", 
    "Click back to continue editing.": "編集を続行に戻るをクリックしてください。", 
    "Ranges must be arithmetic sequences.": "範囲は数式で表現される必要があります。", 
    "Enjoying Desmos?": "Desmosを楽しんでますか?", 
    "Name:": "お名前:", 
    "Add Item": "アイテムの追加", 
    "Click to show the list of expressions.": "クリックすると、式のリストが表示されます。", 
    "Logged in successfully!": "ログインに成功しました！", 
    "Function g(x) is a transformed version of function f(x).": "関数g(x)はf(x)を平行移動させたものです", 
    "Lines": "直線", 
    "yesterday": "昨日", 
    "Hint #1: to get __y_1__ type __y1__.": "ヒント#1:__y_1__を入力するには__y1__とタイプします。", 
    "You can't redefine '__symbol__' because it's already defined.": "__symbol__を再定義することはできません。既に定義されています。", 
    "Function '__symbol__' requires 2 arguments. For example, try typing: __recommendation__.": "関数__symbol__は2つの引数を取ります。例えば__recommendation__と入力してみてください。", 
    "How do I save my graph?": "どうすればグラフを保存できますか？", 
    "Opened '__graphTitle__'": "' __graphTitle__' を開きました。", 
    "Trigonometry": "三角関数", 
    "Sorry, you can't graph __symbol__ as a function of anything yet.": "申し訳ありませんが__symbol__を関数としてグラフに描けません。", 
    "No Unsaved Changes": "保存していない変更はありません", 
    "Only __form1__ and __form2__ are supported. Otherwise, use parens.": "__form1__と__form2__のみがサポートされています。他の用例には括弧を使ってください。", 
    "one minute ago": "1 分前", 
    "Vertex Form": "頂点と開き具合", 
    "Other Questions?": "他に質問がありますか?", 
    "Head over to Google Docs and copy and paste this __sample_data_link__.": "Google Docsにある__sample_data_link__の値をコピーして貼り付けてください。", 
    "Square Grid": "正方形", 
    "style:": "スタイル :", 
    "Ask us on Twitter": "Twitterで質問する", 
    "Function '__dependency__' requires an argument. __supplement__": "関数__dependency__は1個の引数を取ります。__supplement__", 
    "We don't solve complicated single-variable equations yet.": "1個の変数の高次方程式は、まだサポートされていません。", 
    "__number__ hours ago": "__number__ 時間前", 
    "Click and hold on this icon until the options menu opens up.": "別のメニューが表示されるまで、このマークをクリックし続けてください。", 
    "Learn more.": "詳しく", 
    "Remembered your password?": "パスワードを忘れましたか?", 
    "Download the User Guide": "ユーザーガイドのダウンロード", 
    "Go \"Hands-free\"": "アニメーションも試しましょう", 
    "step:": "ステップ：", 
    "Cannot index into something that is not a list.": "リストでないものにインデックスを付けることはできません。", 
    "Radians": "弧度法", 
    "Let's start with some data!": "いくつかのデータから始めましょう!", 
    "Uh-oh! Type a valid number here.": "違います! ここでは有効な数値を入力してください。", 
    "Use your Email Address": "あなたのメールでアカウント作成", 
    "General Form": "一次式", 
    "Embed": "埋め込み", 
    "You did not select a file": "ファイルを選択していませんでした。", 
    "Desmos works best on your version of Android if you use the Chrome Browser.": "Desmosは、Android端末ではブラウザーとしてChromeを使用することを推奨しています。", 
    "Your Name:": "あなたの名前 :", 
    "Two Point Form": "点と点", 
    "Now click here to add the sliders.": "ここをクリックして、スライダーを追加しましょう。", 
    "Limacon": "蝸牛線", 
    "Click here to add a new item.": "ここをクリックすると、新しいアイテムを追加します。", 
    "Don't forget the \"y=\"!": "「y=」を忘れないで!", 
    "Fill in this whole row.": "この行の全てのマスに、数字を入力してみましょう。", 
    "Invalid x coordinate.": "無効なx座標です。", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "では、グラフの範囲を変更しましょう。数式の末尾に __sample_expression__ を追加します。", 
    "Too many variables. Try defining '__variables__'.": "変数が多すぎます。__variables__を定義してみてください。", 
    "Parameters": "パラメータ", 
    "Update Account": "アカウントの更新", 
    "Note: you can add your own data instead by clicking the __plus_icon__ button.": "ノート:__plus_icon__ボタンをクリックすることで自分のデータを追加できます。", 
    "Convert this to a table.": "これをテーブルに変換してみましょう。", 
    "Change this equation to __sample_expression__": "この数式を __sample_expression__ に変更しましょう。", 
    "Email": "メール", 
    "Taylor Expansion of sin(x)": "sin(x)のマクローリン展開", 
    "rate it in the app store": "アプリを評価する", 
    "Now graph: __sample_expression__": "では、 __sample_expression__ をグラフに描いてみましょう。", 
    "You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.": "__dependency__は重複定義になっています。別の変数を使うか、__dependency__の定義を変更してください。", 
    "All the Trig Functions": "種類の三角関数", 
    "We only plot inequalities of x and y, or r and θ.": "不等式のグラフでは、x、y、r、θ以外の変数は使えません。", 
    "Share your thoughts!": "あなたの考えを共有しましょう!", 
    "Factored Form": "因数分解された式", 
    "Fill it in.": "入力してみましょう。", 
    "Both arguments of '__symbol__' must be lists. For example, try typing: __recommendation__.": "__symbol__の引数はどちらもリストである必要があります。例えば__recommendation__と入力してみてください。", 
    "Sorry, I don't understand this.": "すみません、これは解釈できません。", 
    "Image": "画像", 
    "Learn More": "詳細情報", 
    "You can't use '__symbol__' as an index because it's already defined.": "インデックスとして__symbol__を使うことはできません。既に定義されています。", 
    "What do you want '__symbol__' to equal?": "__symbol__のイコールの相手が必要です。", 
    "add slider:": "スライダーを追加 :", 
    "or": "または", 
    "Does not compute to constant.": "定数は計算されません。", 
    "New Blank Graph": "新しい空のグラフ", 
    "Feb": "2 月", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "式の末尾に、 __sample_expression__ を追加すると、グラフの範囲を設定できます。", 
    "image": "画像", 
    "Duplicate": "複製", 
    "Statistics": "統計", 
    "Degrees": "度数法", 
    "Hide List": "リストを隠す", 
    "Start by graphing a function.": "関数のグラフを描くところから始めましょう。", 
    "Intercept Form": "両軸の切片", 
    "Tell us on Facebook": "Facebookで報告", 
    "Inequalities are not allowed.": "ここでは不等号の記号は使用できません。", 
    "Click here to continue editing this table.": "ここをクリックして、このテーブルの編集を続けましょう。", 
    "Click the \"Edit List\" button.": "「リストの編集」ボタンをクリックします。", 
    "Dec": "12 月", 
    "Convert to Table": "テーブルに変換", 
    "Variable '__dependency__' can't be used as a function.": "変数 '__dependency__' は関数として使用できません。", 
    "This equation contains fine detail that has not been fully resolved.": "この方程式には問題を完全に解決できない細かい問題があります。", 
    "Polar equations must be linear in r.": "極方程式はrに関して線形である必要があります。", 
    "Move the parabola.": "放物線を移動してみましょう。", 
    "You're a table wizard!": "テーブルの魔法使いになりましたね!", 
    "Polar Rose": "極座標バラ", 
    "Save (ctrl+s)": "保存 (ctrl + s)", 
    "search by title...": "タイトルで検索...", 
    "type your question or suggestion...": "ご質問/ご意見を入力してください...", 
    "functions": "関数", 
    "Mar": "3 月", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "ヒント : y=x^2と入力するか、キーパッドのa<sup>2</sup>というボタンを使用します。", 
    "May": "5 月", 
    "Save As or Rename (ctrl+shift+s)": "名前を付けて保存・名前の変更 (ctrl + shift + s)", 
    "We can't plot θ as a function of r. Try plotting r(θ) instead.": "rの関数としてのθをプロットすることはできません。代わりにr(θ)の形にしてみてください。", 
    "Please enter your email address. We will send a password recovery link to you.": "メールアドレスを入力してください。パスワードを修正するためのリンクを送信します。", 
    "Visiting anonymously from Clever.": "Cleverから匿名で使用しています。", 
    "Equations are not allowed.": "ここでは方程式を使用できません。", 
    "Phase": "位相", 
    "Link to Google": "Googleのアカウントで作成", 
    "Create an Account": "アカウントを作成", 
    "Message: <i>(optional)</i>": "メッセージ : <i>(省略可能)</i>", 
    "Click on the icon next to each trig function to turn it on or off:": "式の左側にあるアイコンのクリックで表示/非表示が切り替わります", 
    "Please enter your feedback.": "あなたのフィードバックをお送りください。", 
    "We only support implicit equations of x and y.": "変数xとyの陰関数しかサポートされていません。", 
    "Error signing in with Clever.": "Cleverでのログインでエラーとなりました。"
},"ta":{},"de":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Login Fenster blockiert. Bitte erlauben Sie Popups von desmos.com.", 
    "all": "Alle", 
    "style:": "Stil:", 
    "Jan": "Jan", 
    "Undo (ctrl+z)": "Rückgängig (Strg+Z)", 
    "Update Password": "Passwort erneuern", 
    "Share your graph with the world!": "Teilen Sie Ihre Graphen mit der Welt!", 
    "Oct": "Okt", 
    "Sign In with Google": "Anmleden mit Google", 
    "We don't solve complicated single-variable equations yet.": "Wir lösen bislang noch keine komplexen Gleichungen mit einer Variable.", 
    "__number__ hours ago": "Vor __number__ Stunden", 
    "Undo": "Rückgängig", 
    "Untitled Graph": "Unbenannter Graph", 
    "Sign in": "Anmelden", 
    "Remembered your password?": "Erinnern Sie sich an Ihr Passwort?", 
    "Nov": "Nov", 
    "Nice Graph!": "Schöne Grafik!", 
    "step:": "Schritt:", 
    "Tweet @desmos": "Tweet @desmos", 
    "This message will self-destruct in __seconds__...": "Diese Meldung wird sich in __seconds__ selbstzerstören...", 
    "Radians": "Bogenmaß", 
    "New graph created.": "Graph wurde erstellt.", 
    "HTML Embed Code": "HTML Code", 
    "Embed": "Einbinden", 
    "color:": "Farbe:", 
    "Click to return to your expressions.": "Hier klicken, um zu den Ausdrücken zurückzukehren.", 
    "Help": "Hilfe", 
    "A B C": "A B C", 
    "Click to return to this graph.": "Hier klicken, um zum Diagramm zurückzukehren.", 
    "Your Name:": "Ihr Name:", 
    "Update Account": "Konto aktualisieren", 
    "loading graphs...": "Graphen werden geladen...", 
    "Didn't work? Try again!": "Fehler? Versuchen Sie es erneut!", 
    "This graph has been deleted.": "Dieser Graph wurde gelöscht.", 
    "Create Account": "Registrieren", 
    "Tables": "Tabellen", 
    "Variable '__dependency__' can't be used as a function.": "Die Variable '__dependency__' kann nicht als Funktion verwendet werden.", 
    "This is the name we'll use if we feature one of your graphs.": "Dieser Name wird angezeigt, falls wir eines Ihrer Diagramme veröffentlichen.", 
    "Send": "Senden", 
    "Sliders": "Regler", 
    "Print": "Drucken", 
    "Email": "E-Mail", 
    "saved": "Gespeichert", 
    "Please provide an email so that we can write back.": "Bitte teilen sie uns ihre E-Mail-Adresse mit, damit wir antworten können.", 
    "Repeat Password:": "Passwort wiederholen:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Sind Sie sicher, dass Sie diesen Graphen schließen wollen? Ihre ungespeicherte Arbeit würde unwiderruflich gelöscht werden.", 
    "__number__ minutes ago": "Vor __number__ Minuten", 
    "Resources": "Ressourcen", 
    "Advanced Tables": "Erweiterte Tabellen", 
    "example": "Beispiel", 
    "Title:": "Name:", 
    "Current Password:": "Aktuelles Passwort:", 
    "New Password:": "Neues Passwort:", 
    "We only plot inequalities of x and y, or r and θ.": "Es können nur Ungleichungen von x und y oder von r und θ gezeichnet werden.", 
    "sending...": "sende...", 
    "last week": "Letzte Woche", 
    "We'll never share or sell your email address.": "Wir geben ihre Adresse nicht an Dritte weiter.", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Leider ist ein Fehler aufgetreten, bitte kontaktieren Sie den Desmos-Support.  (Error __error_num__)", 
    "Sign In": "Anmelden", 
    "optional": "optional", 
    "Delete": "Löschen", 
    "Delete All": "Alles löschen", 
    "Sorry, we didn't find any graphs with that title.": "Leider konnte kein Graph mit diesem Namen gefunden werden.", 
    "Apr": "Apr", 
    "Image": "Bild", 
    "no, thanks": "Nein, danke", 
    "Recover Password": "Passwort wiederherstellen", 
    "Want us to consider featuring it?": "Möchten Sie, dass wir es prüfen?", 
    "Learn More": "Weitere Informationen", 
    "on __month__ __day__, __year__": "Vom __day__.__month__.__year__", 
    "type your question or suggestion...": "Schreiben sie ihre Frage oder ihren Vorschlag", 
    "Terms of Use": "Nutzungsbedingungen", 
    "expression": "Ausdruck", 
    "or": "oder", 
    "New Blank Graph": "Neues leeres Diagramm", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Aug", 
    "image": "Bild", 
    "Projector Mode": "Projektor Modus", 
    "just now": "Gerade eben", 
    "Link to Google": "Google Account", 
    "Duplicate": "Duplizieren", 
    "Degrees": "Gradmaß", 
    "Desmos is in Maintenance Mode.": "Desmos wird momentan gewartet.", 
    "table": "Tabelle", 
    "loading...": "Lade...", 
    "Forgot your password?": "Passwort vergessen?", 
    "Hide List": "Liste ausblenden", 
    "one hour ago": "Vor einer Stunde", 
    "__number__ weeks ago": "Vor __number__ Wochen", 
    "Jun": "Jun", 
    "Open Graph (ctrl+o)": "Graphen öffnen (Strg+O)", 
    "Jul": "Jul", 
    "Edit Account": "Account bearbeiten", 
    "more": "Mehr", 
    "Function '__dependency__' is not defined.": "Die Funktion '__dependency__' ist nicht definiert.", 
    "Restrictions": "Einschränkungen", 
    "Language": "Sprache", 
    "Try typing __sample_expression__": "Versuche, __sample_expression__ einzugeben", 
    "Dec": "Dez", 
    "folder": "Ordner", 
    "Edit List": "Liste bearbeiten", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos wird gerade gewartet. Sie können Beispiel-Graphen öffnen und bearbeiten, jedoch ist das Anmelden und Speichern derzeit nicht möglich. Wir bitten um Entschuldigung.", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Ungleichungen können nur gezeichnet werden, wenn eine Variable quadratisch oder linear ist.", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Danke für das Feedback  &ndash; Sie werden bald von uns hören!", 
    "Feedback": "Rückmeldung", 
    "Sep": "Sep", 
    "Convert to Table": "In Tabelle umwandeln", 
    "Redo (ctrl+y)": "Wiederholen (Strg+y)", 
    "what's this?": "Was ist das?", 
    "__number__ days ago": "Vor __number__ Tagen", 
    "Send a Copy to Google Drive": "Kopie an Google-Drive senden", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos wird momentan gewartet. Speichern ist derzeit nicht möglich. Wir bitten um Entschuldigung!", 
    "Desmos User Guide": "Desmos Benutzerhandbuch", 
    "Done": "Fertig", 
    "Desmos Graphing Calculator": "Desmos Grafik-Rechner", 
    "Cancel": "Abbrechen", 
    "Send to:": "Senden an:", 
    "Open Graph": "Graph öffnen", 
    "Save (ctrl+s)": "Speichern (Strg+S)", 
    "You're a table wizard!": "Du bist ein Master der Tabellen!", 
    "Share Graph": "Graphen teilen", 
    "Sign In with Your Google Account": "Melden Sie sich mit Ihrem Google-Konto an", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Es werden nur gelöste doppelte Ungleichungen unterstützt. Versuchen Sie, eine Seite der Ungleichung zu löschen.", 
    "Send Feedback": "Feedback senden", 
    "search by title...": "Nach Graphen suchen...", 
    "Share this link:": "Teilen Sie diesen Link:", 
    "Link to your Google Account": "Mit Google-Konto verbinden", 
    "functions": "Funktionen", 
    "Mar": "Mär", 
    "May": "Mai", 
    "message sent": "Nachricht wurde gesendet", 
    "Save As or Rename (ctrl+shift+s)": "Umbenennen und Speichern (Strg+Umschalt+S)", 
    "Please enter your email address. We will send a password recovery link to you.": "Bitte geben Sie ihre E-Mail-Adresse ein. Wir senden Ihnen einen Link zum Zurücksetzen Ihres Passworts zu.", 
    "Sign Out": "Ausloggen", 
    "Use your Email Address": "Verwenden Sie Ihre E-Mail-Adresse", 
    "to save and share your graphs!": "um ihre Graphen zu speichern und zu teilen!", 
    "Name:": "Name:", 
    "Add Item": "Element hinzufügen", 
    "Click to show the list of expressions.": "Hier klicken, um die Liste von Ausdrücke anzuzeigen.", 
    "Graph Paper": "Millimeterpapier", 
    "yesterday": "Gestern", 
    "add slider:": "Regler hinzufügen:", 
    "Opened '__graphTitle__'": "'__graphTitle__' geöffnet.", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Durch klicken auf \"__btn__,\" bestätigen sie, dass sie unsere __terms_of_use_link__ gelesen haben und akzeptieren.", 
    "Message: <i>(optional)</i>": "Hinweis: <i>(optional)</i>", 
    "Sign In with Desmos": "Anmelden mit Desmos-Account", 
    "one minute ago": "Vor einer Minute", 
    "Password:": "Passwort:", 
    "Please enter your feedback.": "Bitte teilen Sie uns ihr Feedback mit.", 
    "We only support implicit equations of x and y.": "Es werden nur nur implizite Gleichungen von x und y unterstützt.", 
    "Message sent. Please check your email for a password recovery link.": "Nachricht wurde gesendet. Bitte überprüfen Sie Ihr E-Mail-Postfach, ggf. auch Ihren Spam-Ordner.", 
    "Email:": "E-Mail:", 
    "enter": "Enter", 
    "yeah!": "Juhuu!"
},"ru":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Окно входа заблокировано. Пожалуйста, разрешите всплывающие окна от desmos.com для входа через Google.", 
    "all": "все", 
    "Square Grid": "Квадратная сетки", 
    "style:": "стиль:", 
    "Jan": "Янв", 
    "Try adding an equals sign to turn this into an equation.": "Попробуйте добавить знак равенства, чтобы превратить это в уравнение.", 
    "Please enter your email address. We will send a password recovery link to you.": "Пожалуйста, введите ваш адрес электронной почты. Мы отправим вам ссылку для восстановления пароля.", 
    "Undo (ctrl+z)": "Отменить (Ctrl+Z)", 
    "Update Password": "Обновить пароль", 
    "Share your graph with the world!": "Поделитесь вашим графиком со всем миром!", 
    "Oct": "Окт", 
    "Sign In with Google": "Войти через Google", 
    "We don't solve complicated single-variable equations yet.": "Мы пока не решаем сложные уравнения с одной переменной.", 
    "__number__ hours ago": "__number__ часов назад", 
    "Click and hold on this icon until the options menu opens up.": "Нажмите и удерживайте этот значок, пока не откроется меню параметров.", 
    "Undo": "Отменить", 
    "Untitled Graph": "Без имени", 
    "Nice!": "Отлично!", 
    "... and select the \"table\" option.": "... и выберите опцию «таблица».", 
    "Remembered your password?": "Вспомнили пароль?", 
    "Grid": "Сетка", 
    "Go \"Hands-free\"": "Попробуйте «Hands-free»", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Мы только можем начертить неравенство, когда одна переменная линейна или квадратична.", 
    "step:": "шаг:", 
    "Tweet @desmos": "Твитнуть @desmos", 
    "Angles": "Углы", 
    "This message will self-destruct in __seconds__...": "Это сообщение исчезнет через __seconds__ секунд...", 
    "X-Axis": "Ось x", 
    "Radians": "Радианы", 
    "New graph created.": "Создан новый график.", 
    "Uh-oh! Type a valid number here.": "О нет! Введите допустимое число здесь.", 
    "example": "пример", 
    "Link to your Google Account": "Привязать к вашему аккаунту Google", 
    "Embed": "Код", 
    "color:": "цвет:", 
    "Click to return to your expressions.": "Нажмите, чтобы вернуться в выражения.", 
    "A B C": "A B C", 
    "You did not select a file": "Файл не выбран", 
    "Click to return to this graph.": "Нажмите, чтобы вернуться в этот график.", 
    "Your Name:": "Ваше имя:", 
    "Update Account": "Обновить учетную запись", 
    "Duplicate": "Копировать", 
    "Current Password:": "Текущий пароль:", 
    "Now click here to add the sliders.": "Теперь нажмите здесь, чтобы добавить ползунки.", 
    "Press play to animate the slider.": "Нажмите кнопку play для анимации ползунка.", 
    "Click here to add a new item.": "Нажмите здесь, чтобы добавить новый элемент.", 
    "Don't forget the \"y=\"!": "Не забывайте про «y =»!", 
    "Fill in this whole row.": "Заполните эту строку.", 
    "Invalid width.": "Недопустимая ширина.", 
    "Invalid x coordinate.": "Координата  x недействительна.", 
    "Create Account": "Регистрация", 
    "Tables": "Таблицы", 
    "what's this?": "Что это?", 
    "Let's get started!": "Начать!", 
    "This is the name we'll use if we feature one of your graphs.": "Это имя, которое будет использоваться для выставки ваших графиков.", 
    "Convert this to a table.": "Преобразовать это в таблицу.", 
    "Send": "Отправить", 
    "Sliders": "Ползунки", 
    "Change this equation to __sample_expression__": "Изменить это уравнение на __sample_expression__", 
    "Click anywhere to close the drawing options.": "Щелкните в любом месте, чтобы закрыть параметры.", 
    "Print": "Печать", 
    "Move right to add a new column.": "Нажмите вправо для добавления нового столбца.", 
    "Email": "Email", 
    "saved": "сохранено", 
    "Brilliant!": "Гениально!", 
    "Now graph: __sample_expression__": "Теперь график: __sample_expression__", 
    "Repeat Password:": "Повторите пароль:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Вы действительно хотите выйти? Все несохраненные изменения будут утеряны.", 
    "Try graphing a straight line, like __sample_expression__": "Попробуйте построить прямую линию, как __sample_expression__", 
    "__number__ minutes ago": "__number__ минут назад", 
    "Type any number here.": "Введите любое число.", 
    "Resources": "Ресурсы", 
    "Advanced Tables": "Усложненные таблицы", 
    "Invalid height.": "Недопустимая высота.", 
    "Title:": "Заголовок:", 
    "sending...": "отправка...", 
    "New Password:": "Новый пароль:", 
    "We only plot inequalities of x and y, or r and θ.": "Поддерживаются неравенства через x и y, а также r и theta.", 
    "Click here to generate a table.": "Нажмите здесь, чтобы создать таблицу.", 
    "Share your thoughts!": "Поделитесь своими мыслями!", 
    "Click here to connect the dots.": "Нажмите здесь, чтобы соединить точки.", 
    "Click here to create a new expression.": "Нажмите здесь, чтобы создать новое выражение.", 
    "Didn't work? Try again!": "Не работает? Попробуйте еще!", 
    "last week": "на прошлой неделе", 
    "We'll never share or sell your email address.": "Мы никогда не отдадим и не продадим ваш адрес эл��ктронной почты.", 
    "Fill it in.": "Заполни это.", 
    "Sign In": "Войти", 
    "Show List": "Показать список", 
    "optional": "опционально", 
    "Delete": "Удалить", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Что-то пошло не так, просьба сообщить об этом в поддержку desmos.com. (Ошибка __error_num__)", 
    "Delete All": "Удалить все", 
    "Try typing __sample_expression__": "Попробуйте ввести __sample_expression__", 
    "Apr": "Апр", 
    "Image": "Картинка", 
    "__number__ weeks ago": "__number__ недель назад", 
    "no, thanks": "нет, спасибо", 
    "Now try pressing Enter.": "Теперь попробуйте нажать Enter.", 
    "Recover Password": "Восстановление пароля", 
    "Want us to consider featuring it?": "Хотите узнать, что думаем о нем мы?", 
    "folder": "Папку", 
    "Tours": "Обучение", 
    "Open Graph": "Открыть график", 
    "type your question or suggestion...": "напишите суть вашего вопроса или предложения...", 
    "Drop Image Here": "Вставить изображение здесь", 
    "Terms of Use": "Правила использования", 
    "Show Keypad": "Показать клавиатуру", 
    "expression": "Выражение", 
    "Drag the handle to change the value.": "Перетащите маркер, чтобы изменить значение.", 
    "Does not compute to constant.": "Невозможно вычислить константу.", 
    "Y-Axis": "Ось y", 
    "New Blank Graph": "Новый график", 
    "Feb": "Фев", 
    "BBCode": "BBCode", 
    "Aug": "Авг", 
    "This graph has been deleted.": "Этот график был удален.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Ограничьте пределы этой линии, добавив __sample_expression__ в конце.", 
    "image": "картинка", 
    "Projector Mode": "Режим проектора", 
    "Send a Copy to Google Drive": "Отправить копию на диск Google", 
    "just now": "только что", 
    "Open Graph (ctrl+o)": "Открыть график (Ctrl+O)", 
    "Link to Google": "Привязка к Google", 
    "Click here to create a new blank expression.": "Нажмите здесь, чтобы создать новое пустое выражение.", 
    "Show Grid Angles": "Показать углы на сетке", 
    "Degrees": "Градусы", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Теперь давайте ограничим диапазон. В конце добавьте __sample_expression__.", 
    "You're a scatter plot whiz!": "Ты мастер построения графиков!", 
    "Desmos is in Maintenance Mode.": "На Desmos ведутся технические работы.", 
    "table": "Таблицу", 
    "loading...": "Загрузка...", 
    "Forgot your password?": "Забыли пароль?", 
    "The file \"__file__\" is not an image": "Файл \"__file__\" не является изображением", 
    "add label": "Добавить метку", 
    "one hour ago": "час назад", 
    "Start by graphing a function.": "Начните с построения графика функции.", 
    "You're a slider pro!": "Ты профессионал ползунков!", 
    "Jun": "Июн", 
    "You're a restrictions star!": "Ты звезда пределов!", 
    "Jul": "Июл", 
    "Let's make a scatter plot!": "Давайте сделаем график по точкам!", 
    "Edit List": "Редактировать", 
    "Edit Account": "Редактировать аккаунт", 
    "more": "ещё", 
    "Function '__dependency__' is not defined.": "Функция '__dependency__' не определена.", 
    "Restrictions": "Ограничения", 
    "Click here to continue editing this table.": "Нажмите здесь, чтобы продолжить редактирование этой таблицы.", 
    "Click here to only show the dots.": "Нажмите здесь, чтобы показывать только точки.", 
    "Point Slope Form": "Форма точка-склон", 
    "Click the \"Edit List\" button.": "Нажмите кнопку «Редактировать список».", 
    "Sign in": "Войти", 
    "Sorry, we didn't find any graphs with that title.": "Графиков с таким названием не найдено.", 
    "Hide Keypad": "Скрыть клавиатуру", 
    "Try typing all of __sample_expression__": "Попробуйте ввести все __sample_expression__", 
    "Dec": "Дек", 
    "Nov": "Ноя", 
    "Message: <i>(optional)</i>": "Сообщение: <i>(опционально)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos временно находится в режиме обслуживания. Вы сможете открыть пример графиков, но не сможете войти, открыть ваши графики или сохранить изменения. Так что извините за неудобства.", 
    "Nice Graph!": "Отличный график!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Спасибо за отзыв. Вы получите ответ как можно скорее!", 
    "Feedback": "Обратная связь", 
    "Sep": "Сен", 
    "Convert to Table": "Преобразовать в таблицу", 
    "Redo (ctrl+y)": "Вернуть (Ctrl+Y)", 
    "Variable '__dependency__' can't be used as a function.": "Переменная '__dependency__' не может использоваться как функция.", 
    "__number__ days ago": "__number__ дней назад", 
    "Tell us on Facebook": "Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "На Desmos ведутся технические работы, поэтому вы не сможете сохранять изменения. Извините за неудобства.", 
    "Desmos User Guide": "Руководство пользователя Desmos", 
    "Done": "Готово", 
    "Desmos Graphing Calculator": "Графический калькулятор Desmos", 
    "Cancel": "Отмена", 
    "Step:": "Шаг:", 
    "Send to:": "Отправить в:", 
    "on __month__ __day__, __year__": "__day__-__month__-__year__", 
    "Show Numbers": "Показать числа", 
    "Move the parabola.": "Перемещай параболу.", 
    "Hide List": "Скрыть список", 
    "Slope Intercept Form": "Форма склон-перехват", 
    "Save (ctrl+s)": "Сохранить (Ctrl+S)", 
    "You're a table wizard!": "Ты мастер таблиц!", 
    "Share Graph": "Поделиться графиком", 
    "Sign In with Your Google Account": "Войти с помощью аккаунта Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Поддерживаются только приведенные двойные неавенства. Попробуйте удалить одну сторону неравенства.", 
    "Help": "Помощь", 
    "Click here to make a new blank expression.": "Нажмите здесь, чтобы создать новое пустое выражение.", 
    "Last trick!": "Последний трюк!", 
    "Send Feedback": "Отправить отзыв", 
    "search by title...": "искать по заголовку...", 
    "Share this link:": "Поделиться ссылкой:", 
    "Please enter your feedback.": "Пожалуйста, оставьте свой отзыв.", 
    "loading graphs...": "загрузка графиков...", 
    "functions": "функции", 
    "Mar": "Мар", 
    "Table created.": "Таблица создана.", 
    "Language": "Язык", 
    "No Unsaved Changes": "Нет несохраненных изменений", 
    "May": "Май", 
    "message sent": "сообщение отправлено", 
    "Save As or Rename (ctrl+shift+s)": "Сохранить как или переименовать (Ctrl+Shift+S)", 
    "Awesome!": "Здорово!", 
    "Sign Out": "Выйти", 
    "Click back to continue editing.": "Нажмите кнопку назад, чтобы продолжить редактирование.", 
    "Just fill in one more...": "Просто заполните еще...", 
    "Learn More": "Подробнее", 
    "Use your Email Address": "Используйте ваш адрес электронной почты", 
    "to save and share your graphs!": "для сохранения и распространения графиков!", 
    "Name:": "Имя:", 
    "Add Item": "Добавить", 
    "Click to show the list of expressions.": "Нажмите, чтобы показать список выражений.", 
    "Graph Paper": "Область построения", 
    "Invalid y coordinate.": "Координата y недействительна.", 
    "Graph Settings": "Настройки", 
    "Lines": "Линии", 
    "yesterday": "вчера", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos находится в режиме предварительного просмотра, так что вы не можете сохранить графики.", 
    "add slider:": "добавить:", 
    "Please provide an email so that we can write back.": "Адрес нужен для обратной связи.", 
    "Opened '__graphTitle__'": "Открылся \"__graphTitle__\"", 
    "Save Changes (ctrl+s)": "Сохранить изменения (ctrl + s)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Нажимая \"__btn__\", вы подтверждаете, что вы прочитали и приняли наши __terms_of_use_link__.", 
    "HTML Embed Code": "HTML для вставки", 
    "Arrows:": "Стрелки:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Подсказка: вы можете ввести y = x ^ 2, или использовать кнопку <sup>2</sup> на клавиатуре ниже.", 
    "size:": "размер:", 
    "Sign In with Desmos": "Войти через Desmos", 
    "one minute ago": "минуту назад", 
    "Password:": "Пароль:", 
    "or": "или", 
    "We only support implicit equations of x and y.": "Мы только поддерживаем неявные уравнения x и y.", 
    "Message sent. Please check your email for a password recovery link.": "Сообщение отправлено. Пожалуйста, свою электронную почту для восстановления пароля.", 
    "Email:": "Email:", 
    "enter": "enter", 
    "center:": "центр:", 
    "Let's make some sliders!": "Давайте сделаем несколько ползунков!", 
    "Go down to the next row to add more data.": "Перейдите на следующую строку, чтобы добавить больше данных.", 
    "Let's make a function. First: click here to create a new blank expression.": "Давайте сделаем функцию. Во-первых: нажмите здесь, чтобы создать новое пустое выражение.", 
    "yeah!": "да!"
},"cy":{},"pt-PT":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Janela de login bloqueada. Por favor permita popups de desmos.com para entrar com o Google.", 
    "all": "todos", 
    "Square Grid": "Grelha quadrada", 
    "style:": "estilo:", 
    "Jan": "Jan", 
    "Try adding an equals sign to turn this into an equation.": "Tente adicionar um sinal de igual para transformar isto numa equação.", 
    "Please enter your email address. We will send a password recovery link to you.": "Por favor escreva o seu endereço de e-mail. Vamos-lhe enviar um link para recuperar a sua palavra-passe.", 
    "Undo (ctrl+z)": "Anular (Ctrl-Z)", 
    "Update Password": "Actualizar palavra-passe", 
    "Share your graph with the world!": "Partilhe o seu gráfico com o mundo!", 
    "Oct": "Out", 
    "Sign In with Google": "Entrar com o Google", 
    "We don't solve complicated single-variable equations yet.": "Ainda não conseguimos resolver equações complicadas de uma variável.", 
    "__number__ hours ago": "há __number__ horas atrás", 
    "Click and hold on this icon until the options menu opens up.": "Clique e mantenha premido sobre o ícone até que o menu de opções abra.", 
    "Undo": "Anular", 
    "Untitled Graph": "Gráfico sem título", 
    "Nice!": "Boa!", 
    "... and select the \"table\" option.": "... e seleccione a opção \"tabela\".", 
    "Remembered your password?": "Lembrou-se da sua palavra-passe?", 
    "Grid": "Grelha", 
    "Go \"Hands-free\"": "Entrar no modo \"mãos-livres\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Apenas conseguimos traçar desigualdades quando uma variável é quadrática ou linear.", 
    "step:": "passo:", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Ângulos", 
    "This message will self-destruct in __seconds__...": "Esta mensagem vai-se auto-destruir em __seconds__...", 
    "X-Axis": "Eixo-X", 
    "Radians": "Radianos", 
    "New graph created.": "Novo gráfico criado.", 
    "Uh-oh! Type a valid number here.": "Uh-oh! Escreva um número válido aqui.", 
    "example": "exemplo", 
    "Link to your Google Account": "Conectar com a sua conta do Google", 
    "Embed": "Fazer embed", 
    "color:": "cor:", 
    "Click to return to your expressions.": "Clique para voltar às suas expressões.", 
    "A B C": "A B C", 
    "You did not select a file": "Não seleccionou nenhum ficheiro", 
    "Click to return to this graph.": "Clique para voltar a este gráfico.", 
    "Your Name:": "O seu nome:", 
    "Update Account": "Actualizar conta", 
    "Duplicate": "Duplicar", 
    "Current Password:": "Palavra-passe actual:", 
    "Now click here to add the sliders.": "Agora clique aqui para adicionar os cursores.", 
    "Press play to animate the slider.": "Prima play para animar este cursor.", 
    "Click here to add a new item.": "Clique aqui para adicionar um novo item.", 
    "Don't forget the \"y=\"!": "Não se esqueça do \"y=\"!", 
    "Fill in this whole row.": "Preencha esta linha inteira.", 
    "Invalid width.": "Largura inválida.", 
    "Invalid x coordinate.": "Coordenada x inválida.", 
    "Create Account": "Criar conta", 
    "Tables": "Tabelas", 
    "what's this?": "o que é isto?", 
    "Let's get started!": "Vamos começar!", 
    "This is the name we'll use if we feature one of your graphs.": "Este é o nome que vamos usar se expusermos um dos seus gráficos.", 
    "Convert this to a table.": "Converter isto numa tabela.", 
    "Send": "Enviar", 
    "Sliders": "Cursores", 
    "Change this equation to __sample_expression__": "Mude esta equação para __sample_expression__", 
    "Click anywhere to close the drawing options.": "Clique em qualquer lugar para fechar as opções de desenho.", 
    "Print": "Imprimir", 
    "Move right to add a new column.": "Mova para a direita para adicionar uma nova coluna.", 
    "Email": "E-mail", 
    "saved": "guardado", 
    "Brilliant!": "Brilhante!", 
    "Now graph: __sample_expression__": "Agora trace: __sample_expression__", 
    "Repeat Password:": "Repita a palavra-passe:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Tem a certeza que quer abandonar este gráfico? O trabalho não gravado será perdido.", 
    "Try graphing a straight line, like __sample_expression__": "Tente traçar o gráfico de uma linha recta, tal como __sample_expression__", 
    "__number__ minutes ago": "há __number__ minutos atrás", 
    "Type any number here.": "Escreva algum número aqui.", 
    "Resources": "Recursos", 
    "Advanced Tables": "Tabelas avançadas", 
    "Invalid height.": "Altura inválida.", 
    "Title:": "Título:", 
    "sending...": "a enviar...", 
    "New Password:": "Nova palavra-passe:", 
    "We only plot inequalities of x and y, or r and θ.": "Apenas conseguimos traçar inequações de x e y, ou de r e θ.", 
    "Click here to generate a table.": "Clique aqui para gerar uma tabela.", 
    "Share your thoughts!": "Partilhe o que pensa!", 
    "Click here to connect the dots.": "Clique aqui para ligar os pontos.", 
    "Click here to create a new expression.": "Clique aqui para criar uma nova expressão.", 
    "Didn't work? Try again!": "Não funcionou? Tente outra vez!", 
    "last week": "a semana passada", 
    "We'll never share or sell your email address.": "Nunca vamos divulgar ou vender o seu endereço de e-mail.", 
    "Fill it in.": "Preencha-o.", 
    "Sign In": "Entrar", 
    "Show List": "Mostrar lista", 
    "optional": "opcional", 
    "Delete": "Apagar", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Alguma coisa correu mal, por favor comunique isto ao suporte. (Erro __error_num__)", 
    "Delete All": "Apagar tudo", 
    "Try typing __sample_expression__": "Tente escrever __sample_expression__", 
    "Apr": "Abr", 
    "Image": "Imagem", 
    "__number__ weeks ago": "há __number__ semanas atrás", 
    "no, thanks": "não, obrigado", 
    "Now try pressing Enter.": "Agora experimente premir Enter.", 
    "Recover Password": "Recuperar palavra-passe", 
    "Want us to consider featuring it?": "Quer que consideremos exibi-lo?", 
    "folder": "pasta", 
    "Tours": "Visitas guiadas", 
    "Open Graph": "Abrir gráfico", 
    "type your question or suggestion...": "escreva a sua pergunta ou sugestão...", 
    "Drop Image Here": "Largue a imagem aqui", 
    "Terms of Use": "Termos de Uso", 
    "Show Keypad": "Mostrar o teclado", 
    "expression": "expressão", 
    "Drag the handle to change the value.": "Mova o cursor para alterar o valor.", 
    "Does not compute to constant.": "O resultado não é uma constante.", 
    "New Blank Graph": "Novo gráfico em branco", 
    "Feb": "Fev", 
    "BBCode": "BBCode", 
    "Aug": "Ago", 
    "This graph has been deleted.": "Este gráfico foi eliminado.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Restrinja o domínio desta linha adicionando __sample_expression__ ao final.", 
    "image": "imagem", 
    "Projector Mode": "Modo de projector", 
    "Send a Copy to Google Drive": "Enviar uma cópia para o Google Drive", 
    "just now": "agora mesmo", 
    "Open Graph (ctrl+o)": "Abrir gráfico (Ctrl+O)", 
    "Link to Google": "Conectar com o Google", 
    "Click here to create a new blank expression.": "Clique aqui para criar uma nova expressão em branco.", 
    "Show Grid Angles": "Mostrar ângulos da grelha", 
    "Degrees": "Graus", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "Agora vamos restringir o intervalo. Adicione __sample_expression__ ao final.", 
    "You're a scatter plot whiz!": "É um mago de gráficos de dispersão!", 
    "Desmos is in Maintenance Mode.": "O Desmos está em modo de manutenção.", 
    "table": "tabela", 
    "loading...": "a carregar...", 
    "Forgot your password?": "Esqueceu-se da sua palavra-passe?", 
    "The file \"__file__\" is not an image": "O ficheiro \"__file__\" não é uma imagem", 
    "add label": "adicionar etiqueta", 
    "one hour ago": "há uma hora atrás", 
    "Start by graphing a function.": "Comece por traçar o gráfico de uma função.", 
    "You're a slider pro!": "És um mestre a usar cursores!", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Está um mestre de restrições!", 
    "Jul": "Jul", 
    "Let's make a scatter plot!": "Vamos fazer um gráfico de dispersão!", 
    "Edit List": "Editar lista", 
    "Edit Account": "Editar conta", 
    "more": "mais", 
    "Function '__dependency__' is not defined.": "A função '__dependency__' não está definida.", 
    "Restrictions": "Restrições", 
    "Click here to continue editing this table.": "Clique aqui para continuar a editar esta tabela.", 
    "Click here to only show the dots.": "Clique aqui para mostrar apenas os pontos.", 
    "Click the \"Edit List\" button.": "Clique no botão \"Editar lista\".", 
    "Sign in": "Entrar", 
    "Sorry, we didn't find any graphs with that title.": "Desculpe, não encontramos quaisquer gráficos com esse título.", 
    "Hide Keypad": "Esconder o teclado", 
    "Try typing all of __sample_expression__": "Tente escrever toda a seguinte expressão: __sample_expression__", 
    "Dec": "Dez", 
    "Nov": "Nov", 
    "Message: <i>(optional)</i>": "Mensagem: <i>(opcional)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "O Desmos está temporariamente em modo de manutenção. Pode abrir gráficos de exemplo, mas não será capaz de entrar, abrir os seus gráficos, ou guardar quaisquer alterações. Pedimos desculpa pelo incómodo.", 
    "Nice Graph!": "Bom gráfico!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Obrigado pelo feedback – vai ouvir de nós em breve!", 
    "Feedback": "Feedback", 
    "Sep": "Set", 
    "Convert to Table": "Converter para tabela", 
    "Redo (ctrl+y)": "Refazer (Ctrl-Y)", 
    "Variable '__dependency__' can't be used as a function.": "A variável '__dependency__' não pode ser usada como uma função.", 
    "__number__ days ago": "há __number__ dias atrás", 
    "Tell us on Facebook": "Conte-no Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "O Desmos está em modo de manutenção; não será capaz de guardar alterações para este gráfico. Pedimos desculpa pela inconveniência!", 
    "Desmos User Guide": "Guia do utilizador Desmos", 
    "Done": "Feito", 
    "Desmos Graphing Calculator": "Calculadora Gráfica Desmos", 
    "Cancel": "Cancelar", 
    "Step:": "Passo:", 
    "Send to:": "Enviar para:", 
    "on __month__ __day__, __year__": "no dia __day__ de __month__  de __year__", 
    "Show Numbers": "Mostrar números", 
    "Move the parabola.": "Mova a parábola.", 
    "Hide List": "Esconder lista", 
    "Y-Axis": "Eixo-Y", 
    "Save (ctrl+s)": "Guardar (Ctrl+S)", 
    "You're a table wizard!": "Está um mestre de tabelas!", 
    "Share Graph": "Partilhar gráfico", 
    "Sign In with Your Google Account": "Entrar com a sua conta do Google", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Apenas suportamos duplas inequações resolvidas. Tente apagar um dos lados da desigualdade.", 
    "Help": "Ajuda", 
    "Click here to make a new blank expression.": "Clique aqui para fazer uma nova expressão em branco.", 
    "Last trick!": "Último truque!", 
    "Send Feedback": "Enviar feedback", 
    "search by title...": "pesquisar por título...", 
    "Share this link:": "Partilhe este link:", 
    "Please enter your feedback.": "Por favor introduza o seu feedback.", 
    "loading graphs...": "a carregar gráficos...", 
    "functions": "funções", 
    "Mar": "Mar", 
    "Table created.": "Tabela criada.", 
    "Language": "Língua", 
    "No Unsaved Changes": "Não existem alterações não guardadas", 
    "May": "Mai", 
    "message sent": "mensagem enviada", 
    "Save As or Rename (ctrl+shift+s)": "Guardar como ou mudar o nome (Ctrl+Shift+S)", 
    "Awesome!": "Fantástico!", 
    "Sign Out": "Sair", 
    "Click back to continue editing.": "Clique em voltar para continuar a editar.", 
    "Just fill in one more...": "Preencha só mais uma...", 
    "Learn More": "Saiba mais", 
    "Use your Email Address": "Use o seu endereço de e-mail", 
    "to save and share your graphs!": "para guardar e partilhar os seus gráficos!", 
    "Name:": "Nome:", 
    "Add Item": "Adicionar item", 
    "Click to show the list of expressions.": "Clique para mostrar a lista de expressões.", 
    "Graph Paper": "Papel milimétrico", 
    "Invalid y coordinate.": "Coordenada y inválida.", 
    "Graph Settings": "Definições do gráfico", 
    "yesterday": "ontem", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "O Desmos está em modo de visualização, pelo que não é possível guardar gráficos.", 
    "add slider:": "adicionar cursor:", 
    "Please provide an email so that we can write back.": "Por favor forneça um e-mail para que possamos escrever-lhe de volta.", 
    "Opened '__graphTitle__'": "'__graphTitle__' aberto", 
    "Save Changes (ctrl+s)": "Guardar alterações (Ctrl+S)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Ao clicar em \"__btn__\", reconhece que leu e aceita os nossos __terms_of_use_link__.", 
    "HTML Embed Code": "Código HTML para embed", 
    "Arrows:": "Setas:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Dica: pode escrever y=x^2, ou usar o botão a<sup>2</sup> no teclado abaixo.", 
    "size:": "tamanho:", 
    "Sign In with Desmos": "Entrar com o Desmos", 
    "one minute ago": "há um minuto atrás", 
    "Password:": "Palavra-passe:", 
    "or": "ou", 
    "We only support implicit equations of x and y.": "Apenas equações implícitas de x e y são suportadas.", 
    "Message sent. Please check your email for a password recovery link.": "Mensagem enviada. Por favor verifique que recebeu no seu e-mail um link para recuperar a palavra-passe.", 
    "Email:": "E-mail:", 
    "enter": "enter", 
    "center:": "centro:", 
    "Let's make some sliders!": "Vamos criar alguns cursores!", 
    "Go down to the next row to add more data.": "Vá para a próxima linha para adicionar mais dados.", 
    "Let's make a function. First: click here to create a new blank expression.": "Vamos fazer uma função. Primeiro: clique aqui para criar uma nova expressão em branco.", 
    "yeah!": "yeah!"
},"no":{
    "Login window blocked. Please allow popups from desmos.com to sign in with Google.": "Loginn vindu blokkeres. Gi tillatelse for popup-vinduer fra desmos.com å logge inn med Google.", 
    "all": "alt", 
    "Square Grid": "Kvadratisk rutenett", 
    "style:": "stil:", 
    "Jan": "Jan", 
    "Try adding an equals sign to turn this into an equation.": "Prøv å legg til et likhetstegn for å få laget en likning.", 
    "Please enter your email address. We will send a password recovery link to you.": "Skriv inn din epost adress. Vi skal sende en gjenopprettelseslenke for passord til deg.", 
    "Undo (ctrl+z)": "Gjør om (ctrl+z)", 
    "Update Password": "Oppdater passord", 
    "Share your graph with the world!": "Del dine grafer med resten av verden!", 
    "Oct": "Okt", 
    "Sign In with Google": "Logg inn med Google", 
    "We don't solve complicated single-variable equations yet.": "Vi løser sålangt ikke de mer kompliserte likninger med en variabel.", 
    "__number__ hours ago": "__number__ timer siden", 
    "Click and hold on this icon until the options menu opens up.": "Klikk og hold nede på ikonet til alternativ menyen åpnes.", 
    "Undo": "Gjør om", 
    "Untitled Graph": "Graf uten navn", 
    "Nice!": "Flott!", 
    "... and select the \"table\" option.": "... og velg alternativet \"table\".", 
    "Remembered your password?": "Husket du ditt passord?", 
    "Grid": "Rutenett", 
    "Go \"Hands-free\"": "Gå over til \"Hands-free\"", 
    "We can only plot inequalities when one variable is quadratic or linear.": "Vi kan kun plotte ulikheter når en variabel er kvadratisk eller lineær.", 
    "step:": "trinn:", 
    "Tweet @desmos": "Tweet @desmos", 
    "Angles": "Vinkler", 
    "This message will self-destruct in __seconds__...": "Denne meldingen slettes om __seconds__...", 
    "X-Axis": "X-akse", 
    "Radians": "Radianer", 
    "New graph created.": "Ny graf er blitt laget.", 
    "Uh-oh! Type a valid number here.": "Oops! Skriv inn gyldig tall her.", 
    "example": "eksempel", 
    "Link to your Google Account": "Lenk til din Google konto", 
    "Embed": "Sett inn en kopi (embed)", 
    "color:": "farge:", 
    "Click to return to your expressions.": "Klikk for å komme tilbake til dine uttrykk.", 
    "A B C": "A B C", 
    "You did not select a file": "Du valgte ingen fil", 
    "Click to return to this graph.": "Klikk for å komme tilbake til denne grafen.", 
    "Your Name:": "Ditt navn:", 
    "Update Account": "Oppdater konto", 
    "Duplicate": "Dupliser", 
    "Current Password:": "Nåværende passord:", 
    "Now click here to add the sliders.": "Klikk her for å legge til en skyveknapp.", 
    "Press play to animate the slider.": "Trykk spill av for å animere skyveknappen.", 
    "Click here to add a new item.": "Klikke her for å legge til et element.", 
    "Don't forget the \"y=\"!": "Ikke utelat \"y=\"!", 
    "Fill in this whole row.": "Fyll inn hele denne raden.", 
    "Invalid width.": "Ugyldig verdi for bredde.", 
    "Invalid x coordinate.": "Ugyldig x-koordinat.", 
    "Create Account": "Lag brukerkonto", 
    "Tables": "Tabell", 
    "what's this?": "hva er dette?", 
    "Let's get started!": "La oss begynne!", 
    "This is the name we'll use if we feature one of your graphs.": "Dette er navnet vi kommer til å bruke hvis vi fronter en av dine grafer.", 
    "Convert this to a table.": "Konverter dette til en tabell.", 
    "Send": "Send", 
    "Sliders": "Skyveknapp", 
    "Change this equation to __sample_expression__": "Endre likningen til __sample_expression__", 
    "Click anywhere to close the drawing options.": "Klikk et valgfritt sted for å lukke tegning alternativer.", 
    "Print": "Skriv ut", 
    "Move right to add a new column.": "Gå til høyre for å lage en ny kolonne.", 
    "Email": "Epost", 
    "saved": "lagret", 
    "Brilliant!": "Brilliant!", 
    "Now graph: __sample_expression__": "Denne grafen: __sample_expression__", 
    "Repeat Password:": "Gjenta passord:", 
    "Are you sure you want to leave this graph? Your unsaved work will be lost.": "Sikker på at du vil forlate grafen? Ulagrete endringer går tapt.", 
    "Try graphing a straight line, like __sample_expression__": "Prøv å lage en graf av en rett linje, som __sample_expression__", 
    "__number__ minutes ago": "for __number__ minutes siden", 
    "Type any number here.": "Skriv et tall her.", 
    "Resources": "Ressurser", 
    "Advanced Tables": "Avanserte tabeller", 
    "Invalid height.": "Ugyldig verdi for høyde.", 
    "Title:": "Tittel:", 
    "sending...": "sender...", 
    "New Password:": "Nytt passord:", 
    "We only plot inequalities of x and y, or r and θ.": "Vi plotter ulikheter av x og y, eller r og θ.", 
    "Click here to generate a table.": "Klikk her for å lage en tabell.", 
    "Share your thoughts!": "Del noe med andre!", 
    "Click here to connect the dots.": "Klikk her for å lage linje mellom punktene.", 
    "Click here to create a new expression.": "Klikk her for å lage et nytt uttrykk.", 
    "Didn't work? Try again!": "Fungerte ikke? Prøv igjen!", 
    "last week": "siste uken", 
    "We'll never share or sell your email address.": "Vi kommer aldre til å dele eller selge din epost adresse.", 
    "Fill it in.": "Fyll inn.", 
    "Sign In": "Logg inn", 
    "Show List": "Vis liste", 
    "optional": "valgfritt", 
    "Delete": "Slett", 
    "Something went wrong, please report this to desmos.com support. (Error __error_num__)": "Noe gikk galt, send feilmelding til desmos.com support. (Error __error_num__)", 
    "Delete All": "Slett alt", 
    "Try typing __sample_expression__": "Prøv å skriv __sample_expression__", 
    "Apr": "Apr", 
    "Image": "Bilde", 
    "__number__ weeks ago": "for __number__ weeks siden", 
    "no, thanks": "nei, takk", 
    "Now try pressing Enter.": "Prøv nå å trykke på Enter.", 
    "Recover Password": "Gjenopprette passord", 
    "Want us to consider featuring it?": "Vil du at vi skal vurdere din graf for framvisning til andre?", 
    "folder": "mappe", 
    "Tours": "Demorunde", 
    "Open Graph": "Åpne graf", 
    "type your question or suggestion...": "Skriv ditt spørsmål eller anbefaling...", 
    "Drop Image Here": "Dropp bildet her", 
    "Terms of Use": "Bruksbetingelser", 
    "Show Keypad": "Vis tastatur", 
    "expression": "uttrykk", 
    "Drag the handle to change the value.": "Trekk i spaken for å endre verdien.", 
    "Does not compute to constant.": "Evalueres ikke til en konstant.", 
    "New Blank Graph": "Ny tom graf", 
    "Feb": "Feb", 
    "BBCode": "BBCode", 
    "Aug": "Aug", 
    "This graph has been deleted.": "Denne grafen ble slettet.", 
    "Restrict the domain of this line by adding __sample_expression__ to the end.": "Snevre inn verdiområdet for denne linjen ved å legge til __sample_expression__ på slutten.", 
    "image": "bilde", 
    "Projector Mode": "Visnings modus", 
    "Send a Copy to Google Drive": "Send en kopi til Google Drive", 
    "just now": "akkurat nå", 
    "Open Graph (ctrl+o)": "Åpne grafen (Ctrl+o)", 
    "Link to Google": "Lenk til Google", 
    "Click here to create a new blank expression.": "Klikk her for å lage et nytt og tomt uttrykk.", 
    "Show Grid Angles": "Vis rutenett vinkler", 
    "Degrees": "Grader", 
    "Now let's restrict the range. Add __sample_expression__ to the end.": "La oss nå snevre inn verdiområdet. Legg til __sample_expression__ på slutten.", 
    "You're a scatter plot whiz!": "Du er en spredningsplott nerd :) !", 
    "Desmos is in Maintenance Mode.": "Desmos er i modus \"Under arbeid\".", 
    "table": "tabell", 
    "loading...": "laster ned...", 
    "Forgot your password?": "Har du glemt ditt passord?", 
    "The file \"__file__\" is not an image": "Filen \"__file__\" er ikke noe bilde", 
    "add label": "legg til navneetikett", 
    "one hour ago": "for en time siden", 
    "Start by graphing a function.": "Begynn med en graf av en funksjon.", 
    "You're a slider pro!": "Du er en skyveknapp proff!", 
    "Jun": "Jun", 
    "You're a restrictions star!": "Du er flink med begrensninger av området!", 
    "Jul": "Jul", 
    "Let's make a scatter plot!": "Lag en spredningsplott! (diagram med punkter!)", 
    "Edit List": "Editer liste", 
    "Edit Account": "Editer brukerkonto", 
    "more": "mer", 
    "Function '__dependency__' is not defined.": "Funskjonen '__dependency__' er ikke definert.", 
    "Restrictions": "Begrensninger", 
    "Click here to continue editing this table.": "Klikk her for å fortsette å arbeide med denne tabellen.", 
    "Click here to only show the dots.": "Klikk her for å vise kun punkter.", 
    "Click the \"Edit List\" button.": "Klikk på knappen \"Edit list\".", 
    "Sign in": "Logg inn", 
    "Sorry, we didn't find any graphs with that title.": "Beklager, vi kunne ikke finne noen grafer med denne tittelen.", 
    "Hide Keypad": "Skjul tastatur", 
    "Try typing all of __sample_expression__": "Prøv å skriv hele __sample_expression__", 
    "Dec": "Des", 
    "Nov": "Nov", 
    "Message: <i>(optional)</i>": "Melding: <i>(valgfritt)</i>", 
    "Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.": "Desmos er for øyeblikket i modus \"Under arbeid\". Du kan åpne eksempelgrafer, men du vil ikke kunne logge deg inn, heller ikke åpne dine egne grafer eller lagre endringer. Vi beklager eventuelle ulemper.", 
    "Nice Graph!": "Pen graf!", 
    "Thanks for the feedback &ndash; you'll hear from us soon!": "Takk for tilbakemeldingen feedback &ndash; du vil snart høre fra oss!", 
    "Feedback": "Feedback", 
    "Sep": "Sep", 
    "Convert to Table": "Konverter til tabell", 
    "Redo (ctrl+y)": "Gjør igjen (ctrl+y)", 
    "Variable '__dependency__' can't be used as a function.": "Variabel '__dependency__' kan ikke bli brukt som funksjon.", 
    "__number__ days ago": "for __number__ days siden", 
    "Tell us on Facebook": "Facebook", 
    "Desmos is in maintenance mode, you won't be able to save changes to this graph. We're so sorry for the inconvenience!": "Desmos er i modus \"Under arbeid\", du kan ikke lagre endringer av denne grafen. Vi beklager eventuelle ulemper!", 
    "Desmos User Guide": "Desmos brukermanual", 
    "Done": "Ferdig", 
    "Desmos Graphing Calculator": "Desmos Graftegner Kalkulator", 
    "Cancel": "Avbryt", 
    "Step:": "Trinn:", 
    "Send to:": "Send til:", 
    "on __month__ __day__, __year__": "den __month__ __day__, __year__", 
    "Show Numbers": "Vis tallene", 
    "Move the parabola.": "Flytt på parabelen.", 
    "Hide List": "Skjul liste", 
    "Y-Axis": "Y-akse", 
    "Save (ctrl+s)": "Lagre (ctrl+s)", 
    "You're a table wizard!": "Du er en konge med tabeller!", 
    "Share Graph": "Del graf", 
    "Sign In with Your Google Account": "Logg inn med din Google konto", 
    "We only support solved double inequalities. Try deleting one side of the inequality.": "Vi støtter kun løste doble ulikheter. Prøv å fjerne en side av ulikheten.", 
    "Help": "Hjelp", 
    "Click here to make a new blank expression.": "Klikk her for å lage et nytt og tomt uttrykk.", 
    "Last trick!": "Siste triks!", 
    "Send Feedback": "Send din tilbakemelding", 
    "search by title...": "søk med tittel...", 
    "Share this link:": "Del denne lenken:", 
    "Please enter your feedback.": "Vennligst gi din tilbakemelding.", 
    "loading graphs...": "laster ned grafer...", 
    "functions": "funksjoner", 
    "Mar": "Mar", 
    "Table created.": "Tabell er opprettet.", 
    "Language": "Språk", 
    "No Unsaved Changes": "Ingen ulagrete endringer", 
    "May": "Mai", 
    "message sent": "melding sent", 
    "Save As or Rename (ctrl+shift+s)": "Lagre som eller endre navn (ctrl+shift+s)", 
    "Awesome!": "Fanatastisk bra!", 
    "Sign Out": "Logg ut", 
    "Click back to continue editing.": "Klikk tilbake for å fortsette å editere.", 
    "Just fill in one more...": "Fyll inn en til...", 
    "Learn More": "For mer info", 
    "Use your Email Address": "Bruk din epost adresse", 
    "to save and share your graphs!": "å lagre og dele dine grafer!", 
    "Name:": "Navn:", 
    "Add Item": "Legg til element", 
    "Click to show the list of expressions.": "Klikk for å vise listen over uttrykk.", 
    "Graph Paper": "Grafpapir", 
    "Invalid y coordinate.": "Ugyldig y-koordinat.", 
    "Graph Settings": "Graf innstillinger", 
    "yesterday": "i går", 
    "Desmos is in preview mode, so you won't be able to save graphs.": "Desmos er i preview modus, derfor kan du ikke lagre grafer.", 
    "add slider:": "Legg til skyveknapp:", 
    "Please provide an email so that we can write back.": "Gi oss gjerne din epost, slik at vi kan gi deg et svar.", 
    "Opened '__graphTitle__'": "Åpnet '__graphTitle__'", 
    "Save Changes (ctrl+s)": "Lagre (ctrl+s)", 
    "By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.": "Ved å klikke på \"__btn__,\" aksepterer du at du har lest og godtatt våre __terms_of_use_link__.", 
    "HTML Embed Code": "HTML Embed kode", 
    "Arrows:": "Piler:", 
    "Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.": "Hint: du kan skrive y=x^2, eller bruke tast a<sup>2</sup> på tastaturet nedenfor.", 
    "size:": "størrelse:", 
    "Sign In with Desmos": "Logg inn med Desmos", 
    "one minute ago": "for ett minutt siden", 
    "Password:": "Passord:", 
    "or": "eller", 
    "We only support implicit equations of x and y.": "Vi støtter kun implisitte funksjoner av x og y.", 
    "Message sent. Please check your email for a password recovery link.": "Melding sent. Sjekk gjerne din epost for å finne gjenopprettelseslenke for passordet.", 
    "Email:": "Epost:", 
    "enter": "skriv inn", 
    "center:": "senter:", 
    "Let's make some sliders!": "La oss lage noen skyveknapper!", 
    "Go down to the next row to add more data.": "Gå ned en rad for å legge inn flere data.", 
    "Let's make a function. First: click here to create a new blank expression.": "La oss lage en funksjon. Først: klikk her for å lage et nytt og tomt uttrykk.", 
    "yeah!": "jada!"
},"hi":{}}; });
define('i18n',['require','config','main/cookie','locales/all','underscore'],function (require) {
  var Config = require('config');
  var Cookie = require('main/cookie');
  var locales = require('locales/all');
  var _ = require('underscore');
  var default_lang = '';
  var language_dict = {};

  //this is a list of enabled languages -- i.e. ones that show up in the language dropdown
  //languages not on this list can still be accessed through the query parameter, but not
  //through the cookie or the browser preferences
  var enabled_languages = {
    'en': {
      displayName: 'English (US)',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'en-GB': {
      displayName: 'English (GB)',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'es-ES': {
      displayName: 'Español (España)',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_ES-ES.pdf',
      useAsRoot: true
    },
    'ru': {
      displayName: 'Русский',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_RU.pdf'
    },
    'de': {
      displayName: 'Deutsch',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_DE.pdf'
    },
    'pt-BR': {
      displayName: 'Português (Brasil)',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'pt-PT': {
      displayName: 'Português (Portugal)',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'ca': {
      displayName: 'Català',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'fr': {
      displayName: 'Français',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_FR.pdf'
    },
    'it': {
      displayName: 'Italiano',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_IT.pdf'
    },
    'nl': {
      displayName: 'Nederlands',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'no': {
      displayName: 'Norsk',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'sv-SE': {
      displayName: 'Svenska',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'hr': {
      displayName: 'Hrvatski',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'da': {
      displayName: 'Dansk',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'cs': {
      displayName: 'Čeština',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'tr': {
      displayName: 'Türkçe',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_TR.pdf'
    },
    'sl': {
      displayName: 'Slovenščina',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_SL.pdf'
    },
    'lt': {
      displayName: 'Lietuvių',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'pl': {
      displayName: 'Polski',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_PL.pdf'
    },
    'ro': {
      displayName: 'Română',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'id': {
      displayName: 'Bahasa Indonesia',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'vi': {
      displayName: 'Tiếng Việt',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_VI.pdf'
    },
    'el': {
      displayName: 'Ελληνικά',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_EL.pdf'
    },
    'sr-CS': {
      displayName: 'SRPSKI',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'bg': {
      displayName: 'Български',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_BG.pdf'
    },
    'mk': {
      displayName: 'Македонски',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'uk': {
      displayName: 'Українська',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'th': {
      displayName: 'ภาษาไทย',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'zh-CN': {
      displayName: '简体中文',
      useAsRoot: true,
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_ZH-CN.pdf'
    },
    'zh-TW': {
      displayName: '繁體中文',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide_ZH-TW.pdf'
    },
    'ko': {
      displayName: '한국어',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    },
    'ja': {
      displayName: '日本語',
      userGuideURL: 'https://desmos.s3.amazonaws.com/Desmos_User_Guide.pdf'
    }
  };

  function init (lang, dict) {
    default_lang = lang || '';
    language_dict = dict || {};
  }

  function translateString (message, variables) {
    var translation = language_dict[default_lang] && language_dict[default_lang][message] || message || '';

    for (var variable in variables) {
      if (variables.hasOwnProperty(variable)) {
        translation = translation.split('__' + variable + '__').join(variables[variable]);
      }
    }

    return translation;
  }

  //this function looks through users preferences to determine what language to show
  //order is:
  //  Config (i.e. query parameter): this doesn't require the lanague to be enabled
  //  Cookie: this *does* require that the language is enabled
  //  Browser settings: does require enabled
  //  Truncated version of browser setting: does require enabled
  //
  //If none of those works, we fall back to 'en' (which is actually ignored by our i18n_dict)
  function detectLanguage() {
    if (Config.get('lang')) {
      return Config.get('lang');
    }

    var preferences = [Cookie.getCookie('lang')];

    //auto detect locales
    if(!Config.get('disablelocale')){
      var browserLocale;
      if (navigator.userLanguage) {
        browserLocale = navigator.userLanguage;
      } else {
        browserLocale = navigator.language;
      }

      var baseLocale = browserLocale.split('-')[0];
      //first choice: exact dialect
      preferences.push(browserLocale);
      //second choice: root level locale
      preferences.push(baseLocale);
      //third choice: dialect that shares the root and has useAsRoot: true
      _.each(enabled_languages, function(lang, code) {
        if (
          code.split('-')[0] === baseLocale &&
          lang.useAsRoot
        ) preferences.push(code);
      });
    }

    for (var i = 0 ; i < preferences.length ; i++) {
      var lang = preferences[i];
      if (enabled_languages.hasOwnProperty(lang)) return lang;
    }
    return 'en';
  }

  function currentLanguage() {
    return default_lang;
  }

  //when we want to send translatable strings out from the worker, we JSON.stringify
  //{msg: message, vars: variables}.
  //unpack that all here.
  var unpack = function(str) {
    //numbers are JSON.parse-able, so catch this situation and return early.
    //can arise when this is called recursively from an unpack
    if (typeof(str) === 'number') return str;

    var returnVal;
    try {
      var data = JSON.parse(str);
      //elements of data.vars could also be i18n strings. recursively unpack.
      for (var key in data.vars) {
        data.vars[key] = unpack(data.vars[key]);
      }
      returnVal = translateString(data.msg, data.vars);
    } catch (ex) {
      //we sometimes just send back non-json-encoded strings (i.e. if we don't need to interpolate)
      returnVal = translateString(str);
    }
    return returnVal;
  };


  // automatically initialize i18n module
  //
  // Tests can call this again to change
  // language. We need to init ASAP so that
  // translations work immediately after
  // loading the i18n module.
  init(detectLanguage(), locales);

  return {
    init: init,
    t: translateString,
    detectLanguage: detectLanguage,
    currentLanguage: currentLanguage,
    enabled_languages: enabled_languages,
    unpack: unpack
  };
});

/*!
 * jQuery-ajaxTransport-XDomainRequest - v1.0.4 - 2015-03-05
 * https://github.com/MoonScript/jQuery-ajaxTransport-XDomainRequest
 * Copyright (c) 2015 Jason Moon (@JSONMOON)
 * Licensed MIT (/blob/master/LICENSE.txt)
 */
(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as anonymous module.
    define('vendor/jQuery.XDomainRequest',['jquery'], factory);
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals.
    factory(jQuery);
  }
}(function($) {

// Only continue if we're on IE8/IE9 with jQuery 1.5+ (contains the ajaxTransport function)
if ($.support.cors || !$.ajaxTransport || !window.XDomainRequest) {
  return $;
}

var httpRegEx = /^(https?:)?\/\//i;
var getOrPostRegEx = /^get|post$/i;
var sameSchemeRegEx = new RegExp('^(\/\/|' + location.protocol + ')', 'i');

// ajaxTransport exists in jQuery 1.5+
$.ajaxTransport('* text html xml json', function(options, userOptions, jqXHR) {

  // Only continue if the request is: asynchronous, uses GET or POST method, has HTTP or HTTPS protocol, and has the same scheme as the calling page
  if (!options.crossDomain || !options.async || !getOrPostRegEx.test(options.type) || !httpRegEx.test(options.url) || !sameSchemeRegEx.test(options.url)) {
    return;
  }

  var xdr = null;

  return {
    send: function(headers, complete) {
      var postData = '';
      var userType = (userOptions.dataType || '').toLowerCase();

      xdr = new XDomainRequest();
      if (/^\d+$/.test(userOptions.timeout)) {
        xdr.timeout = userOptions.timeout;
      }

      xdr.ontimeout = function() {
        complete(500, 'timeout');
      };

      xdr.onload = function() {
        var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
        var status = {
          code: 200,
          message: 'success'
        };
        var responses = {
          text: xdr.responseText
        };
        try {
          if (userType === 'html' || /text\/html/i.test(xdr.contentType)) {
            responses.html = xdr.responseText;
          } else if (userType === 'json' || (userType !== 'text' && /\/json/i.test(xdr.contentType))) {
            try {
              responses.json = $.parseJSON(xdr.responseText);
            } catch(e) {
              status.code = 500;
              status.message = 'parseerror';
              //throw 'Invalid JSON: ' + xdr.responseText;
            }
          } else if (userType === 'xml' || (userType !== 'text' && /\/xml/i.test(xdr.contentType))) {
            var doc = new ActiveXObject('Microsoft.XMLDOM');
            doc.async = false;
            try {
              doc.loadXML(xdr.responseText);
            } catch(e) {
              doc = undefined;
            }
            if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
              status.code = 500;
              status.message = 'parseerror';
              throw 'Invalid XML: ' + xdr.responseText;
            }
            responses.xml = doc;
          }
        } catch(parseMessage) {
          throw parseMessage;
        } finally {
          complete(status.code, status.message, responses, allResponseHeaders);
        }
      };

      // set an empty handler for 'onprogress' so requests don't get aborted
      xdr.onprogress = function(){};
      xdr.onerror = function() {
        complete(500, 'error', {
          text: xdr.responseText
        });
      };

      if (userOptions.data) {
        postData = ($.type(userOptions.data) === 'string') ? userOptions.data : $.param(userOptions.data);
      }
      xdr.open(options.type, options.url);
      xdr.send(postData);
    },
    abort: function() {
      if (xdr) {
        xdr.abort();
      }
    }
  };
});

return $;

}));

define('main/graph',['require','pjs','underscore_model','main/url_prefix','i18n','jquery','vendor/jQuery.XDomainRequest'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  var URL_PREFIX = require('main/url_prefix');
  var i18n = require('i18n');
  var $ = require('jquery');
  // Need this to allow IE9 to make cross domain requests to s3 in Graph.fetchData.
  // Can drop this lib if we drop support for IE9.
  require('vendor/jQuery.XDomainRequest');

  var Graph = P(UnderscoreModel, function (proto, _super) {

    var properties = [
      'title', 'thumbURL', 'stateURL', 'hash', 'parentHash', 'graphData', 'access', 'created'
    ];

    proto.init = function (obj) {
      _super.init.call(this);
      var self = this;
      this.observe('title', function () {
        self.displayTitle = self.title || '['+i18n.t('Untitled Graph')+']';
      });
      this.observe('created', this.updateDisplayDate.bind(this));
      this.observe('hash', function () {
        self.setProperty(
          'path',
          URL_PREFIX + (self.hash ? '/' + self.hash : '')
        );
      });

      if (obj) {
        properties.forEach(function (p) {
          if (obj.hasOwnProperty(p)) self.setProperty(p, obj[p]);
        });
      }
      if (!this.access) this.setProperty('access', 'all');
      if (!this.path) this.setProperty('path', URL_PREFIX);
      this.now = new Date();
    };

    proto.copy = function () {
      return Graph(this);
    };

    function computeDisplayDate (created) {
      var now = Date.now();
      var seconds = (now - created)/1000;
      var minutes = seconds/60;
      var hours = minutes/60;
      var days = hours/24;
      var weeks = days/7;
      var monthNames = [
        i18n.t('Jan'),
        i18n.t('Feb'),
        i18n.t('Mar'),
        i18n.t('Apr'),
        i18n.t('May'),
        i18n.t('Jun'),
        i18n.t('Jul'),
        i18n.t('Aug'),
        i18n.t('Sep'),
        i18n.t('Oct'),
        i18n.t('Nov'),
        i18n.t('Dec')
      ];

      if (weeks >= 5) {
        return i18n.t('on __month__ __day__, __year__', {
          month: monthNames[created.getMonth()],
          day: created.getDate(),
          year: created.getFullYear()
        });
      }
      if (weeks >= 2) return i18n.t('__number__ weeks ago', {number: String(Math.floor(weeks))});
      if (days >= 7) return i18n.t('last week');
      if (days >= 2) return i18n.t('__number__ days ago', {number: String(Math.floor(days))});
      if (hours >= 24) return i18n.t('yesterday');
      if (hours >= 2) return i18n.t('__number__ hours ago', {number: String(Math.floor(hours))});
      if (minutes >= 60) return i18n.t('one hour ago');
      if (minutes >= 2) return i18n.t('__number__ minutes ago', {number: String(Math.floor(minutes))});
      if (seconds >= 60) return i18n.t('one minute ago');
      return i18n.t('just now');
    }

    proto.updateDisplayDate = function () {
      this.displayDate = computeDisplayDate(this.created);
    };

    proto.plainObject = function () {
      var out = {};
      var self = this;
      properties.forEach(function (p) {
        out[p] = self[p];
      });
      return out;
    };

    proto.fetchData = function () {
      var d = $.Deferred();
      var self = this;
      if (self.graphData) {
        setTimeout(function () { d.resolve(self.graphData); }, 1);
      } else {
        // For the benefit of IE9's XDomainRequest restrictions, need to make
        // sure that we use the same scheme to request the graph state.
        var sameSchemeStateURL = (self.stateURL.slice(0, 6) === 'https:') ?
          window.location.protocol + self.stateURL.slice(6) :
          self.stateURL
        ;

        var request = $.getJSON(sameSchemeStateURL);

        // Cache graphData for future calls
        request.then(function (msg) { self.graphData = msg; });
        // Pass response through to returned promise
        request.then(d.resolve.bind(d), d.reject.bind(d));
      }
      return d.promise();
    };
  });

  Graph.fromAjax = function(obj) {
    return Graph({
      title: obj.title,
      thumbURL: obj.thumbUrl,
      stateURL: obj.stateUrl,
      graphData: obj.state,
      hash: obj.hash,
      parentHash: obj.parent_hash,
      access: obj.access,
      created: new Date(obj.created)
    });
  };

  Graph.updateFromSync = function (obj, resp) {
    obj.setProperty('title', resp.title);
    obj.setProperty('hash', resp.hash);
    obj.setProperty('parentHash', resp.parent_hash);
    obj.setProperty('graphData', obj.graphData);
    obj.setProperty('thumbURL', resp.thumbUrl);
    obj.setProperty('stateURL', resp.stateUrl);
    obj.setProperty('created', new Date(resp.created));
  };

  return Graph;
});

!function(a,b){function c(a,b){try{if("function"!=typeof a)return a;if(!a.bugsnag){var c=e();a.bugsnag=function(d){if(b&&b.eventHandler&&(u=d),v=c,!y){var e=a.apply(this,arguments);return v=null,e}try{return a.apply(this,arguments)}catch(f){throw l("autoNotify",!0)&&(x.notifyException(f,null,null,"error"),s()),f}finally{v=null}},a.bugsnag.bugsnag=a.bugsnag}return a.bugsnag}catch(d){return a}}function d(){B=!1}function e(){var a=document.currentScript||v;if(!a&&B){var b=document.scripts||document.getElementsByTagName("script");a=b[b.length-1]}return a}function f(a){var b=e();b&&(a.script={src:b.src,content:l("inlineScript",!0)?b.innerHTML:""})}function g(b){var c=a.console;void 0!==c&&void 0!==c.log&&c.log("[Bugsnag] "+b)}function h(b,c,d){if(d>=5)return encodeURIComponent(c)+"=[RECURSIVE]";d=d+1||1;try{if(a.Node&&b instanceof a.Node)return encodeURIComponent(c)+"="+encodeURIComponent(r(b));var e=[];for(var f in b)if(b.hasOwnProperty(f)&&null!=f&&null!=b[f]){var g=c?c+"["+f+"]":f,i=b[f];e.push("object"==typeof i?h(i,g,d):encodeURIComponent(g)+"="+encodeURIComponent(i))}return e.join("&")}catch(j){return encodeURIComponent(c)+"="+encodeURIComponent(""+j)}}function i(a,b){if(null==b)return a;a=a||{};for(var c in b)if(b.hasOwnProperty(c))try{a[c]=b[c].constructor===Object?i(a[c],b[c]):b[c]}catch(d){a[c]=b[c]}return a}function j(a,b){a+="?"+h(b)+"&ct=img&cb="+(new Date).getTime();var c=new Image;c.src=a}function k(a){for(var b={},c=/^data\-([\w\-]+)$/,d=a.attributes,e=0;e<d.length;e++){var f=d[e];if(c.test(f.nodeName)){var g=f.nodeName.match(c)[1];b[g]=f.value||f.nodeValue}}return b}function l(a,b){C=C||k(J);var c=void 0!==x[a]?x[a]:C[a.toLowerCase()];return"false"===c&&(c=!1),void 0!==c?c:b}function m(a){return null!=a&&a.match(D)?!0:(g("Invalid API key '"+a+"'"),!1)}function n(b,c){var d=l("apiKey");if(m(d)&&A){A-=1;var e=l("releaseStage"),f=l("notifyReleaseStages");if(f){for(var h=!1,k=0;k<f.length;k++)if(e===f[k]){h=!0;break}if(!h)return}var n=[b.name,b.message,b.stacktrace].join("|");if(n!==w){w=n,u&&(c=c||{},c["Last Event"]=q(u));var o={notifierVersion:H,apiKey:d,projectRoot:l("projectRoot")||a.location.protocol+"//"+a.location.host,context:l("context")||a.location.pathname,userId:l("userId"),user:l("user"),metaData:i(i({},l("metaData")),c),releaseStage:e,appVersion:l("appVersion"),url:a.location.href,userAgent:navigator.userAgent,language:navigator.language||navigator.userLanguage,severity:b.severity,name:b.name,message:b.message,stacktrace:b.stacktrace,file:b.file,lineNumber:b.lineNumber,columnNumber:b.columnNumber,payloadVersion:"2"},p=x.beforeNotify;if("function"==typeof p){var r=p(o,o.metaData);if(r===!1)return}return 0===o.lineNumber&&/Script error\.?/.test(o.message)?g("Ignoring cross-domain script error. See https://bugsnag.com/docs/notifiers/js/cors"):(j(l("endpoint")||G,o),void 0)}}}function o(){var a,b,c=10,d="[anonymous]";try{throw new Error("")}catch(e){a="<generated>\n",b=p(e)}if(!b){a="<generated-ie>\n";var f=[];try{for(var h=arguments.callee.caller.caller;h&&f.length<c;){var i=E.test(h.toString())?RegExp.$1||d:d;f.push(i),h=h.caller}}catch(j){g(j)}b=f.join("\n")}return a+b}function p(a){return a.stack||a.backtrace||a.stacktrace}function q(a){var b={millisecondsAgo:new Date-a.timeStamp,type:a.type,which:a.which,target:r(a.target)};return b}function r(a){if(a){var b=a.attributes;if(b){for(var c="<"+a.nodeName.toLowerCase(),d=0;d<b.length;d++)b[d].value&&"null"!=b[d].value.toString()&&(c+=" "+b[d].name+'="'+b[d].value+'"');return c+">"}return a.nodeName}}function s(){z+=1,a.setTimeout(function(){z-=1})}function t(a,b,c){var d=a[b],e=c(d);a[b]=e}var u,v,w,x={},y=!0,z=0,A=10;x.noConflict=function(){return a.Bugsnag=b,x},x.refresh=function(){A=10},x.notifyException=function(a,b,c,d){b&&"string"!=typeof b&&(c=b,b=void 0),c||(c={}),f(c),n({name:b||a.name,message:a.message||a.description,stacktrace:p(a)||o(),file:a.fileName||a.sourceURL,lineNumber:a.lineNumber||a.line,columnNumber:a.columnNumber?a.columnNumber+1:void 0,severity:d||"warning"},c)},x.notify=function(b,c,d,e){n({name:b,message:c,stacktrace:o(),file:a.location.toString(),lineNumber:1,severity:e||"warning"},d)};var B="complete"!==document.readyState;document.addEventListener?(document.addEventListener("DOMContentLoaded",d,!0),a.addEventListener("load",d,!0)):a.attachEvent("onload",d);var C,D=/^[0-9a-f]{32}$/i,E=/function\s*([\w\-$]+)?\s*\(/i,F="https://notify.bugsnag.com/",G=F+"js",H="2.4.6",I=document.getElementsByTagName("script"),J=I[I.length-1];if(a.atob){if(a.ErrorEvent)try{0===new a.ErrorEvent("test").colno&&(y=!1)}catch(K){}}else y=!1;if(l("autoNotify",!0)){t(a,"onerror",function(b){return function(c,d,e,g,h){var i=l("autoNotify",!0),j={};!g&&a.event&&(g=a.event.errorCharacter),f(j),v=null,i&&!z&&n({name:h&&h.name||"window.onerror",message:c,file:d,lineNumber:e,columnNumber:g,stacktrace:h&&p(h)||o(),severity:"error"},j),b&&b(c,d,e,g,h)}});var L=function(a){return function(b,d){if("function"==typeof b){b=c(b);var e=Array.prototype.slice.call(arguments,2);return a(function(){b.apply(this,e)},d)}return a(b,d)}};t(a,"setTimeout",L),t(a,"setInterval",L),a.requestAnimationFrame&&t(a,"requestAnimationFrame",function(a){return function(b){return a(c(b))}}),a.setImmediate&&t(a,"setImmediate",function(a){return function(){var b=Array.prototype.slice.call(arguments);return b[0]=c(b[0]),a.apply(this,b)}}),"EventTarget Window Node ApplicationCache AudioTrackList ChannelMergerNode CryptoOperation EventSource FileReader HTMLUnknownElement IDBDatabase IDBRequest IDBTransaction KeyOperation MediaController MessagePort ModalWindow Notification SVGElementInstance Screen TextTrack TextTrackCue TextTrackList WebSocket WebSocketWorker Worker XMLHttpRequest XMLHttpRequestEventTarget XMLHttpRequestUpload".replace(/\w+/g,function(b){var d=a[b]&&a[b].prototype;d&&d.hasOwnProperty&&d.hasOwnProperty("addEventListener")&&(t(d,"addEventListener",function(a){return function(b,d,e,f){return d&&d.handleEvent&&(d.handleEvent=c(d.handleEvent,{eventHandler:!0})),a.call(this,b,c(d,{eventHandler:!0}),e,f)}}),t(d,"removeEventListener",function(a){return function(b,d,e,f){return a.call(this,b,d,e,f),a.call(this,b,c(d),e,f)}}))})}a.Bugsnag=x,"function"==typeof define&&define.amd?define('bugsnag',[],function(){return x}):"object"==typeof module&&"object"==typeof module.exports&&(module.exports=x)}(window,window.Bugsnag);
Bugsnag.apiKey = "7f7807097671acbc4557e64bbf5eb529";

define('main/calculator_backend',['require','jquery','main/graph','config','bugsnag'],function(require){
  var $ = require('jquery');
  var Graph = require('main/graph');
  var Config = require('config');
  var Bugsnag = require('bugsnag');

  function uploadGraphToS3 (token, graphData) {
    var deferred = $.Deferred();

    var parts = [graphData];
    var myBlob = new Blob(parts, {type : 'application/json'});

    var f = new FormData();
    f.append('bucket', token.bucket);
    f.append('key', token.key);
    f.append('AWSAccessKeyId', token.accessKey);
    f.append('acl', 'public-read');
    f.append('Content-Type', 'application/json');
    f.append('Cache-Control', 'public, max-age=31400000');
    f.append('policy', token.policy);
    f.append('signature', token.signature);
    f.append('file', myBlob);

    // Note: can't use regular jQuery post here because it doesn't allow
    // file uploads
    var xhr = new XMLHttpRequest();

    var urlPrefix = 'https://' + token.bucket + '.s3.amazonaws.com/';
    var stateUrl = urlPrefix + token.key;
    xhr.onreadystatechange = function (ev) {
      if (xhr.readyState == 4) {
        if (200 <= xhr.status && xhr.status <= 300) {
          deferred.resolve(stateUrl);
        } else {
          deferred.reject(xhr);
        }
      }
    };

    xhr.open('POST', urlPrefix, true);
    xhr.send(f);
    return deferred.promise();
  }

  function identity (x) { return x; }

  function retryableUploadGraphToS3 (token, graphData) {
    // As of May 2015, we're seeing an approximate 2 percent failure rate on
    // these attempts to upload states to s3. Retry uploadGraphToS3 up to two
    // additional times, reporting each failure.

    var notifyFailure = function (xhr, attempt) {
      Bugsnag.notify(
        "s3uploadFailure",
        "Uploading graph to s3 failed.",
        {
          status: xhr.status,
          headers: xhr.getAllResponseHeaders(),
          responseText: xhr.responseText,
          attempt: attempt
        }
      );
    };

    return uploadGraphToS3(token, graphData).then(
      identity,
      function (xhr) {
        notifyFailure(xhr, 1);
        return uploadGraphToS3(token, graphData);
      }
    ).then(
      identity,
      function (xhr) {
        notifyFailure(xhr, 2);
        return uploadGraphToS3(token, graphData);
      }
    ).then(
      identity,
      function (xhr) {
        notifyFailure(xhr, 3);
        // Give up retrying, and pass through to caller's failure handling.
      }
    );
  }

  var calculatorBackend = {
    // Helper for saveGraph and shareGraph that lets them make different
    // decision about whether to add the graph to the list of the user's graphs.
    _saveGraph: function (graph, my_graphs) {
      //detect if we should push to drive
      var push_to_drive = ($('input[name="push_to_drive"]').prop("checked") ? "push_to_drive" : undefined);
      var access = ($('input[name="access"]').prop("checked") ? "all" : "link");
      var formData = {
        parent_hash: graph.parentHash,
        thumb_data: graph.thumbURL,
        graph_hash: graph.hash,
        version: 'h3',
        access: access,
        my_graphs: my_graphs,
        // Use all these undefineds so that the data doesn't go to the server
        // if it is blank or null.
        title: graph.title || undefined,
        push_to_drive: push_to_drive
      };

      // Old browsers (IE9) use legacy save method that will relay states
      // to s3 on their behalf
      if (
        (typeof FormData === 'undefined') ||
        (typeof Blob === 'undefined') ||
        !Config.get('s3upload')
      ) {
        formData.calc_state = graph.graphData;
        return $.post('/api/v1/calculator/save', formData)
          .then(
            function (resp) {
              Bugsnag.notify('SaveSuccess', 'Successful v1 save.');
              return resp;
            },
            function (jqxhr) {
              Bugsnag.notify(
                'SaveFailure',
                'Failed v1 save.',
                {
                  status: jqxhr.status,
                  headers: jqxhr.getAllResponseHeaders(),
                  responseText: jqxhr.responseText,
                }
              );
            }
          )
          .then(
            function (resp) {
              Graph.updateFromSync(graph, resp);
              return graph;
            }
          )
        ;
      }

      // Everyone else is in charge of posting their own state to s3
      return $.post('/api/v1/calculator/upload_token', { hash: graph.hash })
        .then(function (resp) {
          return retryableUploadGraphToS3(resp, graph.graphData);
        })
        .then(function (stateUrl) {
          formData.state_url = stateUrl;
          // Note api/v2 to distinguish from old save method that accepted the
          // full calc_state
          return $.post('/api/v2/calculator/save', formData);
        })
        .then(function (resp) {
          Graph.updateFromSync(graph, resp);
          return graph;
        })
      ;
    },

    saveGraph: function (graph) {
      return this._saveGraph(graph, true);
    },

    shareGraph: function (graph) {
      return this._saveGraph(graph, false);
    },

    emailGraph: function (data) {
      return $.post('/api/v1/calculator/email_graph', data);
    },

    emailFeedback: function (data) {
      return $.post('/api/v1/calculator/email_feedback', data);
    },

    allowFeature: function (data) {
      return $.post('/api/v1/calculator/allow_feature', data);
    },

    getGraphs: function () {
      return $.getJSON('/api/v1/calculator/my_graphs');
    },

    removeGraph: function (graph) {
      return $.post('/api/v1/calculator/my_graphs/remove', {
        hash: graph.hash
      });
    },
  };

  return calculatorBackend;
});

define('main/parse_json_errors',['require','jquery'],function(require){
  var $ = require('jquery');
  var parseJSONErrors = function(jqXHR) {
    try {
      return $.parseJSON(jqXHR.responseText).errors;
    } catch(err) {
      return [{message: 'Internal Server Error.'}];
    }
  };
  return parseJSONErrors;
});
// RandomHashFactory takes a seed, and constructs an object with a .next()
// method that returns random 10 character alphanumeric strings. The seed is
// designed to be a hex string representing a 128 bit random UUID, but is
// allowed to be any non-empty string.
//
// Usage:
// > randomHashFactory = new Desmos.RandomHashFactory('570a95d1f9a6455ab4b9c76bbd2509b6')
// > randomHashFactory.next()
// 'medjqzoa4t'
// > randomHashFactory.next()
// 'phgn5qzrm0'
//
// Implementation Notes:
// Behind the scenes, uses an ARC4 implementation by David Bau.
// http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html
// http://davidbau.com/encode/seedrandom.js

define('lib/random_hash',['require','exports','module'],function(require, exports){
  /* jshint bitwise: false */

  // ARC4 wraps BauARC4 (taken from seedrandom.js) to make an object that
  // takes a string seed instead of a key as a constructor, and returns an
  // array of integers between 0 and 255 instead of a large integer.
  //
  // The seed is designed to be the hex representation of a 128 bit random
  // UUID, but is allowed to be any string.
  //
  // Usage:
  // var arc4 = new ARC4('this is a seed')
  // arc4.g(4) // returns an array of 4 integers between 0 and 256
  function ARC4(seed) {
    this.bauArc4 = new BauARC4(toKey(seed));
  }

  ARC4.prototype.g = function(count) {
    var digits = Array(count);
    for (var i = 0; i < count; i++) {
      digits[i] = this.bauArc4.g(1);
    }
    return digits;
  };

  // Helpers used by ARC4
  var width = 256;
  function lowbits(n) { return n & (width - 1); }

  //
  // tokey()
  // Converts a string seed into a key that is an array of integers
  function toKey(seed) {
    var stringSeed = seed + ''; // Ensure the seed is a string
    var key = [];
    var smear = 0;
    var j;
    for (j = 0; j < stringSeed.length; j++) {
      key[lowbits(j)] =
        lowbits((smear ^= key[lowbits(j)] * 19) + stringSeed.charCodeAt(j));
    }
    return key;
  }

  // BauARC4, cribbed from http://davidbau.com/encode/seedrandom.js
  //
  // An ARC4 implementation.  The constructor takes a key in the form of
  // an array of at most (width) integers that should be 0 <= x < (width).
  //
  // The g(count) method returns a pseudorandom integer that concatenates
  // the next (count) outputs from ARC4.  Its return value is a number x
  // that is in the range 0 <= x < (width ^ count).
  //
  /** @constructor */
  function BauARC4(key) {
    var t, u, me = this, keylen = key.length;
    var i = 0, j = me.i = me.j = me.m = 0;
    me.S = [];
    me.c = [];

    // The empty key [] is treated as [0].
    if (!keylen) { key = [keylen++]; }

    // Set up S using the standard key scheduling algorithm.
    while (i < width) { me.S[i] = i++; }
    for (i = 0; i < width; i++) {
      t = me.S[i];
      j = lowbits(j + t + key[i % keylen]);
      u = me.S[j];
      me.S[i] = u;
      me.S[j] = t;
    }

    // The "g" method returns the next (count) outputs as one number.
    me.g = function getnext(count) {
      var s = me.S;
      var i = lowbits(me.i + 1); var t = s[i];
      var j = lowbits(me.j + t); var u = s[j];
      s[i] = u;
      s[j] = t;
      var r = s[lowbits(t + u)];
      while (--count) {
        i = lowbits(i + 1); t = s[i];
        j = lowbits(j + t); u = s[j];
        s[i] = u;
        s[j] = t;
        r = r * width + s[lowbits(t + u)];
      }
      me.i = i;
      me.j = j;
      return r;
    };
    // For robust unpredictability discard an initial batch of values.
    // See http://www.rsa.com/rsalabs/node.asp?id=2009
    me.g(width);
  }

  // We're using a somewhat odd distribution of random hashes, but this
  // follows existing server side behavior. Draw characters from downcased
  // alphanumeric set. Weights each alphabetical character twice as heavily as
  // each digit.
  var upperLowerDigits =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var codex = upperLowerDigits.toLowerCase();
  // Hardcoded because the below algorithm relies on this number not changing.
  var codexLength = 62;

  var nchars = 10;
  var RandomHashFactory = function(seed) {
    if (!seed) throw 'You must supply a seed to RandomHashFactory. It should have at least 128 bits of entropy.';

    var arc4 = new ARC4(seed);

    this.next = function () {
      var chars = Array(nchars);
      var n = 0;
      var trialIndex;

      // Rejection sampling. Want uniform samples between 0 and 61, the
      // valid indices into our codex. arc4 returns integers between 0 and
      // 255, so we shift two bits off them to get integers between 0 and 63,
      // and then reject the samples larger than 61.
      while (n < nchars) {
        trialIndex = arc4.g(1)[0] >> 2;
        if (trialIndex < codexLength) {
          chars[n] = codex[trialIndex];
          n++;
        }
      }
      return chars.join("");
    };

    // Return a new random 128-bit hex value
    this.nextSeed = function () {
      var nbytes = 16;
      var bytes = arc4.g(nbytes);
      var hexCodes = Array(nbytes);
      for (var i=0; i < nbytes; i++) {
        hexCodes[i] = bytes[i].toString(16);
        // Pad each byte representation to 2 hex characters
        if (hexCodes[i].length === 1) {
          hexCodes[i] = "0" + hexCodes[i];
        }
      }
      return hexCodes.join("");
    };
  };

  var factory;

  exports.next = function(){
    if(!factory) throw "Random Hash Factory not initialized";
    return factory.next();
  };

  exports.nextSeed = function(){
    if(!factory) throw "Random Hash Factory not initialized";
    return factory.nextSeed();
  };

  exports.init = function(seed){
    factory = new RandomHashFactory(seed);
  };

  return exports;
});

define('main/graphs_controller',['require','underscore','pjs','main/graph','main/calculator_backend','main/parse_json_errors','underscore_model','i18n','lib/random_hash'],function(require){
  var _ = require('underscore');
  var P = require('pjs');
  var Graph = require('main/graph');
  var calculatorBackend = require('main/calculator_backend');
  var parseJSONErrors = require('main/parse_json_errors');
  var UnderscoreModel = require('underscore_model');
  var i18n = require('i18n');
  var randomHash = require('lib/random_hash');

  var GraphsController = P(UnderscoreModel, function (proto, _super) {

    proto.init = function (Calc, randomSeed) {
      _super.init.call(this);

      this.observe('currentGraph', this.onCurrentGraphChange.bind(this));

      this.Calc = Calc;
      this.content = [];
      this.undoRedo = Calc._calc.undoRedo;

      this.startSavingCallbacks = [];
      this.saveSuccessCallbacks = [];
      this.saveErrorCallbacks = [];
      this.driveAccessErrorCallbacks = [];
      this.startUpdatingGraphsCallbacks = [];
      this.updateGraphsSuccessCallbacks = [];
      this.updateGraphsErrorCallbacks = [];
      this.graphAddedCallbacks = [];
      this.clearCallbacks = [];
      this.graphRemovedCallbacks = [];
      this.randomHash = randomHash;
      this.seedRandom(randomSeed);
      this.__visitedGraphs = {};
    };

    proto.seedRandom = function (seed) {
      if (!seed) {
        alert(i18n.t(
          "Something went wrong, please report this to desmos.com support. (Error __error_num__)",
          {error_num: '77361'}
        ));
        return;
      }

      var d = new Date();
      var augmentedSeed = '' + seed + d.getTime() + d.getMilliseconds();
      this.randomHash.init(augmentedSeed);
    };

    proto.remove = function (graph) {
      var index = this.getIndexFromGraph(graph);
      this.content.splice(index, 1);
      this.triggerRemove(index);
      calculatorBackend.removeGraph(graph);
    };

    proto.clear = function () {
      this.content = [];
      this.triggerClear();
    };

    proto.triggerStartSaving = function () {
      _.each(this.startSavingCallbacks, function (cb) { cb() });
    };

    proto.triggerSaveSuccess = function () {
      _.each(this.saveSuccessCallbacks, function (cb) { cb() });
    };

    proto.triggerSaveError = function () {
      _.each(this.saveErrorCallbacks, function (cb) { cb() });
    };

    proto.triggerDriveAccessError = function (error) {
      _.each(this.driveAccessErrorCallbacks, function (cb) { cb(error) });
    };

    proto.triggerStartUpdatingGraphs = function () {
      _.each(this.startUpdatingGraphsCallbacks, function (cb) { cb() });
    };

    proto.triggerUpdateGraphsSuccess = function () {
      _.each(this.updateGraphsSuccessCallbacks, function (cb) { cb() });
    };

    proto.triggerupdateGraphsError = function () {
      _.each(this.updateGraphsErrorCallbacks, function (cb) { cb() });
    };

    proto.triggerAdd = function (index) {
      _.each(this.graphAddedCallbacks, function (cb) { cb(index); });
    };

    proto.triggerClear = function () {
      _.each(this.clearCallbacks, function (cb) { cb(); });
    };

    proto.triggerRemove = function (index) {
      _.each(this.graphRemovedCallbacks, function (cb) { cb(index); });
    };

    // Update state and screenshot
    proto.updateGraphData = function (graph) {
      var state = JSON.stringify(this.Calc.getState());
      graph.setProperty('graphData', state);
      graph.setProperty('parentHash', graph.hash);
      graph.setProperty('hash', this.randomHash.next());

      var thumbURL = this.Calc.screenshot({width: 200, height: 200});
      graph.setProperty('thumbURL', thumbURL);
    };

    proto.saveAs = function (graph) {
      this.save(graph, true);
    };

    //do_not_overwrite flag -- only exposed to proto.saveAs
    proto.save = function (graph, do_not_overwrite) {

      var oldGraph = this.currentGraph;
      var self = this;

      //update title. won't re-render the DOM until the save is successful
      //because we're worried that calling setProperty('currentGraph', graph)
      //could have side effects. But this way, once a save actually is successful,
      //the title will be correct.
      self.currentGraph.title = graph.title;
      self.triggerStartSaving();

      // about to modify the graph, so we make sure we modify the copy, not the original
      graph = graph.copy();
      self.updateGraphData(graph);

      calculatorBackend.saveGraph(graph).done(function(graph) {

        // Don't call loadGraph here because we don't want to trigger a
        // setState on save.

        // copy graph so that what goes into my_graphs list isn't the exact
        // same object as what's stored in currentGraph.
        self.setProperty('currentGraph', graph.copy());
        self.content.unshift(graph);
        self.triggerAdd(0);
        self.triggerSaveSuccess();

        if (!do_not_overwrite && oldGraph && oldGraph.hash) {
          self.remove(oldGraph);
        }
      }).fail(function(jqXHR) {
        var error = parseJSONErrors(jqXHR)[0];
        if (error.key === 'drive_access_error') self.triggerDriveAccessError(error);
        self.triggerSaveError();
      });
    };

    //is this the stablest way to do this?
    proto.getIndexFromGraph = function (graph) {
      for (var index = 0 ; index < this.content.length ; index++) {
        if (graph.hash === this.content[index].hash) return index;
      }
      return -1;
    };

    proto.updateGraphs = function () {
      var self = this;
      self.triggerStartUpdatingGraphs();
      calculatorBackend.getGraphs().done(function (msg) {
        var graphs;
        if (msg.myGraphs) graphs = msg.myGraphs.map(Graph.fromAjax);
        self.content = graphs;
        self.lazyLoadGraphStates();
        self.triggerUpdateGraphsSuccess();
      }).fail(function () {
        self.triggerupdateGraphsError();
      });
    };

    proto.lazyLoadGraphStates = function () {
      var imax = 20;

      var self = this;
      var loadOne = function (i) {
        if (i >= self.content.length || i >= imax) return;
        self.content[i].fetchData().then(function () { loadOne(i+1); });
      };

      loadOne(0);
    };

    proto.loadGraph = function (graph) {
      var self = this;

      // combine the setState undo/redo along with the currentGraph undo/redo into
      // a single atomic undo/redo transaction.
      this.undoRedo.oneTransaction(function () {

        // set the sate. this itself is going to add to undo/redo stream to
        self.Calc.setState(graph.graphData);

        // set the currentGraph. This will add to undo/redo as well.
        self.setProperty('currentGraph', graph);
      });
    };

    proto.clearGraph = function () {
      this.loadGraph(Graph());
      this.Calc._calc.addFocus();
    };

    proto.onCurrentGraphChange = function () {
      var currentGraph = this.currentGraph;
      var oldCurrentGraph = this.getOldProperty('currentGraph');

      // only undo currentGraph if there is an oldCurrentGraph. Basically, this makes it so
      // that we skip the first time we set a Graph(), whether the first Graph()
      if (oldCurrentGraph) {
        var self = this;

        // make copies of these from the start in case they ever get modified in the future
        var undoGraph = oldCurrentGraph.copy();
        var redoGraph = currentGraph.copy();

        // this makes it so undo/redo changes title and hash
        this.undoRedo.addTransaction({
          type: this.undoRedo.RESPONSE_TO_CHANGE,
          redo: function(){
            self.setProperty('currentGraph', redoGraph.copy());
          },
          undo: function(){
            self.setProperty('currentGraph', undoGraph.copy());
          }
        });
      }

      document.title = currentGraph.title || i18n.t('Desmos Graphing Calculator');
      this.pushState(currentGraph);
    };

    proto.pushState = function (graph) {
      if (!(window.history && history.pushState)) return;

      // We used to push the graph object onto the history state stack
      // directly, but Firefox has a limit of 640kB for objects in the state
      // stack, and we now allow single images that are larger than that.
      this.__visitedGraphs[graph.hash] = graph;

      var path = graph.path;
      if (!path) return;
      if (window.location.search) path += window.location.search;
      if (path !== window.location.href) {
        history.pushState(
          graph.hash,
          graph.title,
          path
        );
      }
    };

    proto.popState = function (evt) {
      //If you have unsaved work, back will take you *not* to your last on this graph
      //But to the save (or load) before that. This warns you in the same way
      //That reload or a hard back does.
      if (this.Calc.hasUnsavedChanges()) {
        if (!confirm(i18n.t("Are you sure you want to leave this graph? Your unsaved work will be lost."))) {
          history.forward();
          return;
        }
      }

      var hash = evt.originalEvent.state;

      if (hash === null) {
        // If there is null state then we came from the calculator, but from a blank (or unsaved one) graph.
        this.loadGraph(Graph());
        return;
      } else if (this.currentGraph.hash === hash) {
        //If we read a popstate but the user wants to cancel it,
        //We execute a ".forward()". This triggers another popstate,
        //but right back to the graph we started with. We don't need to do
        //anything in this case.
        return;
      } else if (this.__visitedGraphs.hasOwnProperty(hash)) {
        var graph = this.__visitedGraphs[hash];
        this.loadGraph(graph);
        //Toast when you navigate between graphs
        var graphTitle;
        if (!graph.title) {
          graphTitle = i18n.t('Untitled Graph');
        } else {
          if (graph.title.length > 15) {
            graphTitle = graph.title.substr(0,15) + '...';
          } else {
            graphTitle = graph.title;
          }
        }

        var str = i18n.t("Opened '__graphTitle__'", {graphTitle: graphTitle});
        //include a blank undo function so that the "undo" option still shows up
        this.Calc._calc.toast(str, { undoCallback: function () {} });
      } else {
        this.loadGraph(Graph());
        return;
      }
    };
  });

  return GraphsController;
});

define('underscore_view',['require','jquery','underscore','./underscore_model','pjs','i18n'],function(require){
var $ = require('jquery');
var _ = require('underscore');
var UnderscoreModel = require('./underscore_model');
var P = require('pjs');
var i18n = require('i18n');

var insertionQueue = [];

var UnderscoreView = P(UnderscoreModel, function (view, _super, _class) {

  // Class method for generating more efficient templates in the case
  // that the template takes no parameters
  _class.staticTemplate = function (str) {
    var node = $(str)[0];
    return function () { return node.cloneNode(true); };
  };

  view.$ = function (selector) {
    var $node = $(this.__domNode);
    if (!selector) {
     return $node;
    } else {
      return $node.filter(selector).add($node.find(selector));
    }
  };

  // methods to adding view to dom. these call .didInsertElement()
  // automatically
  var makeInsertFn = function (methodName) {
    return function (selector) {
      var isTopmostInsert = (insertionQueue.length === 0);
      insertionQueue.push(this);
      if (!this.__domNode) _render.call(this);

      $(selector)[methodName](this.$());
      if (isTopmostInsert) {
        while (insertionQueue.length) {
          insertionQueue.pop().didInsertElement();
        }
      }
      return this.$();
    };
  };

  view.appendTo = makeInsertFn('append');
  view.replace = makeInsertFn('replaceWith');
  view.prependTo = makeInsertFn('prepend');
  view.insertAfter = makeInsertFn('after');
  view.insertBefore = makeInsertFn('before');

  view.remove = function () {
    this.$().remove();
    this.destruct();
  };

  // should be overriden and used to cleanup any resources this view has
  // aquired. Most often, that means remove any observers set and any child
  // views created.
  view.destruct = function () {};

  // Called when the view has been rendered, but before its DOM node has been
  // inserted into the document. This is a good time to attach child views and
  // event listeners.
  view.didCreateElement = function () {};

  // for this to be called, must insert this.$() into dom using one of the
  // methods above. If not, you must call .didInsertElement() yourself.
  view.didInsertElement = function () {};

  // this is the information that will be made available to the underscore template
  view.getTemplateParams = function () {return {};};

  // tap into these if you want deep control of how a complete rerender happens.
  // one thing these are useful for are saving/restoring temporary data within
  // the view that will get wiped out when the html is regenerated.
  view.beforeRerender = function () {};
  view.afterRerender = function () {};

  // will render only if something has changed
  view.rerender = function () {
    var oldDomNode = this.__domNode;
    var newParams = this.getTemplateParams();
    if (_.isEqual(newParams, this.__lastRenderParams)) return;

    this.beforeRerender();

    _render.call(this);

    if (oldDomNode && $.contains(document, oldDomNode)) {
      this.replace(oldDomNode);
    }

    this.afterRerender();
  };

  view.setDomNode = function (node) {
    this.__domNode = node[0] ? node[0] : node;
    this.didInsertElement();
  };

  // private
  var _render = function () {
    var params = this.getTemplateParams();
    var helpers = {
      t: function(key, args){ return i18n.t(key, args);}
    };
    var combined = _.extend({}, params, helpers);
    var html = this.template(combined);

    var $node;
    if (typeof html === 'string') {
      $node = $($.parseHTML(html.trim()));
    } else {
      // Templates may return DOM nodes directly instead of strings for
      // performance reasons.
      $node = $(html);
    }

    if ($node.length !== 1) {
      throw new Error("Template Error: template must return exactly one DOM node.");
    }

    this.__domNode = $node[0];
    this.__lastRenderParams = params;
    this.didCreateElement();
  };

});
return UnderscoreView;
});

define('keys',['require'],function (require) {

  var Keys = function () {

    // based on http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#fixed-virtual-key-codes
    var table = {
      8:  this.BACKSPACE = 'Backspace',
      9:  this.TAB = 'Tab',
      13: this.ENTER = 'Enter',
      16: this.SHIFT = 'Shift',
      17: this.CONTROL = 'Control',
      18: this.ALT = 'Alt',
      20: this.CAPSLOCK = 'CapsLock',
      27: this.ESCAPE = 'Esc',
      32: this.SPACEBAR = 'Space',
      33: this.PAGEUP = 'PageUp',
      34: this.PAGEDOWN = 'PageDown',
      35: this.END = 'End',
      36: this.HOME = 'Home',
      37: this.LEFT = 'Left',
      38: this.UP = 'Up',
      39: this.RIGHT = 'Right',
      40: this.DOWN = 'Down',
      46: this.DELETE = 'Del'
    };
  
    this.lookup = function (evt) {
      return table[evt.which];
    };
  };
  
  return new Keys();
});
define('conditional_blur',['require','jquery'],function (require) {
  var $ = require('jquery');

  return function () {
    if (document.activeElement === document.body) return;
    $(document.activeElement).blur();
  };
});
// Shim HTML5 placeholder element.
//
// https://github.com/parndt/jquery-html5-placeholder-shim

(function($) {
  // @todo Document this.
  $.extend($,{ placeholder: {
      browser_supported: function() {
        return this._supported !== undefined ?
          this._supported :
          ( this._supported = !!('placeholder' in $('<input type="text">')[0]) );
      },
      shim: function(opts) {
        var config = {
          color: '#888',
          cls: 'placeholder',
          selector: 'input[placeholder], textarea[placeholder]'
        };
        $.extend(config,opts);
        if (!this.browser_supported()) {
          $(config.selector)._placeholder_shim(config);
        }
      }
  }});

  $.extend($.fn,{
    _placeholder_shim: function(config) {
      function calcPositionCss(target)
      {
        var op = $(target).offsetParent().offset();
        var ot = $(target).offset();

        return {
          top: ot.top - op.top,
          left: ot.left - op.left,
          width: $(target).width()
        };
      }
      return this.each(function() {
        var $this = $(this);
        
        if( $this.data('placeholder') ) {
          var $ol = $this.data('placeholder');
          $ol.css(calcPositionCss($this));
          return true;
        }

        var possible_line_height = {};
        if( !$this.is('textarea') && $this.css('height') != 'auto') {
          possible_line_height = { lineHeight: $this.css('height'), whiteSpace: 'nowrap' };
        }

        var ol = $('<label />')
          .text($this.attr('placeholder'))
          .addClass(config.cls)
          .css($.extend({
            position:'absolute',
            display: 'inline',
            float:'none',
            overflow:'hidden',
            textAlign: 'left',
            color: config.color,
            cursor: 'text',
            paddingTop: $this.css('padding-top'),
            paddingLeft: $this.css('padding-left'),
            paddingRight: $this.css('padding-right'),
            paddingBottom: $this.css('padding-bottom'),
            fontSize: $this.css('font-size'),
            fontFamily: $this.css('font-family'),
            fontStyle: $this.css('font-style'),
            fontWeight: $this.css('font-weight'),
            textTransform: $this.css('text-transform'),
            backgroundColor: 'transparent',
            zIndex: 99
          }, possible_line_height))
          .css(calcPositionCss(this))
          .attr('for', this.id)
          .data('target',$this)
          .click(function(){
            $(this).data('target').focus();
          })
          .insertBefore(this);
        $this
          .data('placeholder',ol)
          .focus(function(){
            ol.hide();
          }).blur(function() {
            ol[$this.val().length ? 'hide' : 'show']();
          }).triggerHandler('blur');
        $(window)
          .resize(function() {
            var $target = ol.data('target');
            ol.css(calcPositionCss($target));
          });
      });
    }
  });
})(jQuery);
define("vendor/jquery.html5-placeholder-shim", function(){});

/**
 * @license RequireJS text 2.0.7 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    

    var text, fs, Cc, Ci,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.7',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.indexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1, name.length);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file.indexOf('\uFEFF') === 0) {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                errback(e);
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes,
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');

        text.get = function (url, callback) {
            var inStream, convertStream,
                readData = {},
                fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});

/* global console */
define('template',['underscore', 'text'], function(_, text){
  var buildMap = {};

  return {
    load: function(name, req, onLoad, config){
      var text_name = "template_src/" + name + ".underscore";
      text.get(req.toUrl(text_name), function(template_source){
        var template = _.template(template_source);
        if(config.isBuild){
          buildMap[name] = template.source;
        }
        onLoad(template);
      });
    },

    write: function(pluginName, moduleName, write){
      if (moduleName in buildMap) {
        var template = (buildMap[moduleName]);
        write(
          "define('" +
            pluginName + '!' + moduleName + "', " +
            "['underscore'], " +
            "function(_) {return " + template + ";}" +
          ");"
        );
      }
      else{
        console.log("ERROR - failed to find template " + moduleName + " in buildMap");
      }
    }
  };
});

define('template!unsupported_browser', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="unsupported-browser" class="modal_section">\n  <div style=\'color:black; font-size:150%;\'>'+
( t('Unsupported Browser') )+
'</div>\n  <div style=\'padding:20px 0px; color:#666\'>\n      '+
( t('Desmos works best on your version of Android if you use the Chrome Browser.') )+
'\n      <br><br>\n      <a href=\'https://play.google.com/store/apps/details?id=com.android.chrome\'>\n        '+
( t('Click here to download Google Chrome.') )+
'<br><br>\n      </a>\n\n          <div style="text-align: center; margin-top: 25px; margin-bottom:-16px">\n              <a class=\'dcg-btn dcg-action-hide dcg-do-not-blur\'>'+
( t('Hide this warning.') )+
'</a>\n          </div>\n  </div>\n</div>\n';
}
return __p;
};});
define('template!login_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="login-dialog" class="modal_section">\n  <h1>\n    '+
( t('Sign In') )+
'\n  </h1>\n\n  <div class=\'bg-line\'>\n    <span>'+
( t('Sign In with Google') )+
'</span>\n  </div>\n    <div class=\'google-login-btn\'>\n      <span class=\'dcg-btn dcg-btn-large dcg-action-googlelogin\'>\n        <i class="dcg-icon-google-plus"></i>\n        '+
( t('Sign In with Your Google Account') )+
'\n      </span>\n    </div>\n\n  <div class=\'bg-line\'>\n    <span>'+
( t('Sign In with Desmos') )+
'</span>\n  </div>\n\n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n\n  <form class="desmos-login dcg-action-submit">\n    <div class="form_content_interior">\n      <label for="email">\n        <span>'+
( t('Email:') )+
'</span>\n        <input type="email"\n          name="email"\n          class="input"\n          autofocus="autofocus"\n          required="required"\n          id="top_email"\n        />\n      </label>\n\n      <label>\n        <div class="password-input">\n          <span>'+
( t('Password:') )+
'</span>\n            <input type="password"\n            name="password"\n            class="input"\n            required="required"\n            id="top_password"\n          />\n          <span class="password-recovery-link">\n            <a class="dcg-action-recoverpassword">'+
( t('Forgot your password?') )+
'</a>\n          </span>\n        </div>\n      </label>\n\n      <span class="sign-in-options">\n       <span>\n        <a class="dcg-action-createaccount">'+
( t("Create an Account") )+
'</a> or\n       </span>\n        ';
 if (spinning) { 
;__p+='\n          <div class="progress_indicator progress"></div>\n        ';
 } else { 
;__p+='\n          <button type="submit" class="dcg-btn dcg-btn-green">'+
( t('Sign In') )+
'</button>\n        ';
 } 
;__p+='\n      </span>\n\n    </div>\n  </form>\n</div>\n';
}
return __p;
};});
define('template!create_account_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="create-account-dialog" class="modal_section">\n  <h1>\n    '+
( t('Create Account') )+
'\n  </h1>\n\n  <div class=\'bg-line\'>\n    <span>'+
( t('Link to Google') )+
'</span>\n  </div>\n    <div class=\'google-login-btn\'>\n      <span class=\'dcg-btn dcg-btn-large dcg-action-googlelogin\'>\n        <i class="dcg-icon-google-plus"> </i>\n        '+
( t("Link to your Google Account") )+
'\n      </span>\n    </div>\n    <div class=\'bg-line\'><span>\n      '+
( t("Use your Email Address") )+
'\n    </span></div>\n\n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n\n  <form class="dcg-action-submit">\n    <label>\n      <span>'+
( t('Name:') )+
'</span>\n      <input type="text"\n        name="name"\n        class="input"\n        required="required"\n        autofocus="autofocus"\n      />\n    </label>\n\n    <div class="dcg-description">\n      '+
( t("This is the name we'll use if we feature one of your graphs.") )+
'\n    </div>\n\n    <label>\n      <span>'+
( t('Email:') )+
'</span>\n      <input type="email"\n        name="email"\n        class="input"\n        required="required"\n      />\n    </label>\n\n    <div class="dcg-description">\n      '+
( t("We'll never share or sell your email address.") )+
'\n    </div>\n\n    <label>\n      <span>'+
( t('Password:') )+
'</span>\n      <input type="password"\n        class="input"\n        name="password"\n        required="required"\n      />\n    </label>\n\n    <span class="sign-in-options">\n      <span>\n        <a class="dcg-action-login">'+
( t('Sign in') )+
'</a> or\n      </span>\n\n      ';
 if (spinning) { 
;__p+='\n        <div class="progress_indicator progress create-account-progress"></div>\n      ';
 } else { 
;__p+='\n        <button type="submit" class="dcg-btn dcg-btn-green">'+
( t('Create Account') )+
'</button>\n      ';
 } 
;__p+='\n    </span>\n\n  </form>\n  <div class=\'notice\' style="margin-top: 30px">\n    '+
( t("By clicking \"__btn__,\" you acknowledge that you've read and accept our __terms_of_use_link__.",
      {
        terms_of_use_link : "<a href='/terms' target='_blank'>" + t("Terms of Use") + "</a>",
        btn: t("Create Account")
      }
    ) )+
'\n  </div>\n';
}
return __p;
};});
define('template!edit_account_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="edit-account-dialog" class="modal_section">\n\n  ';
 _.each(errors, function(error) { 
;__p+='\n    <div class="errors">\n      <span>'+
( error.message )+
'</span>\n    </div>\n  ';
 }) 
;__p+='\n\n  <form class="dcg-action-submit">\n    ';
 if (user) { 
;__p+='\n      <h1>'+
( t('Edit Account') )+
'</h1>\n      <label>\n        <span>'+
( t('Name:') )+
'</span>\n        <input type="text"\n          name="name"\n          class="input"\n          id="edit_name"\n          autofocus="autofocus"\n          required="required"\n          value="'+
( user.name )+
'"\n        />\n      </label>\n      <div class="dcg-description">\n        '+
( t("This is the name we'll use if we feature one of your graphs.") )+
'\n      </div>\n\n      ';
 if(!user.isEdmodoUser && !user.isDriveUser) { 
;__p+='\n        <h1>'+
( t('Update Password') )+
'</h1>\n        <div id="update-password-fields">\n          <label>\n            <span>'+
( t('Current Password:') )+
'</span>\n            <input type="password"\n              name="old_pass"\n              class="input"\n            />\n          </label>\n\n          <label>\n            <span>'+
( t('New Password:') )+
'</span>\n            <input type="password"\n              name="new_pass"\n              class="input"\n            />\n          </label>\n\n          <label>\n            <span>'+
( t('Repeat Password:') )+
'</span>\n            <input type="password"\n              name="repeat_new_pass"\n              class="input"\n            />\n          </label>\n        </div>\n      ';
 } 
;__p+='\n      <br />\n\n      ';
 if (spinning) { 
;__p+='\n        <div class="progress_indicator progress update-account"></div>\n      ';
 } else { 
;__p+='\n        <button type="submit" class="dcg-btn dcg-btn-green update-account">\n          '+
( t('Update Account') )+
'\n        </button>\n      ';
 } 
;__p+='\n    ';
 } 
;__p+='\n  </form>\n</div>';
}
return __p;
};});
define('template!save_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="save-dialog" class="modal_section">\n    <h1>\n      '+
( t('Save This Graph') )+
'\n    </h1>\n\n    ';
 if (user.isDriveUser) { 
;__p+='\n    <div class="dcg-send-to-drive-container">\n      <label class="send-to-drive">\n        <input type="checkbox" name="push_to_drive" />\n        '+
( t('Send a Copy to Google Drive') )+
'\n      </label>\n    </div>\n    ';
 } 
;__p+='\n    <div class=\'dcg-clear\'></div>\n\n    <label class=\'input-label\'>\n      <div class=\'graph-title-title\'>'+
( t('Title:') )+
' &nbsp; </div>\n      <input class="title-input"\n             name="title"\n             placeholder="['+
( t('Untitled Graph') )+
']"\n             value="'+
( title )+
'"\n      >\n    </label>\n\n\n    <div>\n\n\n    <button type="submit" class="dcg-btn dcg-btn-green pull-right dcg-action-save">'+
( t('Save') )+
'</button>\n    <label class="dcg-new-copy pull-right">\n      <input type="checkbox" name="save_as" />\n      '+
( t('Make a New Copy') )+
'\n    </label>\n\n    </div>\n</div>';
}
return __p;
};});
define('template!recover_password_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="recover-password-dialog" class="modal_section">\n  <h1>'+
( t('Recover Password') )+
'</h1>\n  \n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n  \n  ';
 if (sentMessage) { 
;__p+='\n    <p>'+
( t("Message sent. Please check your email for a password recovery link.") + " (<a href='#' class='dcg-action-tryagain'>" + t("Didn't work? Try again!") + '</a>)' )+
'</p>\n  ';
 } else { 
;__p+='\n  \n    <form class="dcg-action-submit">\n      <p>'+
( t('Please enter your email address. We will send a password recovery link to you.') )+
'</p>\n  \n      <label>\n        <span>'+
( t('Email:') )+
'</span>\n        <input type="email"\n        name="email"\n        class="input"\n        id="recover_email"\n        required="required"\n        autofocus="autofocus"\n        />\n      </label>\n\n      <br />\n\n      ';
 if (spinning) { 
;__p+='\n        <div class="progress_indicator progress"></div>\n      ';
 } else { 
;__p+='\n        <button type="submit" class="dcg-btn dcg-btn-green" style="float: right; margin-right: 30px">'+
( t('Recover Password') )+
'</button>\n      ';
 } 
;__p+='\n\n    </form>\n    <br />\n  ';
 } 
;__p+='\n  <p class="dcg-remembered-password">'+
( t('Remembered your password?') )+
' <a class="dcg-action-login">'+
( t('Sign In') )+
'</a></p>\n</div>';
}
return __p;
};});
define('main/modals_controller',['require','jquery','pjs','underscore_view','main/parse_json_errors','keys','i18n','conditional_blur','vendor/jquery.html5-placeholder-shim','template!unsupported_browser','template!login_dialog','template!create_account_dialog','template!edit_account_dialog','template!save_dialog','template!recover_password_dialog'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var parseJSONErrors = require('main/parse_json_errors');
  var Keys = require('keys');
  var i18n = require('i18n');
  var conditionalBlur = require('conditional_blur');

  require('vendor/jquery.html5-placeholder-shim');

  var templates = {};
  templates.unsupported_browser = require('template!unsupported_browser');
  templates.login_dialog = require('template!login_dialog');
  templates.create_account_dialog = require('template!create_account_dialog');
  templates.edit_account_dialog = require('template!edit_account_dialog');
  templates.save_dialog = require('template!save_dialog');
  templates.recover_password_dialog = require('template!recover_password_dialog');

  var popupDriveLogin = function() {
    var popup_window = window.open(
      '/drive_api/calculator/login',
      'drive_window',
      'width=650, height=530'
    );
    if (!popup_window) {
      alert(i18n.t('Login window blocked. Please allow popups from desmos.com to sign in with Google.'));
    }
  };

var ModalsController = P(function (c) {

  c.init = function (userController, graphsController) {
    this.modals = {
      unsupportedBrowserDialog: UnsupportedBrowserDialog(
        userController,
        graphsController,
        this
      ),
      loginDialog: LoginDialog(
        userController,
        graphsController,
        this
      ),
      createAccountDialog: CreateAccountDialog(
        userController,
        graphsController,
        this
      ),
      editAccountDialog: EditAccountDialog(
        userController,
        graphsController,
        this
      ),
      saveDialog: SaveDialog(
        userController,
        graphsController,
        this
      ),
      recoverPasswordDialog: RecoverPasswordDialog(
        userController,
        graphsController,
        this
      )
    };

    this.currentModal = undefined;
  };

  c.ready = function () {
    this.modalElement = $('#state-modals');
    this.modalBackground = $('#modal_background');
    this.modalElement
      .find('.close-modal')
      .add(this.modalBackground)
      .on('dcg-tap', this.hide.bind(this))
    ;
    this.modalElement.on('keydown', this.handleKeydown.bind(this));
  };

  c.hide = function () {
    //this gets called right at the beginning (complete login) before modalBackground exists
    if (!this.modalBackground) return;

    if (
      document.activeElement &&
      $(document.activeElement).closest(this.modalElement).length > 0
    ) conditionalBlur();

    $("input[type='password']").val("");
    this.modalBackground.hide();
    this.modalElement.hide();
    this.currentModal = undefined;
  };

  c.show = function (modal) {
    this.currentModal = modal;
    var elt = modal.$();
    elt.siblings('.modal_section').hide();
    elt.show();
    this.modalBackground.show();
    this.modalElement.show();
  };

  c.handleKeydown = function (evt) {
    if (Keys.lookup(evt) === Keys.ESCAPE) {
      this.hide();
    }
  };

  c.$ = function () {
    return this.modalElement;
  };

});

var ModalDialogView = P(UnderscoreView, function (view, _super) {

  view.init = function (userController, graphsController, modalsController) {
    _super.init.call(this);
    this.errors = [];
    this.spinning = false;
    this.saved_inputs = {};
    this.initialized = false;
    this.userController = userController;
    this.graphsController = graphsController;
    this.modalsController = modalsController;
  };

  view.getTemplateParams = function () {
    return {
      errors: this.errors,
      spinning: this.spinning
    };
  };

  view.show = function() {
    if(!this.initialized){
      this.appendTo(this.modalsController.$());
      this.initialized = true;
    }
    this.errors = [];
    this.rerender();
    this.modalsController.show(this);
    // Focus first visible input
    this.$('input:visible, textarea:visible').first().focus();
    // Update position of placeholder shims.
    if ($.placeholder) $.placeholder.shim();
  };

  view.beforeRerender = function () {
    // save what the display value was for the .modal_section
    this.__$display = this.$().css('display');

    // save input values
    var self = this;
    this.$('input,textarea').each(function(){
      var name = $(this).attr('name');
      var value = $(this).val();

      self.saved_inputs[name] = value;
    });
  };

  view.afterRerender = function () {
    // must restore this if we want the modal to display. They are display:none
    // by default and that's how it'll get rerendered.
    this.$().css('display', this.__$display);

    // restore input values
    for (var name in this.saved_inputs) {
      this.$('[name="'+name+'"]').val(this.saved_inputs[name]);
    }
  };

  view.hide = function() {
    // A particular modal should only be responsible for hiding itself.
    if (this.modalsController.currentModal === this) this.modalsController.hide();
  };

  view.processJSONErrors = function(jqXHR) {
    this.errors = parseJSONErrors(jqXHR);
  };

  view.startProcessingForm = function() {
    this.spinning = true;
    this.errors = [];
    this.rerender();
  };

  view.stopProcessingForm = function() {
    this.spinning = false;
    this.rerender();
  };

  view.successAnimation = function () {
    //reaches into header
    $('.dcg-edit-acct-success').show();
    setTimeout(function() {
      $('.dcg-edit-acct-success').fadeOut('fast');
    }, 800);
  };
});

/*
* here are the actual modal states
*/
var UnsupportedBrowserDialog = P(ModalDialogView, function(view){
  view.template = templates.unsupported_browser;
  view.didCreateElement = function() {
    this.$('.dcg-action-hide').on('dcg-tap', this.hide.bind(this));
  };
});

var LoginDialog = P(ModalDialogView, function(view) {
  view.template = templates.login_dialog;

  view.didCreateElement = function () {
    this.$('.dcg-action-googlelogin').on('dcg-tap', this.googleLogin.bind(this));
    this.$('.dcg-action-submit').on('submit', this.desmosLogin.bind(this));
    this.$('.dcg-action-recoverpassword').on('dcg-tap', this.recoverPassword.bind(this));
    this.$('.dcg-action-createaccount').on('dcg-tap', this.createAccount.bind(this));
  };

  view.desmosLogin = function(evt) {
    //don't submit the form
    evt.preventDefault();
    var formData = $(evt.target).serialize();

    this.startProcessingForm();
    this.userController.desmosLogin(formData).then(
      this.hide.bind(this),
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };

  view.recoverPassword = function(evt) {
    evt.preventDefault();
    this.modalsController.modals.recoverPasswordDialog.show();
  };

  view.createAccount = function(evt) {
    evt.preventDefault();
    this.modalsController.modals.createAccountDialog.show();
  };

  view.googleLogin = function() {
    popupDriveLogin();
    this.hide();
  };
});

var CreateAccountDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.create_account_dialog;

  view.didCreateElement = function () {
    this.$('.dcg-action-submit').on('submit', this.submitCreateAccount.bind(this));
    this.$('.dcg-action-login').on('dcg-tap', this.login.bind(this));
    this.$('.dcg-action-login-then-save').on('dcg-tap', this.login.bind(this));
    this.$('.dcg-action-googlelogin').on('dcg-tap', this.googleLogin.bind(this));
  };

  view.login = function() {
    this.modalsController.modals.loginDialog.show();
  };

  view.googleLogin = function() {
    popupDriveLogin();
    this.hide();
  };

  view.show = function () {
    _super.show.call(this);
  };

  view.submitCreateAccount = function(evt) {
    evt.preventDefault();

    var formData = $(evt.target).serialize();

    this.startProcessingForm();
    this.userController.createAccount(formData).then(
      this.hide.bind(this),
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };

});

var EditAccountDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.edit_account_dialog;

  view.didCreateElement = function () {
    this.$('.dcg-action-submit').on('submit', this.submitEdit.bind(this));
  };

  // whenever this becomes visible, reset the name to the current user
  view.show = function () {
    _super.show.call(this);
    var params = this.getTemplateParams();
    if (params.user) {
      this.$('input[name=name]').val(params.user.name);
    }
  };

  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);

    params.user = this.userController.currentUser;
    return params;
  };

  view.submitEdit = function(evt) {
    evt.preventDefault();

    var self = this;
    var formData = $(evt.target).serialize();

    this.startProcessingForm();
    this.userController.editAccount(formData).then(
      function () { self.hide(); self.successAnimation(); },
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };

});

var SaveDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.save_dialog,

  view.didCreateElement = function () {
    this.$('.dcg-action-save').on('dcg-tap', this.save.bind(this));
    var self = this;

    this.$('.title-input').on('keypress', function (evt) {
      if (evt.which === 13) {
        evt.preventDefault();
        self.save();
      }
    });

  };

  // whenever this becomes visible reset title to current graph's title
  view.show = function () {
    _super.show.call(this);
    var params = this.getTemplateParams();
    $('input[name="save_as"]').prop("checked", false);
    this.$('input[name=title]').val(params.title).focus();
    this.baseName = params.title;
  };

  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);
        params.user = null;
        params.title = '';
    var user = this.userController.currentUser;
    if (user) {
      params.user = {
        name: user.name,
        isDriveUser: user.isDriveUser
      };
    }

    var graph = this.graphsController.currentGraph;
    if (graph && graph.title) {
      params.title = graph.title;
    }

    return params;
  };

  view.save = function () {
    var graph = this.graphsController.currentGraph.copy();
    graph.title = this.$('input[name=title]').val();

    this.hide();

    var saveAs = $('input[name="save_as"]').prop("checked");
    if (saveAs) {
      this.graphsController.saveAs(graph);
    } else {
      this.graphsController.save(graph);
    }
  };
});


var RecoverPasswordDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.recover_password_dialog;

  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);
    params.sentMessage = this.sentMessage;
    return params;
  };

  // will get called multiple times so only do dom instantiation
  view.didCreateElement = function () {
    this.$('.dcg-action-submit').on('submit', this.submitRecover.bind(this));
    this.$('.dcg-action-tryagain').on('dcg-tap', this.resetAgain.bind(this));
    this.$('.dcg-action-login').on('dcg-tap', this.login.bind(this));
  };

  view.submitRecover = function(evt) {
    evt.preventDefault();
    var self = this;
    var formData = $(evt.target).serialize();
    this.startProcessingForm();
    this.userController.recoverPassword(formData).then(
      function () { self.sentMessage = true; },
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };

  view.resetAgain = function() {
    this.sentMessage = false;
    this.rerender();
  };

  view.login = function() {
    this.modalsController.modals.loginDialog.show();
  };
});

return ModalsController;
});

/*global console*/
define('loadcss',['text'], function(text){
  var buildMap = {};
  
  function inject_css_file(href) {
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    link.href = href;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);
  }

  return {
    load: function(name, req, onLoad, config){
      var filename = req.toUrl(name) + ".css";
      
      // it's a build, so we grab the source directly
      if (config.isBuild) {
        text.get(filename, function(css_source){
          buildMap[name] = css_source;
          onLoad();
        });
      }
      
      // not a build, so add a <link> element to load the css file
      else {
        inject_css_file(filename);
        onLoad();
      }
    },
    
    onLayerEnd: function (write, data) {
      var complete_css = '';
      for (var moduleName in buildMap) {
        complete_css += buildMap[moduleName];
      }

      // save a css file in the same folder as the .js that will be saved. Could possibly
      // integrate this better with optimize.js in order to have more control over where the css
      // file goes. For now, it's fine within the generated/js/ dir.   
      var fs = require.nodeRequire('fs');
      var css_file = data.path.replace(/\.js/g, '.required.css');
      fs.writeFileSync(css_file, complete_css, 'utf8');
    },

    write: function(pluginName, moduleName, write){
      if(moduleName in buildMap){
        write("define('" + pluginName + '!' + moduleName + "', function(){});");
      } else{
        console.log("ERROR - failed to find css " + moduleName + " in buildMap");
      }
    }
  };
});

define('loadcss!css/header_desktop', function(){});
define('browser',['require','jquery'],function (require) {
  var $ = require('jquery');

  var Browser = {
    IS_IE8: navigator.userAgent.match(/MSIE 8.0/i) !== null,
    IS_IE9: navigator.userAgent.match(/MSIE 9.0/i) !== null,
    IS_IE: navigator.userAgent.match(/MSIE/i) !== null,
    IS_IPAD: navigator.userAgent.match(/iPad/i) !== null,
    IS_MOBILE: navigator.userAgent.match(/Mobile|Android/i) !== null,
    IS_ANDROID: navigator.userAgent.match(/Android/i) !== null,
    IS_CHROME: navigator.userAgent.match(/Chrome/i) !== null,
    IS_KINDLE: navigator.userAgent.match(/Kindle/i) !== null || navigator.userAgent.match(/Silk/i) !== null,
    IS_IN_IFRAME: window.parent !== window
  };
  Browser.IS_TABLET = (Browser.IS_IPAD || Browser.IS_ANDROID || Browser.IS_KINDLE);

  Browser.IOS_VERSION = (function() {
    //http://stackoverflow.com/questions/8348139/detect-ios-version-less-than-5-with-javascript
    var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
    if (v) {
      return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
    }
    return null;
  })();

  // Returns translate3d if supported, translate otherwise
  // from http://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support
  //
  // Needs document.body to be defined before it can run (so that we can put
  // an element into it). In supported browsers, the value will be set to
  // true on $(document).ready();
  Browser.SUPPORTS_TRANSLATE3D = false;
  
  $(document).ready(function() {

    var el = document.createElement('p');
    var has3d;
    var computedStyle;
    var transforms = {
      'webkitTransform':'-webkit-transform',
      'OTransform':'-o-transform',
      'msTransform':'-ms-transform',
      'MozTransform':'-moz-transform',
      'transform':'transform'
    };
    // Add it to the body to get the computed style.
    document.body.insertBefore(el, null);
    for (var t in transforms) {
      if (el.style[t] !== undefined) {
        el.style[t] = "translate3d(1px,1px,1px)";
        computedStyle = window.getComputedStyle(el);
        if (!computedStyle) return;
        has3d = computedStyle.getPropertyValue(transforms[t]);
      }
    }
    document.body.removeChild(el);
    Browser.SUPPORTS_TRANSLATE3D = (
      has3d !== undefined &&
      has3d.length > 0 &&
      has3d !== "none"
    );
  });
  
  //return a generated rule for an x-y translation. use translate3d where supported
  Browser.translateRule = function(x, y) {
    if (Browser.SUPPORTS_TRANSLATE3D) {
      return "translate3d(" + x + (x ? "px" : "") + "," + y + (y ? "px" : "") + ",0)";
    }
    return "translate(" + x + (x ? "px" : "") + "," + y + (y ? "px" : "") + ")";
  };

  Browser.SUPPORTS_CANVAS = (function () {
    var elem = document.createElement('canvas');
    var supports_canvas = !!(elem.getContext && elem.getContext('2d'));
    return supports_canvas;
  })();

  return Browser;
});

define('loadcss!tipsycss', function(){});
// tipsy, facebook style tooltips for jquery
// version 1.0.0a
// (c) 2008-2010 jason frame [jason@onehackoranother.com]
// released under the MIT license
//
// Modified by Mike Haverstock to work with touchtracking.js to decide when
// to show tooltips and when not to. Problem is that this library doesn't
// allow you to manually hide/show tooltips that are set with the 'live'
// option. That's because the 'live' option postpones tipsy instantiation for
// a specific node until an event bubbles up for that node. So, when you call
// .tipsy('show') for a live node, it sees that there is no .data('tipsy') set
// for the node and ignores the request. The solution is to not listen for
// mouseenter and mouseleave. Instead of those, you listen for 'tipsyshow' and
// 'tipsyhide'. Then, you manually hide/show tooltips by triggering 'tipsyshow'
// and 'tipsyhide' on that node. Then, the live code works perfectly fine. Now
// the only way to trigger tipsy is by manually triggering those events.
define('tipsy',['require','loadcss!tipsycss','jquery'],function(require) {
  //note: the path to tipsycss needs to be configured in your requirejs config
  //for example: `'tipsycss': '../vendor_manual/albany/tipsy'`

  require('loadcss!tipsycss');
  var $ = require('jquery');

  var openSticky = null;
  var ignoreStickyOpen = false;

  $(document).on('dcg-tap', '.tipsy-sticky', function (evnt) {

    // don't do anything. let the code that hides stickies close it.
    if (ignoreStickyOpen) {
      ignoreStickyOpen = false;
      return;
    }

    var opener = evnt.currentTarget;
    var $target = $(opener);

    // if the target doesn't have a tooltip, check if a child does
    if (!$target.attr('tooltip')) {
      $target = $target.find('[tooltip]').filter(':not([tooltip=""])');
    }

    // there should be exactly 1 tooltip to show
    if ($target.length !== 1) return;

    // ensure that the target is not display:none and no parent is display:none
    if ($target.css('display') === 'none') return;
    if ($target.parents().filter(function(){return $(this).css('display') === 'none'}).length) return;

    var options = $.extend({}, $.fn.tipsy.defaults);
    options.title = 'tooltip';
    options.gravity = 'nw';

    openSticky = new Tipsy($target[0], options);
    openSticky.show();
    openSticky.opener = opener;
  });

  $(document).on('dcg-tapstart keydown', function (evnt) {
    if (openSticky) {
      openSticky.hide();

      var opener = openSticky.opener;
      if (evnt.type === 'dcg-tapstart' && $(evnt.target).closest(opener).length ) {
        $(document).one('dcg-tapend', function (evnt2) {
          if ($(evnt2.target).closest(opener).length) {
            ignoreStickyOpen = true;
          }
        });
      }

      openSticky=null;
    }
  });

  function maybeCall(thing, ctx) {
    return (typeof thing == 'function') ? (thing.call(ctx)) : thing;
  }

  function Tipsy(element, options) {
    this.$element = $(element);
    this.options = options;
    this.fixTitle();
  }

  Tipsy.prototype = {
    show: function() {
      var title = this.getTitle();
      if (title && !isTipsyDisabled()) {
        var $tip = this.tip();
        var $arrow = $tip.find('.tipsy-arrow');

        $tip.find('.tipsy-inner')[this.options.html ? 'html' : 'text'](title);
        $tip[0].className = 'tipsy'; // reset classname in case of dynamic gravity
        $tip.remove().css({top: 0, left: 0, visibility: 'hidden', display: 'block'}).prependTo(document.body);

        var pos = $.extend({}, this.$element.offset(), {
          width: this.$element[0].offsetWidth,
          height: this.$element[0].offsetHeight
        });

        var tp, actualWidth = $tip[0].offsetWidth,
            actualHeight = $tip[0].offsetHeight,
            gravity = maybeCall(this.options.gravity, this.$element[0]);

        switch (gravity.charAt(0)) {
          case 'n':
            tp = {top: pos.top + pos.height + this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
            break;
          case 's':
            tp = {top: pos.top - actualHeight - this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
            break;
          case 'e':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth - this.options.offset};
            break;
          case 'w':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width + this.options.offset};
            break;
        }

        if (gravity.length == 2) {
          if (gravity.charAt(1) == 'w') {
            tp.left = pos.left + pos.width / 2 - 15;
          } else {
            tp.left = pos.left + pos.width / 2 - actualWidth + 15;
          }
        }
        var arrowMarginLeft = 0;

        if (tp.left < 0) {
          arrowMarginLeft = tp.left;
          tp.left = 0;
        } else if (tp.left + actualWidth > window.innerWidth) {
          arrowMarginLeft = tp.left + actualWidth - window.innerWidth;
          tp.left = window.innerWidth - actualWidth;
        }

        //we want to center it, so add -5px margin because the tipsy arrow is 10px wide
        if (gravity === 'n' || gravity === 's') {
          arrowMarginLeft -= 5;
        }
        $arrow.css('marginLeft', arrowMarginLeft);

        $tip.css(tp).addClass('tipsy-' + gravity);

        $arrow[0].className = 'tipsy-arrow tipsy-arrow-' + gravity.charAt(0);
        if (this.options.className) {
          $tip.addClass(maybeCall(this.options.className, this.$element[0]));
        }

        if (this.options.fadeIn) {
          $tip.stop().css({opacity: 0, display: 'block', visibility: 'visible'})
                     .animate({opacity: this.options.opacity}, this.options.fadeIn);
        } else {
          $tip.css({visibility: 'visible', opacity: this.options.opacity});
        }

        if (this.options.sticky) {
          $tip.addClass('tipsy-sticky');
        }

        var self = this;
        var validateLoop = function () {
          self.validate();
          self.validateTimeout = setTimeout(validateLoop, 100);
        };
        validateLoop();
      }
    },

    hide: function() {
      clearTimeout(this.validateTimeout);

      if (this.options.fadeOut) {
        this.tip().stop().fadeOut(this.options.fadeOut, function() { $(this).remove(); });
      } else {
        this.tip().remove();
      }
    },

    fixTitle: function() {
      var $e = this.$element;
      if ($e.attr('title') || typeof($e.attr('original-title')) != 'string') {
        $e.attr('original-title', $e.attr('title') || '').removeAttr('title');
      }
    },

    getTitle: function() {
      var title, $e = this.$element, o = this.options;
      this.fixTitle();
      o = this.options;
      if (typeof o.title == 'string') {
        title = $e.attr(o.title == 'title' ? 'original-title' : o.title);
      } else if (typeof o.title == 'function') {
        title = o.title.call($e[0]);
      }

      if (title) title = ('' + title).replace(/(^\s*|\s*$)/, "");
      return title || o.fallback;
    },

    tip: function() {
      if (!this.$tip) {
        this.$tip = $('<div class="tipsy"><div class="tipsy-arrow"></div><div class="tipsy-inner"></div></div>');
      }
      return this.$tip;
    },

    validate: function() {
      var hasTitle = !!this.getTitle();
      var inDom = false;

      if (hasTitle) {
        try {
          var node = this.$element[0];

          while (node) {
            if (node === document) {
              inDom = true;
              break;
            } else {
              node = node.parentNode;
            }
          }
        } catch (e) {}
      }

      if (!inDom) {
        this.hide();
      }
    }
  };

  $.fn.tipsy = function(options) {

    if (options === true) {
      return this.data('tipsy');
    } else if (typeof options == 'string') {
      var tipsy = this.data('tipsy');
      if (tipsy) tipsy[options]();
      return this;
    }

    options = $.extend({}, $.fn.tipsy.defaults, options);

    options.fadeIn = options.fadeIn || options.fade;
    options.fadeOut = options.fadeOut || options.fade;

    function get(ele) {
      var tipsy = $.data(ele, 'tipsy');
      if (!tipsy) {
        tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
        $.data(ele, 'tipsy', tipsy);
      }
      return tipsy;
    }

    function enter(evnt) {
      // the tipsyshow event bubbles up the dom, so we only want to
      // listen to the event if the target is the same as the element
      // that is responding to the event. If this wasn't here then when
      // you move your mouse from a tipsy-enabled parent to a child, the
      // tipsyshow event would be fired from the child, bubble through
      // the parent, and get caught higher up. That would cause the
      // already opened tooltip to close and fade in again. With this
      // code, we ignore the tipsyshow event because the target is the
      // the child that isn't tipsy-enabled.
      if (evnt.type === 'tipsyshow' && evnt.target !== this) return;

      // this element has a sticky open already
      if (openSticky === this) return;

      var tipsy = get(this);
      tipsy.hoverState = 'in';

      if (options.delayIn === 0) {
        tipsy.show();
      } else {
        tipsy.fixTitle();
        setTimeout(function() { if (tipsy.hoverState == 'in') tipsy.show(); }, options.delayIn);
      }
    }

    function leave(evnt) {
      // we do this for the same reason we do it for the tipsyshow event.
      // look at the comment a few lines above for more information.
      if (evnt.type === 'tipsyhide' && evnt.target !== this) return;

      var tipsy = get(this);

      // if this is a sticky tooltip, don't close it on dcg-tapstart. If we
      // closed it now, it would flicker back on when we mouse up and
      // make it permanent. We'd like it to stay on the whole time.
      if (evnt.type === 'dcg-tapstart' && tipsy.options.sticky) return;

      tipsy.hoverState = 'out';
      if (options.delayOut === 0) {
        tipsy.hide();
      } else {
        setTimeout(function() { if (tipsy.hoverState == 'out') tipsy.hide(); }, options.delayOut);
      }
    }

    if (!options.live) this.each(function() { get(this); });

    if (options.trigger != 'manual') {
      var eventIn  = options.trigger == 'hover' ? 'tipsyshow' : 'focus';
      var eventOut = options.trigger == 'hover' ? 'tipsyhide dcg-tapstart dcg-tapend dcg-tapcancel' : 'blur';

      if (options.live && options.delegate) {
        this.on(eventIn, options.delegate, enter).on(eventOut, options.delegate, leave);
      } else {
        var binder   = options.live ? 'on' : 'bind';
        this[binder](eventIn, enter)[binder](eventOut, leave);
      }
    }

    return this;
  };

  $.fn.tipsy.defaults = {
    className: null,
    delayIn: 0,
    delayOut: 0,
    fade: false,
    fadeIn: false,
    fadeOut: false,
    fallback: '',
    gravity: 'n',
    html: false,
    live: true,
    offset: 0,
    opacity: 1,
    title: 'title',
    trigger: 'hover'
  };

  // Overwrite this method to provide options on a per-element basis.
  // (remember - do not modify 'options' in place!)
  $.fn.tipsy.elementOptions = function(ele, options) {
    options = $.extend({}, options);

    var gravity = $(ele).attr('tipsy-gravity');
    if (gravity) {
      options.gravity = gravity;
    }

    var offset = parseInt($(ele).attr('tipsy-offset'), 10);
    if (!isNaN(offset)) {
      options.offset = offset;
    }

    return options;
  };

  $.fn.tipsy.autoNS = function() {
    return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's' : 'n';
  };

  $.fn.tipsy.autoWE = function() {
    return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e' : 'w';
  };

  /**
   * yields a closure of the supplied parameters, producing a function that takes
   * no arguments and is suitable for use as an autogravity function like so:
   *
   * @param margin (int) - distance from the viewable region edge that an
   *        element should be before setting its tooltip's gravity to be away
   *        from that edge.
   * @param prefer (string, e.g. 'n', 'sw', 'w') - the direction to prefer
   *        if there are no viewable region edges effecting the tooltip's
   *        gravity. It will try to vary from this minimally, for example,
   *        if 'sw' is preferred and an element is near the right viewable
   *        region edge, but not the top edge, it will set the gravity for
   *        that element's tooltip to be 'se', preserving the southern
   *        component.
  */
  $.fn.tipsy.autoBounds = function(margin, prefer) {
    return function() {
      var dir = {ns: prefer[0], ew: (prefer.length > 1 ? prefer[1] : false)},
          boundTop = $(document).scrollTop() + margin,
          boundLeft = $(document).scrollLeft() + margin,
          $this = $(this);

      if ($this.offset().top < boundTop) dir.ns = 'n';
      if ($this.offset().left < boundLeft) dir.ew = 'w';
      if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = 'e';
      if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = 's';

      return dir.ns + (dir.ew ? dir.ew : '');
    };
  };

  // automatically instantiate tipsy for .tipsy-sticky classes
  $(document).tipsy({
    title: 'tooltip',
    wait: 0,
    live: true,
    delegate: '.tipsy-sticky',
    gravity: 'nw',
    sticky: true,
    fade: false
  });

  var disableLocks = 0;
  function isTipsyDisabled () {
    return disableLocks !== 0;
  }

  function removeDisableLock() {
    disableLocks--;
  }

  function addDisableLock() {
    disableLocks++;
  }

  return {
    isDisabled: isTipsyDisabled,
    removeDisableLock: removeDisableLock,
    addDisableLock: addDisableLock
  };
});

define('loadcss!css/share_options', function(){});
define('main/popover_view',['require','jquery','pjs','underscore_view','conditional_blur'],function(require){
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var conditionalBlur = require('conditional_blur');

  var allPopovers = [];

  function handleIsVisibleChange (changedPopover) {
     // hide all other popovers when this one becomes visible
    if (changedPopover.isVisible) {
      allPopovers.forEach(function (popover) {
        if (popover !== changedPopover) {
          popover.closePopover();
        }
      });

      $(document).on('dcg-tapstart.popover-' + changedPopover.popoverNumber, function (evt) {
        changedPopover.setProperty('isVisible', !changedPopover.eventShouldClosePopover(evt));
      });
    } else {
      $(document).off('dcg-tapstart.popover-' + changedPopover.popoverNumber);
    }
  }

  var PopoverView = P(UnderscoreView, function(view, _super){

    view.init = function () {
      _super.init.call(this);
      this.isVisible = false;

      allPopovers.push(this);

      this.popoverNumber = allPopovers.length;

      this.observe('isVisible', function () {
        handleIsVisibleChange(this);
        this.renderIsVisible();
      }.bind(this));
    };

    //jquery selector for where the arrow head should point
    view.setPointTo = function (el) {
      this.pointTo = el;
    };

    view.alignArrow = function () {
      if (!this.isVisible) return;
      var cont = this.$();
      if (!this.pointTo.length || !cont.length) return;

      var offset = this.pointTo.offset().left + 0.5 * this.pointTo.width() - cont.offset().left;

      this.$('.dcg-arrow').css('left', offset);
    };

    view.setupOpenButton = function (openButton, on) {
      this.openButton = openButton;
      this.openButton.on(on, this.onBtnPressed.bind(this));
    };

    view.didInsertElement = function () {
      this.renderIsVisible();
    };

    view.renderIsVisible = function () {
      this.$().toggle(this.isVisible);
      if (this.openButton) this.openButton.toggleClass('dcg-active', this.isVisible);
      if (this.pointTo) this.alignArrow();
    };

    // don't do anything if we're inside the popover or if we're inside the openButton
    view.eventShouldClosePopover = function (evt) {
      return !this.eventIsWithinPopover(evt);
    };

    view.eventIsWithinPopover = function (evt) {
      var $target = $(evt.target);
      return $target.closest(this.$()).length || $target.closest(this.openButton).length;
    };

    view.onBtnPressed = function (evt) {
      //for touch devices
      conditionalBlur();

      var $target = $(evt.target);

      // this is a popover whose built inside of the button. act like we didn't
      // press the button
      if ($target.closest('.dcg-popover').length) {
        return;
      }

      // pressed the open/close button
      if ($target.closest(this.openButton).length) {
        this.togglePopover();
        return;
      }
    };

    view.togglePopover = function () {
      this.setProperty('isVisible', !this.isVisible);
    };

    view.closePopover = function () {
      this.setProperty('isVisible', false);
    };
  });

  return PopoverView;
});

define('template!share_options', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-share-container dcg-popover dcg-bottom dcg-constrained-height-popover">\n    <div class="dcg-popover-interior">\n\n    <!-- have a graph hash -->\n\n    <div class=\'dcg-popover-title\'>\n      '+
( t('Share your graph with the world!') )+
'\n    </div>\n    <div class="dcg-popover-content">\n\n      <div class=\'dcg-loading\'>\n          <img src="/assets/img/spinner_dark.gif" width="16px" height="16px" />\n          '+
( t('loading...') )+
'\n      </div>\n\n      <div class=\'dcg-loaded\'>\n        <br>\n        &nbsp; '+
( t('Share this link:') )+
'\n        <input class="dcg-permalink select-all dcg-variable-permalink"></input>\n\n        <form class="dcg-action-screenshoturl" target=\'_blank\' method=\'post\'>\n          <div class="dcg-btn-group dcg-options-btns">\n            <span class="dcg-btn dcg-action-togglesection" section="email">'+
( t('Email') )+
'</span>\n            <span class="dcg-btn dcg-action-togglesection" section="embed">'+
( t('Embed') )+
'</span>\n            <input type=\'hidden\' name=\'img\' class=\'dcg-imgData\'>\n            <button type=\'submit\' class="dcg-btn image-btn" section="image">'+
( t('Image') )+
'</button>\n          </div>\n        </form>\n\n        <div class="dcg-email-div share-div">\n          <div class="template-emailerrors"></div>\n          <form class="dcg-action-emailgraph">\n            <label>'+
( t('Send to:') )+
'\n            <input type="email" multiple="multiple" name="recipients" required="required" class="first-input" />\n            </label>\n\n            <label>'+
( t('Your Name:') )+
'\n            <input type="text" name="name" required="required" class="dcg-variable-username" />\n            </label>\n\n            <label>'+
( t('Message: <i>(optional)</i>') )+
'\n            <textarea name="message" rows="3" class=\'dcg-share-message\'></textarea>\n            </label>\n\n            <input type="hidden" name="hash" class="dcg-variable-graphhash" />\n            <button type="submit" class="dcg-btn dcg-btn-green" name="submit">'+
( t('Send') )+
'</button>\n\n            <span class=\'email-status-notifications\'>\n              <span class="template-ifprocessing">\n                <img src="/assets/img/spinner_dark.gif" width="16px" height="16px" />\n                '+
( t('sending...') )+
'\n              </span>\n            </span>\n          </form>\n        </div>\n        <div class=\'dcg-email-sent\'>\n          '+
( t('message sent') )+
'\n        </div>\n\n        <div class="dcg-embed-div share-div">\n          <label>\n            '+
( t('HTML Embed Code') )+
'\n            <a href="http://support.desmos.com/entries/22449752-embedding-graphs-with-html" target="_blank">'+
( t("what's this?") )+
'</a>\n            <textarea rows="4" class="select-all first-input dcg-variable-htmlembedcode"></textarea>\n          </label>\n  \n          <label>\n            '+
( t('BBCode') )+
'\n            <a href="http://support.desmos.com/entries/22449762-embedding-graphs-in-forums-with-bbcode" target="_blank">'+
( t("what's this?") )+
'</a>\n\n            <input rows="4" class="select-all dcg-variable-htmlembedcodebb" />\n\n          </label>\n        </div>\n\n        <div class="template-iffeatureable">\n          <div class=\'alert dcg-allow-feature\'>\n            <a type="button" class="close dcg-action-cancelfeature">\n              <i class="dcg-icon-remove"></i>\n            </a>\n            <div class=\'content\'>\n              <div class=\'dcg-title\'>\n                <b>'+
( t('Nice Graph!') )+
'</b> <br> '+
( t('Want us to consider it for staff picks?') )+
'\n              </div>\n              <span class="dcg-disallowFeature dcg-feature-btn dcg-action-togglefeature">\n                '+
( t('no, thanks') )+
'\n              </span>\n              <span class="dcg-allowFeature dcg-feature-btn dcg-action-togglefeature">\n                '+
( t('yes, please!') )+
'\n              </span>\n              <div style=\'clear:both\'></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  \n    <div class="dcg-arrow"></div>\n</div>\n';
}
return __p;
};});
define('main/share_options',['require','loadcss!css/share_options','jquery','underscore','pjs','main/popover_view','main/calculator_backend','main/parse_json_errors','template!share_options'],function(require){
  require('loadcss!css/share_options');

  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var calculatorBackend = require('main/calculator_backend');
  var parseJSONErrors = require('main/parse_json_errors');
  var template = require('template!share_options');

  /*
  * view for the settings bar
  */

  var ShareView = P(PopoverView, function (view, _super) {
    view.template = template;
    view.pointToSelector = '.dcg-action-share i';

    view.init = function (userController, graphsController, Calc) {
      _super.init.call(this);
      this.graphsController = graphsController;
      this.userController = userController;
      this.Calc = Calc;
      this.sharePromise = $.Deferred().reject().promise();
      this.setProperty('isFeatureable', false);
    };

    view.renderIsVisible = function () {

      _super.renderIsVisible.call(this);
      var isVisible = this.isVisible;
      this.$().toggle(isVisible);

      if (this.isVisible) {
        this.onBecameVisible();
      } else {
        this.onBecameHidden();
      }
    };

    view.eventShouldClosePopover = function (evt) {
      var $target = $(evt.target);

      if (this.eventIsWithinPopover(evt)) {
        return false;
      }

      return !$target.closest("#state-modals").length &&
             $target.attr("id") != "modal_background";
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      this.$().on('dcg-tapstart', ".select-all", function () {
        $(this).on('dcg-tapend', function () {
          $(this).select();
        });
      });

      this.$().on('dcg-tapmove dcg-tapend', ".select-all", function () {
        $(this).off('dcg-tapend');
      });

      // event listeners
      this.$('.dcg-action-togglesection').on('dcg-tap', this.toggleSection.bind(this));
      this.$('.dcg-action-emailgraph').on('submit', this.emailGraph.bind(this));
      this.$('.dcg-action-cancelfeature').on('dcg-tap', this.cancelFeature.bind(this));
      this.$('.dcg-allowFeature').on('dcg-tap', this.allowFeature.bind(this));
      this.$('.dcg-disallowFeature').on('dcg-tap', this.disallowFeature.bind(this));

      var self = this;
      function handleUserUpdate () {
        var user = self.userController.currentUser;
        if (user) {
          self.setUser({
            name: user.name
          });
        } else {
          self.setUser(null);
        }
      }

      this.userController.observe('currentUser', function () {
        if (self.userController.currentUser) {
          // currentUser is null when user is signed out.
          self.userController.currentUser.observe('name', handleUserUpdate);
        }
        handleUserUpdate();
      });

      handleUserUpdate();

      this.observeAndSync('isFeatureable', this.renderIsFeatureable.bind(this));
      this.observe('userAllowsFeature', this.renderUserAllowsFeature.bind(this));
      this.computeIsFeatureable();

      this.renderUser();
      this.renderGraph();
      this.renderIsProcessing();
      this.renderEmailErrors();
      this.renderOpenSection();
      this.setProperty('userAllowsFeature', true);
    };

    view.onBecameVisible = function() {
      var self = this;
      var graph = this.graphsController.currentGraph.copy();
      this.graphsController.updateGraphData(graph);
      var sharePromise = this.sharePromise = calculatorBackend.shareGraph(graph).done(
        function (graph) {
          // If another request has been sent since this one began, don't move past
          // the "loading" state until the latest request finishes
          if (self.sharePromise !== sharePromise) return;
          self.setGraph(graph);
          self.$('.dcg-loading').hide();
          self.$('.dcg-loaded').show();
          self.$('.dcg-imgData').val(self.Calc.screenshot());
        }
      );
    };

    view.onBecameHidden = function() {
      this.$('.dcg-loaded').hide();
      this.$('.dcg-loading').show();
      var graph = this.graph;
      if (this.isFeatureable && this.userAllowsFeature) {
        this.sharePromise.done(function () {
          calculatorBackend.allowFeature({hash: graph.hash});
        });
      }
      this.minimizeSections();
      this.setIsProcessing(false);
      this.setEmailErrors(undefined);
    };

    view.getIsProcessing = function () {
      return this.isProcessing;
    };

    view.setIsProcessing = function (isProcessing) {
      if (isProcessing === this.isProcessing) return;
      this.isProcessing = isProcessing;
      this.renderIsProcessing();
    };

    view.renderIsProcessing = function () {
      this.$('.template-ifprocessing').toggle(this.getIsProcessing());
    };

    view.getEmailErrors = function () {
      return this.emailErrors;
    };

    view.setEmailErrors = function (emailErrors) {
      if (_.isEqual(emailErrors, this.emailErrors)) return;
      this.emailErrors = emailErrors;
      this.renderEmailErrors();
    };

    view.renderEmailErrors = function () {
      var errors = this.$('.template-emailerrors');
          errors.children().remove();
      _.each(this.emailErrors, function (error) {
        errors.append('<div class="dcg-errors">'+error.message+'</div>');
      });
    };

    view.computeIsFeatureable = function () {
      var graph = this.graphsController.currentGraph;

      //we don't want Clever users to be able to accidentally mark graphs as public
      //since we get their name through the API and until we have explicit permission we
      //don't want to use that kind of user-identifiable information.
      var isCleverUser = this.userController.currentUser && this.userController.currentUser.isCleverUser;
      var isFeatureable = (graph && graph.title && !isCleverUser);
      this.setProperty('isFeatureable', isFeatureable);
    };

    view.renderIsFeatureable = function () {
      this.$('.template-iffeatureable').toggle(!!this.isFeatureable);
    };

    view.renderUserAllowsFeature = function () {
      this.$('.dcg-allowFeature').toggleClass(
        "dcg-active",
        !!this.userAllowsFeature
      );
      this.$('.dcg-disallowFeature').toggleClass(
        "dcg-active",
        !this.userAllowsFeature
      );
    };

    view.setGraph = function (graph) {
      if (this.graph && _.isEqual(graph, this.graph)) return;
      this.graph = graph;
      this.renderGraph();
      this.computeIsFeatureable();
    };

    view.renderGraph = function () {
      var graph = this.graph;
      if (!graph) graph = {};
      if (!graph.hash) graph.hash = '';
      if (!graph.path) graph.path = '';

      this.$('.dcg-action-screenshoturl').attr('action', this.getScreenshotUrl(graph));
      this.$('.dcg-variable-facebook').attr('href', this.getFacebookURL(graph));
      this.$('.dcg-variable-twitter').attr('href', this.getTwitterURL(graph));
      this.$('.dcg-variable-google').attr('href', this.getGooglePlusURL(graph));
      this.$('.dcg-permalink').val(graph.path);
      this.$('.dcg-variable-graphhash').val(graph.hash);
      this.$('.dcg-variable-htmlembedcode').val(this.getHtmlEmbedCode(graph));
      this.$('.dcg-variable-htmlembedcodebb').val(this.getHtmlEmbedCodeBB(graph));
    };

    view.setUser = function (user) {
      if (_.isEqual(user, this.user)) return;
      this.user = user;

      this.renderUser();
      this.computeIsFeatureable();
    };

    view.renderUser = function () {
      var user = this.user;

      this.$('.dcg-variable-username').val(user ? user.name : '');
    };

    view.minimizeSections = function() {
      this.setOpenSection(null);
      $('.share-div').hide();
    };

    view.getOpenSection = function () {
      return this.openSection;
    };

    view.setOpenSection = function (section) {
      if (section === this.openSection) return;
      this.openSection = section;

      this.renderOpenSection();
    };

    view.renderOpenSection = function () {
      var section = this.getOpenSection();
      this.$('[section=email]').toggleClass('dcg-active', section === 'email');
      this.$('[section=embed]').toggleClass('dcg-active', section === 'embed');
      this.$('[section=image]').toggleClass('dcg-active', section === 'image');
    };

    view.toggleSection = function(e) {
      var section = $(e.target).attr("section");
      var isOpen = this.getOpenSection() === section;
      this.minimizeSections();

      if (!isOpen) {
        this.$('.dcg-allow-feature').hide();
        this.$('.dcg-' + section + '-div').show();
        this.$('.dcg-' + section + '-div .first-input').focus().select();

        if (section === 'email') {
          this.$('.dcg-share-message').val('');
          this.$('.dcg-email-div .first-input').val('');
        }

      } else {
        this.$('.dcg-allow-feature').show();
        section = null;
      }

      this.setOpenSection(section);
    };

    view.allowFeature = function() {
      this.setProperty('userAllowsFeature', true);
    };
    view.disallowFeature = function() {
      this.setProperty('userAllowsFeature', false);
    };

    view.cancelFeature = function() {
      this.setProperty('userAllowsFeature', false);
      this.$('.template-iffeatureable').slideUp('fast');
    };

    view.getFacebookURL = function(graph) {
      return 'https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(graph.path);
    };

    view.getTwitterURL = function(graph) {
      var message, path;
      if (graph.hash) {
        message = 'Look what I made with the Desmos Graphing Calculator: ';
        path = graph.path;
      } else {
        message = 'Check out the Desmos Graphing Calculator: beautiful, free math!';
        path = 'https://www.desmos.com';
      }
      return (
        'https://twitter.com/intent/tweet?' +
        'url=' + encodeURIComponent(path) +
        '&text=' + encodeURIComponent(message) +
        '&via=desmos'
      );
    };

    view.getGooglePlusURL = function(graph) {
      return 'https://plus.google.com/share?url='+encodeURIComponent(graph.path);
    };

    view.getHtmlEmbedCode = function(graph) {
      return (
        '<a title="View with the Desmos Graphing Calculator" href="' + graph.path + '">' +
        '  <img src="' + graph.thumbURL + '" width="200px" height="200px"' +
        '     style="border:1px solid #ccc; border-radius:5px"' +
        '  />' +
        '</a>'
      );
    };

    view.getHtmlEmbedCodeBB = function(graph) {
      return '[GRAPH]' + graph.hash + '[/GRAPH]';
    };

    view.emailGraph = function (evt) {
      //don't submit the form
      evt.preventDefault();
      //don't repeat send
      if (this.getIsProcessing()) return;

      this.setIsProcessing(true);
      var self = this;
      var formData = $(evt.target).serialize();
      calculatorBackend.emailGraph(formData).done(function (msg) {
        self.setEmailErrors(undefined);
        self.$('.dcg-email-div').hide();
        self.$('.dcg-email-sent').show();
        setTimeout(function() {
          self.$('.dcg-email-sent').slideUp(400);
          self.minimizeSections();
        }, 1000);
      }).fail(function (jqXHR) {
        self.setEmailErrors(parseJSONErrors(jqXHR));
      }).always(function () {
        self.setIsProcessing(false);
      });
    };

    view.getScreenshotUrl = function(graph) {
      return "/screenshot/" + graph.hash;
    };

  });

  return ShareView;
});

define('loadcss!css/help', function(){});
define('template!help_desktop', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-help-container dcg-popover dcg-bottom dcg-constrained-height-popover">\n  <div class="dcg-popover-interior">\n\n\n    <div class=\'dcg-popover-title\'>'+
( t('Tours') )+
'</div>\n    <div class=\'dcg-popover-content dcg-tours-content\'>\n      <!-- tours get inserted here -->\n    </div>\n\n    <div class=\'dcg-popover-title\'>'+
( t('Resources') )+
'</div>\n    <div class=\'dcg-popover-content dcg-resources-content\'>\n      <div>\n        <a href=\''+
( userGuideURL )+
'\' target=\'_blank\'>\n          <i class=\'dcg-icon-book\'></i>\n          <span>'+
( t('Desmos User Guide') )+
'</span>\n        </a>\n      </div>\n\n      <div>\n        <a href=\'http://support.desmos.com/categories/20081717-using-the-desmos-graphing-calculator\' target=\'_blank\'>\n          <i class=\'dcg-icon-comments\'></i>\n          <span>'+
( t('Help Center') )+
'</span>\n        </a>\n      </div>\n    </div>\n\n    <div class=\'dcg-popover-title dcg-interior-title\'>'+
( t('Feedback') )+
'</div>\n    <div class=\'dcg-popover-content\'>\n      <div class=\'dcg-resources-content dcg-feedback-content\'>\n\n\n      <span class="dcg-feedback-twitter">\n        <a href="https://twitter.com/intent/tweet?text=Hey%2C%20%40desmos:%20I\'ve%20got%20a%20question!&via=desmos" target=\'_blank\'>\n          <i class=\'dcg-icon-twitter\'></i>\n          <span>'+
( t('Tweet @desmos') )+
'</span>\n        </a>\n       </span>\n       <span class="dcg-feedback-facebook">\n        <a href="https://www.facebook.com/desmosinc" target=\'_blank\'>\n          <i class=\'dcg-icon-facebook\'></i>\n          <span>'+
( t('Tell us on Facebook') )+
'</span>\n        </a>\n      </span>\n\n\n      </div>\n\n      ';
 if (previewMode) { 
;__p+='\n\n        <div class=\'dcg-previewMode\'>\n          '+
( previewMessage )+
'<br>\n          <a class=\'dcg-btn-green dcg-btn\' href=\''+
(previewFeedbackUrl)+
'\' target=\'_blank\'>\n            '+
( t("Share your thoughts!") )+
'\n          </a>\n        </div>\n\n      ';
 } 
;__p+='\n\n      ';
 if (!maintenance && !previewMode) { 
;__p+='\n        <div class="dcg-suggestions">\n          <div class="template-errors"></div>\n          <div class="dcg-feedback-email-sent">\n            '+
( t("Thanks for the feedback &ndash; you'll hear from us soon!") )+
'\n          </div>\n\n          <form class="dcg-action-submit">\n\n            <textarea placeholder="'+
( t('type your question or suggestion...') )+
'" name="message"></textarea>\n            <div class="dcg-suggestions-expansion">\n              <div class="template-unlessuser">\n                <div class=\'dcg-feedback-email-label\'>\n                  '+
( t('Please provide an email so that we can write back.') )+
'\n                  <i>('+
( t('optional') )+
')</i></div>\n                <input name="anonymous-email" class="dcg-anonymous-email" placeholder="your.name@test.com" type="email" />\n              </div>\n              <span class="dcg-feedback-btns">\n                <a class="dcg-btn dcg-action-closesuggestion">\n                  '+
( t('Cancel') )+
'\n                </a>\n                <button class="dcg-btn dcg-btn-green" name="submit" type="submit">\n                  '+
( t('Send Feedback') )+
'\n                </button>\n                </span>\n\n              <div class="template-processing" style="display:none">\n                <img src="/assets/img/spinner_dark.gif" width="16px" height="16px" /> '+
( t('sending...') )+
'\n              </div>\n            </div>\n          </form>\n        </div>\n      ';
 } 
;__p+='\n    </div>\n  </div>\n  <div class=\'dcg-arrow\'></div>\n</div>\n';
}
return __p;
};});
define('template!tour_link', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<a class="dcg-feature" href="/calculator?tour='+
( name )+
'" target="_blank">\n  <span class="dcg-thumb dcg-'+
( name )+
'"></span></span>\n  '+
( t(title) )+
'\n</a>';
}
return __p;
};});
define('main/tour_link',['require','pjs','template!tour_link','underscore_view'],function(require){

  var P = require('pjs');
  var template = require('template!tour_link');
  var UnderscoreView = require('underscore_view');

  /*
  * view for the help tours element
  */

  var TourLinkView = P(UnderscoreView, function (view, _super) {
    view.template = template;
    //tourData:
    // * name
    // * img
    // * title
    //
    //options:
    // * stayInPage: true/false (if true, it doesn't open in a new window ever)
    view.init = function (tourController, tourData, options) {
      _super.init.call(this);
      this.options = options || {};
      this.tourData = tourData;
      this.tourController = tourController;
    };

    view.getTemplateParams = function () {
      return this.tourData;
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      this.$('.dcg-feature').on('dcg-tap', this.launchTour.bind(this));
      this.$('.dcg-feature').on('click', this.preventPopupTour.bind(this));
    };

    view.shouldPopupTour = function () {
      if (this.options.stayInPage) return false;
      return this.tourController.shouldPopupTour(this.tourData.name);
    };

    view.preventPopupTour = function (evt) {
      if (!this.shouldPopupTour()) evt.preventDefault();
    };

    view.launchTour = function(evt) {
      if (this.shouldPopupTour()) return;
      this.tourController.startTour(this.tourData.name);
      this.triggerEvent('tourLaunched');
    };
  });

  return TourLinkView;
});

define('tours/base_tour',['require','pjs','jquery','underscore','i18n'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var _ = require('underscore');
  var i18n = require('i18n');

  return P(function(tour){

    tour.init = function (Calc) {
      this.Calc = Calc;

      // Legacy. New code should talk to the attached Calc object.
      this.expressionsView = this.Calc.expressions;
    };

    tour.expressionsVisible = function () {
      return this.expressionsView.getProperty('expressionsVisible');
    };

    tour.requireExpressionsVisible = function () {
      return {
        position: 'e',
        content: i18n.t('Click to show the list of expressions.'),
        sel: $('.dcg-action-showexpressions'),
        delayBeforeEnter: 400,
        delayBeforeExit: 400
      };
    };

    tour.resourcesOpen = function () {
      return $('body').hasClass('resources-open');
    };

    tour.requireResourcesNotOpen = function () {
      return {
        position: 'e',
        content: i18n.t('Click to return to this graph.'),
        sel: $('.dcg-action-opendrawer'),
        delayBeforeEnter: 400,
        delayBeforeExit: 400
      };
    };

    tour.editListMode = function () {
      return this.expressionsView.getProperty('editListMode');
    };

    tour.requireNotEditListMode = function () {
      return {
        position: 's',
        content: i18n.t('Click to return to your expressions.'),
        sel: $('.dcg-action-toggle-edit')
      };
    };

    tour.expressionCount = function () {
      return this.expressionsView.model.getItemsByIndexRange(0, Infinity).length;
    };

    // only return visible sketches. We have no guarantee of validity of invsibile ones.
    tour.getExpSketch = function (exp) {
      var sketch = this.Calc.grapher.graphSketches[exp.id];
      if (sketch && !sketch.visible) return undefined;

      return sketch;
    };

    //help function for getMatchingExp && filterSelectedExp
    //exp is the expression model
    //p is either a single predicate, or an array of predicates

    tour.expMatches = function(exp, p) {
      if (!exp) return false;
      if (typeof p === "function")
        return p.call(this, exp, this.getExpSketch(exp));

      //for later -- allow multiple predicates
      for (var i = 0 ; i < p.length ; i++) {
        if (!p[i].call(this, exp, this.getExpSketch(exp))) return false;
      }
      return true;
    };

    //this is the big legwork function. Argument is a predicate function,
    //which takes two arguments: model & graphSketches
    //
    //this method first looks at the selected expression, to see if it matches the predicate
    //if not, it looks through the set of visible expressions (not in a collapsed folder)
    //to see if it finds a matching expression
    //
    //return value is either an expression view, or null

    tour.getMatchingExp = function(p) {
      var exp = this.expressionsView.model.getSelected();
      if (this.expMatches(exp, p)) return this.expressionsView.getItemView(exp.id);

      var exps = this.expressionsView.model.getItemsByIndexRange(0, Infinity);
      //filter out items in collapsed folders
      exps = _.filter(exps, function(exp) {
        return !exp.folder || !exp.folder.collapsed;
      });
      for (var i = 0 ; i < exps.length ; i++) {
        exp = exps[i];
        if (this.expMatches(exp, p)) return this.expressionsView.getItemView(exp.id);
      }
      return null;
    };
    //like above, but only matches the selected expression
    //useful if we're guiding people through steps where they could break things
    tour.filterSelectedExp = function(p) {
      var exp = this.expressionsView.model.getSelected();
      if (this.expMatches(exp, p)) {
        return this.expressionsView.getItemView(exp.id);
      }
      return null;
    };

    //********
    //
    //  Define a few common predicates
    //
    //********

    tour.FOCUSED_EXP = function(model, sketch) {
      return (model.selected && model.isExpression);
    };

    tour.FOCUSED_OR_EMPTY_EXP = function(model, sketch) {
      if (model.selected && model.isExpression) return true;
      return (model.isExpression && model.isEmpty());
    };

    //has to be more complicated than a straight line.
    tour.COMPLEX_EXP = function(model, sketch) {
      return (
        model.isGraphable &&
        model.isExpression &&
        sketch &&
        sketch.branches[0] &&
        sketch.branches[0].conic !== 'line'
      );
    };

    tour.TABLEABLE_EXP = function(model, sketch) {
      return (
        model.isGraphable &&
        model.isTableable
      );
    };

    tour.EXP = function(model, sketch) {
      return model.isExpression;
    };
    //a function that shows up on the graph
    //do we also check that it isn't turned off?
    tour.GRAPHABLE_EXP = function(model, sketch) {
      return model.isGraphable;
    };
    tour.HAS_ERROR = function(model, sketch) {
      //logic more-or-less copied from abstract_icon.js -- we have an error iff there's an error
      //on the model and the model isn't empty. blank expression doesn't count as an error
      return model.error && !model.isEmpty();
    };

    //exp has more than n dependencies
    //TODO: would be great to include satisfied dependencies somewhere in formula
    //in addition to the unsatisfied dependencies
    tour.HAS_N_DEPENDENCIES = function(n) {
      return function(model, sketch) {
        return model.isExpression &&
               model.formula &&
               model.formula.variables &&
               model.formula.variables.length >= n;
      };
    };
    //non-constant expression
    tour.NONCONSTANT_LINE = function(model, sketch) {
       return sketch &&
              sketch.branches[0].conic === 'line' &&
              !isFinite(model.formula.constant_value);
    };

    tour.RESTRICTED_LINE = function(model, sketch) {
      return this.NONCONSTANT_LINE(model, sketch) &&
             this.RESTRICTED(model, sketch);
    };
    //this is a valid expression that *isn't* a restricted line
    //todo: some generalization of this concept?
    tour.EXP_NOT_RESTRICTED_LINE = function(model, sketch) {
      return this.EXP(model, sketch) && !this.RESTRICTED_LINE(model, sketch);
    };

    tour.PARABOLA = function(model, sketch) {
      return sketch &&
             sketch.branches &&
             sketch.branches.some(function(b){return b.conic === 'parabola'});
    };

    tour.RESTRICTED = function(model, sketch) {
      if (!model || !model.latex) return false;
      return !!model.latex.match(/\\left\\{(.+)\\right\\}/);
    };

    tour.SHIFTED_PARABOLA = function(model, sketch) {
      if (!this.PARABOLA(model, sketch)) return false;

      var fn = sketch.branches[0].compiled.fn;
      return (fn(0) !== 0 || fn(1) !== 1);
    };

    tour.HAS_DEPENDENT_Y = function(model, sketch) {
      return model.formula.assignment === 'y';
    };

    tour.SLIDER = function(model, sketch) {
      return !!model.slider && !model.isGraphable;
    };
    tour.ANIMATING_SLIDER = function(model, sketch) {
      return (model.slider && model.slider.isPlaying);
    };
    tour.SLID_SLIDER = function(model, sketch) {
      return (model.slider && !model.isGraphable && model.slider.value !== 1);
    };

    //table selectors
    tour.TABLE = function(model, sketch) {
      return model.isTable;
    };

    tour.REGRESSION = function(model, sketch) {
      return model.formula && model.formula.regression;
    };

    tour.HAS_DATA_COLUMN = function(model, sketch) {
      if (!this.TABLE(model, sketch)) return false;
      for (var i = 1 ; i < model.columns.length ; i++) {
        if (model.columns[i].discrete) return true;
      }
      return false;
    };
    tour.HAS_FUNCTION_COLUMN = function(model, sketch) {
      if (!this.TABLE(model, sketch)) return false;
      for (var i = 1 ; i < model.columns.length ; i++) {
        if (model.columns[i].discrete === false) return true;
      }
      return false;
    };
  });
});

define('tours/sliders',['require','pjs','./base_tour','i18n'],function(require){
  var P = require('pjs');
  var BaseTour = require('./base_tour');
  var i18n = require('i18n');

  return P(BaseTour, function(tour, _super){

    //state variables
    tour.sliderHasSlid = false;

    tour.shouldPopup = function () {
      if (this.getMatchingExp(this.SLIDER)) return true;
      return false;
    };

    tour.update = function() {
      /* jshint maxcomplexity:11 */
      //need expressions visible and resources closed for the entirety of this tour
      if (this.resourcesOpen()) return this.requireResourcesNotOpen();
      if (!this.expressionsVisible()) return this.requireExpressionsVisible();
      if (this.editListMode()) return this.requireNotEditListMode();

      var graphable_exp = this.getMatchingExp(this.GRAPHABLE_EXP);
      var slider = this.getMatchingExp(this.SLIDER);
      var animating_slider = this.getMatchingExp(this.ANIMATING_SLIDER);
      var slid_slider = this.getMatchingExp(this.SLID_SLIDER);

      //End condition: there's a graphable function which depends on a slider that is playing
      //TODO - not enforcing graphable dependent function yet
      //graphability is easy to check (formula.is_graphable), but dependency tree isn't exported
      //from the worker.
      if(graphable_exp && animating_slider) return {
        final: true,
        position: 's',
        endingMsg: i18n.t("You're a slider pro!"),
        sel: animating_slider.$('.dcg-animate-pause'),
      };

      if (graphable_exp && slid_slider) {
        //don't jump to the step while user is actively sliding
        if (slid_slider.$('.dcg-depressed').length) return {
          doNotUpdate: true
        };

        return {
          position: 's',
          content: '<b>'+i18n.t('Go "Hands-free"')+'</b><br>'+i18n.t('Press play to animate the slider.'),
          sel: slid_slider.$('.dcg-animate-play')
        };
      }

      if (graphable_exp && slider) return {
        position: 's',
        content: i18n.t('Drag the handle to change the value.'),
        sel: slider.$('.dcg-thumb')
      };



      //****
      // below here should be instructions for getting you to a state
      // with a graphable expression connected to sliders
      //****

      var exp;

      //rule here: point to btn if we have 2 btns.
      //weird addition: if the exp list is complicated and there's one btn,
      //point at that. Fixes case of y=mx+b, m=2. We want to point at b
      //would've been way simpler to just point at an expression that has
      //more than 2 dependencies, which would just require that
      //we record *valid* dependencies somewhere in the expression or formula
      if (this.expressionCount() > 1) {
        exp = this.getMatchingExp(this.HAS_N_DEPENDENCIES(1));
      } else {
        exp = this.getMatchingExp(this.HAS_N_DEPENDENCIES(2));
      }
      if(exp) return {
        position: 's',
        content: '<b>'+i18n.t('Awesome!')+'</b> '+i18n.t('Now click here to add the sliders.'),
        sel: exp.$('.dcg-slider_btn_container:last .dcg-btn')
      };

      exp = this.getMatchingExp(this.FOCUSED_OR_EMPTY_EXP);
      if (exp) return {
        position: 'e',
        content: '<b>'+i18n.t('Let\'s make some sliders!')+'</b><br>'+
                  i18n.t(
                    'Try typing __sample_expression__',
                    {sample_expression:'<code>y=mx+b</code>'}
                  ),
        sel: exp.$(),
        //give the expression-footer time to animate
        delayBeforeExit: 600
      };

      //create a new expression
      return {
        position: 'e',
        content: i18n.t('Click here to create a new blank expression.'),
        sel: '.dcg-action-newmath'
      };
    };
  });
});

define('tours/scatter_plot',['require','pjs','jquery','./base_tour','i18n'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var BaseTour = require('./base_tour');
  var i18n = require('i18n');

  return P(BaseTour, function(tour, _super){

    tour.shouldPopup = function () {
      if (this.getMatchingExp(this.TABLE)) return true;
      return false;
    };

    tour.update = function(){
      /* jshint maxcomplexity:23 */
      //need expressions visible and resources closed for the entirety of this tour
      if (this.resourcesOpen()) return this.requireResourcesNotOpen();
      if (!this.expressionsVisible()) return this.requireExpressionsVisible();
      if (this.editListMode()) return this.requireNotEditListMode();

      // Tour:
      // 1. Make a table from drop-down as a scatter-plot
      // 2. Fill it in, at least 3 rows worth
      // 3. Connect the dots

      var dataTable = this.getMatchingExp(this.HAS_DATA_COLUMN);

      //Click add expression to show create table button
      if (!dataTable) {
        var newTable = $('.dcg-action-newtable:visible');
        if (newTable.length === 0) return {
          position: 'e',
          content: '<b>'+i18n.t("Let's make a scatter plot!")+'</b><br>'+i18n.t('Click here to add a new item.'),
          sel: $('.dcg-add-expression-btn')
        };

        //If there are no tables but we can see create table button, create a table
        return {
          position: 'e',
          content: i18n.t('... and select the "table" option.'),
          sel: newTable,
          //when we first create the table, it takes the evaluator a little while to
          //recognize the table as existing. rather than bounce back a step, we use
          //delayBeforeExit to just pause tour updates for 300ms when we're leaving this step
          delayBeforeExit: 300
        };
      }

      //guide through the process of filling in this table
      var table = dataTable.model;
      var focused = table.selectedCell;
      var rows = table.columns[0].cells.length;

      //check if the table's all filled up.
      var filledRows = 0;
      for (var i = 0 ; i < rows && i < 3 ; i++) {
        if (
          table.columns[0].cells[i].value &&
          !table.columns[0].cells[i].error &&
          table.columns[1].cells[i].value &&
          !table.columns[1].cells[i].error
        ) filledRows++;
      }

      //Table's filled! proceed through changing the display type
      if (filledRows === 3) {
        var isConnected = (table.columns[1].columnMode === "POINTS_AND_LINES");
        var menuOpen = ($('.dcg-table-column-menu').length > 0);

        //all done -- connected dots
        if (isConnected && !menuOpen) return {
          final: true,
          position: 'e',
          endingMsg: i18n.t("You're a scatter plot whiz!"),
          sel: dataTable.$()
        };

        //we're almost done, just need to close context menu
        if (isConnected) return {
          position: 'e',
          content: i18n.t('Click anywhere to close the drawing options.'),
          sel: dataTable.$()
        };

        //need to open menu to connect dots
        if (!menuOpen) return {
          content: ['<b>'+i18n.t('Last trick!')+'</b><br>',
                    i18n.t('Click and hold on this icon until the options menu opens up.')].join(''),
          position: 'e',
          sel: dataTable.columnViews[1][0].$('.dcg-graph-icon')
        };

        //if the menu is open, connect the dots
        return {
          content: i18n.t('Click here to connect the dots.'),
          position: 'e',
          sel: '.dcg-table-points-and-lines'
        };
      }

      //
      //table's there and ready to filled. let's fill 'er up!
      //

      //Step 1: correct any errors if they exist
      var row, col;
      for (row = 0 ; row < rows ; row++) {
        for (col = 0 ; col < 2 ; col++) {
          if (table.columns[col].cells[row].error) {
            return {
              position: 'e',
              content: i18n.t('Uh-oh! Type a valid number here.'),
              sel: dataTable.columnViews[col][row+1].$()
            };
          }
        }
      }

      if (!focused) {
        return {
          position: 'e',
          content: i18n.t('Click back to continue editing.'),
          sel: dataTable.columnViews[1][rows-1].$()
        };
      }

      //this is a special case. You're in the top row and it's filled in
      //we teach going down a row.
      if (rows === 2 && filledRows === 1 && focused && focused.row === 1) {
        return {
          position: 'e',
          content: i18n.t('Go down to the next row to add more data.'),
          sel: dataTable.columnViews[1][focused.row].$()
        };
      }

      //a few special cases for creating new rows.
      if (rows === 3 && filledRows === 2 && focused) {
        return {
          position: 'e',
          content: '<b>'+i18n.t('Awesome!')+'</b><br>'+i18n.t('Now try pressing Enter.'),
          sel: dataTable.columnViews[1][focused.row].$()
        };
      }

      //fill in whatever cell is empty
      for (row = 0 ; row < rows ; row++) {
        for (col = 0 ; col < 2 ; col++) {
          if (!table.columns[col].cells[row].value) {

            var msg = i18n.t('Fill in this whole row.');
            if (row === 2 && col === 1) {
              msg = i18n.t('Just fill in one more...');
            }
            if (row === 0 && col === 1) {
              msg = '<b>'+i18n.t('Fill it in.')+'</b><br>'+i18n.t('Type any number here.');
            }

            return {
              position: 'e',
              content: msg,
              sel: dataTable.columnViews[1][row+1].$()
            };
          }
        }
      }

      //shouldn't ever get here.
      return;
    };
  });
});

define('tours/function_table',['require','pjs','./base_tour','i18n','jquery'],function(require){
  var P = require('pjs');
  var BaseTour = require('./base_tour');
  var i18n = require('i18n');
  var $ = require('jquery');

  return P(BaseTour, function(tour, _super){

    tour.shouldPopup = function () {
      if (this.getMatchingExp(this.TABLE)) return true;
      return false;
    };

    tour.update = function(){
      /* jshint maxcomplexity:12 */
      //need expressions visible and resources closed for the entirety of this tour
      if (this.resourcesOpen()) return this.requireResourcesNotOpen();
      if (!this.expressionsVisible()) return this.requireExpressionsVisible();

      var functionTable = this.getMatchingExp(this.HAS_FUNCTION_COLUMN);
      var exp = this.getMatchingExp(this.FOCUSED_OR_EMPTY_EXP);
      var tableable = this.getMatchingExp([this.COMPLEX_EXP, this.TABLEABLE_EXP]);


      //we have a function table. now let's do awesome things with it.
      if (functionTable) {
        var table = functionTable.model;
        var isDotted = (table.columns[1].columnMode === "POINTS");
        var menuOpen = ($('.dcg-table-column-menu').length > 0);
        var hasFilledInCol = (table.columns.length > 3 && table.columns[2].discrete === false);
        var focused = table.selectedCell;

        //all done -- connected dots
        if (hasFilledInCol) return {
          final: true,
          position: 'e',
          endingMsg: i18n.t("You're a table wizard!"),
          sel: functionTable.$()
        };

        //if we've put focus into that header
        if (focused && focused.row === 0 && focused.column === 2) return {
          position: 'e',
          content: i18n.t(
                    'Try typing __sample_expression__',
                    {sample_expression: '<code>cos(<var>x</var>)</code>'}
                  ),
          sel: functionTable.columnViews[2][0].$()
        };

        if (focused && (focused.row !== 0 || focused.column !== 2)) return {
          position: 'e',
          content: i18n.t('Move right to add a new column.'),
          sel: functionTable.columnViews[2][0].$()
        };

        //we're almost done, just need to close context menu
        if (isDotted && !focused) return {
          position: 'e',
          content: i18n.t('Click here to continue editing this table.'),
          sel: functionTable.columnViews[1][0].$()
        };

        //need to open menu to connect dots
        if (!menuOpen) return {
          content: i18n.t('Click and hold on this icon until the options menu opens up.'),
          position: 'e',
          sel: functionTable.columnViews[1][0].$('.dcg-graph-icon')
        };

        return {
          content: i18n.t('Click here to only show the dots.'),
          position: 'e',
          sel: '.dcg-table-points'
        };
      }


      //once we have a parabola, guide through the steps of converting to a table
      if (tableable) {
        if (this.editListMode()) return {
          position: 'e',
          content: i18n.t('Click here to generate a table.'),
          sel: '.dcg-action-createtable',
          //give the table time to do its thing before going on
          delayBeforeExit: 400
        };
        return {
          position: 's',
          content: '<b>'+i18n.t('Convert this to a table.')+'</b><br>' +
                   i18n.t('Click the "Edit List" button.'),
          sel: '.dcg-action-toggle-edit'
        };
      }

      //guide user toward making a parabola
      if (exp) return {
        position: 'e',
        content: ['<b>'+i18n.t('Start by graphing a function.')+'</b><br>',
                  i18n.t(
                    'Try typing __sample_expression__',
                    {sample_expression: '<code><var>y</var>=sin(<var>x</var>)</code>'}
                  )
                 ].join(''),
        sel: exp.$()
      };

      return {
        position: 'e',
        content: i18n.t("Let's make a function. First: click here to create a new blank expression."),
        sel: '.dcg-new-math-div'
      };
    };
  });
});

define('tours/restrictions',['require','pjs','./base_tour','i18n'],function(require){
  var P = require('pjs');
  var BaseTour = require('./base_tour');
  var i18n = require('i18n');

  return P(BaseTour, function(tour){

    tour.shouldPopup = function () {
      if (this.getMatchingExp(this.RESTRICTED)) return true;
      return false;
    };

    //Line Tour -- Phase 1!
    tour.restrictedLineTour = function () {

      //need expressions visible and resources closed for the entirety of this tour
      if (this.resourcesOpen()) return this.requireResourcesNotOpen();
      if (!this.expressionsVisible()) return this.requireExpressionsVisible();

      var restricted_line = this.getMatchingExp(this.RESTRICTED_LINE);
      var exp_not_restricted_line = this.getMatchingExp(this.EXP_NOT_RESTRICTED_LINE);

      if (restricted_line) {
        //to exit the line part of this tour, you not only need a restricted line,
        //you also need another expression that we can later turn into a restricted parabola
        if (exp_not_restricted_line) {
          this.phaseOn++;
          return this.update();
        }

        return {
          position: 'e',
          content: '<b>'+i18n.t('Brilliant!')+'</b><br>'+i18n.t('Click here to create a new expression.'),
          sel: '.dcg-new-math-div'
        };
      }

      var exp = this.getMatchingExp(this.FOCUSED_OR_EMPTY_EXP);

      if (exp) {
        var is_nonconstant_line = this.expMatches(exp.model, this.NONCONSTANT_LINE);
        var has_error = this.expMatches(exp.model, this.HAS_ERROR);

        if (has_error) return {
          doNotUpdate: true
        };

        if (is_nonconstant_line) return {
          position: 'e',
          content: [
                    '<b>'+i18n.t('Awesome!')+'</b><br>',
                    i18n.t(
                      'Restrict the domain of this line by adding __sample_expression__ to the end.',
                      {sample_expression: '<code>{x&gt;0}</code>'}
                    ),
                    '<br><i>'+i18n.t("Hint: press the 'A B C' button on the keypad to find the { } buttons")+'</i>'
          ].join(''),
          sel: exp.$()
        };

        return {
          position: 'e',
          content: ['<b>'+i18n.t("Let's get started!")+'</b><br>',
                    i18n.t(
                      'Try graphing a straight line, like __sample_expression__',
                      {sample_expression: '<code>y=2x</code>'}
                    )
          ].join(''),
          sel: exp.$()
        };
      }

      //nuttin? better create a new expression
      return {
        position: 'e',
        content: i18n.t('Click here to make a new blank expression.'),
        sel: '.dcg-new-math-div'
      };
    };

    //Tour part 2: restricting a parabola
    tour.restrictedParabolaTour = function () {

      //need expressions visible and resources closed for the entirety of this tour
      if (this.resourcesOpen()) return this.requireResourcesNotOpen();
      if (!this.expressionsVisible()) return this.requireExpressionsVisible();

      var restricted_parabola = this.getMatchingExp([this.RESTRICTED, this.PARABOLA]);

      if (restricted_parabola) {
        return {
          final: true,
          position: 'e',
          endingMsg: i18n.t("You're a restrictions star!"),
          sel: '.dcg-exppanel-container'
        };
      }

      //store our last valid *shifted* parabola
      var exp = this.getMatchingExp([this.EXP_NOT_RESTRICTED_LINE, this.FOCUSED_EXP]);

      if (exp) {
        var has_equal_sign = this.expMatches(exp.model, [this.PARABOLA, this.HAS_DEPENDENT_Y]);
        var is_shifted = this.expMatches(exp.model, this.SHIFTED_PARABOLA);
        var is_parabola = this.expMatches(exp.model, this.PARABOLA);
        var has_error = this.expMatches(exp.model, this.HAS_ERROR);

        //while they're typing, leave the last valid step.
        if (has_error) return {
          doNotUpdate: true
        };

        if (!is_parabola) return {
          position: 'e',
          content: [
                      i18n.t(
                        'Now graph: __sample_expression__',
                        {sample_expression: '<code>y=x<sup>2</sup></code>'}
                      )+'<br><i>'+
                      i18n.t('Hint: you can type y=x^2, or use the a<sup>2</sup> button on the keypad below.')+
                      '</i>'
                   ].join(''),
          sel: exp.$()
        };

        if (!has_equal_sign) return {
          position: 'e',
          content: [
                    '<b>'+i18n.t('Don\'t forget the "y="!')+'</b><br>',
                    i18n.t(
                      'Try typing all of __sample_expression__',
                      {sample_expression: '<code>y=x<sup>2</sup></code>'}
                    )
                   ].join(''),
          sel: exp.$()
        };


        if (!is_shifted) return {
          position: 'e',
          content: [
                    '<b>'+i18n.t('Move the parabola.')+'</b><br>',
                    i18n.t(
                      'Change this equation to __sample_expression__',
                      {sample_expression: '<code>y=x<sup>2</sup>-2</code>'}
                    )
                   ].join(''),
          sel: exp.$()
        };

        return {
          position: 'e',
          content: [
                    '<b>'+i18n.t('Nice!')+'</b><br>' +
                    i18n.t(
                      "Now let's restrict the range. Add __sample_expression__ to the end.",
                      {sample_expression: '<code>{y&lt;4}</code>'}
                    )
                   ].join(''),
          sel: exp.$()
        };
      }

      return {
        position: 'e',
        content: i18n.t('Click here to make a new blank expression.'),
        sel: '.dcg-new-math-div'
      };
    };

    //manage state of which of the 3 steps we're on
    tour.phaseOn = 0;
    tour.phases = [tour.restrictedLineTour, tour.restrictedParabolaTour];
    tour.update = function(){
      return this.phases[this.phaseOn].call(this);
    };
  });
});

define('loadcss!css/regression-tour', function(){});
define('tours/regressions',['require','pjs','jquery','./base_tour','i18n','underscore','loadcss!css/regression-tour','browser'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var BaseTour = require('./base_tour');
  var i18n = require('i18n');
  var _ = require('underscore');
  require('loadcss!css/regression-tour');
  var Browser = require('browser');

  /*jshint maxlen:500 */

  return P(BaseTour, function(tour, _super){

    tour.shouldPopup = function () {
      if (this.getMatchingExp(this.TABLE)) return true;
      return false;
    };

    tour.hasCreatedLinearRegression = false;

    tour.update = function(){
      /* jshint maxcomplexity:23 */
      //need expressions visible and resources closed for the entirety of this tour
      if (this.resourcesOpen()) return this.requireResourcesNotOpen();
      if (!this.expressionsVisible()) return this.requireExpressionsVisible();
      if (this.editListMode()) return this.requireNotEditListMode();

      // Tour:
      // 1. Make a table from drop-down as a scatter-plot
      // 2. Fill it in, at least 3 rows worth
      // 3. Connect the dots

      var exp =
        this.getMatchingExp(this.REGRESSION) ||
        this.getMatchingExp(this.EXP)
      ;
      var dataTable = this.getMatchingExp(this.HAS_DATA_COLUMN);

      //Click add expression to show create table button
      if (!dataTable || !dataTable.model.columns[1]) {
        var newTable = $('.dcg-action-newtable:visible');
        //don't encourage people to copy out of a google doc if it won't work.
        var tryCopyPaste = !Browser.IS_IPAD && !Browser.IS_MOBILE;

        if (newTable.length === 0 && tryCopyPaste) return {
          position: 'e',
          content: '<div class="trip-title">' +
            i18n.t("First, let's get some data.") +
            '</div>' +
            i18n.t(
              'Head over to Google Docs and copy and paste this __sample_data_link__.',
              {
                sample_data_link: '<a class="trip-link" target="_blank" href="https://docs.google.com/spreadsheets/d/1oWX8CxUuGVynJX1bgbEaoNY4Ovvc6gYpAMM7sLAA7mA/edit?usp=sharing">' + i18n.t("sample data") + '</a>'
              }
            ) +
            ' <div class="trip-hint"><br>' +
            i18n.t(
              "Note: you can add your own data instead by clicking the __plus_icon__ button.",
              {plus_icon: '<i class="dcg-icon-plus"></i>'}
            ) +
            '</div>',
          sel: (exp ? exp.$() : $('.dcg-exppanel')),
          stepName: 'copy-paste-data'
        };

        if (newTable.length === 0) return {
          position: 'e',
          content: '<div class="trip-title">'+i18n.t("Let's start with some data!")+'</div>'+i18n.t('Click here to add a new item.'),
          sel: $('.dcg-add-expression-btn'),
          delayBeforeExit: 150,
        };

        //If there are no tables but we can see create table button, create a table
        return {
          position: 'e',
          content: i18n.t('Click here to add a new table.'),
          sel: newTable,
          delayBeforeExit: 250
        };
      }

      //check that the data table has data in it
      var nonEmptyCells = _.filter(dataTable.model.columns[1].cells, function(cell) {
        return cell.value;
      });

      if (nonEmptyCells.length < 5) return {
        position: 'e',
        content: '<div class="trip-title">'+i18n.t("Fill in the sample data:") + '</div>' +
                  "<table class='dcg-regression-tour-table'>" +
                     "<tr><td><span class='trip-math'>x_1</span></td><td><span class='trip-math'>y_1</span></td></tr>"+
                     "<tr><td>1</td><td>0.8</td></tr>" +
                     "<tr><td>2</td><td>2.7</td></tr>" +
                     "<tr><td>3</td><td>3.9</td></tr>" +
                     "<tr><td>4</td><td>4.6</td></tr>" +
                     "<tr><td>5</td><td>5</td></tr>" +
                  "</table>",
        sel: dataTable.$('.dcg-column:nth-of-type(2) .dcg-cell:nth-of-type(2)'),
        stepName: 'populate-table'
      };

      //build up an expression item
      var targetExp =
        this.getMatchingExp(this.REGRESSION) ||
        this.getMatchingExp(this.FOCUSED_EXP);

      if (targetExp) {
        targetExp = targetExp.model;
      } else {
        targetExp = this.expressionsView.model.getItemByIndex(0);
      }
      if (!targetExp.isExpression) {
        var newExp = $('.dcg-action-newexpression:visible');
        if (newExp.length === 0) return {
          position: 'e',
          content: '<div class="trip-title">'+i18n.t("Awesome!")+'</div>'+i18n.t('Click here to add a new item.'),
          sel: $('.dcg-add-expression-btn'),
          delayBeforeExit: 150,
        };

        //If there are no tables but we can see create table button, create a table
        return {
          position: 'e',
          content: i18n.t('... and select the "expression" option.'),
          sel: newExp,
          delayBeforeExit: 150
        };
      }
      var formula = exp.model.formula;
      var regression = formula ? formula.regression : undefined;
      var statistics = regression ? regression.statistics : undefined;
      var parameters = regression ? regression.parameters : undefined;

      if (statistics && statistics.r) this.hasCreatedLinearRegression = true;

      if (!this.hasCreatedLinearRegression) {
        return {
          position: 'e',
          content: i18n.t(
            "Now type: __equation__",
            {equation: "<span class='trip-math'>y_1\\sim mx_1+b</span>"}
          ) +
          "<div class='trip-hint'>" +
          i18n.t(
            "Hint #1: to get __y_1__ type __y1__.",
            {
              y_1: "<span class='trip-math'>y_1</span>",
              y1: "<span class='trip-math'>y1</span>"
            }
          ) +
          "</div><div class='trip-hint'>" +
          i18n.t(
            "Hint #2: __twiddle__ is in our onscreen keypad in the 'A B C' section.",
            {twiddle: "<span class='trip-math'>~</span>"}
          ) +
          "</div>",
          sel: exp.$(),
          delayBeforeExit: 150,
          stepName: 'linear-model'
        };
      }

      var plotResPrompt = $('.dcg-residual-suggestion.dcg-visible');
      if (plotResPrompt.length) return {
        position: 'e',
        content: "<div class='trip-title'>" +
          i18n.t("Nice. Let's check the model.") +
          "</div>" +
          i18n.t(
            "Residuals are the difference between your data and your model. Click here to add them to your table and plot them on the graph."
          ),
        sel: plotResPrompt,
        stepName: 'residuals-prompt',
        delayBeforeExit: 250
      };


      if (statistics && (
        statistics.Rsquared >= 0.99 ||
        statistics.r >= 0.99 ||
        (parameters && parameters.a && parameters.k && parameters.h)
      )) return {
        final: true,
        position: 'e',
        endingMsg: "<div class='trip-title'>" + i18n.t("Nice work &ndash; Keep exploring!") + "</div>",
        sel: $('.dcg-exppanel'),
        stepName: 'closing-step',
        forceTextUpdate: true
      };

      return {
        position: 'e',
        content: "<div class='trip-title'>" +
          i18n.t("Now, let's try a new model.") +
          "</div>" +
          i18n.t(
            "Edit this equation to find a better fit. Try, for example:<br>__equation__",
            {equation: "<span class='trip-math'>y_1~a(x_1-h)^2+b</span>"}
          ),
        sel: exp.$(),
        stepName: 'quadratic-model',
        delayBeforeExit: 300
      };

      /*
      var residualVariable = regression.residualVariable;
      var pieces = Label.latexToIdentifier(residualVariable).split('_');
      var residualSymbol = pieces[0];
      var residualSubscript = pieces[1];
      var hasResidualColumn = false;
      dataTable.$('.dcg-table-header .mq-editable-field').each(function () {
        if (MathQuill(this).latex().match(residualVariable)) hasResidualColumn = true;
      });
      if (!hasResidualColumn) {
        return {
          position: 'e',
          content: i18n.t("<b>Now let's plot the residuals.</b><br>Type __residualVariable__ in a new table column.",
            { residualVariable: "<math>" + residualSymbol + "<sub>" + residualSubscript + "</sub></math>" }
          ),
          sel: dataTable.$('.dcg-column:last-child .dcg-cell:first-child')
        };
      }
      */
    };
  });
});

//this is a list of all of the available tours
//used in tour_controller and in our various help views

define('tours/all_tours',['require','tours/sliders','tours/scatter_plot','tours/function_table','tours/restrictions','tours/regressions','i18n','underscore'],function(require) {
  var SlidersTour = require('tours/sliders');
  var TableTour = require('tours/scatter_plot');
  var FunctionTableTour = require('tours/function_table');
  var RestrictionsTour = require('tours/restrictions');
  var RegressionsTour = require('tours/regressions');
  var i18n = require('i18n');
  var _ = require('underscore');

  //fake i18n into knowing about these strings
  i18n.t('Sliders');
  i18n.t('Tables');
  i18n.t('Restrictions');
  i18n.t('Advanced Tables');
  i18n.t('Regressions');

  var tours = {
    sliders: {
      tour: SlidersTour,
      title: 'Sliders'
    },
    tables: {
      tour: TableTour,
      title: 'Tables'
    },
    restrictions: {
      tour: RestrictionsTour,
      title: 'Restrictions'
    },
    functiontable: {
      tour: FunctionTableTour,
      title: 'Advanced Tables',
      hideInHelp: true
    },
    regressions: {
      tour: RegressionsTour,
      title: 'Regressions'
    }
  };

  //add name as a key because we use it later
  _.each(tours, function(tour, name) {
    tour.name = name;
  });
  return tours;
});

define('main/help_desktop',['require','loadcss!css/help','jquery','underscore','pjs','main/popover_view','main/parse_json_errors','main/calculator_backend','template!help_desktop','i18n','config','main/tour_link','tours/all_tours','vendor/jquery.html5-placeholder-shim'],function(require){
  require('loadcss!css/help');

  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var parseJSONErrors = require('main/parse_json_errors');
  var calculatorBackend = require('main/calculator_backend');
  var template = require('template!help_desktop');
  var i18n = require('i18n');
  var Config = require('config');
  var TourLinkView = require('main/tour_link');
  var tours = require('tours/all_tours');
  require('vendor/jquery.html5-placeholder-shim');

  /*
  * view for the help popover
  */

  var HelpView = P(PopoverView, function (view, _super) {
    view.template = template;
    view.pointToSelector = '.dcg-action-help i';

    view.init = function (
      userController,
      graphsController,
      Calc,
      modals,
      tourController
    ) {
      _super.init.call(this);
      this.userController = userController;
      this.graphsController = graphsController;
      this.Calc = Calc;
      this.modals = modals;
      this.tourController = tourController;
    };

    view.renderIsVisible = function () {
      _super.renderIsVisible.call(this);
      if (this.isVisible) {
        if ($.placeholder) $.placeholder.shim();

      // becomes hidden
      } else {
        this.setErrors([]);
      }
    };

    view.getTemplateParams = function () {
      var userGuideURL = (i18n.enabled_languages[i18n.detectLanguage()] ?
        i18n.enabled_languages[i18n.detectLanguage()].userGuideURL :
        i18n.enabled_languages.en.userGuideURL
      );
      return {
        maintenance: Config.get('maintenance'),
        previewMode: Config.get('previewMode'),
        previewFeedbackUrl: Config.get('previewFeedbackUrl'),
        previewMessage: Config.get('previewMessage'),
        userGuideURL: userGuideURL
      };
    };

    view.eventShouldClosePopover = function (evt) {
      var $target = $(evt.target);
      if (this.eventIsWithinPopover(evt)) {
        return false;
      }

      return !$target.closest("#state-modals").length &&
             $target.attr("id") != "modal_background";
    };

    view.setErrors = function (errors) {
      if (_.isEqual(errors, this.errors)) return;
      this.errors = errors;

      var div = this.$('.template-errors');
      div.children().remove();
      for (var i=0; i<errors.length; i++) {
        div.append('<div class="dcg-errors">' + errors[i].message + '</div>');
      }
    };

    view.setProcessing = function (processing) {
      if (processing === this.processing) return;
      this.processing = processing;

      this.$('.template-processing').toggle(processing);
    };

    view.setLoggedIn = function (loggedIn) {
      if (loggedIn === this.loggedIn) return;
      this.loggedIn = loggedIn;

      this.$('.template-unlessuser').toggle(!loggedIn);
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      var self = this;
      this.$('.dcg-suggestions textarea').on("focus", function() {
        $(this).animate({"height": "80px"}, {
          duration: 200,
          complete: function () {
            if ($.placeholder) $.placeholder.shim();
          }
        });
        self.$('.dcg-suggestions-expansion').show();
      });

      this.$('.dcg-action-submit').on('submit', this.sendFeedback.bind(this));
      this.$('.dcg-action-closesuggestion').on('dcg-tap', this.closeSuggestion.bind(this));

      var closeModal = function() { this.setProperty('isVisible', false); };
      for (var tourName in tours) {
        if (tours[tourName].hideInHelp) continue;
        var tourLink = TourLinkView(this.tourController, tours[tourName]);
        tourLink.appendTo(this.$('.dcg-tours-content'));
        tourLink.observeEvent('tourLaunched', closeModal.bind(this));
      }

      this.setErrors([]);
      this.setProcessing(false);
      this.setLoggedIn(!!this.userController.currentUser);

      this.userController.observe('currentUser', function () {
        self.setLoggedIn(!!self.userController.currentUser);
      });
    };

    view.closeSuggestion = function() {
      this.$('.dcg-suggestions textarea').animate({"height":"33px"}, 200).val("");
      this.$('.dcg-suggestions-expansion').fadeOut(200);
      this.setProcessing(false);
      this.setErrors([]);
    };

    //whether the feedback email is being sent
    view.sendFeedback = function(evt) {
      //don't submit the form
      evt.preventDefault();
      //don't repeat send
      if (this.processing) return;

      var message = $.trim(this.$('textarea[name="message"]').val());
      if (!message) {
        this.setErrors([{
          message: i18n.t('Please enter your feedback.')
        }]);
        this.$('.dcg-suggestions').focus();
        return;
      }

      var feedbackData = {
        message: message,
        state: JSON.stringify(this.Calc.getState()),
        userAgent: navigator.userAgent,
        'anonymous-email': this.$('input[name="anonymous-email"]').val()
      };

      // send feedback off
      var self = this;
      this.setProcessing(true);
      calculatorBackend.emailFeedback(feedbackData).done(function (msg) {
        self.$('.dcg-feedback-email-sent').show();
        self.setErrors([]);
        self.closeSuggestion();
        setTimeout(function() {
          self.$('.dcg-feedback-email-sent').slideUp();
        },2000);
      }).fail(function(jqXHR) {
        self.setErrors(parseJSONErrors(jqXHR));
      }).always(function(msg) {
        self.setProcessing(false);
      });
    };

    view.openFeedback = function () {
      this.setProperty('isVisible', true);
      this.$('.dcg-suggestions textarea').focus();
    };
  });

  return HelpView;
});

define('loadcss!css/language', function(){});
define('template!language', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-language-container dcg-popover dcg-bottom dcg-constrained-height-popover">\n\n  <div class=\'dcg-popover-interior\'>\n    <div class=\'dcg-popover-title\'>\n      '+
( t('Language') )+
'\n    </div>\n    <div class=\'dcg-popover-content\'>\n      <table>\n        <tr>\n      ';
 var i = 0; _.each(enabled_languages, function(language, locale) { 
;__p+='\n       <td>\n        <div lang=\''+
( locale )+
'\' class=\'dcg-language-option'+
((locale === selected_language ? ' dcg-selected' : ''))+
'\'>\n            '+
(language.displayName)+
'\n\n        </div>\n        </td>\n        '+
( ((++i)%2 === 0 ? '</tr><tr>' : '') )+
'\n\n      ';
 }) 
;__p+='\n        </tr>\n      </table>\n\n      <div class=\'dcg-translate-invite\'>\n        Don\'t see your language?\n        <a\n          target=\'_blank\'\n          href=\'http://support.desmos.com/entries/28346817-Help-us-translate-Desmos-\'\n        >\n          Help us translate\n        </a>\n      </div>\n    </div>\n  </div>\n  <div class=\'dcg-arrow\'></div>\n</div>';
}
return __p;
};});
define('main/preserved_state',['require'],function (require) {
  // Note, wrapping all uses of sessionStorage in try/catch because users can
  // disable this feature, and when they do, trying to access sessionStorage
  // throws errors.
  var pushState = function(stateInfo) {
    var preservedState = JSON.stringify(stateInfo);
    try {
      sessionStorage.preservedState = preservedState;
    } catch (e) {
      // do nothing
    }
  };

  var popState = function() {
    var state_str;
    try {
      state_str = sessionStorage.preservedState;
      sessionStorage.preservedState = '';
    } catch (e) {
      return;
    }

    if (!state_str) return;

    return JSON.parse(state_str);
  };

  var hasState = function () {
    try {
      return !!sessionStorage.preservedState;
    } catch (e) {
      return false;
    }
  };

  return {
    pushState: pushState,
    popState: popState,
    hasState: hasState
  };
});
define('main/language',['require','loadcss!css/language','jquery','pjs','underscore','main/popover_view','template!language','i18n','main/cookie','main/preserved_state'],function(require){
  require('loadcss!css/language');
  var $ = require('jquery');
  var P = require('pjs');
  var _ = require('underscore');

  var PopoverView = require('main/popover_view');
  var template = require('template!language');
  var i18n = require('i18n');
  var Cookie = require('main/cookie');
  //for page reloads when, for example, you switch language
  var preservedState = require('main/preserved_state');

  var LanguageView = P(PopoverView, function (view, _super) {
    view.template = template;
    view.pointToSelector = '.dcg-action-language i';

    view.init = function (Calc) {
      _super.init.call(this);
      this.Calc = Calc;
    };

    view.getTemplateParams = function () {
      return {
        enabled_languages: i18n.enabled_languages,
        selected_language: i18n.detectLanguage()
      };
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      this.$('.dcg-language-option').on('dcg-tap', this.selectLanguage.bind(this));
    };

    view.selectLanguage = function (evt) {
      var $el = $(evt.target);
      if ($el.hasClass('dcg-selected')) return;

      this.closePopover();

      var unsavedState = this.Calc.getState();
      var savedState = this.Calc.graphChangeMonitor.getSavedState();

      var isStateEmpty = _.filter(unsavedState.expressions.list, function(expr) {
        return (!expr.hasOwnProperty('latex') || expr.latex);
      }).length === 0;

      //TODO - with the extra information we have here I feel like
      //we can do better than this.
      //don't preserve an empty state
      if (!isStateEmpty) {
        preservedState.pushState({
          unsavedState: unsavedState,
          savedState: savedState
        });
      }

      Cookie.setCookie('lang', $el.attr('lang'));
      location.reload();
    };
  });

  return LanguageView;
});

define('template!account_dropdown', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-logout-options dcg-popover dcg-bottom">\n  <div class="dcg-popover-interior">\n    <div class="dcg-popover-content">\n      <div class=\'user-info\'>\n        <span class=\'account-name\'></span>\n        <span class=\'account-email\'></span>\n        <a class="dcg-action-editaccount">'+
( t('Edit Account') )+
'</a>\n      </div>\n      <a class="dcg-action-feedback">'+
( t('Send Feedback') )+
'</a>\n      <a class="dcg-action-logout">'+
( t('Sign Out') )+
'</a> \n    </div>\n  </div>\n  <div class=\'dcg-arrow\'></div>\n</div>';
}
return __p;
};});
define('main/account_dropdown',['require','loadcss!css/help','jquery','pjs','main/popover_view','template!account_dropdown'],function(require){
  require('loadcss!css/help');

  var $ = require('jquery');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var template = require('template!account_dropdown');

  /*
  * view for the account menu
  */

  var AccountView = P(PopoverView, function (view, _super) {
    view.template = template;
    view.pointToSelector = '.dcg-account-link .email i';

    view.init = function (userController, helpView, modals) {
      _super.init.call(this);

      this.helpView = helpView;
      this.userController = userController;
      this.modals = modals;
    };

    view.editAccount = function () {
      this.modals.editAccountDialog.show();
      this.closePopover();
    };

    view.logout = function () {
      this.userController.logout();
      this.closePopover();
    };

    view.feedback = function () {
      this.closePopover();
      this.helpView.openFeedback();
    };

    view.eventShouldClosePopover = function (evt) {
      var $target = $(evt.target);

      if (this.eventIsWithinPopover(evt)) {
        return false;
      }

      return !$target.closest("#state-modals").length &&
             $target.attr("id") != "modal_background";
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      this.$('.dcg-action-logout').on('dcg-tap', this.logout.bind(this));
      this.$('.dcg-action-feedback').on('dcg-tap', this.feedback.bind(this));
      this.$('.dcg-action-editaccount').on('dcg-tap', this.editAccount.bind(this));

      this.userController.observe('currentUser', this.renderUser.bind(this));
      this.renderUser();
    };

    view.renderUser = function () {
      var user = this.userController.currentUser;
      if (!user) user = {};
      this.$('.account-name').text(user.name);
      this.$('.account-email').text(user.email);
    };
  });

  return AccountView;
});

define('text!data/resources_examples.json',[],function () { return '[{\n  "section": "Lines",\n  "examples": [\n    {\n      "title": "Slope Intercept Form",\n      "graphHash": "59qdbtnlzy",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y=mx+b", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"latex": "m=1", "domain": {"max": 10, "min": 0}, "color": "#F79646", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 3}, {"latex": "b=1", "domain": {"max": 10, "min": 0}, "color": "#8064A2", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 2}]}}\n    },\n    {\n      "title": "Point Slope Form",\n      "graphHash": "vphpgabluz",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y-y_1=m\\\\left(x-x_1\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"color": "#8064A2", "latex": "\\\\left(x_1,y_1\\\\right)", "domain": {"max": 10, "min": 0}, "id": 8, "hidden":false}, {"latex": "x_1=1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 5}, {"latex": "y_1=1", "domain": {"max": 10, "min": 0}, "color": "#C0504D", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 7}, {"latex": "m=1", "domain": {"max": 10, "min": 0}, "color": "#9BBB59", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 6}]}}\n    },\n    {\n      "title": "Two Point Form",\n      "graphHash": "slkjzmm3ly",\n      "state": {"graph":{"viewport":{"xmin":-7.023,"ymin":-4.187,"xmax":7.024,"ymax":4.186},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y-y_1=m\\\\left(x-x_1\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":12,"latex":"m=\\\\frac{y_2-y_1}{x_2-x_1}","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59"},{"id":5,"latex":"x_1=-1","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":7,"latex":"y_1=1","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":8,"latex":"\\\\left(x_1,y_1\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":9,"latex":"x_2=3","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":10,"latex":"y_2=2","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","sliderMin":-10,"sliderMax":10},{"id":11,"latex":"\\\\left(x_2,y_2\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"}]}}\n    },\n    {\n      "title": "Intercept Form",\n      "graphHash": "cmz3dawdji",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\frac{y}{a}+\\\\frac{x}{b}=1","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":14,"latex":"a=2","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","sliderMin":-10,"sliderMax":10},{"id":13,"latex":"b=1","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":15,"latex":"\\\\left(0,a\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"},{"id":16,"latex":"\\\\left(b,0\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"}]}}\n    },\n    {\n      "title": "General Form",\n      "graphHash": "4acfppghta",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "ax+by=c", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"latex": "a=1", "domain": {"max": 10, "min": 0}, "color": "#F79646", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 2}, {"latex": "b=1", "domain": {"max": 10, "min": 0}, "color": "#8064A2", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 3}, {"latex": "c=1", "domain": {"max": 10, "min": 0}, "color": "#000000", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 4}]}}\n    },\n    {\n      "title": "Visualizing Slope",\n      "graphHash": "h4kwopbouh",\n      "state": {"graph":{"viewport":{"xmin":-3,"ymin":-10,"xmax":3,"ymax":10},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":false,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\left(1,m\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000"},{"id":509,"latex":"m=1.82","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":487,"latex":"\\\\floor\\\\left(x\\\\right)\\\\cdot m\\\\le y\\\\le mx","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":508,"latex":"mx\\\\le y\\\\le\\\\floor\\\\left(x\\\\right)\\\\cdot m","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"}]}}\n    }\n  ]\n},\n{\n  "section": "Parabolas",\n  "examples": [\n    {\n      "title": "Standard Form",\n      "graphHash": "3ltwect0mc",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y=ax^2+bx+c", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"latex": "a=1", "domain": {"max": 10, "min": 0}, "color": "#C0504D", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 19}, {"latex": "b=0", "domain": {"max": 10, "min": 0}, "color": "#9BBB59", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 18}, {"latex": "c=1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 17}]}}\n    },\n    {\n      "title": "Vertex Form",\n      "graphHash": "mey71rif1d",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y=a\\\\left(x-h\\\\right)^2+k", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"latex": "a=1", "domain": {"max": 10, "min": 0}, "color": "#C0504D", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 25}, {"latex": "h=1", "domain": {"max": 10, "min": 0}, "color": "#9BBB59", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 24}, {"latex": "k=0", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 23}, {"color": "#8064A2", "latex": "\\\\left(h,\\\\space k\\\\right)", "domain": {"max": 10, "min": 0}, "id": 26, "hidden":false}]}}\n    },\n    {\n      "title": "Factored Form",\n      "graphHash": "qgxlpjyebd",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.942,"xmax":10,"ymax":5.98},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y=a\\\\left(x-x_1\\\\right)\\\\left(x-x_2\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":22,"latex":"a=1","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","sliderMin":-10,"sliderMax":10},{"id":21,"latex":"x_1=-2","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":20,"latex":"x_2=1","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","sliderMin":-10,"sliderMax":10},{"id":23,"latex":"\\\\left(x_1,0\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646"},{"id":24,"latex":"\\\\left(x_2,0\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646"}]}}\n    },\n    {\n      "title": "Standard Form with Tangent",\n      "graphHash": "bqr4ko6wi9",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y\\\\ge ax^2+bx+c","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":19,"latex":"a=1","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":18,"latex":"b=1","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59","sliderMin":-10,"sliderMax":10},{"id":17,"latex":"c=1","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":21,"latex":"y\\\\space=\\\\space bx+c","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"}]}}\n    }\n  ]\n},\n{\n  "section": "Trigonometry",\n  "examples": [\n    {\n      "title": "Period and Amplitude",\n      "graphHash": "pjtapprsyt",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10.056, "ymin": -7.352, "ymax": 7.352, "xmax": 9.944}}, "expressions": {"list": [{"text": "Sinusoid with amplitude \\"a\\" and period \\"b\\"", "id": 10}, {"color": "#C0504D", "latex": "a\\\\space\\\\cos\\\\left(\\\\frac{2\\\\pi x}{b}\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"latex": "a=2.58", "domain": {"max": 10, "min": 0}, "color": "#F79646", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 3}, {"latex": "b=4.65", "domain": {"max": 10, "min": 0}, "color": "#8064A2", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 2}, {"color": "#8064A2", "latex": "\\\\left(b,\\\\space at\\\\right)", "domain": {"max": 1, "min": 0}, "id": 4, "hidden":false}, {"color": "#4F81BD", "latex": "\\\\left(bt,\\\\space a\\\\right)", "domain": {"max": 1, "min": 0}, "id": 5, "hidden":false}]}}\n    },\n    {\n      "title": "Phase",\n      "graphHash": "rfo6v7r5vg",\n      "state": {"graph":{"viewport":{"xmin":-10.949,"ymin":-3,"xmax":11,"ymax":2},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":false,"labelXMode":"pi","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\cos\\\\left(x\\\\space-\\\\space p\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":13,"latex":"p=1.64","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":14,"latex":"\\\\cos\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":17,"latex":"\\\\left(pt,\\\\space1\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#C0504D"}]}}\n    },\n    {\n      "title": "All the Trig Functions",\n      "graphHash": "v3hgzjtpo5",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-6.095,"xmax":10,"ymax":6.095},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":false,"showAxes":true,"squareAxes":true,"labelXMode":"pi","labelYMode":""},"expressions":{"list":[{"id":28,"text":"Click on the icon next to each trig function to turn it on or off:"},{"id":27,"latex":"\\\\sin\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":22,"latex":"\\\\cos\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2"},{"id":23,"latex":"\\\\tan\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646"},{"id":24,"latex":"\\\\csc\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#000000"},{"id":25,"latex":"\\\\sec\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD"},{"id":26,"latex":"\\\\cot\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59"}]}}\n    },\n    {\n      "title": "Wave Interference",\n      "graphHash": "ae1kce4fwm",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":140,"latex":"a=-1.17","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":1,"latex":"f\\\\left(x\\\\right)=\\\\sin\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646"},{"id":2,"latex":"g\\\\left(x\\\\right)=\\\\sin\\\\left(x+a\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646"},{"id":5,"latex":"f\\\\left(x\\\\right)+g\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"}]}}\n    },\n    {\n      "title": "Unit Circle",\n      "graphHash": "aer4wpiiad",\n      "state": {"graph":{"viewport":{"xmin":-2.5,"ymin":-1.49,"xmax":2.5,"ymax":1.4905},"showLabels":true,"degreeMode":true,"showGrid":false,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"x^2+y^2=1","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":19,"latex":"\\\\left(\\\\cos a,\\\\space\\\\sin a\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":20,"latex":"a=30","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","sliderMin":0,"sliderMax":360},{"id":22,"latex":"y=\\\\left(\\\\tan a\\\\right)\\\\cdot x\\\\left\\\\{0<x<\\\\cos a\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":26,"latex":"y=\\\\left(\\\\tan a\\\\right)\\\\cdot x\\\\left\\\\{\\\\cos a<x<0\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":23,"latex":"x=\\\\cos(a)\\\\left\\\\{0<y<\\\\sin(a)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":27,"latex":"x=\\\\cos(a)\\\\left\\\\{\\\\sin(a)<y<0\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"}]}}\n    }\n  ]\n},\n{\n  "section": "Conic Sections",\n  "examples": [\n    {\n      "title": "Circle",\n      "graphHash": "bkmtndf38y",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\left(x-a\\\\right)^2+\\\\left(y-b\\\\right)^2<r^2","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":6,"latex":"r\\\\space=\\\\space2.5","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","sliderMin":-10,"sliderMax":10},{"id":5,"latex":"a=0","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":4,"latex":"b=0","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","sliderMin":-10,"sliderMax":10}]}}\n      } ,\n      {\n        "title": "Parabola and Focus",\n        "graphHash": "naug1puabq",\n        "state": {"graph":{"viewport":{"xmin":-6.122,"ymin":-3.492,"xmax":6.364,"ymax":5.114},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":false,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y=\\\\frac{x^2}{4p}","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":64,"latex":"p=1","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","sliderMin":0.5,"sliderMax":5},{"id":65,"latex":"\\\\left(0,\\\\space p\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":81,"latex":"y\\\\space=\\\\space-p","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"}]}}\n      },\n      {\n        "title": "Ellipse with Foci",\n        "graphHash": "fwn45vpf2z",\n        "state": {"graph":{"viewport":{"xmin":-8.918,"ymin":-5.215,"xmax":8.86,"ymax":5.324},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\frac{x^2}{a^2}+\\\\frac{y^2}{b^2}\\\\ge1","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":4,"latex":"a=5","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","sliderMin":3,"sliderMax":6},{"id":2,"latex":"b=3","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","sliderMin":1,"sliderMax":3},{"id":5,"latex":"c=\\\\sqrt{\\\\left(a^2-b^2\\\\right)}","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":6,"latex":"\\\\left(c,0\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":7,"latex":"\\\\left(-c,0\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"}]}}\n      },\n      {\n        "title": "Hyperbola",\n        "graphHash": "321ynqvpjh",\n        "state": {"graph":{"viewport":{"xmin":-9.594,"ymin":-4.136,"xmax":10.406,"ymax":7.786},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":23,"latex":"\\\\frac{y^2}{b^{2\\\\space}}-\\\\frac{x^2}{a^2}=1","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59"},{"id":17,"latex":"\\\\frac{x^2}{a^2}-\\\\frac{y^2}{b^2}=1","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD"},{"id":24,"latex":"a=1","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","sliderMin":0.01,"sliderMax":5},{"id":25,"latex":"b=1","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","sliderMin":0.01,"sliderMax":5,"sliderInterval":""}]}}\n      }\n    ]\n  },\n{\n  "section": "Polar Graphing",\n  "examples": [\n    {\n      "title": "Polar Rose",\n      "graphHash": "zg6mokdc9e",\n      "state": {"graph":{"viewport":{"xmin":-2.1,"ymin":-2,"xmax":2.1,"ymax":2},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"r\\\\space\\\\le\\\\space\\\\sin\\\\left(\\\\frac{a}{b}\\\\theta\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":82,"latex":"a=5","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","sliderMin":1,"sliderMax":10,"sliderInterval":1},{"id":81,"latex":"b=6","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","sliderMin":1,"sliderMax":10,"sliderInterval":1}]}}\n    },\n    {\n      "title": "Logarithmic Spiral",\n      "graphHash": "ucm7smj9fz",\n      "state": {"graph":{"viewport":{"xmin":-1200,"ymin":-1000,"xmax":1200,"ymax":1000},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":83,"latex":"r\\\\space=\\\\space a^{\\\\theta}","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":84,"latex":"a=1.25","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","sliderMin":1.1,"sliderMax":5}]}}\n    },\n    {\n      "title": "Limacon",\n      "graphHash": "ie57pljxzm",\n      "state": {"graph":{"viewport":{"xmin":-8,"ymin":-10,"xmax":8,"ymax":10},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":83,"latex":"r\\\\space=\\\\space a+b\\\\cdot\\\\cos\\\\left(\\\\theta\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":84,"latex":"a=2","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","sliderMin":0,"sliderMax":5},{"id":85,"latex":"b=3","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","sliderMin":0,"sliderMax":5}]}}\n    },\n    {\n      "title": "Polar Conic Sections",\n      "graphHash": "kk3axf8oon",\n      "state": {"graph":{"viewport":{"xmin":-11,"ymin":-5,"xmax":11,"ymax":5},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"r\\\\space=\\\\space\\\\frac{1}{1-a\\\\cdot\\\\cos\\\\left(\\\\theta-b\\\\right)}","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":3,"latex":"a=1","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":2,"latex":"b=0","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","sliderMin":-10,"sliderMax":10}]}}\n    }\n  ]\n},\n{\n  "section": "Transformations",\n  "examples": [\n    {\n      "title": "Translating Any Function",\n      "graphHash": "0ksctv1hm4",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -7.901, "ymin": -4.379, "ymax": 4.368, "xmax": 7.902}}, "expressions": {"list": [{"color": "#C0504D", "latex": "f\\\\left(x\\\\right)=x^2+\\\\sin\\\\left(3x\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"text": "Function g(x) is a transformed version of function f(x).", "id": 49}, {"color": "#F79646", "latex": "g\\\\left(x\\\\right)=f\\\\left(x-h\\\\right)+k", "domain": {"max": 10, "min": 0}, "id": 45, "hidden":false}, {"text": "What effect does k have on the function g(x)?", "id": 51}, {"latex": "h=2", "domain": {"max": 10, "min": 0}, "color": "#000000", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 46}, {"text": "What effect does h have on the function g(x)?", "id": 53}, {"latex": "k=-1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 47}]}}\n    },\n    {\n      "title": "Scaling Any Function",\n      "graphHash": "doxva7ciht",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -7.901, "ymin": -4.379, "ymax": 4.368, "xmax": 7.902}}, "expressions": {"list": [{"color": "#C0504D", "latex": "f\\\\left(x\\\\right)=x^2+\\\\sin\\\\left(3x\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "hidden":false}, {"text": "Function g(x) is a transformed version of function f(x).", "id": 49}, {"color": "#F79646", "latex": "g\\\\left(x\\\\right)=af\\\\left(\\\\frac{x}{b}\\\\right)", "domain": {"max": 10, "min": 0}, "id": 45, "hidden":false}, {"text": "What effect does a have on the function g(x)?", "id": 51}, {"latex": "a=0.5", "domain": {"max": 10, "min": 0}, "color": "#000000", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 46}, {"text": "What effect does b have on the function g(x)?", "id": 53}, {"latex": "b=1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "hidden":false, "sliderMax": 10, "id": 47}]}}\n    },\n    {\n      "title": "Reflections of a Function",\n      "graphHash": "ynmlumjvz8",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"f\\\\left(x\\\\right)=\\\\left(x-3\\\\right)^3-x+5","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":92,"latex":"-f\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD"},{"id":96,"latex":"f\\\\left(-x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59"},{"id":97,"latex":"-f\\\\left(-x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#000000"}]}}\n    },\n    {\n      "title": "Inverse of a Function",\n      "graphHash": "tif5liedlj",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.928,"xmax":10,"ymax":5.929},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"f\\\\left(x\\\\right)=.2x^3+.1x^5","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":155,"latex":"x=f\\\\left(y\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":156,"latex":"y=x","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"},{"id":158,"latex":"a=1.74","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","sliderMin":-10,"sliderMax":10},{"id":157,"latex":"\\\\left(a,f\\\\left(a\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":159,"latex":"\\\\left(f\\\\left(a\\\\right),a\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"}]}}\n    }\n  ]\n},\n{\n  "section": "Calculus",\n  "examples": [\n    {\n      "title": "Derivatives",\n      "graphHash": "aqgbwm3qfd",\n\n      "state": {"graph":{"viewport":{"xmin":-8.874,"ymin":-6.286,"xmax":11.127,"ymax":5.637},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"f\\\\left(x\\\\right)\\\\space=\\\\space ax^3+cx","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":150,"latex":"a=0.42","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","sliderMin":-10,"sliderMax":10},{"id":148,"latex":"c=-1.64","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","sliderMin":-10,"sliderMax":10},{"id":146,"latex":"g\\\\left(x\\\\right)\\\\space=\\\\space\\\\frac{d}{dx}f\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"}]}}\n    },\n    {\n      "title": "Secant Line",\n      "graphHash": "irip8pnpdf",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":3,"latex":"f\\\\left(x\\\\right)=\\\\sin\\\\left(x\\\\right)+.3x","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":7,"latex":"a=0.23","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":13,"latex":"h=2","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","sliderMin":0.1,"sliderMax":2},{"id":16,"latex":"m=\\\\frac{\\\\left(f\\\\left(a+h\\\\right)-f\\\\left(a\\\\right)\\\\right)}{h}","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":20,"latex":"y=m\\\\left(x-a\\\\right)+f\\\\left(a\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":23,"latex":"\\\\left(a,f\\\\left(a\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"},{"id":24,"latex":"\\\\left(a+h,f\\\\left(a+h\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"}]}}\n    },\n    {\n      "title": "Tangent Line",\n      "graphHash": "dlzhsldcgo",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":3,"latex":"f\\\\left(x\\\\right)=\\\\sin\\\\left(x\\\\right)+.3x","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":6,"latex":"g\\\\left(x\\\\right)=\\\\frac{d}{dx}f\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#000000"},{"id":7,"latex":"a=1.27","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":12,"latex":"y=g\\\\left(a\\\\right)\\\\left(x-a\\\\right)+f\\\\left(a\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":13,"latex":"\\\\left(a,\\\\space f\\\\left(a\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"}]}}\n    },\n    {\n      "title": "Taylor Expansion of sin(x)",\n      "graphHash": "gkjridbqfj",\n\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y\\\\space=\\\\space\\\\sin\\\\left(x\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D"},{"id":161,"latex":"y\\\\space=\\\\space\\\\sum_{n=0}^a\\\\frac{\\\\left(-1\\\\right)^nx^{\\\\left(2n+1\\\\right)}}{\\\\left(2n+1\\\\right)!}","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2"},{"id":162,"latex":"a=1","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","sliderMin":0,"sliderMax":10,"sliderInterval":1}]}}\n    }\n  ]\n}]';});

define('mygraphs/examples',['require','underscore','main/graph','text!data/resources_examples.json','i18n'],function(require){
  var _ = require('underscore');
  var Graph = require('main/graph');
  var exampleGraphsString = require('text!data/resources_examples.json');
  var i18n = require('i18n');

  // convert from sectioned examples to flat list
  var sectionedExamples = JSON.parse(exampleGraphsString);
  var flatExampleGraphs = [];
  _.each(sectionedExamples, function (section, i) {
    _.each(section.examples, function (example, j) {

      // translate folder titles and text within the state
      var expressions = example.state.expressions.list;
      expressions.forEach(function (expression) {
        // textbox text
        if (_.isString(expression.text)) {
          expression.text = i18n.t(expression.text);
        }
        // folder titles
        if (_.isString(expression.title)) {
          expression.title = i18n.t(expression.title);
        }
      });

      var exampleGraph = Graph({
        hash: example.graphHash,
        title: i18n.t(section.section) + ": " + i18n.t(example.title),
        graphData: JSON.stringify(example.state),

        // TODO - we should inline the dataURL within the json
        thumbURL: 'https://s3.amazonaws.com/calc_thumbs/production/' + example.graphHash + '.png'
      });

      flatExampleGraphs.push(exampleGraph);
    });
  });


  return flatExampleGraphs;
});

define('loadcss!css/mygraphs', function(){});
define('mygraphs/item_model',['require','pjs','underscore_model'],function(require) {
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  
  var ItemModel = P(UnderscoreModel, function (model, _super) {
    model.init = function () {
      _super.init.call(this);
    
      // TODO - not sure this belongs in the model
      this.visible = true;
      this.selected = false;
      this.selectable = true;
    
      var self = this;
      this.observe('selectable', function () {
        if (!self.selectable && self.selected) {
          self.setProperty('selected', false);
        }
      });
    };
  });
  
  return ItemModel;
});


define('mygraphs/graphitem_model',['require','pjs','./item_model'],function(require) {
  var P = require('pjs');
  var ItemModel = require('./item_model');
  
  var GraphItemModel = P(ItemModel, function (model, _super) {
    model.isGraph = true;
  
    model.init = function (graph) {
      _super.init.call(this);
      this.graph = graph;
    };
  
    model.matchesQuery = function (query) {
      return this.graph.displayTitle.toLowerCase().indexOf(query.toLowerCase()) >= 0;
    };
  });
  
  return GraphItemModel;
});


define('mygraphs/examplegraphitem_model',['require','pjs','./graphitem_model'],function(require) {
  var P = require('pjs');
  var GraphItemModel = require('./graphitem_model');
  
  var ExampleGraphItemModel = P(GraphItemModel, function (model, _super) {
    model.isExampleGraph = true;
  });

  return ExampleGraphItemModel;
});

define('mygraphs/savedgraphitem_model',['require','pjs','./graphitem_model'],function(require) {
  var P = require('pjs');
  var GraphItemModel = require('./graphitem_model');
  
  var SavedGraphItemModel = P(GraphItemModel, function (model, _super) {
    model.isSavedGraph = true;
  });

  return SavedGraphItemModel;
});
define('mygraphs/model',['require','loadcss!css/mygraphs','pjs','underscore_model','./examplegraphitem_model','./savedgraphitem_model','bugsnag'],function(require) {
  require('loadcss!css/mygraphs');

  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  var ExampleGraphItemModel = require('./examplegraphitem_model');
  var SavedGraphItemModel = require('./savedgraphitem_model');
  var Bugsnag = require('bugsnag');

  var MyGraphsModel = P(UnderscoreModel, function (model, _super) {

    //note: userController can be null, in which case we don't render the login box (logic controlled by view)
    model.init = function (exampleGraphs, graphsController, userController) {
      _super.init.call(this);
      var self = this;

      this.graphsController = graphsController;
      this.userController = userController;
      this.__items = [];
      this.__selectedItem = null;
      this.filteredItemCount = 0;

      exampleGraphs.forEach(function (exampleGraph) {
        var item = ExampleGraphItemModel(exampleGraph);
        self.__addItemAt(item, self.__items.length); //add to end of __items
      });

      this.setProperty('isSpinning', false);

      this.observe('searchQuery', this.filterAllGraphs.bind(this));

      //note: on iPad, we'd expect that none of these triggers would be called
      //this is the less pretty way of doing this.graphsController.graphAddedCallbacks?.push ...
      if (!this.graphsController.hasOwnProperty('graphAddedCallbacks')) return;

      this.graphsController.graphAddedCallbacks.push(function (index) {
        var graph = self.graphsController.content[index];
        var graphItem = SavedGraphItemModel(graph);
        self.__addItemAt(graphItem, index);
      });

      this.graphsController.graphRemovedCallbacks.push(function (index) {
        self.__removeItemAt(index);
      });

      this.graphsController.startUpdatingGraphsCallbacks.push(function () {
        self.setProperty('isSpinning', true);
        self.__clearSavedGraphs();
      });
      this.graphsController.updateGraphsSuccessCallbacks.push(function () {
        self.setProperty('isSpinning', false);
        self.graphsController.content.forEach(function (savedGraph, i) {
          var savedGraphItem = SavedGraphItemModel(savedGraph);
          self.__addItemAt(savedGraphItem, i);
        });
      });
      this.graphsController.updateGraphsErrorCallbacks.push(function () {
        self.setProperty('isSpinning', false);
        // TODO error view not implemented. Might be nice to have a "try again"
        // button.
      });
      this.graphsController.clearCallbacks.push(function () {
        self.setProperty('isSpinning', true);
        self.__clearSavedGraphs();
      });
    };

    model.updateDisplayDates = function() {
      //note: on iPad, we'd expect that graphsController.content is an empty array
      this.graphsController.content.forEach(function (graph) {
        graph.updateDisplayDate();
      });
    };

    // TODO - optimize if need be to not call this when a single graph is deleted or
    // or added. But, I suspect that a single deletion or addition shouldn't be a bottleneck
    // as long as a complete refresh (login or logout) isn't a terrible bottleneck.
    model.filterAllGraphs = function () {
      var i;

      if (this.searchQuery) {
        var filteredItemCount = 0;
        for (i=0; i<this.__items.length; i++) {
          var item = this.__items[i];
          if (item.matchesQuery(this.searchQuery)) {
            filteredItemCount++;
            item.setProperty('visible', true);
          } else {
            item.setProperty('visible', false);
          }
        }
        this.setProperty('filteredItemCount', filteredItemCount);
      } else {
        for (i=0; i<this.__items.length; i++) {
          this.__items[i].setProperty('visible', true);
        }
        this.setProperty('filteredItemCount', this.__items.length);
      }
    };

    model.triggerItemAdded = function (item, index) {};
    model.__initItem = function (item) {
      item.mygraphs_list = this;
      item.observe('selected.' + this.guid, this.onSelectionChange.bind(this));
    };
    model.__addItemAt = function (item, index) {
      this.__items.splice(index, 0, item);
      this.__initItem(item);

      this.filterAllGraphs();
      this.triggerItemAdded(item, index);
    };

    model.triggerItemRemoved = function (item) {};
    model.__destructItem = function (item) {
      item.mygraphs_list = null;
      item.unobserve('.' + this.guid);
    };
    model.__removeItemAt = function (index) {
      var item = this.__items[index];

      if (!item) {
        Bugsnag.notify(
          "BadMyGraphsIndex",
          "list.__removeItemAt called with an inconsistent index.",
          {
            index: index,
            __itemsLength: this.__items.length
          }
        );
        return;
      }

      this.__items.splice(index, 1);
      this.__destructItem(item);

      this.filterAllGraphs();
      this.triggerItemRemoved(item);
    };

    model.__clearSavedGraphs = function () {
      var oldItems = this.__items;
      this.__items = [];

      for (var i=0; i<oldItems.length; i++) {
        var item = oldItems[i];
        if (item.isSavedGraph) {
          // TODO - could save these up and remove all at once by adding a
          // "triggerItemsRemoved([item1, item2, etc]) method"
          this.__destructItem(item);
          this.triggerItemRemoved(item);
        } else {
          this.__items.push(item);
        }
      }

      this.filterAllGraphs();
    };

    model.getItems = function () {
      return this.__items;
    };

    model.getSelectedIndex = function () {
      if (!this.selectedItem) return -1;

      return this.__items.indexOf(this.selectedItem);
    };

    model.onSelectionChange = function (property, item) {

      if (item.selected) {
        // only 1 item can be selected at a time
        var cachedItem = this.selectedItem;
        this.setProperty('selectedItem', item);
        if (cachedItem) cachedItem.setProperty('selected', false);
      } else if (this.selectedItem === item) {
        this.setProperty('selectedItem', null);
      }
    };

    model.selectPrev = function () {
      var selectedIndex = this.getSelectedIndex();
      if (selectedIndex === -1) return;

      for (var i = selectedIndex - 1; i>=0; i--) {
        var item = this.__items[i];
        if (item.selectable) {
          item.setProperty('selected', true);
          return true;
        }
      }

      return false;
    };

    model.selectNext = function (evt) {
      var selectedIndex = this.getSelectedIndex();
      var i, item;
      // nothing is selected, so select the first item that is selectable and has a graph. This
      // skips over the "new blank graph" option
      if (selectedIndex === -1) {
        for (i = 0; i < this.__items.length; i++) {
          item = this.__items[i];
          if (item.selectable && item.graph) {
            item.setProperty('selected', true);
            return true;
          }
        }
      }

      for (i = selectedIndex + 1; i < this.__items.length ; i++) {
        item = this.__items[i];
        if (item.selectable) {
          item.setProperty('selected', true);
          return true;
        }
      }

      return false;
    };
  });

  return MyGraphsModel;
});

define('mygraphs/item_view',['require','pjs','underscore_view'],function(require) {
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  
  var ItemView = P(UnderscoreView, function (view, _super) {
  
    view.init = function (model) {
      _super.init.call(this);
      this.model = model;
      this.model.observe('visible.' + this.guid, this.renderVisible.bind(this));
      this.model.observe('selected.' + this.guid, this.renderSelected.bind(this));
    };
  
    view.destruct = function () {
      this.model.unobserve('.' + this.guid);
    };
  
    view.renderSelected = function () {
      this.$().toggleClass('dcg-selected', this.model.selected);
    };
  
    view.renderVisible = function () {
      this.$().toggle(this.model.visible);
    };
  
    view.didCreateElement = function () {
      this.renderSelected();
      this.renderVisible();
    };
  });
  
  return ItemView;
});


/*
 * A handled event is one that should act like propagation was
 *  stopped, yet it's allowed to still bubble because other
 *  code might expect to see an event higher up on the dom.
 *
 * So the solution is to call 'handle()' when you don't
 *  want the event to be handled by any other other listeners.
 *  The listeners will still get called, but they can check
 *  that evt.wasHandled() == false to make sure that it
 *  should handle the event.
 *
 * You can namespace your event handlings so that two
 *  completely different parts of code can both use this
 *  utility. When you call 'wasHandled()', just pass in a
 *  string, and it will check that namespace. And when you
 *  call 'handle()', pass in a namespace string.
 *
 * For convienience, you can set the handleEvent attribute
 *  for any dom element and the 'wasHandled()' method will
 *  check if the event has passed through any dom element
 *  that should have handled the event.
 */
 
/* global jQuery */
;(function($) {
  var GLOBAL_NAMESPACE = "_*_";
  
  $.Event.prototype.wasHandled = function (namespace) {

    namespace = namespace ? namespace : GLOBAL_NAMESPACE;
    var oe = this.originalEvent;
    var hb = oe && oe.handledBy;
    
    //check if it was explicitly handled in code
    if (hb && hb[namespace]) return true;
    
    // namespace wasn't handled
    if (namespace !== GLOBAL_NAMESPACE) return false;

    //Now, check if it was implicitly handled through
    //the dom attribute 'handleEvent'
    var dom = $(this.target).closest('[handleEvent]');
    //TEMPORARY: just return true instead of deeply parsing
    if (dom.length && dom[0] !== this.currentTarget) {
      return dom.attr('handleEvent') !== "false";
    }

    //must not have been handled
    return false;
  };

  $.Event.prototype.handle = function (namespace) {
    namespace = namespace ? namespace : GLOBAL_NAMESPACE;
    var oe = this.originalEvent;
    if (!oe) return; //can't handle this properly

    var hb = oe.handledBy;
    if (!hb) hb = oe.handledBy = {};

    hb[namespace] = true;
  };

})(jQuery);


define("jquery.handleevent", function(){});

define('mygraphs/graphitem_view',['require','pjs','./item_view','jquery.handleevent'],function(require) {
  var P = require('pjs');
  var ItemView = require('./item_view');
  require('jquery.handleevent');

  var GraphItemView = P(ItemView, function (view, _super) {
    view.isGraphView = true;

    view.getTemplateParams = function () {
      return JSON.parse(JSON.stringify(this.model.graph));
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      var self = this;
      this.$().on('dcg-tap', function (evt) {
        if (evt.wasHandled()) return;

        if (self.model.selected) {
          self.model.setProperty('selected', false);
        } else if (self.model.selectable) {
          self.model.setProperty('selected', true);
        }
      });
    };
  });

  return GraphItemView;
});
define('template!mygraphs_examplegraph', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<li class="dcg-action-preview-graph graph-link-container example-graph">\n  <span class="dcg-example-ribbon"></span>\n  <span class="dcg-example-text">'+
( t('example'))+
'</span>\n  <span class="dcg-thumb" style="background-image: url('+
( thumbURL )+
')"></span>\n  <span class="dcg-title">'+
( displayTitle )+
'</span>\n  <span class="date">'+
( t('example'))+
'</span>\n</li>\n';
}
return __p;
};});
define('mygraphs/examplegraphitem_view',['require','pjs','./graphitem_view','template!mygraphs_examplegraph'],function(require) {
  var P = require('pjs');
  var GraphItemView = require('./graphitem_view');
  var template = require('template!mygraphs_examplegraph');

  var ExampleGraphItemView = P(GraphItemView, function (view, _super) {
    view.template = template;
    view.isExampleGraphView = true;
  
    view.init = function (model) {
      _super.init.call(this, model);
    
      this.model.observe('visible', this.computeSelectable.bind(this));
      this.computeSelectable();
    };
  
    view.computeSelectable = function () {
      this.model.setProperty('selectable', this.model.visible);
    };
  });
    
  return ExampleGraphItemView;
});
define('template!mygraphs_savedgraph', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<li class="saved-graph graph-link-container">\n  <div class="graph-link dcg-action-preview-graph">\n    <span class="dcg-thumb" style="background-image: url('+
( thumbURL )+
')"></span>\n    <span class="dcg-title">'+
( displayTitle )+
'</span>\n    <span class="date dcg-variable-date">'+
( displayDate )+
'</span>\n    <span class="actions" handleEvent="true">\n      <span class="dcg-icon-remove dcg-action-removegraph"></span>\n    </span>\n  </div>\n  <div class=\'deleted\' handleEvent="true">\n\t  '+
( t('This graph has been deleted.') )+
' <a class=\'dcg-action-cancelremovegraph\'>'+
( t('Undo') )+
'</a>\n  </div>\n</li>';
}
return __p;
};});
define('mygraphs/savedgraphitem_view',['require','pjs','./graphitem_view','template!mygraphs_savedgraph'],function(require) {
  var P = require('pjs');
  var GraphItemView = require('./graphitem_view');
  var template = require('template!mygraphs_savedgraph');

  var SavedGraphItemView = P(GraphItemView, function (view, _super) {
    view.template = template;
    view.isSavedGraphView = true;

    view.init = function (model) {
      _super.init.call(this, model);
      this.deleting = false;

      this.model.graph.observe('displayDate', this.renderDisplayDate.bind(this));
      this.model.observe('visible', this.computeSelectable.bind(this));
      this.observe('deleting', this.computeSelectable.bind(this));
      this.observe('deleting', this.renderDeleting.bind(this));

      this.computeSelectable();
    };

    view.computeSelectable = function () {
      this.model.setProperty('selectable', !this.deleting && this.model.visible);
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      this.renderDisplayDate();
      this.renderDeleting();

      this.$('.dcg-action-removegraph').on('dcg-tap', this.startDeleting.bind(this));
      this.$('.dcg-action-cancelremovegraph').on('dcg-tap', this.cancelDelete.bind(this));
    };

    view.destruct = function () {
      this.cancelDelete();
    };

    view.startDeleting = function () {
      this.setProperty('deleting', true);

      var self = this;
      this.deleteTimeout = setTimeout(function () {
        self.$('a').addClass('inactive');
        self.$().slideUp('fast');

        //rerender the preview arrow
        setTimeout(function() {
          self.model.mygraphs_list.graphsController.remove(self.model.graph);
        }, 300);

      }, 3000);
    };

    view.cancelDelete = function () {
      this.setProperty('deleting', false);
      clearTimeout(this.deleteTimeout);
    };

    view.renderDeleting = function () {
      this.$().toggleClass('deleting', !!this.deleting);
    };

    view.renderDisplayDate = function () {
      var displayDate = this.model.graph.displayDate;
      if (displayDate !== this.lastDisplayDate) {
        this.lastDisplayDate = displayDate;
        this.$('.dcg-variable-date').text(displayDate);
      }
    };
  });

  return SavedGraphItemView;
});
define('template!mygraphs', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-mygraphs">\n\n  <div class="dcg-loading-container dcg-fullscreen-loading-container">\n    <div class="dcg-graph-loading">\n      Loading...\n    </div>\n    <div class="dcg-graph-loading-error">\n      <div class="dcg-graph-loading-error-title">Error loading graph</div>\n      <div class="dcg-graph-loading-error-subtitle">Check your internet connection?</div>\n      <div class="dcg-graph-loading-error-options">\n        <span class="dcg-action-try-again dcg-btn-blue dcg-btn dcg-btn-medium">Try Again</span>\n        or\n        <span class="dcg-action-cancel dcg-btn-light-gray dcg-btn dcg-btn-medium">Cancel</span>\n      </div>\n    </div>\n  </div>\n\n  <div class="dcg-resources-container" class="hidden">\n    <div class="search-container">\n      <input id="search-mygraphs" type="text" placeholder="'+
( t('search by title...') )+
'" />\n      <span class="dcg-icon-search search-icon"></span>\n    </div>\n    <div class="dcg-scrollable">\n\n      ';
 if (maintenance) { 
;__p+='\n        <div class=\'maintenance-mode\'>\n          '+
( t("Desmos is temporarily in maintenance mode. You can open example graphs, but won't be able to sign in, open your graphs, or save any changes. We're so sorry for the inconvenience.") )+
'\n        </div>\n\n      ';
 } else if (previewMode) { 
;__p+='\n        <div class=\'maintenance-mode\'>\n          '+
( previewMessage )+
'\n          <br>\n          <a class=\'dcg-btn dcg-btn-green\' href=\''+
(previewFeedbackUrl)+
'\' target=\'_blank\'>\n            '+
( t("Share your thoughts!") )+
'\n          </a>\n        </div>\n\n\n      ';
 } else { 
;__p+='\n\n        ';
 if (accountsEnabled) { 
;__p+='\n          <div class="login-reminder">\n            <a class=\'dcg-btn dcg-action-createaccount\'>\n              '+
( t('Create Account') )+
'\n            </a>\n            '+
( t('or') )+
'\n            <a class=\'dcg-action-login\'>\n              '+
( t('Sign In') )+
'\n            </a>\n            <div>\n              '+
( t('to save and share your graphs!') )+
'\n            </div>\n          </div>\n        ';
 } 
;__p+='\n\n        <div class="new-blank-graph dcg-action-newblankgraph">\n          <div class="new-blank-graph-inner">\n            <span>+</span> '+
( t('New Blank Graph') )+
'\n          </div>\n        </div>\n\n        ';
 if (accountsEnabled) { 
;__p+='\n          <div class="template-spinning">\n            <img src="/assets/img/spinner.gif" width="16px" height="16px" /> '+
( t('loading graphs...') )+
'\n          </div>\n        ';
 } 
;__p+='\n\n      ';
 } 
;__p+='\n\n      <ul class="template-list">\n\n      </ul>\n      <div class=\'no-matches\'>\n        '+
( t("Sorry, we didn't find any graphs with that title.") )+
'\n      </div>\n      <div class="dcg-mygraphs-branding">\n        <i class="dcg-icon-desmos"></i>\n      </div>\n    </div>\n\n\n    <div class="graph-preview">\n      <span class="dcg-btn dcg-pull-right dcg-btn-medium dcg-btn-light-gray dcg-action-cancel">\n        '+
( t('Cancel') )+
'\n      </span>\n      <h4 class="dcg-title"></h4>\n      <div class="screenshot-container">\n        <div id="preview-calculator"></div>\n        <div class="screenshot-clickjack dcg-action-open-graph">\n          <span class="dcg-btn dcg-action-open-graph dcg-open-graph-btn dcg-btn-medium dcg-btn-blue">\n            '+
( t('Open Graph') )+
'\n          </span>\n        </div>\n\n        <div class="dcg-loading-container dcg-inline-loading-container">\n          <div class="dcg-graph-loading">\n            Loading...\n          </div>\n          <div class="dcg-graph-loading-error">\n            <div class="dcg-graph-loading-error-title">Error loading graph</div>\n            <div class="dcg-graph-loading-error-subtitle">Check your internet connection?</div>\n            <div class="dcg-graph-loading-error-options">\n              <span class="dcg-action-try-again dcg-btn-blue dcg-btn dcg-btn-medium">Try Again</span>\n              or\n              <span class="dcg-action-cancel dcg-btn-light-gray dcg-btn dcg-btn-medium">Cancel</span>\n            </div>\n          </div>\n        </div>\n\n      </div>\n      <div class="active-arrow"><div class="dcg-graphic"></div></div>\n    </div>\n  </div>\n\n  <div id="resources-cover" class="dcg-action-close-resources"></div>\n</div>\n';
}
return __p;
};});
// From http://stackoverflow.com/questions/7742781/why-javascript-only-works-after-opening-developer-tools-in-ie-once
// Avoid `console` errors in browsers that lack a console.
define('console',['require'],function(require){
  var noop = function () {};
  var methods = [
    'log',
    'info',
    'warn',
    'error',
    'assert',
    'dir',
    'clear',
    'profile',
    'profileEnd'
  ];

  var console = {};

  var addMethod = function (method) {
    if ((typeof window !== 'undefined') && window.console && window.console[method]) {
      console[method] = function () {
        // Need to use apply from Function.prototype because in IE9, methods of console
        // are not actually functions, but are instead some kind of bastard callable
        // object.
        Function.prototype.apply.call(window.console[method], window.console, arguments);
      };
    } else {
      console[method] = noop;
    }
  };

  methods.forEach(addMethod);
  return console;
});

define('numeric',[],function () {


var numeric = (typeof exports === "undefined")?(function numeric() {}):(exports);
if(typeof global !== "undefined") { global.numeric = numeric; }

numeric.version = "1.2.6";

// 1. Utility functions
numeric.bench = function bench (f,interval) {
    var t1,t2,n,i;
    if(typeof interval === "undefined") { interval = 15; }
    n = 0.5;
    t1 = new Date();
    while(1) {
        n*=2;
        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
        while(i>0) { f(); i--; }
        t2 = new Date();
        if(t2-t1 > interval) break;
    }
    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
    while(i>0) { f(); i--; }
    t2 = new Date();
    return 1000*(3*n-1)/(t2-t1);
}

numeric._myIndexOf = (function _myIndexOf(w) {
    var n = this.length,k;
    for(k=0;k<n;++k) if(this[k]===w) return k;
    return -1;
});
numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

numeric.precision = 4;
numeric.largeArray = 50;

// Wrapper around `new Function` that closures in the `numeric` object.
numeric.compile = function () {
  var args = Array.prototype.slice.call(arguments);
  var body = args.pop();
  body = 'return function (' + args.join(',') + ') {' + body + '}';
  return (new Function(['numeric'], body))(numeric);
}

numeric.prettyPrint = function prettyPrint(x) {
    function fmtnum(x) {
        if(x === 0) { return '0'; }
        if(isNaN(x)) { return 'NaN'; }
        if(x<0) { return '-'+fmtnum(-x); }
        if(isFinite(x)) {
            var scale = Math.floor(Math.log(x) / Math.log(10));
            var normalized = x / Math.pow(10,scale);
            var basic = normalized.toPrecision(numeric.precision);
            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
            return parseFloat(basic).toString()+'e'+scale.toString();
        }
        return 'Infinity';
    }
    var ret = [];
    function foo(x) {
        var k;
        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
        if(typeof x === "number") {
            var a = fmtnum(x);
            var b = x.toPrecision(numeric.precision);
            var c = parseFloat(x.toString()).toString();
            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
            return false;
        }
        if(x === null) { ret.push("null"); return false; }
        if(typeof x === "function") { 
            ret.push(x.toString());
            var flag = false;
            for(k in x) { if(x.hasOwnProperty(k)) { 
                if(flag) ret.push(',\n');
                else ret.push('\n{');
                flag = true; 
                ret.push(k); 
                ret.push(': \n'); 
                foo(x[k]); 
            } }
            if(flag) ret.push('}\n');
            return true;
        }
        if(x instanceof Array) {
            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
            var flag = false;
            ret.push('[');
            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
            ret.push(']');
            return true;
        }
        ret.push('{');
        var flag = false;
        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
        ret.push('}');
        return true;
    }
    foo(x);
    return ret.join('');
}

numeric.parseDate = function parseDate(d) {
    function foo(d) {
        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseFloat = function parseFloat_(d) {
    function foo(d) {
        if(typeof d === 'string') { return parseFloat(d); }
        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseCSV = function parseCSV(t) {
    var foo = t.split('\n');
    var j,k;
    var ret = [];
    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
    var stripper = function(n) { return n.substr(0,n.length-1); }
    var count = 0;
    for(k=0;k<foo.length;k++) {
      var bar = (foo[k]+",").match(pat),baz;
      if(bar.length>0) {
          ret[count] = [];
          for(j=0;j<bar.length;j++) {
              baz = stripper(bar[j]);
              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
              else ret[count][j] = baz;
          }
          count++;
      }
    }
    return ret;
}

numeric.toCSV = function toCSV(A) {
    var s = numeric.dim(A);
    var i,j,m,n,row,ret;
    m = s[0];
    n = s[1];
    ret = [];
    for(i=0;i<m;i++) {
        row = [];
        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
        ret[i] = row.join(', ');
    }
    return ret.join('\n')+'\n';
}

numeric.getURL = function getURL(url) {
    var client = new XMLHttpRequest();
    client.open("GET",url,false);
    client.send();
    return client;
}

numeric.imageURL = function imageURL(img) {
    function base64(A) {
        var n = A.length, i,x,y,z,p,q,r,s;
        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var ret = "";
        for(i=0;i<n;i+=3) {
            x = A[i];
            y = A[i+1];
            z = A[i+2];
            p = x >> 2;
            q = ((x & 3) << 4) + (y >> 4);
            r = ((y & 15) << 2) + (z >> 6);
            s = z & 63;
            if(i+1>=n) { r = s = 64; }
            else if(i+2>=n) { s = 64; }
            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
            }
        return ret;
    }
    function crc32Array (a,from,to) {
        if(typeof from === "undefined") { from = 0; }
        if(typeof to === "undefined") { to = a.length; }
        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
     
        var crc = -1, y = 0, n = a.length,i;

        for (i = from; i < to; i++) {
            y = (crc ^ a[i]) & 0xFF;
            crc = (crc >>> 8) ^ table[y];
        }
     
        return crc ^ (-1);
    }

    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
    var stream = [
                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
                  0,0,0,13,                                                  //  8: IHDR Chunk length
                  73, 72, 68, 82,                                            // 12: "IHDR" 
                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
                  8,                                                         // 24: bit depth
                  2,                                                         // 25: RGB
                  0,                                                         // 26: deflate
                  0,                                                         // 27: no filter
                  0,                                                         // 28: no interlace
                  -1,-2,-3,-4,                                               // 29: CRC
                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
                  73, 68, 65, 84,                                            // 37: "IDAT"
                  // RFC 1950 header starts here
                  8,                                                         // 41: RFC1950 CMF
                  29                                                         // 42: RFC1950 FLG
                  ];
    crc32 = crc32Array(stream,12,29);
    stream[29] = (crc32>>24)&255;
    stream[30] = (crc32>>16)&255;
    stream[31] = (crc32>>8)&255;
    stream[32] = (crc32)&255;
    s1 = 1;
    s2 = 0;
    for(i=0;i<h;i++) {
        if(i<h-1) { stream.push(0); }
        else { stream.push(1); }
        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
        stream.push(a); stream.push(b);
        stream.push((~a)&255); stream.push((~b)&255);
        if(i===0) stream.push(0);
        for(j=0;j<w;j++) {
            for(k=0;k<3;k++) {
                a = img[k][i][j];
                if(a>255) a = 255;
                else if(a<0) a=0;
                else a = Math.round(a);
                s1 = (s1 + a )%65521;
                s2 = (s2 + s1)%65521;
                stream.push(a);
            }
        }
        stream.push(0);
    }
    adler32 = (s2<<16)+s1;
    stream.push((adler32>>24)&255);
    stream.push((adler32>>16)&255);
    stream.push((adler32>>8)&255);
    stream.push((adler32)&255);
    length = stream.length - 41;
    stream[33] = (length>>24)&255;
    stream[34] = (length>>16)&255;
    stream[35] = (length>>8)&255;
    stream[36] = (length)&255;
    crc32 = crc32Array(stream,37);
    stream.push((crc32>>24)&255);
    stream.push((crc32>>16)&255);
    stream.push((crc32>>8)&255);
    stream.push((crc32)&255);
    stream.push(0);
    stream.push(0);
    stream.push(0);
    stream.push(0);
//    a = stream.length;
    stream.push(73);  // I
    stream.push(69);  // E
    stream.push(78);  // N
    stream.push(68);  // D
    stream.push(174); // CRC1
    stream.push(66);  // CRC2
    stream.push(96);  // CRC3
    stream.push(130); // CRC4
    return 'data:image/png;base64,'+base64(stream);
}

// 2. Linear algebra with Arrays.
numeric._dim = function _dim(x) {
    var ret = [];
    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
    return ret;
}

numeric.dim = function dim(x) {
    var y,z;
    if(typeof x === "object") {
        y = x[0];
        if(typeof y === "object") {
            z = y[0];
            if(typeof z === "object") {
                return numeric._dim(x);
            }
            return [x.length,y.length];
        }
        return [x.length];
    }
    return [];
}

numeric.mapreduce = function mapreduce(body,init) {
    return numeric.compile('x','accum','_s','_k',
            'if(typeof accum === "undefined") accum = '+init+';\n'+
            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i,xi;\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) {\n'+
            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
            '    }'+
            '    return accum;\n'+
            '}\n'+
            'for(i=_n-1;i>=1;i-=2) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '    xi = x[i-1];\n'+
            '    '+body+';\n'+
            '}\n'+
            'if(i === 0) {\n'+
            '    xi = x[i];\n'+
            '    '+body+'\n'+
            '}\n'+
            'return accum;'
            );
}
numeric.mapreduce2 = function mapreduce2(body,setup) {
    return numeric.compile('x',
            'var n = x.length;\n'+
            'var i,xi;\n'+setup+'\n'+
            'for(i=n-1;i!==-1;--i) { \n'+
            '    xi = x[i];\n'+
            '    '+body+'\n'+
            '}\n'+
            'return accum;'
            );
}


numeric.same = function same(x,y) {
    var i,n;
    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
    n = x.length;
    if(n !== y.length) { return false; }
    for(i=0;i<n;i++) {
        if(x[i] === y[i]) { continue; }
        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
        else { return false; }
    }
    return true;
}

numeric.rep = function rep(s,v,k) {
    if(typeof k === "undefined") { k=0; }
    var n = s[k], ret = Array(n), i;
    if(k === s.length-1) {
        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
        if(i===-1) { ret[0] = v; }
        return ret;
    }
    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
    return ret;
}


numeric.dotMMsmall = function dotMMsmall(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
    p = x.length; q = y.length; r = y[0].length;
    ret = Array(p);
    for(i=p-1;i>=0;i--) {
        foo = Array(r);
        bar = x[i];
        for(k=r-1;k>=0;k--) {
            woo = bar[q-1]*y[q-1][k];
            for(j=q-2;j>=1;j-=2) {
                i0 = j-1;
                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
            }
            if(j===0) { woo += bar[0]*y[0][k]; }
            foo[k] = woo;
        }
        ret[i] = foo;
    }
    return ret;
}
numeric._getCol = function _getCol(A,j,x) {
    var n = A.length, i;
    for(i=n-1;i>0;--i) {
        x[i] = A[i][j];
        --i;
        x[i] = A[i][j];
    }
    if(i===0) x[0] = A[0][j];
}
numeric.dotMMbig = function dotMMbig(x,y){
    var gc = numeric._getCol, p = y.length, v = Array(p);
    var m = x.length, n = y[0].length, A = new Array(m), xj;
    var VV = numeric.dotVV;
    var i,j,k,z;
    --p;
    --m;
    for(i=m;i!==-1;--i) A[i] = Array(n);
    --n;
    for(i=n;i!==-1;--i) {
        gc(y,i,v);
        for(j=m;j!==-1;--j) {
            z=0;
            xj = x[j];
            A[j][i] = VV(xj,v);
        }
    }
    return A;
}

numeric.dotMV = function dotMV(x,y) {
    var p = x.length, q = y.length,i;
    var ret = Array(p), dotVV = numeric.dotVV;
    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
    return ret;
}

numeric.dotVM = function dotVM(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
    p = x.length; q = y[0].length;
    ret = Array(q);
    for(k=q-1;k>=0;k--) {
        woo = x[p-1]*y[p-1][k];
        for(j=p-2;j>=1;j-=2) {
            i0 = j-1;
            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
        }
        if(j===0) { woo += x[0]*y[0][k]; }
        ret[k] = woo;
    }
    return ret;
}

numeric.dotVV = function dotVV(x,y) {
    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
    for(i=n-2;i>=1;i-=2) {
        i1 = i-1;
        ret += x[i]*y[i] + x[i1]*y[i1];
    }
    if(i===0) { ret += x[0]*y[0]; }
    return ret;
}

numeric.dot = function dot(x,y) {
    var d = numeric.dim;
    switch(d(x).length*1000+d(y).length) {
    case 2002:
        if(y.length < 10) return numeric.dotMMsmall(x,y);
        else return numeric.dotMMbig(x,y);
    case 2001: return numeric.dotMV(x,y);
    case 1002: return numeric.dotVM(x,y);
    case 1001: return numeric.dotVV(x,y);
    case 1000: return numeric.mulVS(x,y);
    case 1: return numeric.mulSV(x,y);
    case 0: return x*y;
    default: throw new Error('numeric.dot only works on vectors and matrices');
    }
}

numeric.diag = function diag(d) {
    var i,i1,j,n = d.length, A = Array(n), Ai;
    for(i=n-1;i>=0;i--) {
        Ai = Array(n);
        i1 = i+2;
        for(j=n-1;j>=i1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j>i) { Ai[j] = 0; }
        Ai[i] = d[i];
        for(j=i-1;j>=1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j===0) { Ai[0] = 0; }
        A[i] = Ai;
    }
    return A;
}
numeric.getDiag = function(A) {
    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
    for(i=n-1;i>=1;--i) {
        ret[i] = A[i][i];
        --i;
        ret[i] = A[i][i];
    }
    if(i===0) {
        ret[0] = A[0][0];
    }
    return ret;
}

numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
numeric.pointwise = function pointwise(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = '_s';
    fun[params.length+1] = '_k';
    fun[params.length+2] = (
            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
            '    return ret;\n'+
            '}\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            '    '+body+'\n'+
            '}\n'+
            'return ret;'
            );
    return numeric.compile.apply(null,fun);
}
numeric.pointwise2 = function pointwise2(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = (
            'var _n = '+thevec+'.length;\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            body+'\n'+
            '}\n'+
            'return ret;'
            );
    return numeric.compile.apply(null,fun);
}
numeric._biforeach = (function _biforeach(x,y,s,k,f) {
    if(k === s.length-1) { f(x,y); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
});
numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
    if(k === s.length-1) { return f(x,y); }
    var i,n=s[k],ret = Array(n);
    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
    return ret;
});
numeric._foreach = (function _foreach(x,s,k,f) {
    if(k === s.length-1) { f(x); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
});
numeric._foreach2 = (function _foreach2(x,s,k,f) {
    if(k === s.length-1) { return f(x); }
    var i,n=s[k], ret = Array(n);
    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
    return ret;
});

/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

numeric.ops2 = {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/',
        mod: '%',
        and: '&&',
        or:  '||',
        eq:  '===',
        neq: '!==',
        lt:  '<',
        gt:  '>',
        leq: '<=',
        geq: '>=',
        band: '&',
        bor: '|',
        bxor: '^',
        lshift: '<<',
        rshift: '>>',
        rrshift: '>>>'
};
numeric.opseq = {
        addeq: '+=',
        subeq: '-=',
        muleq: '*=',
        diveq: '/=',
        modeq: '%=',
        lshifteq: '<<=',
        rshifteq: '>>=',
        rrshifteq: '>>>=',
        bandeq: '&=',
        boreq: '|=',
        bxoreq: '^='
};
numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
                    'exp','floor','log','round','sin','sqrt','tan',
                    'isNaN','isFinite'];
numeric.mathfuns2 = ['atan2','pow','max','min'];
numeric.ops1 = {
        neg: '-',
        not: '!',
        bnot: '~',
        clone: ''
};
numeric.mapreducers = {
        any: ['if(xi) return true;','var accum = false;'],
        all: ['if(!xi) return false;','var accum = true;'],
        sum: ['accum += xi;','var accum = 0;'],
        prod: ['accum *= xi;','var accum = 1;'],
        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
        norm1: ['accum += abs(xi);','var accum = 0, abs = Math.abs;'],
        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
};

(function () {
    var i,o;
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        numeric.ops2[o] = o;
    }
    for(i in numeric.ops2) {
        if(numeric.ops2.hasOwnProperty(i)) {
            o = numeric.ops2[i];
            var code, codeeq, setup = '';
            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
                setup = 'var '+o+' = Math.'+o+';\n';
                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
            } else {
                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
                if(numeric.opseq.hasOwnProperty(i+'eq')) {
                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
                } else {
                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
                }
            }
            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
            numeric[i] = numeric.compile(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
                    'var dim = numeric.dim;\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof x === "object") {\n'+
                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
                    '  else '+codeeq('x','y')+'\n'+
                    '}\nreturn x;\n');
            numeric[o] = numeric[i];
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
            numeric[i+'eq'] = numeric.compile(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
                    'var s = numeric.dim(x);\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
                    '  else numeric._biforeach(x,y,s,0,S);\n'+
                    '}\nreturn x;\n');
        }
    }
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        delete numeric.ops2[o];
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        numeric.ops1[o] = o;
    }
    for(i in numeric.ops1) {
        if(numeric.ops1.hasOwnProperty(i)) {
            setup = '';
            o = numeric.ops1[i];
            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
            }
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
            numeric[i+'eq'] = numeric.compile('x',
                    'if(typeof x !== "object") return '+o+'x\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'eqV;\n'+
                    'var s = numeric.dim(x);\n'+
                    'numeric._foreach(x,s,0,V);\n'+
                    'return x;\n');
            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
            numeric[i] = numeric.compile('x',
                    'if(typeof x !== "object") return '+o+'(x)\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'V;\n'+
                    'var s = numeric.dim(x);\n'+
                    'return numeric._foreach2(x,s,0,V);\n');
        }
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        delete numeric.ops1[o];
    }
    for(i in numeric.mapreducers) {
        if(numeric.mapreducers.hasOwnProperty(i)) {
            o = numeric.mapreducers[i];
            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
            numeric[i] = numeric.compile('x','s','k',
                    o[1]+
                    'if(typeof x !== "object") {'+
                    '    xi = x;\n'+
                    o[0]+'\n'+
                    '    return accum;\n'+
                    '}'+
                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
                    'if(typeof k === "undefined") k = 0;\n'+
                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
                    'var xi;\n'+
                    'var n = x.length, i;\n'+
                    'for(i=n-1;i!==-1;--i) {\n'+
                    '   xi = arguments.callee(x[i]);\n'+
                    o[0]+'\n'+
                    '}\n'+
                    'return accum;\n');
        }
    }
}());

numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
numeric.trunc = function trunc(x,y) {
    if(typeof x === "object") {
        if(typeof y === "object") return numeric.truncVV(x,y);
        return numeric.truncVS(x,y);
    }
    if (typeof y === "object") return numeric.truncSV(x,y);
    return Math.round(x/y)*y;
}

numeric.inv = function inv(x) {
    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
    var A = numeric.clone(x), Ai, Aj;
    var I = numeric.identity(m), Ii, Ij;
    var i,j,k,x;
    for(j=0;j<n;++j) {
        var i0 = -1;
        var v0 = -1;
        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
        x = Aj[j];
        for(k=j;k!==n;++k)    Aj[k] /= x; 
        for(k=n-1;k!==-1;--k) Ij[k] /= x;
        for(i=m-1;i!==-1;--i) {
            if(i!==j) {
                Ai = A[i];
                Ii = I[i];
                x = Ai[j];
                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
                if(k===0) Ii[0] -= Ij[0]*x;
            }
        }
    }
    return I;
}

numeric.det = function det(x) {
    var s = numeric.dim(x);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
    for(j=0;j<n-1;j++) {
        k=j;
        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
        if(k !== j) {
            temp = A[k]; A[k] = A[j]; A[j] = temp;
            ret *= -1;
        }
        Aj = A[j];
        for(i=j+1;i<n;i++) {
            Ai = A[i];
            alpha = Ai[j]/Aj[j];
            for(k=j+1;k<n-1;k+=2) {
                k1 = k+1;
                Ai[k] -= Aj[k]*alpha;
                Ai[k1] -= Aj[k1]*alpha;
            }
            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
        }
        if(Aj[j] === 0) { return 0; }
        ret *= Aj[j];
    }
    return ret*A[j][j];
}

numeric.transpose = function transpose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
            --j;
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = A0[j];
            --j;
            ret[j][0] = A0[j];
        }
        if(j===0) { ret[0][0] = A0[0]; }
    }
    return ret;
}
numeric.negtranspose = function negtranspose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
            --j;
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = -A0[j];
            --j;
            ret[j][0] = -A0[j];
        }
        if(j===0) { ret[0][0] = -A0[0]; }
    }
    return ret;
}

numeric._random = function _random(s,k) {
    var i,n=s[k],ret=Array(n), rnd;
    if(k === s.length-1) {
        rnd = Math.random;
        for(i=n-1;i>=1;i-=2) {
            ret[i] = rnd();
            ret[i-1] = rnd();
        }
        if(i===0) { ret[0] = rnd(); }
        return ret;
    }
    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
    return ret;
}
numeric.random = function random(s) { return numeric._random(s,0); }

numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }

numeric.linspace = function linspace(a,b,n) {
    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
    if(n<2) { return n===1?[a]:[]; }
    var i,ret = Array(n);
    n--;
    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
    return ret;
}

numeric.getBlock = function getBlock(x,from,to) {
    var s = numeric.dim(x);
    function foo(x,k) {
        var i,a = from[k], n = to[k]-a, ret = Array(n);
        if(k === s.length-1) {
            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
            return ret;
        }
        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
        return ret;
    }
    return foo(x,0);
}

numeric.setBlock = function setBlock(x,from,to,B) {
    var s = numeric.dim(x);
    function foo(x,y,k) {
        var i,a = from[k], n = to[k]-a;
        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
    }
    foo(x,B,0);
    return x;
}

numeric.getRange = function getRange(A,I,J) {
    var m = I.length, n = J.length;
    var i,j;
    var B = Array(m), Bi, AI;
    for(i=m-1;i!==-1;--i) {
        B[i] = Array(n);
        Bi = B[i];
        AI = A[I[i]];
        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
    }
    return B;
}

numeric.blockMatrix = function blockMatrix(X) {
    var s = numeric.dim(X);
    if(s.length<4) return numeric.blockMatrix([X]);
    var m=s[0],n=s[1],M,N,i,j,Xij;
    M = 0; N = 0;
    for(i=0;i<m;++i) M+=X[i][0].length;
    for(j=0;j<n;++j) N+=X[0][j][0].length;
    var Z = Array(M);
    for(i=0;i<M;++i) Z[i] = Array(N);
    var I=0,J,ZI,k,l,Xijk;
    for(i=0;i<m;++i) {
        J=N;
        for(j=n-1;j!==-1;--j) {
            Xij = X[i][j];
            J -= Xij[0].length;
            for(k=Xij.length-1;k!==-1;--k) {
                Xijk = Xij[k];
                ZI = Z[I+k];
                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
            }
        }
        I += X[i][0].length;
    }
    return Z;
}

numeric.tensor = function tensor(x,y) {
    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
    var s1 = numeric.dim(x), s2 = numeric.dim(y);
    if(s1.length !== 1 || s2.length !== 1) {
        throw new Error('numeric: tensor product is only defined for vectors');
    }
    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
    for(i=m-1;i>=0;i--) {
        Ai = Array(n);
        xi = x[i];
        for(j=n-1;j>=3;--j) {
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
        }
        while(j>=0) { Ai[j] = xi * y[j]; --j; }
        A[i] = Ai;
    }
    return A;
}

// 3. The Tensor type T
numeric.T = function T(x,y) { this.x = x; this.y = y; }
numeric.t = function t(x,y) { return new numeric.T(x,y); }

numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
    var io = numeric.indexOf;
    if(typeof setup !== "string") {
        var k;
        setup = '';
        for(k in numeric) {
            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
                setup += 'var '+k+' = numeric.'+k+';\n';
            }
        }
    }
    return numeric.compile(['y'],
            'var x = this;\n'+
            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
            setup+'\n'+
            'if(x.y) {'+
            '  if(y.y) {'+
            '    return new numeric.T('+cc+');\n'+
            '  }\n'+
            '  return new numeric.T('+cr+');\n'+
            '}\n'+
            'if(y.y) {\n'+
            '  return new numeric.T('+rc+');\n'+
            '}\n'+
            'return new numeric.T('+rr+');\n'
    );
}

numeric.T.prototype.add = numeric.Tbinop(
        'add(x.x,y.x)',
        'add(x.x,y.x),y.y',
        'add(x.x,y.x),x.y',
        'add(x.x,y.x),add(x.y,y.y)');
numeric.T.prototype.sub = numeric.Tbinop(
        'sub(x.x,y.x)',
        'sub(x.x,y.x),neg(y.y)',
        'sub(x.x,y.x),x.y',
        'sub(x.x,y.x),sub(x.y,y.y)');
numeric.T.prototype.mul = numeric.Tbinop(
        'mul(x.x,y.x)',
        'mul(x.x,y.x),mul(x.x,y.y)',
        'mul(x.x,y.x),mul(x.y,y.x)',
        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

numeric.T.prototype.reciprocal = function reciprocal() {
    var mul = numeric.mul, div = numeric.div;
    if(this.y) {
        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
    }
    return new T(div(1,this.x));
}
numeric.T.prototype.div = function div(y) {
    if(!(y instanceof numeric.T)) y = new numeric.T(y);
    if(y.y) { return this.mul(y.reciprocal()); }
    var div = numeric.div;
    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
    return new numeric.T(div(this.x,y.x));
}
numeric.T.prototype.dot = numeric.Tbinop(
        'dot(x.x,y.x)',
        'dot(x.x,y.x),dot(x.x,y.y)',
        'dot(x.x,y.x),dot(x.y,y.x)',
        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
        );
numeric.T.prototype.transpose = function transpose() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),t(y)); }
    return new numeric.T(t(x));
}
numeric.T.prototype.transjugate = function transjugate() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
    return new numeric.T(t(x));
}
numeric.Tunop = function Tunop(r,c,s) {
    if(typeof s !== "string") { s = ''; }
    return numeric.compile(
            'var x = this;\n'+
            s+'\n'+
            'if(x.y) {'+
            '  '+c+'\n'+
            '}\n'+
            r+'\n'
    );
}

numeric.T.prototype.exp = numeric.Tunop(
        'return new numeric.T(ex);',
        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex));',
        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
numeric.T.prototype.conj = numeric.Tunop(
        'return new numeric.T(x.x);',
        'return new numeric.T(x.x,numeric.neg(x.y));');
numeric.T.prototype.neg = numeric.Tunop(
        'return new numeric.T(neg(x.x));',
        'return new numeric.T(neg(x.x),neg(x.y));',
        'var neg = numeric.neg;');
numeric.T.prototype.sin = numeric.Tunop(
        'return new numeric.T(numeric.sin(x.x));',
        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
numeric.T.prototype.cos = numeric.Tunop(
        'return new numeric.T(numeric.cos(x.x));',
        'return x.exp().add(x.neg().exp()).div(2);');
numeric.T.prototype.abs = numeric.Tunop(
        'return new numeric.T(numeric.abs(x.x));',
        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
        'var mul = numeric.mul;');
numeric.T.prototype.log = numeric.Tunop(
        'return new numeric.T(numeric.log(x.x));',
        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
        'return new numeric.T(numeric.log(r.x),theta.x);');
numeric.T.prototype.norm2 = numeric.Tunop(
        'return numeric.norm2(x.x);',
        'var f = numeric.norm2Squared;\n'+
        'return Math.sqrt(f(x.x)+f(x.y));');
numeric.T.prototype.inv = function inv() {
    var A = this;
    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
    var n = A.x.length, i, j, k;
    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
    var i,j,k,d,d1,ax,ay,bx,by,temp;
    for(i=0;i<n;i++) {
        ax = Ax[i][i]; ay = Ay[i][i];
        d = ax*ax+ay*ay;
        k = i;
        for(j=i+1;j<n;j++) {
            ax = Ax[j][i]; ay = Ay[j][i];
            d1 = ax*ax+ay*ay;
            if(d1 > d) { k=j; d = d1; }
        }
        if(k!==i) {
            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
        }
        Aix = Ax[i]; Aiy = Ay[i];
        Rix = Rx[i]; Riy = Ry[i];
        ax = Aix[i]; ay = Aiy[i];
        for(j=i+1;j<n;j++) {
            bx = Aix[j]; by = Aiy[j];
            Aix[j] = (bx*ax+by*ay)/d;
            Aiy[j] = (by*ax-bx*ay)/d;
        }
        for(j=0;j<n;j++) {
            bx = Rix[j]; by = Riy[j];
            Rix[j] = (bx*ax+by*ay)/d;
            Riy[j] = (by*ax-bx*ay)/d;
        }
        for(j=i+1;j<n;j++) {
            Ajx = Ax[j]; Ajy = Ay[j];
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ajx[i]; ay = Ajy[i];
            for(k=i+1;k<n;k++) {
                bx = Aix[k]; by = Aiy[k];
                Ajx[k] -= bx*ax-by*ay;
                Ajy[k] -= by*ax+bx*ay;
            }
            for(k=0;k<n;k++) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= bx*ax-by*ay;
                Rjy[k] -= by*ax+bx*ay;
            }
        }
    }
    for(i=n-1;i>0;i--) {
        Rix = Rx[i]; Riy = Ry[i];
        for(j=i-1;j>=0;j--) {
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ax[j][i]; ay = Ay[j][i];
            for(k=n-1;k>=0;k--) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= ax*bx - ay*by;
                Rjy[k] -= ax*by + ay*bx;
            }
        }
    }
    return new numeric.T(Rx,Ry);
}
numeric.T.prototype.get = function get(i) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length;
    if(y) {
        while(k<n) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        return new numeric.T(x,y);
    }
    while(k<n) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    return new numeric.T(x);
}
numeric.T.prototype.set = function set(i,v) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
    if(n===0) {
        if(vy) { this.y = vy; }
        else if(y) { this.y = undefined; }
        this.x = x;
        return this;
    }
    if(vy) {
        if(y) { /* ok */ }
        else {
            y = numeric.rep(numeric.dim(x),0);
            this.y = y;
        }
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        y[ik] = vy;
        return this;
    }
    if(y) {
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
        else y[ik] = 0;
        return this;
    }
    while(k<n-1) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    ik = i[k];
    x[ik] = vx;
    return this;
}
numeric.T.prototype.getRows = function getRows(i0,i1) {
    var n = i1-i0+1, j;
    var rx = Array(n), ry, x = this.x, y = this.y;
    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
    if(y) {
        ry = Array(n);
        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
        return new numeric.T(rx,ry);
    }
    return new numeric.T(rx);
}
numeric.T.prototype.setRows = function setRows(i0,i1,A) {
    var j;
    var rx = this.x, ry = this.y, x = A.x, y = A.y;
    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
    } else if(ry) {
        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
    }
    return this;
}
numeric.T.prototype.getRow = function getRow(k) {
    var x = this.x, y = this.y;
    if(y) { return new numeric.T(x[k],y[k]); }
    return new numeric.T(x[k]);
}
numeric.T.prototype.setRow = function setRow(i,v) {
    var rx = this.x, ry = this.y, x = v.x, y = v.y;
    rx[i] = x;
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        ry[i] = y;
    } else if(ry) {
        ry = numeric.rep([x.length],0);
    }
    return this;
}

numeric.T.prototype.getBlock = function getBlock(from,to) {
    var x = this.x, y = this.y, b = numeric.getBlock;
    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
    return new numeric.T(b(x,from,to));
}
numeric.T.prototype.setBlock = function setBlock(from,to,A) {
    if(!(A instanceof numeric.T)) A = new numeric.T(A);
    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
    if(Ay) {
        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
        b(x,from,to,Ax);
        b(y,from,to,Ay);
        return this;
    }
    b(x,from,to,Ax);
    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
}
numeric.T.rep = function rep(s,v) {
    var T = numeric.T;
    if(!(v instanceof T)) v = new T(v);
    var x = v.x, y = v.y, r = numeric.rep;
    if(y) return new T(r(s,x),r(s,y));
    return new T(r(s,x));
}
numeric.T.diag = function diag(d) {
    if(!(d instanceof numeric.T)) d = new numeric.T(d);
    var x = d.x, y = d.y, diag = numeric.diag;
    if(y) return new numeric.T(diag(x),diag(y));
    return new numeric.T(diag(x));
}
numeric.T.eig = function eig() {
    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
    return numeric.eig(this.x);
}
numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
numeric.T.prototype.getDiag = function getDiag() {
    var n = numeric;
    var x = this.x, y = this.y;
    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
    return new n.T(n.getDiag(x));
}

// 4. Eigenvalues of real matrices

numeric.house = function house(x) {
    var v = numeric.clone(x);
    var s = x[0] >= 0 ? 1 : -1;
    var alpha = s*numeric.norm2(x);
    v[0] += alpha;
    var foo = numeric.norm2(v);
    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
    return numeric.div(v,foo);
}

numeric.toUpperHessenberg = function toUpperHessenberg(me) {
    var s = numeric.dim(me);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
    for(j=0;j<m-2;j++) {
        x = Array(m-j-1);
        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
        if(numeric.norm2(x)>0) {
            v = numeric.house(x);
            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
            B = Array(m-j-1);
            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    return {H:A, Q:Q};
}

numeric.epsilon = 2.220446049250313e-16;

numeric.QRFrancis = function(H,maxiter) {
    if(typeof maxiter === "undefined") { maxiter = 10000; }
    H = numeric.clone(H);
    var H0 = numeric.clone(H);
    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
    var epsilon = numeric.epsilon;
    for(iter=0;iter<maxiter;iter++) {
        for(j=0;j<m-1;j++) {
            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
                B = Array(j+1);
                for(i=0;i<=j;i++) { B[i] = Q[i]; }
                C = numeric.dot(QH1.Q,B);
                for(i=0;i<=j;i++) { Q[i] = C[i]; }
                B = Array(m-j-1);
                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
                C = numeric.dot(QH2.Q,B);
                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
            }
        }
        a = H[m-2][m-2]; b = H[m-2][m-1];
        c = H[m-1][m-2]; d = H[m-1][m-1];
        tr = a+d;
        det = (a*d-b*c);
        Hloc = numeric.getBlock(H, [0,0], [2,2]);
        if(tr*tr>=4*det) {
            var s1,s2;
            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,s1+s2)),
                               numeric.diag(numeric.rep([3],s1*s2)));
        } else {
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,tr)),
                               numeric.diag(numeric.rep([3],det)));
        }
        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
        v = numeric.house(x);
        B = [H[0],H[1],H[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
        B = numeric.getBlock(H, [0,0],[m-1,2]);
        C = numeric.tensor(numeric.dot(B,v),v);
        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
        B = [Q[0],Q[1],Q[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        var J;
        for(j=0;j<m-2;j++) {
            for(k=j;k<=j+1;k++) {
                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
                    B = Array(k+1);
                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
                    C = numeric.dot(QH1.Q,B);
                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
                    B = Array(m-k-1);
                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
                    C = numeric.dot(QH2.Q,B);
                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
                }
            }
            J = Math.min(m-1,j+3);
            x = Array(J-j);
            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
            v = numeric.house(x);
            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
            B = Array(J-j);
            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
}

numeric.eig = function eig(A,maxiter) {
    var QH = numeric.toUpperHessenberg(A);
    var QB = numeric.QRFrancis(QH.H,maxiter);
    var T = numeric.T;
    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
    var m = B.length,j;
    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
    var sqrt = Math.sqrt;
    for(k=0;k<m;k++) {
        i = B[k][0];
        if(i === B[k][1]) {
            // nothing
        } else {
            j = i+1;
            a = H[i][i];
            b = H[i][j];
            c = H[j][i];
            d = H[j][j];
            if(b === 0 && c === 0) continue;
            p1 = -a-d;
            p2 = a*d-b*c;
            disc = p1*p1-4*p2;
            if(disc>=0) {
                if(p1<0) x = -0.5*(p1-sqrt(disc));
                else     x = -0.5*(p1+sqrt(disc));
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1);
                    p = (a-x)/n1;
                    q = b/n1;
                } else {
                    n2 = sqrt(n2);
                    p = c/n2;
                    q = (d-x)/n2;
                }
                Q0 = new T([[q,-p],[p,q]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            } else {
                x = -0.5*p1;
                y = 0.5*sqrt(-disc);
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1+y*y);
                    p = (a-x)/n1;
                    q = b/n1;
                    x = 0;
                    y /= n1;
                } else {
                    n2 = sqrt(n2+y*y);
                    p = c/n2;
                    q = (d-x)/n2;
                    x = y/n2;
                    y = 0;
                }
                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            }
        }
    }
    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
    for(j=0;j<n;j++) {
        if(j>0) {
            for(k=j-1;k>=0;k--) {
                var Rk = R.get([k,k]), Rj = R.get([j,j]);
                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
                    x = R.getRow(k).getBlock([k],[j-1]);
                    y = E.getRow(j).getBlock([k],[j-1]);
                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
                } else {
                    E.setRow(j,E.getRow(k));
                    continue;
                }
            }
        }
    }
    for(j=0;j<n;j++) {
        x = E.getRow(j);
        E.setRow(j,x.div(x.norm2()));
    }
    E = E.transpose();
    E = Q.transjugate().dot(E);
    return { lambda:R.getDiag(), E:E };
};

// 5. Compressed Column Storage matrices
numeric.ccsSparse = function ccsSparse(A) {
    var m = A.length,n,foo, i,j, counts = [];
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            j = parseInt(j);
            while(j>=counts.length) counts[counts.length] = 0;
            if(foo[j]!==0) counts[j]++;
        }
    }
    var n = counts.length;
    var Ai = Array(n+1);
    Ai[0] = 0;
    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            if(foo[j]!==0) {
                counts[j]--;
                Aj[Ai[j]+counts[j]] = i;
                Av[Ai[j]+counts[j]] = foo[j];
            }
        }
    }
    return [Ai,Aj,Av];
}
numeric.ccsFull = function ccsFull(A) {
    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
    var B = numeric.rep([m,n],0);
    for(i=0;i<n;i++) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
    }
    return B;
}
numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
    if(typeof bj === "undefined") x = numeric.rep([m],0);
    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
    if(typeof xj === "undefined") xj = [];
    function dfs(j) {
        var k;
        if(x[j] !== 0) return;
        x[j] = 1;
        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
        xj[n] = j;
        ++n;
    }
    var i,j,j0,j1,k,l,l0,l1,a;
    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
    xj.length = n;
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = max(Ai[j+1],j0);
        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k!==j1;++k) {
            l = Aj[k];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsDFS = function ccsDFS(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[J];
    k1[0] = k11 = Ai[J+1];
    while(1) {
        if(km >= k11) {
            xj[n] = j[m];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Pinv[Aj[km]];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k<j1;++k) {
            l = Pinv[Aj[k]];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,x,xj,i,Pinv,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(x[k]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(x[i])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
            a = x[i]; x[i] = x[e]; x[e] = a;
        }
        a = Li[i];
        e = Ui[i];
        d = x[i];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = x[k];
            xj[j] = 0;
            x[k] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsDFS0 = function ccsDFS0(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[Pinv[J]];
    k1[0] = k11 = Ai[Pinv[J]+1];
    while(1) {
        if(isNaN(km)) throw new Error("Ow!");
        if(km >= k11) {
            xj[n] = Pinv[j[m]];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Aj[km];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                foo = Pinv[foo];
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        l = P[j];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
        a = y[l];
        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
        y[l] = a;
    }
}
numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS0(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,y,xj,i,Pinv,P,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(y[P[k]]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(y[P[i]])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
        }
        a = Li[i];
        e = Ui[i];
        d = y[P[i]];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = y[P[k]];
            xj[j] = 0;
            y[P[k]] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsLUP = numeric.ccsLUP0;

numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
    var s = numeric.ccsDim(A),m=s[0],n=s[1];
    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
    else if(typeof i === "number") { i = [i]; }
    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
    else if(typeof j === "number") { j = [j]; }
    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
    var Ai = A[0], Aj = A[1], Av = A[2];
    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
    for(q=0;q<Q;++q) {
        jq = j[q];
        var q0 = Ai[jq];
        var q1 = Ai[jq+1];
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 1;
            x[r] = Av[p];
        }
        for(p=0;p<P;++p) {
            ip = i[p];
            if(flags[ip]) {
                Bj[count] = p;
                Bv[count] = x[i[p]];
                ++count;
            }
        }
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 0;
        }
        Bi[q+1] = count;
    }
    return B;
}

numeric.ccsDot = function ccsDot(A,B) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var Bi = B[0], Bj = B[1], Bv = B[2];
    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
    var m = sA[0], n = sA[1], o = sB[1];
    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
    var i,j,k,j0,j1,i0,i1,l,p,a,b;
    for(k=0;k!==o;++k) {
        j0 = Bi[k];
        j1 = Bi[k+1];
        p = 0;
        for(j=j0;j<j1;++j) {
            a = Bj[j];
            b = Bv[j];
            i0 = Ai[a];
            i1 = Ai[a+1];
            for(i=i0;i<i1;++i) {
                l = Aj[i];
                if(flags[l]===0) {
                    xj[p] = l;
                    flags[l] = 1;
                    p = p+1;
                }
                x[l] = x[l] + Av[i]*b;
            }
        }
        j0 = Ci[k];
        j1 = j0+p;
        Ci[k+1] = j1;
        for(j=p-1;j!==-1;--j) {
            b = j0+j;
            i = xj[j];
            Cj[b] = i;
            Cv[b] = x[i];
            flags[i] = 0;
            x[i] = 0;
        }
        Ci[k+1] = Ci[k]+p;
    }
    return C;
}

numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
    var L = LUP.L, U = LUP.U, P = LUP.P;
    var Bi = B[0];
    var flag = false;
    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
    var Bj = B[1], Bv = B[2];
    var n = L[0].length-1, m = Bi.length-1;
    var x = numeric.rep([n],0), xj = Array(n);
    var b = numeric.rep([n],0), bj = Array(n);
    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
    var sol = numeric.ccsTSolve;
    var i,j,j0,j1,k,J,N=0;
    for(i=0;i<m;++i) {
        k = 0;
        j0 = Bi[i];
        j1 = Bi[i+1];
        for(j=j0;j<j1;++j) { 
            J = LUP.Pinv[Bj[j]];
            bj[k] = J;
            b[J] = Bv[j];
            ++k;
        }
        bj.length = k;
        sol(L,b,x,bj,xj);
        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
        sol(U,x,b,xj,bj);
        if(flag) return b;
        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
        for(j=bj.length-1;j!==-1;--j) {
            J = bj[j];
            Xj[N] = J;
            Xv[N] = b[J];
            b[J] = 0;
            ++N;
        }
        Xi[i+1] = N;
    }
    return [Xi,Xj,Xv];
}

numeric.ccsbinop = function ccsbinop(body,setup) {
    if(typeof setup === "undefined") setup='';
    return numeric.compile('X','Y',
            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
            'var xk,yk,zk;\n'+
            'var i,j,j0,j1,k,p=0;\n'+
            setup+
            'for(i=0;i<n;++i) {\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Xj[j];\n'+
            '    x[k] = 1;\n'+
            '    Zj[p] = k;\n'+
            '    ++p;\n'+
            '  }\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Yj[j];\n'+
            '    y[k] = Yv[j];\n'+
            '    if(x[k] === 0) {\n'+
            '      Zj[p] = k;\n'+
            '      ++p;\n'+
            '    }\n'+
            '  }\n'+
            '  Zi[i+1] = p;\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Zj[j];\n'+
            '    xk = x[k];\n'+
            '    yk = y[k];\n'+
            body+'\n'+
            '    Zv[j] = zk;\n'+
            '  }\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
            '}\n'+
            'return [Zi,Zj,Zv];'
            );
};

(function() {
    var k,A,B,C;
    for(k in numeric.ops2) {
        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
        else A = 'NaN';
        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
        else B = 'NaN';
        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
        else C = 'NaN';
        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
        numeric['ccs'+k] = numeric.compile('X','Y',
                'if(typeof X === "number") return '+A+';\n'+
                'if(typeof Y === "number") return '+B+';\n'+
                'return '+C+';\n'
                );
    }
}());

numeric.ccsScatter = function ccsScatter(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = numeric.sup(Aj)+1,m=Ai.length;
    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
    var counts = numeric.rep([n],0),i;
    for(i=0;i<m;++i) counts[Aj[i]]++;
    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
    var ptr = Ri.slice(0),k,Aii;
    for(i=0;i<m;++i) {
        Aii = Aj[i];
        k = ptr[Aii];
        Rj[k] = Ai[i];
        Rv[k] = Av[i];
        ptr[Aii]=ptr[Aii]+1;
    }
    return [Ri,Rj,Rv];
}

numeric.ccsGather = function ccsGather(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = Ai.length-1,m = Aj.length;
    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
    var i,j,j0,j1,p;
    p=0;
    for(i=0;i<n;++i) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j!==j1;++j) {
            Rj[p] = i;
            Ri[p] = Aj[j];
            Rv[p] = Av[j];
            ++p;
        }
    }
    return [Ri,Rj,Rv];
}

// The following sparse linear algebra routines are deprecated.

numeric.sdim = function dim(A,ret,k) {
    if(typeof ret === "undefined") { ret = []; }
    if(typeof A !== "object") return ret;
    if(typeof k === "undefined") { k=0; }
    if(!(k in ret)) { ret[k] = 0; }
    if(A.length > ret[k]) ret[k] = A.length;
    var i;
    for(i in A) {
        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
    }
    return ret;
};

numeric.sclone = function clone(A,k,n) {
    if(typeof k === "undefined") { k=0; }
    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
    var i,ret = Array(A.length);
    if(k === n-1) {
        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
        return ret;
    }
    for(i in A) {
        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
    }
    return ret;
}

numeric.sdiag = function diag(d) {
    var n = d.length,i,ret = Array(n),i1,i2,i3;
    for(i=n-1;i>=1;i-=2) {
        i1 = i-1;
        ret[i] = []; ret[i][i] = d[i];
        ret[i1] = []; ret[i1][i1] = d[i1];
    }
    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
    return ret;
}

numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }

numeric.stranspose = function transpose(A) {
    var ret = [], n = A.length, i,j,Ai;
    for(i in A) {
        if(!(A.hasOwnProperty(i))) continue;
        Ai = A[i];
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(typeof ret[j] !== "object") { ret[j] = []; }
            ret[j][i] = Ai[j];
        }
    }
    return ret;
}

numeric.sLUP = function LUP(A,tol) {
    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
};

numeric.sdotMM = function dotMM(A,B) {
    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
    var i,j,k,accum;
    var ret = Array(p),reti;
    for(i=p-1;i>=0;i--) {
        reti = [];
        Ai = A[i];
        for(k=r-1;k>=0;k--) {
            accum = 0;
            BTk = BT[k];
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(j in BTk) { accum += Ai[j]*BTk[j]; }
            }
            if(accum) reti[k] = accum;
        }
        ret[i] = reti;
    }
    return ret;
}

numeric.sdotMV = function dotMV(A,x) {
    var p = A.length, Ai, i,j;
    var ret = Array(p), accum;
    for(i=p-1;i>=0;i--) {
        Ai = A[i];
        accum = 0;
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(x[j]) accum += Ai[j]*x[j];
        }
        if(accum) ret[i] = accum;
    }
    return ret;
}

numeric.sdotVM = function dotMV(x,A) {
    var i,j,Ai,alpha;
    var ret = [], accum;
    for(i in x) {
        if(!x.hasOwnProperty(i)) continue;
        Ai = A[i];
        alpha = x[i];
        for(j in Ai) {
            if(!Ai.hasOwnProperty(j)) continue;
            if(!ret[j]) { ret[j] = 0; }
            ret[j] += alpha*Ai[j];
        }
    }
    return ret;
}

numeric.sdotVV = function dotVV(x,y) {
    var i,ret=0;
    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
    return ret;
}

numeric.sdot = function dot(A,B) {
    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
    var k = m*1000+n;
    switch(k) {
    case 0: return A*B;
    case 1001: return numeric.sdotVV(A,B);
    case 2001: return numeric.sdotMV(A,B);
    case 1002: return numeric.sdotVM(A,B);
    case 2002: return numeric.sdotMM(A,B);
    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
    }
}

numeric.sscatter = function scatter(V) {
    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
    for(i=n-1;i>=0;--i) {
        if(!V[m-1][i]) continue;
        Aj = A;
        for(j=0;j<m-2;j++) {
            Vij = V[j][i];
            if(!Aj[Vij]) Aj[Vij] = [];
            Aj = Aj[Vij];
        }
        Aj[V[j][i]] = V[j+1][i];
    }
    return A;
}

numeric.sgather = function gather(A,ret,k) {
    if(typeof ret === "undefined") ret = [];
    if(typeof k === "undefined") k = [];
    var n,i,Ai;
    n = k.length;
    for(i in A) {
        if(A.hasOwnProperty(i)) {
            k[n] = parseInt(i);
            Ai = A[i];
            if(typeof Ai === "number") {
                if(Ai) {
                    if(ret.length === 0) {
                        for(i=n+1;i>=0;--i) ret[i] = [];
                    }
                    for(i=n;i>=0;--i) ret[i].push(k[i]);
                    ret[n+1].push(Ai);
                }
            } else gather(Ai,ret,k);
        }
    }
    if(k.length>n) k.pop();
    return ret;
}

// 6. Coordinate matrices
numeric.cLU = function LU(A) {
    var I = A[0], J = A[1], V = A[2];
    var p = I.length, m=0, i,j,k,a,b,c;
    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
    m++;
    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
    var Ui, Uj,alpha;
    for(k=0;k<p;k++) {
        i = I[k];
        j = J[k];
        if(j<left[i]) left[i] = j;
        if(j>right[i]) right[i] = j;
    }
    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
    var countL = 0, countU = 0;
    for(i=0;i<m;i++) {
        U[i] = numeric.rep([right[i]-left[i]+1],0);
        L[i] = numeric.rep([i-left[i]],0);
        countL += i-left[i]+1;
        countU += right[i]-i+1;
    }
    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
    for(i=0;i<m-1;i++) {
        a = i-left[i];
        Ui = U[i];
        for(j=i+1;left[j]<=i && j<m;j++) {
            b = i-left[j];
            c = right[i]-i;
            Uj = U[j];
            alpha = Uj[b]/Ui[a];
            if(alpha) {
                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
                L[j][i-left[j]] = alpha;
            }
        }
    }
    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
    var p,q,foo;
    p=0; q=0;
    for(i=0;i<m;i++) {
        a = left[i];
        b = right[i];
        foo = U[i];
        for(j=i;j<=b;j++) {
            if(foo[j-a]) {
                Ui[p] = i;
                Uj[p] = j;
                Uv[p] = foo[j-a];
                p++;
            }
        }
        foo = L[i];
        for(j=a;j<i;j++) {
            if(foo[j-a]) {
                Li[q] = i;
                Lj[q] = j;
                Lv[q] = foo[j-a];
                q++;
            }
        }
        Li[q] = i;
        Lj[q] = i;
        Lv[q] = 1;
        q++;
    }
    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
};

numeric.cLUsolve = function LUsolve(lu,b) {
    var L = lu.L, U = lu.U, ret = numeric.clone(b);
    var Li = L[0], Lj = L[1], Lv = L[2];
    var Ui = U[0], Uj = U[1], Uv = U[2];
    var p = Ui.length, q = Li.length;
    var m = ret.length,i,j,k;
    k = 0;
    for(i=0;i<m;i++) {
        while(Lj[k] < i) {
            ret[i] -= Lv[k]*ret[Lj[k]];
            k++;
        }
        k++;
    }
    k = p-1;
    for(i=m-1;i>=0;i--) {
        while(Uj[k] > i) {
            ret[i] -= Uv[k]*ret[Uj[k]];
            k--;
        }
        ret[i] /= Uv[k];
        k--;
    }
    return ret;
};

numeric.cgrid = function grid(n,shape) {
    if(typeof n === "number") n = [n,n];
    var ret = numeric.rep(n,-1);
    var i,j,count;
    if(typeof shape !== "function") {
        switch(shape) {
        case 'L':
            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
            break;
        default:
            shape = function(i,j) { return true; };
            break;
        }
    }
    count=0;
    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
        if(shape(i,j)) {
            ret[i][j] = count;
            count++;
        }
    return ret;
}

numeric.cdelsq = function delsq(g) {
    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
    var Li = [], Lj = [], Lv = [];
    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
        if(g[i][j]<0) continue;
        for(k=0;k<4;k++) {
            p = i+dir[k][0];
            q = j+dir[k][1];
            if(g[p][q]<0) continue;
            Li.push(g[i][j]);
            Lj.push(g[p][q]);
            Lv.push(-1);
        }
        Li.push(g[i][j]);
        Lj.push(g[i][j]);
        Lv.push(4);
    }
    return [Li,Lj,Lv];
}

numeric.cdotMV = function dotMV(A,x) {
    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
    N=0;
    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
    N++;
    ret = numeric.rep([N],0);
    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
    return ret;
}

// 7. Splines

numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
numeric.Spline.prototype._at = function _at(x1,p) {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var x1,a,b,t;
    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
    t = (x1-x[p])/(x[p+1]-x[p]);
    var s = t*(1-t);
    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
}
numeric.Spline.prototype.at = function at(x0) {
    if(typeof x0 === "number") {
        var x = this.x;
        var n = x.length;
        var p,q,mid,floor = Math.floor,a,b,t;
        p = 0;
        q = n-1;
        while(q-p>1) {
            mid = floor((p+q)/2);
            if(x[mid] <= x0) p = mid;
            else q = mid;
        }
        return this._at(x0,p);
    }
    var n = x0.length, i, ret = Array(n);
    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
    return ret;
}
numeric.Spline.prototype.diff = function diff() {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var n = yl.length;
    var i,dx,dy;
    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
    for(i=n-1;i!==-1;--i) {
        dx = x[i+1]-x[i];
        dy = sub(yr[i+1],yl[i]);
        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
    }
    return new numeric.Spline(x,zl,zr,pl,pr);
}
numeric.Spline.prototype.roots = function roots() {
    function sqr(x) { return x*x; }
    function heval(y0,y1,k0,k1,x) {
        var A = k0*2-(y1-y0);
        var B = -k1*2+(y1-y0);
        var t = (x+1)*0.5;
        var s = t*(1-t);
        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
    }
    var ret = [];
    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
    if(typeof yl[0] === "number") {
        yl = [yl];
        yr = [yr];
        kl = [kl];
        kr = [kr];
    }
    var m = yl.length,n=x.length-1,i,j,k,y,s,t;
    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
    var sqrt = Math.sqrt;
    for(i=0;i!==m;++i) {
        ai = yl[i];
        bi = yr[i];
        ci = kl[i];
        di = kr[i];
        ri = [];
        for(j=0;j!==n;j++) {
            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
            dx = (x[j+1]-x[j]);
            cx = x[j];
            y0 = ai[j];
            y1 = bi[j+1];
            k0 = ci[j]/dx;
            k1 = di[j+1]/dx;
            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
            A = k1+3*y0+2*k0-3*y1;
            B = 3*(k1+k0+2*(y0-y1));
            if(D<=0) {
                z0 = A/B;
                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
                else stops = [x[j],x[j+1]];
            } else {
                z0 = (A-sqrt(D))/B;
                z1 = (A+sqrt(D))/B;
                stops = [x[j]];
                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
                stops.push(x[j+1]);
            }
            t0 = stops[0];
            z0 = this._at(t0,j);
            for(k=0;k<stops.length-1;k++) {
                t1 = stops[k+1];
                z1 = this._at(t1,j);
                if(z0 === 0) {
                    ri.push(t0); 
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                if(z1 === 0 || z0*z1>0) {
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                var side = 0;
                while(1) {
                    tm = (z0*t1-z1*t0)/(z0-z1);
                    if(tm <= t0 || tm >= t1) { break; }
                    zm = this._at(tm,j);
                    if(zm*z1>0) {
                        t1 = tm;
                        z1 = zm;
                        if(side === -1) z0*=0.5;
                        side = -1;
                    } else if(zm*z0>0) {
                        t0 = tm;
                        z0 = zm;
                        if(side === 1) z1*=0.5;
                        side = 1;
                    } else break;
                }
                ri.push(tm);
                t0 = stops[k+1];
                z0 = this._at(t0, j);
            }
            if(z1 === 0) ri.push(t1);
        }
        ret[i] = ri;
    }
    if(typeof this.yl[0] === "number") return ret[0];
    return ret;
}
numeric.spline = function spline(x,y,k1,kn) {
    var n = x.length, b = [], dx = [], dy = [];
    var i;
    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
    if(typeof k1 === "string" || typeof kn === "string") { 
        k1 = kn = "periodic";
    }
    // Build sparse tridiagonal system
    var T = [[],[],[]];
    switch(typeof k1) {
    case "undefined":
        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
        T[0].push(0,0);
        T[1].push(0,1);
        T[2].push(2/dx[0],1/dx[0]);
        break;
    case "string":
        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
        T[0].push(0,0,0);
        T[1].push(n-2,0,1);
        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
        break;
    default:
        b[0] = k1;
        T[0].push(0);
        T[1].push(0);
        T[2].push(1);
        break;
    }
    for(i=1;i<n-1;i++) {
        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
        T[0].push(i,i,i);
        T[1].push(i-1,i,i+1);
        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
    }
    switch(typeof kn) {
    case "undefined":
        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
        T[0].push(n-1,n-1);
        T[1].push(n-2,n-1);
        T[2].push(1/dx[n-2],2/dx[n-2]);
        break;
    case "string":
        T[1][T[1].length-1] = 0;
        break;
    default:
        b[n-1] = kn;
        T[0].push(n-1);
        T[1].push(n-1);
        T[2].push(1);
        break;
    }
    if(typeof b[0] !== "number") b = numeric.transpose(b);
    else b = [b];
    var k = Array(b.length);
    if(typeof k1 === "string") {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
            k[i][n-1] = k[i][0];
        }
    } else {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
        }
    }
    if(typeof y[0] === "number") k = k[0];
    else k = numeric.transpose(k);
    return new numeric.Spline(x,y,y,k,k);
}

// 8. FFT
numeric.fftpow2 = function fftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    fftpow2(xe,ye);
    fftpow2(xo,yo);
    j = n/2;
    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric._ifftpow2 = function _ifftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    _ifftpow2(xe,ye);
    _ifftpow2(xo,yo);
    j = n/2;
    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric.ifftpow2 = function ifftpow2(x,y) {
    numeric._ifftpow2(x,y);
    numeric.diveq(x,x.length);
    numeric.diveq(y,y.length);
}
numeric.convpow2 = function convpow2(ax,ay,bx,by) {
    numeric.fftpow2(ax,ay);
    numeric.fftpow2(bx,by);
    var i,n = ax.length,axi,bxi,ayi,byi;
    for(i=n-1;i!==-1;--i) {
        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
        ax[i] = axi*bxi-ayi*byi;
        ay[i] = axi*byi+ayi*bxi;
    }
    numeric.ifftpow2(ax,ay);
}
numeric.T.prototype.fft = function fft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X;
}
numeric.T.prototype.ifft = function ifft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X.div(n);
}

//9. Unconstrained optimization
numeric.gradient = function gradient(f,x) {
    var n = x.length;
    var f0 = f(x);
    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
    var max = Math.max;
    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
    var t0,t1,t2,it=0,d1,d2,N;
    for(i=0;i<n;i++) {
        var h = max(1e-6*f0,1e-8);
        while(1) {
            ++it;
            if(it>20) { throw new Error("Numerical gradient fails"); }
            x0[i] = x[i]+h;
            f1 = f(x0);
            x0[i] = x[i]-h;
            f2 = f(x0);
            x0[i] = x[i];
            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
            J[i] = (f1-f2)/(2*h);
            t0 = x[i]-h;
            t1 = x[i];
            t2 = x[i]+h;
            d1 = (f1-f0)/h;
            d2 = (f0-f2)/h;
            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
            if(errest>eps) { h/=16; }
            else break;
            }
    }
    return J;
}

numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
    var grad = numeric.gradient;
    if(typeof options === "undefined") { options = {}; }
    if(typeof tol === "undefined") { tol = 1e-8; }
    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
    if(typeof maxit === "undefined") maxit = 1000;
    x0 = numeric.clone(x0);
    var n = x0.length;
    var f0 = f(x0),f1,df0;
    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
    var max = Math.max, norm2 = numeric.norm2;
    tol = max(tol,numeric.epsilon);
    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
    var msg = "";
    g0 = gradient(x0);
    while(it<maxit) {
        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
        step = neg(dot(H1,g0));
        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
        nstep = norm2(step);
        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
        t = 1;
        df0 = dot(g0,step);
        // line search
        x1 = x0;
        while(it < maxit) {
            if(t*nstep < tol) { break; }
            s = mul(step,t);
            x1 = add(x0,s);
            f1 = f(x1);
            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
                t *= 0.5;
                ++it;
                continue;
            }
            break;
        }
        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
        if(it === maxit) { msg = "maxit reached during line search"; break; }
        g1 = gradient(x1);
        y = sub(g1,g0);
        ys = dot(y,s);
        Hy = dot(H1,y);
        H1 = sub(add(H1,
                mul(
                        (ys+dot(y,Hy))/(ys*ys),
                        ten(s,s)    )),
                div(add(ten(Hy,s),ten(s,Hy)),ys));
        x0 = x1;
        f0 = f1;
        g0 = g1;
        ++it;
    }
    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
}

// 10. Ode solver (Dormand-Prince)
numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
    this.x = x;
    this.y = y;
    this.f = f;
    this.ymid = ymid;
    this.iterations = iterations;
    this.events = events;
    this.message = msg;
}
numeric.Dopri.prototype._at = function _at(xi,j) {
    function sqr(x) { return x*x; }
    var sol = this;
    var xs = sol.x;
    var ys = sol.y;
    var k1 = sol.f;
    var ymid = sol.ymid;
    var n = xs.length;
    var x0,x1,xh,y0,y1,yh,xi;
    var floor = Math.floor,h;
    var c = 0.5;
    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
    x0 = xs[j];
    x1 = xs[j+1];
    y0 = ys[j];
    y1 = ys[j+1];
    h  = x1-x0;
    xh = x0+c*h;
    yh = ymid[j];
    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
    return add(add(add(add(mul(y0,w[0]),
                           mul(yh,w[1])),
                           mul(y1,w[2])),
                           mul( p,w[3])),
                           mul( q,w[4]));
}
numeric.Dopri.prototype.at = function at(x) {
    var i,j,k,floor = Math.floor;
    if(typeof x !== "number") {
        var n = x.length, ret = Array(n);
        for(i=n-1;i!==-1;--i) {
            ret[i] = this.at(x[i]);
        }
        return ret;
    }
    var x0 = this.x;
    i = 0; j = x0.length-1;
    while(j-i>1) {
        k = floor(0.5*(i+j));
        if(x0[k] <= x) i = k;
        else j = k;
    }
    return this._at(x,i);
}

numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
    if(typeof tol === "undefined") { tol = 1e-6; }
    if(typeof maxit === "undefined") { maxit = 1000; }
    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
    var A2 = 1/5;
    var A3 = [3/40,9/40];
    var A4 = [44/45,-56/15,32/9];
    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
    var bm = [0.5*6025192743/30085553152,
              0,
              0.5*51252292925/65400821598,
              0.5*-2691868925/45128329728,
              0.5*187940372067/1594534317056,
              0.5*-1776094331/19743644256,
              0.5*11237099/235043384];
    var c = [1/5,3/10,4/5,8/9,1,1];
    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
    var i = 0,er,j;
    var h = (x1-x0)/10;
    var it = 0;
    var add = numeric.add, mul = numeric.mul, y1,erinf;
    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
    var e0, e1, ev;
    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
    if(typeof event === "function") e0 = event(x0,y0);
    while(x0<x1 && it<maxit) {
        ++it;
        if(x0+h>x1) h = x1-x0;
        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
        k7 = f(x0+h,y1);
        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
        if(typeof er === "number") erinf = abs(er);
        else erinf = norminf(er);
        if(erinf > tol) { // reject
            h = 0.2*h*pow(tol/erinf,0.25);
            if(x0+h === x0) {
                ret.msg = "Step size became too small";
                break;
            }
            continue;
        }
        ymid[i] = add(add(add(add(add(add(y0,
                mul(k1[i],h*bm[0])),
                mul(k3   ,h*bm[2])),
                mul(k4   ,h*bm[3])),
                mul(k5   ,h*bm[4])),
                mul(k6   ,h*bm[5])),
                mul(k7   ,h*bm[6]));
        ++i;
        xs[i] = x0+h;
        ys[i] = y1;
        k1[i] = k7;
        if(typeof event === "function") {
            var yi,xl = x0,xr = x0+0.5*h,xi;
            e1 = event(xr,ymid[i-1]);
            ev = and(lt(e0,0),lt(0,e1));
            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
            if(any(ev)) {
                var xc, yc, en,ei;
                var side=0, sl = 1.0, sr = 1.0;
                while(1) {
                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
                    else {
                        xi = xr;
                        for(j=e0.length-1;j!==-1;--j) {
                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
                        }
                    }
                    if(xi <= xl || xi >= xr) break;
                    yi = ret._at(xi, i-1);
                    ei = event(xi,yi);
                    en = and(lt(e0,0),lt(0,ei));
                    if(any(en)) {
                        xr = xi;
                        e1 = ei;
                        ev = en;
                        sr = 1.0;
                        if(side === -1) sl *= 0.5;
                        else sl = 1.0;
                        side = -1;
                    } else {
                        xl = xi;
                        e0 = ei;
                        sl = 1.0;
                        if(side === 1) sr *= 0.5;
                        else sr = 1.0;
                        side = 1;
                    }
                }
                y1 = ret._at(0.5*(x0+xi),i-1);
                ret.f[i] = f(xi,yi);
                ret.x[i] = xi;
                ret.y[i] = yi;
                ret.ymid[i-1] = y1;
                ret.events = ev;
                ret.iterations = it;
                return ret;
            }
        }
        x0 += h;
        y0 = y1;
        e0 = e1;
        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
    }
    ret.iterations = it;
    return ret;
}

// 11. Ax = b
numeric.LU = function(A, fast) {
  fast = fast || false;

  var abs = Math.abs;
  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
  var max;
  var n = A.length, n1 = n-1;
  var P = new Array(n);
  if(!fast) A = numeric.clone(A);

  for (k = 0; k < n; ++k) {
    Pk = k;
    Ak = A[k];
    max = abs(Ak[k]);
    for (j = k + 1; j < n; ++j) {
      absAjk = abs(A[j][k]);
      if (max < absAjk) {
        max = absAjk;
        Pk = j;
      }
    }
    P[k] = Pk;

    if (Pk != k) {
      A[k] = A[Pk];
      A[Pk] = Ak;
      Ak = A[k];
    }

    Akk = Ak[k];

    for (i = k + 1; i < n; ++i) {
      A[i][k] /= Akk;
    }

    for (i = k + 1; i < n; ++i) {
      Ai = A[i];
      for (j = k + 1; j < n1; ++j) {
        Ai[j] -= Ai[k] * Ak[j];
        ++j;
        Ai[j] -= Ai[k] * Ak[j];
      }
      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
    }
  }

  return {
    LU: A,
    P:  P
  };
}

numeric.LUsolve = function LUsolve(LUP, b) {
  var i, j;
  var LU = LUP.LU;
  var n   = LU.length;
  var x = numeric.clone(b);
  var P   = LUP.P;
  var Pi, LUi, LUii, tmp;

  for (i=n-1;i!==-1;--i) x[i] = b[i];
  for (i = 0; i < n; ++i) {
    Pi = P[i];
    if (P[i] !== i) {
      tmp = x[i];
      x[i] = x[Pi];
      x[Pi] = tmp;
    }

    LUi = LU[i];
    for (j = 0; j < i; ++j) {
      x[i] -= x[j] * LUi[j];
    }
  }

  for (i = n - 1; i >= 0; --i) {
    LUi = LU[i];
    for (j = i + 1; j < n; ++j) {
      x[i] -= x[j] * LUi[j];
    }

    x[i] /= LUi[i];
  }

  return x;
}

numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }

// 12. Linear programming
numeric.echelonize = function echelonize(A) {
    var s = numeric.dim(A), m = s[0], n = s[1];
    var I = numeric.identity(m);
    var P = Array(m);
    var i,j,k,l,Ai,Ii,Z,a;
    var abs = Math.abs;
    var diveq = numeric.diveq;
    A = numeric.clone(A);
    for(i=0;i<m;++i) {
        k = 0;
        Ai = A[i];
        Ii = I[i];
        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
        P[i] = k;
        diveq(Ii,Ai[k]);
        diveq(Ai,Ai[k]);
        for(j=0;j<m;++j) if(j!==i) {
            Z = A[j]; a = Z[k];
            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
            Z = I[j];
            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
        }
    }
    return {I:I, A:A, P:P};
}

numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var m = c.length, n = b.length,y;
    var unbounded = false, cb,i0=0;
    var alpha = 1.0;
    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
    var muleq = numeric.muleq;
    var norm = numeric.norminf, any = numeric.any,min = Math.min;
    var all = numeric.all, gt = numeric.gt;
    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
    var dotcc = dot(c,c);
    var g;
    for(count=i0;count<maxit;++count) {
        var i,j,d;
        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
        var A1 = transpose(A0);
        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
        alpha = 0.25*abs(dotcc/dot(c,p));
        var a1 = 100*sqrt(dotcc/dot(p,p));
        if(!isFinite(alpha) || alpha>a1) alpha = a1;
        g = add(c,mul(alpha,p));
        H = dot(A1,A0);
        for(i=m-1;i!==-1;--i) H[i][i] += 1;
        d = solve(H,div(g,alpha),true);
        var t0 = div(z,dot(A,d));
        var t = 1.0;
        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
        y = sub(x,mul(d,t));
        z = sub(b,dot(A,y));
        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
        x = y;
        if(alpha<tol) return { solution: y, message: "", iterations: count };
        if(flag) {
            var s = dot(c,g), Ag = dot(A,g);
            unbounded = true;
            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
        } else {
            if(x[m-1]>=0) unbounded = false;
            else unbounded = true;
        }
        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
    }
    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
}

numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
    var m = c.length, n = b.length,y;
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var c0 = numeric.rep([m],0).concat([1]);
    var J = numeric.rep([n,1],-1);
    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
    var b0 = b;
    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
    var x = numeric.clone(x0.solution);
    x.length = m;
    var foo = numeric.inf(sub(b,dot(A,x)));
    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
    ret.iterations += x0.iterations;
    return ret;
};

numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
    if(typeof maxit === "undefined") maxit = 1000;
    if(typeof tol === "undefined") tol = numeric.epsilon;
    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
    var m = Aeq.length, n = Aeq[0].length, o = A.length;
    var B = numeric.echelonize(Aeq);
    var flags = numeric.rep([n],0);
    var P = B.P;
    var Q = [];
    var i;
    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
    var g = numeric.getRange;
    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
    var A3 = dot(A1,B.I);
    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
    var c1 = Array(P.length), c2 = Array(Q.length);
    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
    var x2 = S.solution;
    if(x2!==x2) return S;
    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
    var x = Array(c.length);
    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
    return { solution: x, message:S.message, iterations: S.iterations };
}

numeric.MPStoLP = function MPStoLP(MPS) {
    if(MPS instanceof String) { MPS.split('\n'); }
    var state = 0;
    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
    var n = MPS.length;
    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
    var name;
    var c = [], A = [], b = [];
    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
    for(i=0;i<n;++i) {
        z = MPS[i];
        var w0 = z.match(/\S*/g);
        var w = [];
        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
        if(w.length === 0) continue;
        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
        if(j<states.length) {
            state = j;
            if(j===1) { name = w[1]; }
            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
            continue;
        }
        switch(state) {
        case 0: case 1: err('Unexpected line');
        case 2: 
            switch(w[0]) {
            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
            default: err('Parse error '+numeric.prettyPrint(w));
            }
            break;
        case 3:
            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
            var p = vars[w[0]];
            for(j=1;j<w.length;j+=2) {
                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
                var q = rows[w[j]];
                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
            }
            break;
        case 4:
            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
            break;
        case 5: /*FIXME*/ break;
        case 6: err('Internal error');
        }
    }
    err('Reached end of file without ENDATA');
}
// seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */

// Patched by Seb so that seedrandom.js does not pollute the Math object.
// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
// slower.
numeric.seedrandom = { pow:Math.pow, random:Math.random };

(function (pool, math, width, chunks, significance, overflow, startdenom) {


//
// seedrandom()
// This is the seedrandom function described above.
//
math['seedrandom'] = function seedrandom(seed, use_entropy) {
  var key = [];
  var arc4;

  // Flatten the seed string or build one from local entropy if needed.
  seed = mixkey(flatten(
    use_entropy ? [seed, pool] :
    arguments.length ? seed :
    [new Date().getTime(), pool, window], 3), key);

  // Use the seed to initialize an ARC4 generator.
  arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(arc4.S, pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  math['random'] = function random() {  // Closure to return a random double:
    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
    var d = startdenom;                 //   and denominator d = 2 ^ 48.
    var x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  // Return the seed that was used
  return seed;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, u, me = this, keylen = key.length;
  var i = 0, j = me.i = me.j = me.m = 0;
  me.S = [];
  me.c = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) { me.S[i] = i++; }
  for (i = 0; i < width; i++) {
    t = me.S[i];
    j = lowbits(j + t + key[i % keylen]);
    u = me.S[j];
    me.S[i] = u;
    me.S[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  me.g = function getnext(count) {
    var s = me.S;
    var i = lowbits(me.i + 1); var t = s[i];
    var j = lowbits(me.j + t); var u = s[j];
    s[i] = u;
    s[j] = t;
    var r = s[lowbits(t + u)];
    while (--count) {
      i = lowbits(i + 1); t = s[i];
      j = lowbits(j + t); u = s[j];
      s[i] = u;
      s[j] = t;
      r = r * width + s[lowbits(t + u)];
    }
    me.i = i;
    me.j = j;
    return r;
  };
  // For robust unpredictability discard an initial batch of values.
  // See http://www.rsa.com/rsalabs/node.asp?id=2009
  me.g(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
/** @param {Object=} result 
  * @param {string=} prop
  * @param {string=} typ */
function flatten(obj, depth, result, prop, typ) {
  result = [];
  typ = typeof(obj);
  if (depth && typ == 'object') {
    for (prop in obj) {
      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
  }
  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
/** @param {number=} smear 
  * @param {number=} j */
function mixkey(seed, key, smear, j) {
  seed += '';                         // Ensure the seed is a string
  smear = 0;
  for (j = 0; j < seed.length; j++) {
    key[lowbits(j)] =
      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
  }
  seed = '';
  for (j in key) { seed += String.fromCharCode(key[j]); }
  return seed;
}

//
// lowbits()
// A quick "n mod width" for width a power of 2.
//
function lowbits(n) { return n & (width - 1); }

//
// The following constants are related to IEEE 754 limits.
//
startdenom = math.pow(width, chunks);
significance = math.pow(2, significance);
overflow = significance * 2;

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

// End anonymous scope, and pass initial values.
}(
  [],   // pool: entropy pool starts empty
  numeric.seedrandom, // math: package containing random, pow, and seedrandom
  256,  // width: each RC4 output is 0 <= x < 256
  6,    // chunks: at least six RC4 outputs for each double
  52    // significance: there are 52 significant digits in a double
  ));
/* This file is a slightly modified version of quadprog.js from Alberto Santini.
 * It has been slightly modified by Sébastien Loisel to make sure that it handles
 * 0-based Arrays instead of 1-based Arrays.
 * License is in resources/LICENSE.quadprog */
(function(exports) {

function base0to1(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
    return ret;
}
function base1to0(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
    return ret;
}

function dpori(a, lda, n) {
    var i, j, k, kp1, t;

    for (k = 1; k <= n; k = k + 1) {
        a[k][k] = 1 / a[k][k];
        t = -a[k][k];
        //~ dscal(k - 1, t, a[1][k], 1);
        for (i = 1; i < k; i = i + 1) {
            a[i][k] = t * a[i][k];
        }

        kp1 = k + 1;
        if (n < kp1) {
            break;
        }
        for (j = kp1; j <= n; j = j + 1) {
            t = a[k][j];
            a[k][j] = 0;
            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
            for (i = 1; i <= k; i = i + 1) {
                a[i][j] = a[i][j] + (t * a[i][k]);
            }
        }
    }

}

function dposl(a, lda, n, b) {
    var i, k, kb, t;

    for (k = 1; k <= n; k = k + 1) {
        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
        t = 0;
        for (i = 1; i < k; i = i + 1) {
            t = t + (a[i][k] * b[i]);
        }

        b[k] = (b[k] - t) / a[k][k];
    }

    for (kb = 1; kb <= n; kb = kb + 1) {
        k = n + 1 - kb;
        b[k] = b[k] / a[k][k];
        t = -b[k];
        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
        for (i = 1; i < k; i = i + 1) {
            b[i] = b[i] + (t * a[i][k]);
        }
    }
}

function dpofa(a, lda, n, info) {
    var i, j, jm1, k, t, s;

    for (j = 1; j <= n; j = j + 1) {
        info[1] = j;
        s = 0;
        jm1 = j - 1;
        if (jm1 < 1) {
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        } else {
            for (k = 1; k <= jm1; k = k + 1) {
                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
                t = a[k][j];
                for (i = 1; i < k; i = i + 1) {
                    t = t - (a[i][j] * a[i][k]);
                }
                t = t / a[k][k];
                a[k][j] = t;
                s = s + t * t;
            }
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        }
        info[1] = 0;
    }
}

function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
        temp, sum, t1, tt, gc, gs, nu,
        t1inf, t2min,
        vsmall, tmpa, tmpb,
        go;

    r = Math.min(n, q);
    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

    vsmall = 1.0e-60;
    do {
        vsmall = vsmall + vsmall;
        tmpa = 1 + 0.1 * vsmall;
        tmpb = 1 + 0.2 * vsmall;
    } while (tmpa <= 1 || tmpb <= 1);

    for (i = 1; i <= n; i = i + 1) {
        work[i] = dvec[i];
    }
    for (i = n + 1; i <= l; i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }

    info = [];

    if (ierr[1] === 0) {
        dpofa(dmat, fddmat, n, info);
        if (info[1] !== 0) {
            ierr[1] = 2;
            return;
        }
        dposl(dmat, fddmat, n, dvec);
        dpori(dmat, fddmat, n);
    } else {
        for (j = 1; j <= n; j = j + 1) {
            sol[j] = 0;
            for (i = 1; i <= j; i = i + 1) {
                sol[j] = sol[j] + dmat[i][j] * dvec[i];
            }
        }
        for (j = 1; j <= n; j = j + 1) {
            dvec[j] = 0;
            for (i = j; i <= n; i = i + 1) {
                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
            }
        }
    }

    crval[1] = 0;
    for (j = 1; j <= n; j = j + 1) {
        sol[j] = dvec[j];
        crval[1] = crval[1] + work[j] * sol[j];
        work[j] = 0;
        for (i = j + 1; i <= n; i = i + 1) {
            dmat[i][j] = 0;
        }
    }
    crval[1] = -crval[1] / 2;
    ierr[1] = 0;

    iwzv = n;
    iwrv = iwzv + n;
    iwuv = iwrv + r;
    iwrm = iwuv + r + 1;
    iwsv = iwrm + (r * (r + 1)) / 2;
    iwnbv = iwsv + q;

    for (i = 1; i <= q; i = i + 1) {
        sum = 0;
        for (j = 1; j <= n; j = j + 1) {
            sum = sum + amat[j][i] * amat[j][i];
        }
        work[iwnbv + i] = Math.sqrt(sum);
    }
    nact = 0;
    iter[1] = 0;
    iter[2] = 0;

    function fn_goto_50() {
        iter[1] = iter[1] + 1;

        l = iwsv;
        for (i = 1; i <= q; i = i + 1) {
            l = l + 1;
            sum = -bvec[i];
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + amat[j][i] * sol[j];
            }
            if (Math.abs(sum) < vsmall) {
                sum = 0;
            }
            if (i > meq) {
                work[l] = sum;
            } else {
                work[l] = -Math.abs(sum);
                if (sum > 0) {
                    for (j = 1; j <= n; j = j + 1) {
                        amat[j][i] = -amat[j][i];
                    }
                    bvec[i] = -bvec[i];
                }
            }
        }

        for (i = 1; i <= nact; i = i + 1) {
            work[iwsv + iact[i]] = 0;
        }

        nvl = 0;
        temp = 0;
        for (i = 1; i <= q; i = i + 1) {
            if (work[iwsv + i] < temp * work[iwnbv + i]) {
                nvl = i;
                temp = work[iwsv + i] / work[iwnbv + i];
            }
        }
        if (nvl === 0) {
            return 999;
        }

        return 0;
    }

    function fn_goto_55() {
        for (i = 1; i <= n; i = i + 1) {
            sum = 0;
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + dmat[j][i] * amat[j][nvl];
            }
            work[i] = sum;
        }

        l1 = iwzv;
        for (i = 1; i <= n; i = i + 1) {
            work[l1 + i] = 0;
        }
        for (j = nact + 1; j <= n; j = j + 1) {
            for (i = 1; i <= n; i = i + 1) {
                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
            }
        }

        t1inf = true;
        for (i = nact; i >= 1; i = i - 1) {
            sum = work[i];
            l = iwrm + (i * (i + 3)) / 2;
            l1 = l - i;
            for (j = i + 1; j <= nact; j = j + 1) {
                sum = sum - work[l] * work[iwrv + j];
                l = l + j;
            }
            sum = sum / work[l1];
            work[iwrv + i] = sum;
            if (iact[i] < meq) {
                // continue;
                break;
            }
            if (sum < 0) {
                // continue;
                break;
            }
            t1inf = false;
            it1 = i;
        }

        if (!t1inf) {
            t1 = work[iwuv + it1] / work[iwrv + it1];
            for (i = 1; i <= nact; i = i + 1) {
                if (iact[i] < meq) {
                    // continue;
                    break;
                }
                if (work[iwrv + i] < 0) {
                    // continue;
                    break;
                }
                temp = work[iwuv + i] / work[iwrv + i];
                if (temp < t1) {
                    t1 = temp;
                    it1 = i;
                }
            }
        }

        sum = 0;
        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
            sum = sum + work[i] * work[i];
        }
        if (Math.abs(sum) <= vsmall) {
            if (t1inf) {
                ierr[1] = 1;
                // GOTO 999
                return 999;
            } else {
                for (i = 1; i <= nact; i = i + 1) {
                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
                }
                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
                // GOTO 700
                return 700;
            }
        } else {
            sum = 0;
            for (i = 1; i <= n; i = i + 1) {
                sum = sum + work[iwzv + i] * amat[i][nvl];
            }
            tt = -work[iwsv + nvl] / sum;
            t2min = true;
            if (!t1inf) {
                if (t1 < tt) {
                    tt = t1;
                    t2min = false;
                }
            }

            for (i = 1; i <= n; i = i + 1) {
                sol[i] = sol[i] + tt * work[iwzv + i];
                if (Math.abs(sol[i]) < vsmall) {
                    sol[i] = 0;
                }
            }

            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
            for (i = 1; i <= nact; i = i + 1) {
                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
            }
            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

            if (t2min) {
                nact = nact + 1;
                iact[nact] = nvl;

                l = iwrm + ((nact - 1) * nact) / 2 + 1;
                for (i = 1; i <= nact - 1; i = i + 1) {
                    work[l] = work[i];
                    l = l + 1;
                }

                if (nact === n) {
                    work[l] = work[n];
                } else {
                    for (i = n; i >= nact + 1; i = i - 1) {
                        if (work[i] === 0) {
                            // continue;
                            break;
                        }
                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
                        if (work[i - 1] >= 0) {
                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        } else {
                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        }
                        gc = work[i - 1] / temp;
                        gs = work[i] / temp;

                        if (gc === 1) {
                            // continue;
                            break;
                        }
                        if (gc === 0) {
                            work[i - 1] = gs * temp;
                            for (j = 1; j <= n; j = j + 1) {
                                temp = dmat[j][i - 1];
                                dmat[j][i - 1] = dmat[j][i];
                                dmat[j][i] = temp;
                            }
                        } else {
                            work[i - 1] = temp;
                            nu = gs / (1 + gc);
                            for (j = 1; j <= n; j = j + 1) {
                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                                dmat[j][i - 1] = temp;

                            }
                        }
                    }
                    work[l] = work[nact];
                }
            } else {
                sum = -bvec[nvl];
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + sol[j] * amat[j][nvl];
                }
                if (nvl > meq) {
                    work[iwsv + nvl] = sum;
                } else {
                    work[iwsv + nvl] = -Math.abs(sum);
                    if (sum > 0) {
                        for (j = 1; j <= n; j = j + 1) {
                            amat[j][nvl] = -amat[j][nvl];
                        }
                        bvec[nvl] = -bvec[nvl];
                    }
                }
                // GOTO 700
                return 700;
            }
        }

        return 0;
    }

    function fn_goto_797() {
        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
        l1 = l + it1;
        if (work[l1] === 0) {
            // GOTO 798
            return 798;
        }
        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        if (work[l1 - 1] >= 0) {
            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        } else {
            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        }
        gc = work[l1 - 1] / temp;
        gs = work[l1] / temp;

        if (gc === 1) {
            // GOTO 798
            return 798;
        }
        if (gc === 0) {
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = work[l1 - 1];
                work[l1 - 1] = work[l1];
                work[l1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = dmat[i][it1];
                dmat[i][it1] = dmat[i][it1 + 1];
                dmat[i][it1 + 1] = temp;
            }
        } else {
            nu = gs / (1 + gc);
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = gc * work[l1 - 1] + gs * work[l1];
                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
                work[l1 - 1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
                dmat[i][it1] = temp;
            }
        }

        return 0;
    }

    function fn_goto_798() {
        l1 = l - it1;
        for (i = 1; i <= it1; i = i + 1) {
            work[l1] = work[l];
            l = l + 1;
            l1 = l1 + 1;
        }

        work[iwuv + it1] = work[iwuv + it1 + 1];
        iact[it1] = iact[it1 + 1];
        it1 = it1 + 1;
        if (it1 < nact) {
            // GOTO 797
            return 797;
        }

        return 0;
    }

    function fn_goto_799() {
        work[iwuv + nact] = work[iwuv + nact + 1];
        work[iwuv + nact + 1] = 0;
        iact[nact] = 0;
        nact = nact - 1;
        iter[2] = iter[2] + 1;

        return 0;
    }

    go = 0;
    while (true) {
        go = fn_goto_50();
        if (go === 999) {
            return;
        }
        while (true) {
            go = fn_goto_55();
            if (go === 0) {
                break;
            }
            if (go === 999) {
                return;
            }
            if (go === 700) {
                if (it1 === nact) {
                    fn_goto_799();
                } else {
                    while (true) {
                        fn_goto_797();
                        go = fn_goto_798();
                        if (go !== 797) {
                            break;
                        }
                    }
                    fn_goto_799();
                }
            }
        }
    }

}

function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
    Dmat = base0to1(Dmat);
    dvec = base0to1(dvec);
    Amat = base0to1(Amat);
    var i, n, q,
        nact, r,
        crval = [], iact = [], sol = [], work = [], iter = [],
        message;

    meq = meq || 0;
    factorized = factorized ? base0to1(factorized) : [undefined, 0];
    bvec = bvec ? base0to1(bvec) : [];

    // In Fortran the array index starts from 1
    n = Dmat.length - 1;
    q = Amat[1].length - 1;

    if (!bvec) {
        for (i = 1; i <= q; i = i + 1) {
            bvec[i] = 0;
        }
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }
    nact = 0;
    r = Math.min(n, q);
    for (i = 1; i <= n; i = i + 1) {
        sol[i] = 0;
    }
    crval[1] = 0;
    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= 2; i = i + 1) {
        iter[i] = 0;
    }

    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
        bvec, n, q, meq, iact, nact, iter, work, factorized);

    message = "";
    if (factorized[1] === 1) {
        message = "constraints are inconsistent, no solution!";
    }
    if (factorized[1] === 2) {
        message = "matrix D in quadratic function is not positive definite!";
    }

    return {
        solution: base1to0(sol),
        value: base1to0(crval),
        unconstrained_solution: base1to0(dvec),
        iterations: base1to0(iter),
        iact: base1to0(iact),
        message: message
    };
}
exports.solveQP = solveQP;
}(numeric));
/*
Shanti Rao sent me this routine by private email. I had to modify it
slightly to work on Arrays instead of using a Matrix object.
It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
*/

numeric.svd= function svd(A) {
    var temp;
//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
	var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
	var tolerance= 1.e-64/prec;
	var itmax= 50;
	var c=0;
	var i=0;
	var j=0;
	var k=0;
	var l=0;
	
	var u= numeric.clone(A);
	var m= u.length;
	
	var n= u[0].length;
	
	if (m < n) throw "Need more rows than columns"
	
	var e = new Array(n);
	var q = new Array(n);
	for (i=0; i<n; i++) e[i] = q[i] = 0.0;
	var v = numeric.rep([n,n],0);
//	v.zero();
	
 	function pythag(a,b)
 	{
		a = Math.abs(a)
		b = Math.abs(b)
		if (a > b)
			return a*Math.sqrt(1.0+(b*b/a/a))
		else if (b == 0.0) 
			return a
		return b*Math.sqrt(1.0+(a*a/b/b))
	}

	//Householder's reduction to bidiagonal form

	var f= 0.0;
	var g= 0.0;
	var h= 0.0;
	var x= 0.0;
	var y= 0.0;
	var z= 0.0;
	var s= 0.0;
	
	for (i=0; i < n; i++)
	{	
		e[i]= g;
		s= 0.0;
		l= i+1;
		for (j=i; j < m; j++) 
			s += (u[j][i]*u[j][i]);
		if (s <= tolerance)
			g= 0.0;
		else
		{	
			f= u[i][i];
			g= Math.sqrt(s);
			if (f >= 0.0) g= -g;
			h= f*g-s
			u[i][i]=f-g;
			for (j=l; j < n; j++)
			{
				s= 0.0
				for (k=i; k < m; k++) 
					s += u[k][i]*u[k][j]
				f= s/h
				for (k=i; k < m; k++) 
					u[k][j]+=f*u[k][i]
			}
		}
		q[i]= g
		s= 0.0
		for (j=l; j < n; j++) 
			s= s + u[i][j]*u[i][j]
		if (s <= tolerance)
			g= 0.0
		else
		{	
			f= u[i][i+1]
			g= Math.sqrt(s)
			if (f >= 0.0) g= -g
			h= f*g - s
			u[i][i+1] = f-g;
			for (j=l; j < n; j++) e[j]= u[i][j]/h
			for (j=l; j < m; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += (u[j][k]*u[i][k])
				for (k=l; k < n; k++) 
					u[j][k]+=s*e[k]
			}	
		}
		y= Math.abs(q[i])+Math.abs(e[i])
		if (y>x) 
			x=y
	}
	
	// accumulation of right hand gtransformations
	for (i=n-1; i != -1; i+= -1)
	{	
		if (g != 0.0)
		{
		 	h= g*u[i][i+1]
			for (j=l; j < n; j++) 
				v[j][i]=u[i][j]/h
			for (j=l; j < n; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += u[i][k]*v[k][j]
				for (k=l; k < n; k++) 
					v[k][j]+=(s*v[k][i])
			}	
		}
		for (j=l; j < n; j++)
		{
			v[i][j] = 0;
			v[j][i] = 0;
		}
		v[i][i] = 1;
		g= e[i]
		l= i
	}
	
	// accumulation of left hand transformations
	for (i=n-1; i != -1; i+= -1)
	{	
		l= i+1
		g= q[i]
		for (j=l; j < n; j++) 
			u[i][j] = 0;
		if (g != 0.0)
		{
			h= u[i][i]*g
			for (j=l; j < n; j++)
			{
				s=0.0
				for (k=l; k < m; k++) s += u[k][i]*u[k][j];
				f= s/h
				for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
			}
			for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
		}
		else
			for (j=i; j < m; j++) u[j][i] = 0;
		u[i][i] += 1;
	}
	
	// diagonalization of the bidiagonal form
	prec= prec*x
	for (k=n-1; k != -1; k+= -1)
	{
		for (var iteration=0; iteration < itmax; iteration++)
		{	// test f splitting
			var test_convergence = false
			for (l=k; l != -1; l+= -1)
			{	
				if (Math.abs(e[l]) <= prec)
				{	test_convergence= true
					break 
				}
				if (Math.abs(q[l-1]) <= prec)
					break 
			}
			if (!test_convergence)
			{	// cancellation of e[l] if l>0
				c= 0.0
				s= 1.0
				var l1= l-1
				for (i =l; i<k+1; i++)
				{	
					f= s*e[i]
					e[i]= c*e[i]
					if (Math.abs(f) <= prec)
						break
					g= q[i]
					h= pythag(f,g)
					q[i]= h
					c= g/h
					s= -f/h
					for (j=0; j < m; j++)
					{	
						y= u[j][l1]
						z= u[j][i]
						u[j][l1] =  y*c+(z*s)
						u[j][i] = -y*s+(z*c)
					} 
				}	
			}
			// test f convergence
			z= q[k]
			if (l== k)
			{	//convergence
				if (z<0.0)
				{	//q[k] is made non-negative
					q[k]= -z
					for (j=0; j < n; j++)
						v[j][k] = -v[j][k]
				}
				break  //break out of iteration loop and move on to next k value
			}
			if (iteration >= itmax-1)
				throw 'Error: no convergence.'
			// shift from bottom 2x2 minor
			x= q[l]
			y= q[k-1]
			g= e[k-1]
			h= e[k]
			f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
			g= pythag(f,1.0)
			if (f < 0.0)
				f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
			else
				f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
			// next QR transformation
			c= 1.0
			s= 1.0
			for (i=l+1; i< k+1; i++)
			{	
				g= e[i]
				y= q[i]
				h= s*g
				g= c*g
				z= pythag(f,h)
				e[i-1]= z
				c= f/z
				s= h/z
				f= x*c+g*s
				g= -x*s+g*c
				h= y*s
				y= y*c
				for (j=0; j < n; j++)
				{	
					x= v[j][i-1]
					z= v[j][i]
					v[j][i-1] = x*c+z*s
					v[j][i] = -x*s+z*c
				}
				z= pythag(f,h)
				q[i-1]= z
				c= f/z
				s= h/z
				f= c*g+s*y
				x= -s*g+c*y
				for (j=0; j < m; j++)
				{
					y= u[j][i-1]
					z= u[j][i]
					u[j][i-1] = y*c+z*s
					u[j][i] = -y*s+z*c
				}
			}
			e[l]= 0.0
			e[k]= f
			q[k]= x
		} 
	}
		
	//vt= transpose(v)
	//return (u,q,vt)
	for (i=0;i<q.length; i++) 
	  if (q[i] < prec) q[i] = 0
	  
	//sort eigenvalues	
	for (i=0; i< n; i++)
	{	 
	//writeln(q)
	 for (j=i-1; j >= 0; j--)
	 {
	  if (q[j] < q[i])
	  {
	//  writeln(i,'-',j)
	   c = q[j]
	   q[j] = q[i]
	   q[i] = c
	   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
	   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
//	   u.swapCols(i,j)
//	   v.swapCols(i,j)
	   i = j	   
	  }
	 }	
	}
	
	return {U:u,S:q,V:v}
};

return numeric;

});
// Helper functions for computing distance.
//
// The name of this should probably be changed, once we learn what other
// kinds of things we're including here.

define('math/distance',['require','numeric'],function (require) {
  var Numeric = require('numeric');

  var Distance = {
    // sqrt(x^2 + y^2), computed to avoid overflow and underflow.
    // http://en.wikipedia.org/wiki/Hypot
    hypot: function(x, y) {
      if(x === 0 && y === 0) {
        return 0;
      }
      if (Math.abs(x) > Math.abs(y)) {
        return Math.abs(x) * Math.sqrt((y/x) * (y/x) + 1);
      } else {
        return Math.abs(y) * Math.sqrt((x/y) * (x/y) + 1);
      }
    },

    // (x1 + x2)/2, computed to avoid overflow.
    mean: function (x1, x2) {
      return ((x1 > 0) === (x2 > 0)) ? x1 + 0.5*(x2 - x1) : 0.5*(x1 + x2);
    },

    dot: function(x1, y1, x2, y2) {
      return x1*x2 + y1*y2;
    },

    // Consider the line extending the segment, parameterized as
    // v1 + t (v2 - v1), where p, v1, and v2 are (xp, yp), (x1, y1), and
    // (x2, y2) respectively.
    //
    // Return the value of the parameter t for the projected point of p onto
    // the line through the segment.
    //
    // It falls where t = [(p-v) . (w-v)] / |w-v|^2
    //
    // Returns 0 in the degenerate case where v1 === v2.
    pointToSegmentParameter: function(xp, yp, x1, y1, x2, y2) {
      var line_length = this.hypot(x2 - x1, y2 - y1);

      // Degenerate case of a point to a point
      if (line_length === 0) return 0;

      var t = this.dot(
        (xp - x1)/line_length,
        (yp - y1)/line_length,
        (x2 - x1)/line_length,
        (y2 - y1)/line_length
      );

      return t;
    },

    closestPointOnSegment: function (xp, yp, x1, y1, x2, y2) {
      var t = this.pointToSegmentParameter(xp, yp, x1, y1, x2, y2);

      if (t <= 0) return [x1, y1];
      if (t >= 1) return [x2, y2];
      return [x1 + t*(x2 - x1), y1 + t*(y2 - y1)];
    },

    // Shortest distance from a point to a line segment
    // http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
    pointToSegment: function (xp, yp, x1, y1, x2, y2) {
      var p = this.closestPointOnSegment(xp, yp, x1, y1, x2, y2);
      return this.hypot(xp - p[0], yp - p[1]);
    },

    // Check if two values are equal to within the given number of bits of
    // precision. For numbers smaller than one, compares the difference in the
    // numbers to 1 instead of the larger of the numbers. This makes calculations like
    // Distance.approx(Math.sin(Math.PI), 0) work out.
    approx: function (x1, x2, bits) {
      if (bits > 50) { //Sanity check that we aren't discarding the numbers completely
        throw(new Error("Within "+(52 - bits)+" bits isn't really approximate any more"));
      }
      var m = Math.max(Math.max(Math.abs(x1), Math.abs(x2)), 1);
      var d = (bits === undefined) ? 0.5 : Math.pow(0.5, bits);
      return m === m + d*Math.abs(x2 - x1);
    },

    // (Near) 0 if x3, y3 lies on the line from x1, y1 to x2, y2.
    // Positive if x3, y3 is on the left of the line, so that the points form a
    // triangle with clockwise orientation.
    isLine: function (x1, y1, x2, y2, x3, y3) {
      var S = Numeric.svd([
        [x1, y1, 1],
        [x2, y2, 1],
        [x3, y3, 1]
      ]).S;
      return Distance.approx(S[S.length - 1]/S[0], 0);
    },

    isCircle: function (x1, y1, x2, y2, x3, y3, x4, y4) {
      var S = Numeric.svd([
        [x1*x1 + y1*y1, x1, y1, 1],
        [x2*x2 + y2*y2, x2, y2, 1],
        [x3*x3 + y3*y3, x3, y3, 1],
        [x4*x4 + y4*y4, x4, y4, 1]
      ]).S;
      return Distance.approx(S[S.length - 1]/S[0], 0);
    },

    // (Near) 0 if x6, y6 lies on the conic defined by the first five points.
    // I don't quite know how to interpret the sign for a general conic.
    isConic: function (x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) {
      var S =  Numeric.svd([
        [x1*x1, y1*y1, 2*x1*y1, x1, y1, 1],
        [x2*x2, y2*y2, 2*x2*y2, x2, y2, 1],
        [x3*x3, y3*y3, 2*x3*y3, x3, y3, 1],
        [x4*x4, y4*y4, 2*x4*y4, x4, y4, 1],
        [x5*x5, y5*y5, 2*x5*y5, x5, y5, 1],
        [x6*x6, y6*y6, 2*x6*y6, x6, y6, 1]
      ]).S;
      return Distance.approx(S[S.length - 1]/S[0], 0);
    },

    conicQuadraticParameters: function (x1, y1, x2, y2, x3, y3, x4, y4, x5, y5) {
      return {
        a: Numeric.det([
          [y1*y1, 2*x1*y1, x1, y1, 1],
          [y2*y2, 2*x2*y2, x2, y2, 1],
          [y3*y3, 2*x3*y3, x3, y3, 1],
          [y4*y4, 2*x4*y4, x4, y4, 1],
          [y5*y5, 2*x5*y5, x5, y5, 1]
        ]),

        b: Numeric.det([
          [x1*x1, y1*y1, x1, y1, 1],
          [x2*x2, y2*y2, x2, y2, 1],
          [x3*x3, y3*y3, x3, y3, 1],
          [x4*x4, y4*y4, x4, y4, 1],
          [x5*x5, y5*y5, x5, y5, 1]
        ]),

        c: -Numeric.det([
          [x1*x1, 2*x1*y1, x1, y1, 1],
          [x2*x2, 2*x2*y2, x2, y2, 1],
          [x3*x3, 2*x3*y3, x3, y3, 1],
          [x4*x4, 2*x4*y4, x4, y4, 1],
          [x5*x5, 2*x5*y5, x5, y5, 1]
        ])
      };
    },

    // Classify a set of 6 points as line, circle, parabola, hyperbola, ellipse, or none for not a conic.
    classifyConic: function (x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6) {
      if (Distance.isLine(x1, y1, x3, y3, x6, y6)) return 'line';
      if (Distance.isCircle(x1, y1, x2, y2, x5, y5, x6, y6)) return 'circle';
      if (!Distance.isConic(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6)) return 'none';

      var p = Distance.conicQuadraticParameters(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5);
      var S = Numeric.svd([[p.a, p.b], [p.b, p.c]]).S;

      if (Distance.approx(S[S.length - 1]/S[0], 0, 20)) return 'parabola';
      return (p.b*p.b > p.a*p.c) ? 'hyperbola' : 'ellipse';

    }
  };

  return Distance;
});

//Definition of built-in functions and variables

define('math/builtin',['require','math/distance'],function(require){

var Distance = require('math/distance');

var BuiltIn = {};

BuiltIn.mod = function(a, b){
  return a - b * Math.floor(a/b);
};

BuiltIn.sign = function(x){
  if(x === 0) return 0;
  if(x > 0) return 1;
  if(x < 0) return -1;
  return NaN;
};

BuiltIn.lcm = function(a, b){
  a = Math.round(a);
  b = Math.round(b);
  var gcd = BuiltIn.getGCD(a, b);
  return Math.abs(a * b / gcd);
};

BuiltIn.gcd = function(a, b){
  return BuiltIn.getGCD(a, b);
};

BuiltIn.nCr = function(n, r){
  n = Math.round(n);
  r = Math.round(r);

  //Error conditions
  if(r > n || n < 0 || r < 0){
    return 0;
  }

  var total = 1;
  for(var i = 0; i < r; i++)
  {
    total *= (n - i) / (i + 1);
  }
  return total;
};

BuiltIn.nPr = function(n, r){
  n = Math.round(n);
  r = Math.round(r);

  //Error conditions
  if(r > n || n < 0 || r < 0){
    return 0;
  }

  var total = 1;
  for(var i = 0; i < r; i++){
    total *= (n-i);
  }
  return total;
};

BuiltIn.factorial = function (x) {
  return BuiltIn.gamma(x + 1);
};

BuiltIn._integerFactorial = function (n) {
  if (n !== Math.floor(n)) return NaN;
  if (n < 0) return NaN;
  if (n > 170) return NaN; // Overflows double point floats
  if (n === 0 || n === 1) return 1;

  var output = 1;
  for (var i = 2; i <= n; i++) output *= i;

  return output;
};

BuiltIn.gamma = function (x) {
  if (x === Math.floor(x)) return BuiltIn._integerFactorial(x - 1);
  // Euler's reflection formula
  if (x < 0) return Math.PI/(Math.sin(Math.PI*x)*BuiltIn.gamma(1-x));
  return Math.exp(BuiltIn.lnGamma(x));
};

BuiltIn.lnGamma = function (x) {
  if (x < 0) return NaN; // Alternates between real and complex on integers.

  // 15 term rational approximation of lnGamma, valid for positive numbers.
  // Original source not known, but verified by JM using Mathematica to give
  // at least 14 correct digits of gamma = Math.exp(Math.lnGamma(x)) for
  // integers and half integers between 0 and 60, and at least 12 correct
  // digits up to 170.
  var cof = [
    57.1562356658629235,
    -59.5979603554754912,
    14.1360979747417471,
    -0.491913816097620199,
    0.339946499848118887e-4,
    0.465236289270485756e-4,
    -0.983744753048795646e-4,
    0.158088703224912494e-3,
    -0.210264441724104883e-3,
    0.217439618115212643e-3,
    -0.164318106536763890e-3,
    0.844182239838527433e-4,
    -0.261908384015814087e-4,
    0.368991826595316234e-5
  ];

  var s = 0.999999999999997092;
  for (var i=0; i < 14; i++) s += cof[i]/(x + i + 1);

  var t = x + 5.24218750000000000;

  return (x + 0.5)*Math.log(t) - t + Math.log(2.5066282746310005*s/x);
};

// BernoulliB_{2k} for k=1..14
BuiltIn.bernoulliTable = [
  1/6, -1/30, 1/42, -1/30, 5/66, -691/2730, 7/6, -3617/510,
  43867/798, -174611/330, 854513/138, -236364091/2730, 8553103/6,
  -23749461029/870
];

// mth derivative of cot(x)
//
// Used in evaluating reflection formula for polygamma
//
// Uses fact that (d/dx)^m cot(x) = p_m(cos(x))/sin(x)^{m+1} where p_m(x) is a
// polynomial with coefficents that obey the following recursion relation:
//
// a_{m+1, n} = -((m - n + 2) a_{m, n-1} + (n+1) a_{m, n+1})
//            = -(            t1         +        t2       )
// a_{0, 0} = 0, a_{0, 1} = 1
//
// Could improve performance by taking advantage of fact that p is even/odd
// when m is odd/even. Didn't feel worth the added trickiness.
BuiltIn.cotDerivative = function(m, x) {
  /* jshint maxcomplexity:11 */
  if (m !== Math.floor(m)) return NaN;
  if (m < 0) return NaN;

  if (m === 0) return 1/BuiltIn.tan(x);

  var sinx = BuiltIn.sin(x);
  if (m === 1) return -1/(sinx*sinx);

  var cosx = BuiltIn.cos(x);
  if (m === 2) return 2*cosx/(sinx*sinx*sinx);

  var aprev = [0, 2];
  var a;
  var mp, n;
  var t1, t2;
  for (mp = 3; mp <= m; mp++) {
    a = [];
    for (n = 0; n < mp; n++) {
      t1 = 0;
      t2 = 0;
      if (n > 0) t1 = (mp - n + 1)*aprev[n - 1];
      if (n + 2 < mp) t2 = (n + 1)*aprev[n + 1];
      a.push(-(t1 + t2));
    }
    aprev = a;
  }

  var s = 0;
  // Horner's method for polynomial evaluation
  for (n = m - 1; n >= 0; n--) s = a[n] + cosx*s;

  return s/Math.pow(sinx, m + 1);
};

// polyGamma(m, n) is the (m+1)th derivative of lnGamma(n)
//
// Implemented by differentiating Stirling's approximation:
//
// d/dn ln(Gamma(n)) = -\left(
//         ln(n) + 1/2n + \sum_{k=1}^{\infty} B_{2k}/(2k n^{2k})
//       /right)
//
// d^{m+1}/dn^{m+1} ln(Gamma(n)) =
//      m! (-1)^{m + 1} \left(
//        1/(m n^m) - 1/(2 n^{1+m}) +
//        \sum_{k=1}^{\infty} B_{2k} (2k + m - 1)!/(m!(2k)!n^{2k+m})
//      \right)
//
// B_{2k} are the Bernoulli numbers.
//
// Uses recurrence relation to bring arguments above 10, and reflection
// formula for negative n. In this case, 14 term sum gives results accurate to
// machine precision for values of m between 0 and at least 8.
//
// Only get 8 digits for polyGamma(100, 30)
//
// Recurrence relation:
//
// polyGamma(m, n) = polyGamma(m, n + 1) + (-1)^m m!/n^{m+1}
//
// Reflection formula:
//
// polyGamma(m, n) = (-1)^{m}polyGamma(m, 1 - n) - pi d^m/dn^m cot(pi*n)
//
// Can lose some accuracy in reflection formula for large m because of large
// powers of trig functions.
BuiltIn.polyGamma = function (m, n) {
  if (m < 0) return NaN;
  if (m !== Math.floor(m)) return NaN;
  var sign = (m % 2 === 0) ? -1 : 1;
  // Use reflection formula for negative n
  if (n < 0) {
    return -sign*BuiltIn.polyGamma(m, 1 - n) -
      Math.pow(Math.PI, m + 1)*BuiltIn.cotDerivative(m, Math.PI*n);
  }

  var mfac = BuiltIn.factorial(m);

  // Use recurrence relation to bring n above 10
  var s = 0;
  var npmm = Math.pow(n, -(m + 1));
  while (n < 10) {
    s += npmm;
    n++;
    npmm = Math.pow(n, -(m + 1));
  }

  s += (m === 0) ? -Math.log(n) : npmm*n/m;
  s += 0.5*npmm;

  var bt = BuiltIn.bernoulliTable;
  var num = m + 1;
  var denom = 2;
  var pre = npmm*n*num/denom;
  var nsqinv = 1/(n*n);
  for (var k = 1; k <= 14; k++) {
    pre *= nsqinv;
    s += pre*bt[k-1];
    num++; denom++;
    pre *= num/denom;
    num++; denom++;
    pre *= num/denom;
  }
  return mfac*sign*s;
};

BuiltIn.getGCD = function(x,y)
{
    //Only defined over integers
    var a = Math.round(x);
    var b = Math.round(y);

    // Positive values only
    if (a < 0)
        a = -a;
    if (b < 0)
        b = -b;

    // Reverse order if necessary.
    // b should be smaller than a
    if (b > a)
    {
        var temp = b;
        b = a;
        a = temp;
    }

    //GCD(0, x) = x
    if(b === 0){
      return a;
    }

    var m = a % b;

    while (m > 0)
    {
        a = b;
        b = m;
        m = a % b;
    }

    return b;
};

// Returns a reduced fraction approximation of x with denominator less than
// maxDenominator. maxDenominator defaults to 1e6.
BuiltIn.toFraction = function (x, maxDenominator) {

  if (x === Infinity) return { n: Infinity, d: 1 };
  if (x === -Infinity) return { n: -Infinity, d: 1};
  if (!isFinite(x)) return { n: NaN, d: 1};

  var whole, n0 = 0, n1 = 1, d0 = 1, d1 = 0, n, d;
  if (!maxDenominator) maxDenominator = 1e6;
  while (true) {
    whole = Math.floor(x);
    n = whole*n1 + n0;
    d = whole*d1 + d0;
    if (d > maxDenominator) break;
    n0 = n1;
    d0 = d1;
    n1 = n;
    d1 = d;
    if (x === whole) break;
    x = 1/(x - whole);
  }
  return { n: n1, d: d1 };
};

BuiltIn.log = function (n) {
  var y = Math.log(n);
  // Favor integer answers when they satisfy base^y===n
  return (Math.exp(Math.round(y)) === n) ? Math.round(y) : y;
};

BuiltIn.log_base = function (n, base) {
  var y = Math.log(n) / Math.log(base);
  // Favor integer answers when they satisfy base^y===n
  return (Math.pow(base, Math.round(y)) === n) ? Math.round(y) : y;
};

BuiltIn.pow = function (x, n) {
  if (x >= 0 || n === Math.floor(n)) return Math.pow(x, n);
  var frac = BuiltIn.toFraction(n, 100);
  if (Distance.approx(frac.n/frac.d, n, 2) && frac.d % 2 === 1) return (frac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, n);
  return NaN;
};
BuiltIn.nthroot = function(x, n) { return BuiltIn.pow(x, 1/n) };

var PI_INV = 1/Math.PI;

//Trig functions
// We do some work to make integer and half integer multiples of pi equal to 0 when they should be.
BuiltIn.sin = function (x) {
  var absx = Math.abs(x);
  if (0.5*(absx*PI_INV*2 % 2) + absx === absx) return 0;
  return Math.sin(x);
};

BuiltIn.cos = function (x) {
  var absx = Math.abs(x);
  if (0.5*((absx*PI_INV*2 + 1) % 2) + absx === absx) return 0;
  return Math.cos(x);
};

BuiltIn.tan = function (x) {
  var absx = Math.abs(x);
  if (0.5*(absx*PI_INV*2 % 2) + absx === absx) return 0;
  if (0.5*((absx*PI_INV*2 + 1) % 2) + absx === absx) return Infinity;
  return Math.tan(x);
};

BuiltIn.sec = function (x) {
  var absx = Math.abs(x);
  if (0.5*((absx*PI_INV*2 + 1) % 2) + absx === absx) return Infinity;
  return 1/Math.cos(x);
};

BuiltIn.csc = function(x) {
  var absx = Math.abs(x);
  if (0.5*(absx*PI_INV*2 % 2) + absx === absx) return Infinity;
  return 1/Math.sin(x);
};

BuiltIn.cot = function(x) {
  var absx = Math.abs(x);
  if (0.5*(absx*PI_INV*2 % 2) + absx === absx) return Infinity;
  if (0.5*((absx*PI_INV*2 + 1) % 2) + absx === absx) return 0;
  return 1/Math.tan(x);
};

//Inverse trig functions
BuiltIn.acot = function(x){return Math.PI / 2 - Math.atan(x)};
BuiltIn.acsc = function(x){return Math.asin(1/x)};
BuiltIn.asec = function(x){return Math.acos(1/x)};

//Hyperbolic trig functions
BuiltIn.sinh = function(x){return (Math.exp(x) - Math.exp(-x)) / 2};
BuiltIn.cosh = function(x){return (Math.exp(x) + Math.exp(-x)) / 2};
BuiltIn.tanh = function(x) {
  // This definition avoids overflow of sinh and cosh for large x
  if (x > 0) {
    return (1 - Math.exp(-2*x))/(1 + Math.exp(-2*x));
  } else {
    return (Math.exp(2*x) - 1)/(Math.exp(2*x) + 1);
  }
};

BuiltIn.sech = function(x){return 1 / BuiltIn.cosh(x)};
BuiltIn.csch = function(x){return 1 / BuiltIn.sinh(x)};
BuiltIn.coth = function(x){return 1 / BuiltIn.tanh(x)};

//Inverse hyperbolic trig functions
BuiltIn.asinh = function(x){return Math.log(x+Math.sqrt(x*x+1))};
BuiltIn.acosh = function(x){return Math.log(x+Math.sqrt(x+1)*Math.sqrt(x-1))};
BuiltIn.atanh = function(x){return 0.5 * Math.log((1+x)/(1-x))};

BuiltIn.asech = function(x){return Math.log(1/x + Math.sqrt((1/x + 1)) * Math.sqrt((1/x - 1)))};
BuiltIn.acsch = function(x){return Math.log(1/x + Math.sqrt((1/(x*x)+1)))};
BuiltIn.acoth = function(x){return 0.5 * Math.log((x+1)/(x-1))};

BuiltIn.mean = function(list){
  var total = 0;
  for(var i = 0; i < list.length; i++){
    total += list[i];
  }
  return total / list.length;
};

BuiltIn.total = function(list){
  var total = 0;
  for(var i = 0; i < list.length; i++){
    total += list[i];
  }
  return total;
};

BuiltIn.length = function(list){
  return list.length;
};

BuiltIn.listMin = function (list) {
  if (list.length < 1) return NaN;
  var min = list[0];
  if (isNaN(min)) return NaN;
  for (var i = 1; i < list.length; i++) {
    if (isNaN(list[i])) return NaN;
    if (list[i] < min) min = list[i];
  }
  return min;
};

BuiltIn.listMax = function (list) {
  if (list.length < 1) return NaN;
  var max = list[0];
  if (isNaN(max)) return NaN;
  for (var i = 1; i < list.length; i++) {
    if (isNaN(list[i])) return NaN;
    if (list[i] >= max) max = list[i];
  }
  return max;
};

BuiltIn.quantile = function (list, q) {
  if (!isFinite(q) || q < 0 || q > 1) return NaN;
  var length = list.length;
  var permutation = BuiltIn.sortPerm(list);
  var fractionalIndex = q*(length - 1);

  if (Math.floor(fractionalIndex) === fractionalIndex) return list[permutation[fractionalIndex]];
  // linear interpolation between ranked elements
  return (
    (Math.ceil(fractionalIndex) - fractionalIndex)*list[permutation[Math.floor(fractionalIndex)]] +
    (fractionalIndex - Math.floor(fractionalIndex))*list[permutation[Math.ceil(fractionalIndex)]]
  );
};

BuiltIn.sortPerm = function (list) {
  var length = list.length;
  var indices = [];
  for (var i = 0; i < length; i++) {
    indices.push(i);
  }
  indices.sort(function (i, j) { return list[i] - list[j]; });
  return indices;
};

// Returns 1-based indexes
BuiltIn.upperQuantileIndex = function (list, q) {
  return BuiltIn.sortPerm(list)[Math.ceil(q*(list.length - 1))] + 1;
};

BuiltIn.lowerQuantileIndex = function (list, q) {
  return BuiltIn.sortPerm(list)[Math.floor(q*(list.length - 1))] + 1;
};

BuiltIn.median = function (list) {
  return BuiltIn.quantile(list, 0.5);
};

BuiltIn.argMin = function (list) {
  // Our lists start indexing from 1, so returning 0 represents
  // no element of the list.
  if (list.length < 1) return 0;
  var min = list[0];
  if (isNaN(min)) return 0;
  var argMin = 0;
  for (var i = 1; i < list.length; i++) {
    if (isNaN(list[i])) return 0;
    if (list[i] < min) {
      argMin = i;
      min = list[i];
    }
  }
  return argMin + 1; // Convert between js and Desmos indexing conventions
};

BuiltIn.argMax = function (list) {
  if (list.length < 1) return 0;
  var max = list[0];
  if (isNaN(max)) return 0;
  var argMax = 0;
  for (var i = 1; i < list.length; i++) {
    if (list[i] >= max) {
      if (isNaN(list[i])) return 0;
      argMax = i;
      max = list[i];
    }
  }
  return argMax + 1; // Convert between js and Desmos indexing conventions
};

// Population variance. This is used internally, but is not currently exposed
// to users.
BuiltIn.varp = function (list) {
  var m = BuiltIn.mean(list);
  var total = 0;
  for (var i = 0; i < list.length; i++) {
    var delta = list[i] - m;
    total += delta*delta;
  }
  return total/list.length;
};

BuiltIn.mad = function (list) {
  var m = BuiltIn.mean(list);
  var total = 0;
  for (var i = 0; i < list.length; i++) {
    total += Math.abs(list[i] - m);
  }
  return total/list.length;
};

// Unbiased estimator of variance, i.e. has N-1 in the denominator
BuiltIn.var = function (list) {
  var len = list.length;
  return BuiltIn.varp(list)*len/(len - 1);
};

// Population covariance. This is used internally, but is not currently exposed
// to users.
BuiltIn.covp = function (l1, l2) {
  if (l1.length !== l2.length) return NaN;

  var len = l1.length;

  var m1 = BuiltIn.mean(l1);
  var m2 = BuiltIn.mean(l2);

  var sum = 0;
  for (var i = 0; i < len; i++) {
    sum += (l1[i] - m1)*(l2[i] - m2);
  }

  return sum/len;
};

// Unbiased estimator of covariance, i.e. has N-1 in the denominator
BuiltIn.cov = function (l1, l2) {
  if (l1.length !== l2.length) return NaN;
  var len = l1.length;
  return BuiltIn.covp(l1, l2)*len/(len - 1);
};

// Pearson correlation coefficient
BuiltIn.corr = function (l1, l2) {
  if (l1.length !== l2.length) return NaN;

  var len = l1.length;

  var m1 = BuiltIn.mean(l1);
  var m2 = BuiltIn.mean(l2);
  var d1, d2;
  var t1 = 0, t2 = 0, tc = 0;
  for (var i = 0; i < len; i++) {
    d1 = l1[i] - m1;
    d2 = l2[i] - m2;
    t1 += d1*d1;
    t2 += d2*d2;
    tc += d1*d2;
  }
  return tc/Math.sqrt(t1*t2);
};

BuiltIn.stdev = function (list) {
  return Math.sqrt(BuiltIn.var(list));
};

BuiltIn.stdevp = function (list) {
  return Math.sqrt(BuiltIn.varp(list));
};

return BuiltIn;
});

// Utility for serializing/deserializing functions.
define('math/functions',['require','math/builtin'],function (require) {
  var BuiltIn = require('math/builtin');

  function dehydrateGraphData (data) {
    for (var i = 0; i < data.length; i++) {
      if (data[i].compiled) {
        delete data[i].compiled.fn;
      }
    }
  }

  function rehydrateGraphData (data) {
    /* jshint evil: true */
    for (var i = 0; i < data.length; i++) {
      var compiled = data[i].compiled;
      if (compiled) {
        compiled.fn = closureFunctionWithBuiltIn(compiled.args, compiled.source);
      }
    }
  }

  //Helper function to auto-generate evaluateOnce calls from evaluation strings
  function createEvaluateFunction (evalExpressionFn, n) {
    /*jshint evil:true*/
    var argList = [];
    for(var i = 0; i < n; i++){
      argList.push('values['+i+']');
    }
    return closureFunctionWithBuiltIn(['values'], 'return ' + evalExpressionFn(argList));
  }

  function closureFunctionWithBuiltIn (args, body) {
    /*jshint evil:true*/
    var argList = args.join(',');
    var functionString = "return (function("+argList+"){"+body+"})";
    var compilerFunction = new Function(['BuiltIn'], functionString);
    return compilerFunction(BuiltIn);
  }

  return {
    dehydrateGraphData: dehydrateGraphData,
    rehydrateGraphData: rehydrateGraphData,
    closureFunctionWithBuiltIn: closureFunctionWithBuiltIn,
    createEvaluateFunction: createEvaluateFunction
  };
});

define('text!worker_src_underlying',[],function () { return 'var requirejs,require,define;(function(e){function t(e,t){return v.call(e,t)}function n(e,t){var n,r,i,a,s,o,u,c,l,h,f=t&&t.split("/"),p=d.map,m=p&&p["*"]||{};if(e&&"."===e.charAt(0))if(t){for(f=f.slice(0,f.length-1),e=f.concat(e.split("/")),c=0;e.length>c;c+=1)if(h=e[c],"."===h)e.splice(c,1),c-=1;else if(".."===h){if(1===c&&(".."===e[2]||".."===e[0]))break;c>0&&(e.splice(c-1,2),c-=2)}e=e.join("/")}else 0===e.indexOf("./")&&(e=e.substring(2));if((f||m)&&p){for(n=e.split("/"),c=n.length;c>0;c-=1){if(r=n.slice(0,c).join("/"),f)for(l=f.length;l>0;l-=1)if(i=p[f.slice(0,l).join("/")],i&&(i=i[r])){a=i,s=c;break}if(a)break;!o&&m&&m[r]&&(o=m[r],u=c)}!a&&o&&(a=o,s=u),a&&(n.splice(0,s,a),e=n.join("/"))}return e}function r(t,n){return function(){return l.apply(e,y.call(arguments,0).concat([t,n]))}}function i(e){return function(t){return n(t,e)}}function a(e){return function(t){p[e]=t}}function s(n){if(t(m,n)){var r=m[n];delete m[n],g[n]=!0,c.apply(e,r)}if(!t(p,n)&&!t(g,n))throw Error("No "+n);return p[n]}function o(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function u(e){return function(){return d&&d.config&&d.config[e]||{}}}var c,l,h,f,p={},m={},d={},g={},v=Object.prototype.hasOwnProperty,y=[].slice;h=function(e,t){var r,a=o(e),u=a[0];return e=a[1],u&&(u=n(u,t),r=s(u)),u?e=r&&r.normalize?r.normalize(e,i(t)):n(e,t):(e=n(e,t),a=o(e),u=a[0],e=a[1],u&&(r=s(u))),{f:u?u+"!"+e:e,n:e,pr:u,p:r}},f={require:function(e){return r(e)},exports:function(e){var t=p[e];return t!==void 0?t:p[e]={}},module:function(e){return{id:e,uri:"",exports:p[e],config:u(e)}}},c=function(n,i,o,u){var c,l,d,v,y,b,x=[];if(u=u||n,"function"==typeof o){for(i=!i.length&&o.length?["require","exports","module"]:i,y=0;i.length>y;y+=1)if(v=h(i[y],u),l=v.f,"require"===l)x[y]=f.require(n);else if("exports"===l)x[y]=f.exports(n),b=!0;else if("module"===l)c=x[y]=f.module(n);else if(t(p,l)||t(m,l)||t(g,l))x[y]=s(l);else{if(!v.p)throw Error(n+" missing "+l);v.p.load(v.n,r(u,!0),a(l),{}),x[y]=p[l]}d=o.apply(p[n],x),n&&(c&&c.exports!==e&&c.exports!==p[n]?p[n]=c.exports:d===e&&b||(p[n]=d))}else n&&(p[n]=o)},requirejs=require=l=function(t,n,r,i,a){return"string"==typeof t?f[t]?f[t](n):s(h(t,n).f):(t.splice||(d=t,n.splice?(t=n,n=r,r=null):t=e),n=n||function(){},"function"==typeof r&&(r=i,i=a),i?c(e,t,n,r):setTimeout(function(){c(e,t,n,r)},4),l)},l.config=function(e){return d=e,d.deps&&l(d.deps,d.callback),l},define=function(e,n,r){n.splice||(r=n,n=[]),t(p,e)||t(m,e)||(m[e]=[e,n,r])},define.amd={jQuery:!0}})(),define("vendor/almond",function(){}),define("testbridge",["require"],function(){var e={ready:function(){window.TestBridge=e}};return e}),define("console",["require"],function(){var e=function(){},t=["log","info","warn","error","assert","dir","clear","profile","profileEnd"],n={},r=function(t){n[t]="undefined"!=typeof window&&window.console&&window.console[t]?function(){Function.prototype.apply.call(window.console[t],window.console,arguments)}:e};return t.forEach(r),n}),define("pjs",[],function(){var e=function(e,t,n){function r(e){return"object"==typeof e}function i(e){return"function"==typeof e}function a(){}function s(o,u){function c(){var e=new l;return i(e.init)&&e.init.apply(e,arguments),e}function l(){}u===n&&(u=o,o=Object),c.Bare=l;var h,f=a[e]=o[e],p=l[e]=c[e]=new a;return p.constructor=c,c.mixin=function(t){return l[e]=c[e]=s(c,t)[e],c},(c.open=function(e){if(h={},i(e)?h=e.call(c,p,f,c,o):r(e)&&(h=e),r(h))for(var n in h)t.call(h,n)&&(p[n]=h[n]);return i(p.init)||(p.init=o),c})(u)}return s}("prototype",{}.hasOwnProperty);return e}),function(){function e(t,n,r){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return t===n;if(t._chain&&(t=t._wrapped),n._chain&&(n=n._wrapped),t.isEqual&&w.isFunction(t.isEqual))return t.isEqual(n);if(n.isEqual&&w.isFunction(n.isEqual))return n.isEqual(t);var i=c.call(t);if(i!=c.call(n))return!1;switch(i){case"[object String]":return t==n+"";case"[object Number]":return t!=+t?n!=+n:0==t?1/t==1/n:t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object RegExp]":return t.source==n.source&&t.global==n.global&&t.multiline==n.multiline&&t.ignoreCase==n.ignoreCase}if("object"!=typeof t||"object"!=typeof n)return!1;for(var a=r.length;a--;)if(r[a]==t)return!0;r.push(t);var s=0,o=!0;if("[object Array]"==i){if(s=t.length,o=s==n.length)for(;s--&&(o=s in t==s in n&&e(t[s],n[s],r)););}else{if("constructor"in t!="constructor"in n||t.constructor!=n.constructor)return!1;for(var u in t)if(w.has(t,u)&&(s++,!(o=w.has(n,u)&&e(t[u],n[u],r))))break;if(o){for(u in n)if(w.has(n,u)&&!s--)break;o=!s}}return r.pop(),o}var t=this,n=t._,r={},i=Array.prototype,a=Object.prototype,s=Function.prototype,o=i.slice,u=i.unshift,c=a.toString,l=a.hasOwnProperty,h=i.forEach,f=i.map,p=i.reduce,m=i.reduceRight,d=i.filter,g=i.every,v=i.some,y=i.indexOf,b=i.lastIndexOf,x=Array.isArray,_=Object.keys,M=s.bind,w=function(e){return new V(e)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=w),exports._=w):t._=w,w.VERSION="1.3.3";var I=w.each=w.forEach=function(e,t,n){if(null!=e)if(h&&e.forEach===h)e.forEach(t,n);else if(e.length===+e.length){for(var i=0,a=e.length;a>i;i++)if(i in e&&t.call(n,e[i],i,e)===r)return}else for(var s in e)if(w.has(e,s)&&t.call(n,e[s],s,e)===r)return};w.map=w.collect=function(e,t,n){var r=[];return null==e?r:f&&e.map===f?e.map(t,n):(I(e,function(e,i,a){r[r.length]=t.call(n,e,i,a)}),e.length===+e.length&&(r.length=e.length),r)},w.reduce=w.foldl=w.inject=function(e,t,n,r){var i=arguments.length>2;if(null==e&&(e=[]),p&&e.reduce===p)return r&&(t=w.bind(t,r)),i?e.reduce(t,n):e.reduce(t);if(I(e,function(e,a,s){i?n=t.call(r,n,e,a,s):(n=e,i=!0)}),!i)throw new TypeError("Reduce of empty array with no initial value");return n},w.reduceRight=w.foldr=function(e,t,n,r){var i=arguments.length>2;if(null==e&&(e=[]),m&&e.reduceRight===m)return r&&(t=w.bind(t,r)),i?e.reduceRight(t,n):e.reduceRight(t);var a=w.toArray(e).reverse();return r&&!i&&(t=w.bind(t,r)),i?w.reduce(a,t,n,r):w.reduce(a,t)},w.find=w.detect=function(e,t,n){var r;return C(e,function(e,i,a){return t.call(n,e,i,a)?(r=e,!0):void 0}),r},w.filter=w.select=function(e,t,n){var r=[];return null==e?r:d&&e.filter===d?e.filter(t,n):(I(e,function(e,i,a){t.call(n,e,i,a)&&(r[r.length]=e)}),r)},w.reject=function(e,t,n){var r=[];return null==e?r:(I(e,function(e,i,a){t.call(n,e,i,a)||(r[r.length]=e)}),r)},w.every=w.all=function(e,t,n){var i=!0;return null==e?i:g&&e.every===g?e.every(t,n):(I(e,function(e,a,s){return(i=i&&t.call(n,e,a,s))?void 0:r}),!!i)};var C=w.some=w.any=function(e,t,n){t||(t=w.identity);var i=!1;return null==e?i:v&&e.some===v?e.some(t,n):(I(e,function(e,a,s){return i||(i=t.call(n,e,a,s))?r:void 0}),!!i)};w.include=w.contains=function(e,t){var n=!1;return null==e?n:y&&e.indexOf===y?-1!=e.indexOf(t):n=C(e,function(e){return e===t})},w.invoke=function(e,t){var n=o.call(arguments,2);return w.map(e,function(e){return(w.isFunction(t)?t||e:e[t]).apply(e,n)})},w.pluck=function(e,t){return w.map(e,function(e){return e[t]})},w.max=function(e,t,n){if(!t&&w.isArray(e)&&e[0]===+e[0])return Math.max.apply(Math,e);if(!t&&w.isEmpty(e))return-1/0;var r={computed:-1/0};return I(e,function(e,i,a){var s=t?t.call(n,e,i,a):e;s>=r.computed&&(r={value:e,computed:s})}),r.value},w.min=function(e,t,n){if(!t&&w.isArray(e)&&e[0]===+e[0])return Math.min.apply(Math,e);if(!t&&w.isEmpty(e))return 1/0;var r={computed:1/0};return I(e,function(e,i,a){var s=t?t.call(n,e,i,a):e;r.computed>s&&(r={value:e,computed:s})}),r.value},w.shuffle=function(e){var t,n=[];return I(e,function(e,r){t=Math.floor(Math.random()*(r+1)),n[r]=n[t],n[t]=e}),n},w.sortBy=function(e,t,n){var r=w.isFunction(t)?t:function(e){return e[t]};return w.pluck(w.map(e,function(e,t,i){return{value:e,criteria:r.call(n,e,t,i)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;return void 0===n?1:void 0===r?-1:r>n?-1:n>r?1:0}),"value")},w.groupBy=function(e,t){var n={},r=w.isFunction(t)?t:function(e){return e[t]};return I(e,function(e,t){var i=r(e,t);(n[i]||(n[i]=[])).push(e)}),n},w.sortedIndex=function(e,t,n){n||(n=w.identity);for(var r=0,i=e.length;i>r;){var a=r+i>>1;n(e[a])<n(t)?r=a+1:i=a}return r},w.toArray=function(e){return e?w.isArray(e)?o.call(e):w.isArguments(e)?o.call(e):e.toArray&&w.isFunction(e.toArray)?e.toArray():w.values(e):[]},w.size=function(e){return w.isArray(e)?e.length:w.keys(e).length},w.first=w.head=w.take=function(e,t,n){return null==t||n?e[0]:o.call(e,0,t)},w.initial=function(e,t,n){return o.call(e,0,e.length-(null==t||n?1:t))},w.last=function(e,t,n){return null==t||n?e[e.length-1]:o.call(e,Math.max(e.length-t,0))},w.rest=w.tail=function(e,t,n){return o.call(e,null==t||n?1:t)},w.compact=function(e){return w.filter(e,function(e){return!!e})},w.flatten=function(e,t){return w.reduce(e,function(e,n){return w.isArray(n)?e.concat(t?n:w.flatten(n)):(e[e.length]=n,e)},[])},w.without=function(e){return w.difference(e,o.call(arguments,1))},w.uniq=w.unique=function(e,t,n){var r=n?w.map(e,n):e,i=[];return 3>e.length&&(t=!0),w.reduce(r,function(n,r,a){return(t?w.last(n)===r&&n.length:w.include(n,r))||(n.push(r),i.push(e[a])),n},[]),i},w.union=function(){return w.uniq(w.flatten(arguments,!0))},w.intersection=w.intersect=function(e){var t=o.call(arguments,1);return w.filter(w.uniq(e),function(e){return w.every(t,function(t){return w.indexOf(t,e)>=0})})},w.difference=function(e){var t=w.flatten(o.call(arguments,1),!0);return w.filter(e,function(e){return!w.include(t,e)})},w.zip=function(){for(var e=o.call(arguments),t=w.max(w.pluck(e,"length")),n=Array(t),r=0;t>r;r++)n[r]=w.pluck(e,""+r);return n},w.indexOf=function(e,t,n){if(null==e)return-1;var r,i;if(n)return r=w.sortedIndex(e,t),e[r]===t?r:-1;if(y&&e.indexOf===y)return e.indexOf(t);for(r=0,i=e.length;i>r;r++)if(r in e&&e[r]===t)return r;return-1},w.lastIndexOf=function(e,t){if(null==e)return-1;if(b&&e.lastIndexOf===b)return e.lastIndexOf(t);for(var n=e.length;n--;)if(n in e&&e[n]===t)return n;return-1},w.range=function(e,t,n){1>=arguments.length&&(t=e||0,e=0),n=arguments[2]||1;for(var r=Math.max(Math.ceil((t-e)/n),0),i=0,a=Array(r);r>i;)a[i++]=e,e+=n;return a};var S=function(){};w.bind=function(e,t){var n,r;if(e.bind===M&&M)return M.apply(e,o.call(arguments,1));if(!w.isFunction(e))throw new TypeError;return r=o.call(arguments,2),n=function(){if(!(this instanceof n))return e.apply(t,r.concat(o.call(arguments)));S.prototype=e.prototype;var i=new S,a=e.apply(i,r.concat(o.call(arguments)));return Object(a)===a?a:i}},w.bindAll=function(e){var t=o.call(arguments,1);return 0==t.length&&(t=w.functions(e)),I(t,function(t){e[t]=w.bind(e[t],e)}),e},w.memoize=function(e,t){var n={};return t||(t=w.identity),function(){var r=t.apply(this,arguments);return w.has(n,r)?n[r]:n[r]=e.apply(this,arguments)}},w.delay=function(e,t){var n=o.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},w.defer=function(e){return w.delay.apply(w,[e,1].concat(o.call(arguments,1)))},w.throttle=function(e,t){var n,r,i,a,s,o,u=w.debounce(function(){s=a=!1},t);return function(){n=this,r=arguments;var c=function(){i=null,s&&e.apply(n,r),u()};return i||(i=setTimeout(c,t)),a?s=!0:o=e.apply(n,r),u(),a=!0,o}},w.debounce=function(e,t,n){var r;return function(){var i=this,a=arguments,s=function(){r=null,n||e.apply(i,a)};n&&!r&&e.apply(i,a),clearTimeout(r),r=setTimeout(s,t)}},w.once=function(e){var t,n=!1;return function(){return n?t:(n=!0,t=e.apply(this,arguments))}},w.wrap=function(e,t){return function(){var n=[e].concat(o.call(arguments,0));return t.apply(this,n)}},w.compose=function(){var e=arguments;return function(){for(var t=arguments,n=e.length-1;n>=0;n--)t=[e[n].apply(this,t)];return t[0]}},w.after=function(e,t){return 0>=e?t():function(){return 1>--e?t.apply(this,arguments):void 0}},w.keys=_||function(e){if(e!==Object(e))throw new TypeError("Invalid object");var t=[];for(var n in e)w.has(e,n)&&(t[t.length]=n);return t},w.values=function(e){return w.map(e,w.identity)},w.functions=w.methods=function(e){var t=[];for(var n in e)w.isFunction(e[n])&&t.push(n);return t.sort()},w.extend=function(e){return I(o.call(arguments,1),function(t){for(var n in t)e[n]=t[n]}),e},w.pick=function(e){var t={};return I(w.flatten(o.call(arguments,1)),function(n){n in e&&(t[n]=e[n])}),t},w.defaults=function(e){return I(o.call(arguments,1),function(t){for(var n in t)null==e[n]&&(e[n]=t[n])}),e},w.clone=function(e){return w.isObject(e)?w.isArray(e)?e.slice():w.extend({},e):e},w.tap=function(e,t){return t(e),e},w.isEqual=function(t,n){return e(t,n,[])},w.isEmpty=function(e){if(null==e)return!0;if(w.isArray(e)||w.isString(e))return 0===e.length;for(var t in e)if(w.has(e,t))return!1;return!0},w.isElement=function(e){return!(!e||1!=e.nodeType)},w.isArray=x||function(e){return"[object Array]"==c.call(e)},w.isObject=function(e){return e===Object(e)},w.isArguments=function(e){return"[object Arguments]"==c.call(e)},w.isArguments(arguments)||(w.isArguments=function(e){return!(!e||!w.has(e,"callee"))}),w.isFunction=function(e){return"[object Function]"==c.call(e)},w.isString=function(e){return"[object String]"==c.call(e)},w.isNumber=function(e){return"[object Number]"==c.call(e)},w.isFinite=function(e){return w.isNumber(e)&&isFinite(e)},w.isNaN=function(e){return e!==e},w.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"==c.call(e)},w.isDate=function(e){return"[object Date]"==c.call(e)},w.isRegExp=function(e){return"[object RegExp]"==c.call(e)},w.isNull=function(e){return null===e},w.isUndefined=function(e){return void 0===e},w.has=function(e,t){return l.call(e,t)},w.noConflict=function(){return t._=n,this},w.identity=function(e){return e},w.times=function(e,t,n){for(var r=0;e>r;r++)t.call(n,r)},w.escape=function(e){return(""+e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/\'/g,"&#x27;").replace(/\\//g,"&#x2F;")},w.result=function(e,t){if(null==e)return null;var n=e[t];return w.isFunction(n)?n.call(e):n},w.mixin=function(e){I(w.functions(e),function(t){q(t,w[t]=e[t])})};var T=0;w.uniqueId=function(e){var t=T++;return e?e+t:t},w.templateSettings={evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g,escape:/<%-([\\s\\S]+?)%>/g};var E=/.^/,k={"\\\\":"\\\\","\'":"\'",r:"\\r",n:"\\n",t:"\t",u2028:"\\u2028",u2029:"\\u2029"};for(var A in k)k[k[A]]=A;var F=/\\\\|\'|\\r|\\n|\\t|\\u2028|\\u2029/g,D=/\\\\(\\\\|\'|r|n|t|u2028|u2029)/g,P=function(e){return e.replace(D,function(e,t){return k[t]})};w.template=function(e,t,n){n=w.defaults(n||{},w.templateSettings);var r="__p+=\'"+e.replace(F,function(e){return"\\\\"+k[e]}).replace(n.escape||E,function(e,t){return"\'+\\n_.escape("+P(t)+")+\\n\'"}).replace(n.interpolate||E,function(e,t){return"\'+\\n("+P(t)+")+\\n\'"}).replace(n.evaluate||E,function(e,t){return"\';\\n"+P(t)+"\\n;__p+=\'"})+"\';\\n";n.variable||(r="with(obj||{}){\\n"+r+"}\\n"),r="var __p=\'\';var print=function(){__p+=Array.prototype.join.call(arguments, \'\')};\\n"+r+"return __p;\\n";var i=Function(n.variable||"obj","_",r);if(t)return i(t,w);var a=function(e){return i.call(this,e,w)};return a.source="function("+(n.variable||"obj")+"){\\n"+r+"}",a},w.chain=function(e){return w(e).chain()};var V=function(e){this._wrapped=e};w.prototype=V.prototype;var O=function(e,t){return t?w(e).chain():e},q=function(e,t){V.prototype[e]=function(){var e=o.call(arguments);return u.call(e,this._wrapped),O(t.apply(w,e),this._chain)}};w.mixin(w),I(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=i[e];V.prototype[e]=function(){var n=this._wrapped;t.apply(n,arguments);var r=n.length;return"shift"!=e&&"splice"!=e||0!==r||delete n[0],O(n,this._chain)}}),I(["concat","join","slice"],function(e){var t=i[e];V.prototype[e]=function(){return O(t.apply(this._wrapped,arguments),this._chain)}}),V.prototype.chain=function(){return this._chain=!0,this},V.prototype.value=function(){return this._wrapped}}.call(this),define("underscore",function(e){return function(){var t;return t||e._}}(this)),define("numeric",[],function(){var numeric="undefined"==typeof exports?function numeric(){}:exports;return"undefined"!=typeof global&&(global.numeric=numeric),numeric.version="1.2.6",numeric.bench=function bench(e,t){var n,r,i,a;for(t===void 0&&(t=15),i=.5,n=new Date;;){for(i*=2,a=i;a>3;a-=4)e(),e(),e(),e();for(;a>0;)e(),a--;if(r=new Date,r-n>t)break}for(a=i;a>3;a-=4)e(),e(),e(),e();for(;a>0;)e(),a--;return r=new Date,1e3*(3*i-1)/(r-n)},numeric._myIndexOf=function _myIndexOf(e){var t,n=this.length;for(t=0;n>t;++t)if(this[t]===e)return t;return-1},numeric.myIndexOf=Array.prototype.indexOf?Array.prototype.indexOf:numeric._myIndexOf,numeric.precision=4,numeric.largeArray=50,numeric.compile=function(){var e=Array.prototype.slice.call(arguments),t=e.pop();return t="return function ("+e.join(",")+") {"+t+"}",Function(["numeric"],t)(numeric)},numeric.prettyPrint=function prettyPrint(e){function t(e){if(0===e)return"0";if(isNaN(e))return"NaN";if(0>e)return"-"+t(-e);if(isFinite(e)){var n=Math.floor(Math.log(e)/Math.log(10)),r=e/Math.pow(10,n),i=r.toPrecision(numeric.precision);return 10===parseFloat(i)&&(n++,r=1,i=r.toPrecision(numeric.precision)),""+parseFloat(i)+"e"+(""+n)}return"Infinity"}function n(e){var i;if(e===void 0)return r.push(Array(numeric.precision+8).join(" ")),!1;if("string"==typeof e)return r.push(\'"\'+e+\'"\'),!1;if("boolean"==typeof e)return r.push(""+e),!1;if("number"==typeof e){var a=t(e),s=e.toPrecision(numeric.precision),o=""+parseFloat(""+e),u=[a,s,o,""+parseFloat(s),""+parseFloat(o)];for(i=1;u.length>i;i++)u[i].length<a.length&&(a=u[i]);return r.push(Array(numeric.precision+8-a.length).join(" ")+a),!1}if(null===e)return r.push("null"),!1;if("function"==typeof e){r.push(""+e);var c=!1;for(i in e)e.hasOwnProperty(i)&&(c?r.push(",\\n"):r.push("\\n{"),c=!0,r.push(i),r.push(": \\n"),n(e[i]));return c&&r.push("}\\n"),!0}if(e instanceof Array){if(e.length>numeric.largeArray)return r.push("...Large Array..."),!0;var c=!1;for(r.push("["),i=0;e.length>i;i++)i>0&&(r.push(","),c&&r.push("\\n ")),c=n(e[i]);return r.push("]"),!0}r.push("{");var c=!1;for(i in e)e.hasOwnProperty(i)&&(c&&r.push(",\\n"),c=!0,r.push(i),r.push(": \\n"),n(e[i]));return r.push("}"),!0}var r=[];return n(e),r.join("")},numeric.parseDate=function parseDate(e){function t(e){if("string"==typeof e)return Date.parse(e.replace(/-/g,"/"));if(!(e instanceof Array))throw Error("parseDate: parameter must be arrays of strings");var n,r=[];for(n=0;e.length>n;n++)r[n]=t(e[n]);return r}return t(e)},numeric.parseFloat=function parseFloat_(e){function t(e){if("string"==typeof e)return parseFloat(e);if(!(e instanceof Array))throw Error("parseFloat: parameter must be arrays of strings");var n,r=[];for(n=0;e.length>n;n++)r[n]=t(e[n]);return r}return t(e)},numeric.parseCSV=function parseCSV(e){var t,n,r=e.split("\\n"),i=[],a=/(([^\'",]*)|(\'[^\']*\')|("[^"]*")),/g,s=/^\\s*(([+-]?[0-9]+(\\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\\.[0-9]+)?(e[+-]?[0-9]+)?))\\s*$/,o=function(e){return e.substr(0,e.length-1)},u=0;for(n=0;r.length>n;n++){var c,l=(r[n]+",").match(a);if(l.length>0){for(i[u]=[],t=0;l.length>t;t++)c=o(l[t]),i[u][t]=s.test(c)?parseFloat(c):c;u++}}return i},numeric.toCSV=function toCSV(e){var t,n,r,i,a,s,o=numeric.dim(e);for(r=o[0],i=o[1],s=[],t=0;r>t;t++){for(a=[],n=0;r>n;n++)a[n]=""+e[t][n];s[t]=a.join(", ")}return s.join("\\n")+"\\n"},numeric.getURL=function getURL(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(),t},numeric.imageURL=function imageURL(e){function t(e){var t,n,r,i,a,s,o,u,c=e.length,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",h="";for(t=0;c>t;t+=3)n=e[t],r=e[t+1],i=e[t+2],a=n>>2,s=((3&n)<<4)+(r>>4),o=((15&r)<<2)+(i>>6),u=63&i,t+1>=c?o=u=64:t+2>=c&&(u=64),h+=l.charAt(a)+l.charAt(s)+l.charAt(o)+l.charAt(u);return h}function n(e,t,n){t===void 0&&(t=0),n===void 0&&(n=e.length);var r,i=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],a=-1,s=0;for(e.length,r=t;n>r;r++)s=255&(a^e[r]),a=a>>>8^i[s];return-1^a}var r,i,a,s,o,u,c,l,h,f,p=e[0].length,m=e[0][0].length,d=[137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,255&m>>24,255&m>>16,255&m>>8,255&m,255&p>>24,255&p>>16,255&p>>8,255&p,8,2,0,0,0,-1,-2,-3,-4,-5,-6,-7,-8,73,68,65,84,8,29];for(f=n(d,12,29),d[29]=255&f>>24,d[30]=255&f>>16,d[31]=255&f>>8,d[32]=255&f,r=1,i=0,c=0;p>c;c++){for(p-1>c?d.push(0):d.push(1),o=255&3*m+1+(0===c),u=255&3*m+1+(0===c)>>8,d.push(o),d.push(u),d.push(255&~o),d.push(255&~u),0===c&&d.push(0),l=0;m>l;l++)for(a=0;3>a;a++)o=e[a][c][l],o=o>255?255:0>o?0:Math.round(o),r=(r+o)%65521,i=(i+r)%65521,d.push(o);d.push(0)}return h=(i<<16)+r,d.push(255&h>>24),d.push(255&h>>16),d.push(255&h>>8),d.push(255&h),s=d.length-41,d[33]=255&s>>24,d[34]=255&s>>16,d[35]=255&s>>8,d[36]=255&s,f=n(d,37),d.push(255&f>>24),d.push(255&f>>16),d.push(255&f>>8),d.push(255&f),d.push(0),d.push(0),d.push(0),d.push(0),d.push(73),d.push(69),d.push(78),d.push(68),d.push(174),d.push(66),d.push(96),d.push(130),"data:image/png;base64,"+t(d)},numeric._dim=function _dim(e){for(var t=[];"object"==typeof e;)t.push(e.length),e=e[0];return t},numeric.dim=function dim(e){var t,n;return"object"==typeof e?(t=e[0],"object"==typeof t?(n=t[0],"object"==typeof n?numeric._dim(e):[e.length,t.length]):[e.length]):[]},numeric.mapreduce=function mapreduce(e,t){return numeric.compile("x","accum","_s","_k",\'if(typeof accum === "undefined") accum = \'+t+";\\n"+\'if(typeof x === "number") { var xi = x; \'+e+"; return accum; }\\n"+\'if(typeof _s === "undefined") _s = numeric.dim(x);\\n\'+\'if(typeof _k === "undefined") _k = 0;\\n\'+"var _n = _s[_k];\\n"+"var i,xi;\\n"+"if(_k < _s.length-1) {\\n"+"    for(i=_n-1;i>=0;i--) {\\n"+"        accum = arguments.callee(x[i],accum,_s,_k+1);\\n"+"    }"+"    return accum;\\n"+"}\\n"+"for(i=_n-1;i>=1;i-=2) { \\n"+"    xi = x[i];\\n"+"    "+e+";\\n"+"    xi = x[i-1];\\n"+"    "+e+";\\n"+"}\\n"+"if(i === 0) {\\n"+"    xi = x[i];\\n"+"    "+e+"\\n"+"}\\n"+"return accum;")},numeric.mapreduce2=function mapreduce2(e,t){return numeric.compile("x","var n = x.length;\\nvar i,xi;\\n"+t+"\\n"+"for(i=n-1;i!==-1;--i) { \\n"+"    xi = x[i];\\n"+"    "+e+"\\n"+"}\\n"+"return accum;")},numeric.same=function same(e,t){var n,r;if(!(e instanceof Array&&t instanceof Array))return!1;if(r=e.length,r!==t.length)return!1;for(n=0;r>n;n++)if(e[n]!==t[n]){if("object"!=typeof e[n])return!1;if(!same(e[n],t[n]))return!1}return!0},numeric.rep=function rep(e,t,n){n===void 0&&(n=0);var r,i=e[n],a=Array(i);if(n===e.length-1){for(r=i-2;r>=0;r-=2)a[r+1]=t,a[r]=t;return-1===r&&(a[0]=t),a}for(r=i-1;r>=0;r--)a[r]=numeric.rep(e,t,n+1);return a},numeric.dotMMsmall=function dotMMsmall(e,t){var n,r,i,a,s,o,u,c,l,h,f;for(a=e.length,s=t.length,o=t[0].length,u=Array(a),n=a-1;n>=0;n--){for(c=Array(o),l=e[n],i=o-1;i>=0;i--){for(h=l[s-1]*t[s-1][i],r=s-2;r>=1;r-=2)f=r-1,h+=l[r]*t[r][i]+l[f]*t[f][i];0===r&&(h+=l[0]*t[0][i]),c[i]=h}u[n]=c}return u},numeric._getCol=function _getCol(e,t,n){var r,i=e.length;for(r=i-1;r>0;--r)n[r]=e[r][t],--r,n[r]=e[r][t];0===r&&(n[0]=e[0][t])},numeric.dotMMbig=function dotMMbig(e,t){var n,r,i,a,s=numeric._getCol,o=t.length,u=Array(o),c=e.length,l=t[0].length,h=Array(c),f=numeric.dotVV;for(--o,--c,r=c;-1!==r;--r)h[r]=Array(l);for(--l,r=l;-1!==r;--r)for(s(t,r,u),i=c;-1!==i;--i)a=0,n=e[i],h[i][r]=f(n,u);return h},numeric.dotMV=function dotMV(e,t){var n,r=e.length;t.length;var i=Array(r),a=numeric.dotVV;for(n=r-1;n>=0;n--)i[n]=a(e[n],t);return i},numeric.dotVM=function dotVM(e,t){var n,r,i,a,s,o,u;for(i=e.length,a=t[0].length,s=Array(a),r=a-1;r>=0;r--){for(o=e[i-1]*t[i-1][r],n=i-2;n>=1;n-=2)u=n-1,o+=e[n]*t[n][r]+e[u]*t[u][r];0===n&&(o+=e[0]*t[0][r]),s[r]=o}return s},numeric.dotVV=function dotVV(e,t){var n,r,i=e.length,a=e[i-1]*t[i-1];for(n=i-2;n>=1;n-=2)r=n-1,a+=e[n]*t[n]+e[r]*t[r];return 0===n&&(a+=e[0]*t[0]),a},numeric.dot=function dot(e,t){var n=numeric.dim;switch(1e3*n(e).length+n(t).length){case 2002:return 10>t.length?numeric.dotMMsmall(e,t):numeric.dotMMbig(e,t);case 2001:return numeric.dotMV(e,t);case 1002:return numeric.dotVM(e,t);case 1001:return numeric.dotVV(e,t);case 1e3:return numeric.mulVS(e,t);case 1:return numeric.mulSV(e,t);case 0:return e*t;default:throw Error("numeric.dot only works on vectors and matrices")}},numeric.diag=function diag(e){var t,n,r,i,a=e.length,s=Array(a);for(t=a-1;t>=0;t--){for(i=Array(a),n=t+2,r=a-1;r>=n;r-=2)i[r]=0,i[r-1]=0;for(r>t&&(i[r]=0),i[t]=e[t],r=t-1;r>=1;r-=2)i[r]=0,i[r-1]=0;0===r&&(i[0]=0),s[t]=i}return s},numeric.getDiag=function(e){var t,n=Math.min(e.length,e[0].length),r=Array(n);for(t=n-1;t>=1;--t)r[t]=e[t][t],--t,r[t]=e[t][t];return 0===t&&(r[0]=e[0][0]),r},numeric.identity=function identity(e){return numeric.diag(numeric.rep([e],1))},numeric.pointwise=function pointwise(e,t,n){n===void 0&&(n="");var r,i,a=[],s=/\\[i\\]$/,o="",u=!1;for(r=0;e.length>r;r++)s.test(e[r])?(i=e[r].substring(0,e[r].length-3),o=i):i=e[r],"ret"===i&&(u=!0),a.push(i);return a[e.length]="_s",a[e.length+1]="_k",a[e.length+2]=\'if(typeof _s === "undefined") _s = numeric.dim(\'+o+");\\n"+\'if(typeof _k === "undefined") _k = 0;\\n\'+"var _n = _s[_k];\\n"+"var i"+(u?"":", ret = Array(_n)")+";\\n"+"if(_k < _s.length-1) {\\n"+"    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee("+e.join(",")+",_s,_k+1);\\n"+"    return ret;\\n"+"}\\n"+n+"\\n"+"for(i=_n-1;i!==-1;--i) {\\n"+"    "+t+"\\n"+"}\\n"+"return ret;",numeric.compile.apply(null,a)},numeric.pointwise2=function pointwise2(e,t,n){n===void 0&&(n="");var r,i,a=[],s=/\\[i\\]$/,o="",u=!1;for(r=0;e.length>r;r++)s.test(e[r])?(i=e[r].substring(0,e[r].length-3),o=i):i=e[r],"ret"===i&&(u=!0),a.push(i);return a[e.length]="var _n = "+o+".length;\\n"+"var i"+(u?"":", ret = Array(_n)")+";\\n"+n+"\\n"+"for(i=_n-1;i!==-1;--i) {\\n"+t+"\\n"+"}\\n"+"return ret;",numeric.compile.apply(null,a)},numeric._biforeach=function _biforeach(e,t,n,r,i){if(r===n.length-1)return i(e,t),void 0;var a,s=n[r];for(a=s-1;a>=0;a--)_biforeach("object"==typeof e?e[a]:e,"object"==typeof t?t[a]:t,n,r+1,i)},numeric._biforeach2=function _biforeach2(e,t,n,r,i){if(r===n.length-1)return i(e,t);var a,s=n[r],o=Array(s);for(a=s-1;a>=0;--a)o[a]=_biforeach2("object"==typeof e?e[a]:e,"object"==typeof t?t[a]:t,n,r+1,i);return o},numeric._foreach=function _foreach(e,t,n,r){if(n===t.length-1)return r(e),void 0;var i,a=t[n];for(i=a-1;i>=0;i--)_foreach(e[i],t,n+1,r)},numeric._foreach2=function _foreach2(e,t,n,r){if(n===t.length-1)return r(e);var i,a=t[n],s=Array(a);for(i=a-1;i>=0;i--)s[i]=_foreach2(e[i],t,n+1,r);return s},numeric.ops2={add:"+",sub:"-",mul:"*",div:"/",mod:"%",and:"&&",or:"||",eq:"===",neq:"!==",lt:"<",gt:">",leq:"<=",geq:">=",band:"&",bor:"|",bxor:"^",lshift:"<<",rshift:">>",rrshift:">>>"},numeric.opseq={addeq:"+=",subeq:"-=",muleq:"*=",diveq:"/=",modeq:"%=",lshifteq:"<<=",rshifteq:">>=",rrshifteq:">>>=",bandeq:"&=",boreq:"|=",bxoreq:"^="},numeric.mathfuns=["abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan","isNaN","isFinite"],numeric.mathfuns2=["atan2","pow","max","min"],numeric.ops1={neg:"-",not:"!",bnot:"~",clone:""},numeric.mapreducers={any:["if(xi) return true;","var accum = false;"],all:["if(!xi) return false;","var accum = true;"],sum:["accum += xi;","var accum = 0;"],prod:["accum *= xi;","var accum = 1;"],norm2Squared:["accum += xi*xi;","var accum = 0;"],norminf:["accum = max(accum,abs(xi));","var accum = 0, max = Math.max, abs = Math.abs;"],norm1:["accum += abs(xi);","var accum = 0, abs = Math.abs;"],sup:["accum = max(accum,xi);","var accum = -Infinity, max = Math.max;"],inf:["accum = min(accum,xi);","var accum = Infinity, min = Math.min;"]},function(){var e,t;for(e=0;numeric.mathfuns2.length>e;++e)t=numeric.mathfuns2[e],numeric.ops2[t]=t;for(e in numeric.ops2)if(numeric.ops2.hasOwnProperty(e)){t=numeric.ops2[e];var n,r,i="";-1!==numeric.myIndexOf.call(numeric.mathfuns2,e)?(i="var "+t+" = Math."+t+";\\n",n=function(e,n,r){return e+" = "+t+"("+n+","+r+")"},r=function(e,n){return e+" = "+t+"("+e+","+n+")"}):(n=function(e,n,r){return e+" = "+n+" "+t+" "+r},r=numeric.opseq.hasOwnProperty(e+"eq")?function(e,n){return e+" "+t+"= "+n}:function(e,n){return e+" = "+e+" "+t+" "+n}),numeric[e+"VV"]=numeric.pointwise2(["x[i]","y[i]"],n("ret[i]","x[i]","y[i]"),i),numeric[e+"SV"]=numeric.pointwise2(["x","y[i]"],n("ret[i]","x","y[i]"),i),numeric[e+"VS"]=numeric.pointwise2(["x[i]","y"],n("ret[i]","x[i]","y"),i),numeric[e]=numeric.compile("var n = arguments.length, i, x = arguments[0], y;\\nvar VV = numeric."+e+"VV, VS = numeric."+e+"VS, SV = numeric."+e+"SV;\\n"+"var dim = numeric.dim;\\n"+"for(i=1;i!==n;++i) { \\n"+"  y = arguments[i];\\n"+\'  if(typeof x === "object") {\\n\'+\'      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\\n\'+"      else x = numeric._biforeach2(x,y,dim(x),0,VS);\\n"+\'  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\\n\'+"  else "+r("x","y")+"\\n"+"}\\nreturn x;\\n"),numeric[t]=numeric[e],numeric[e+"eqV"]=numeric.pointwise2(["ret[i]","x[i]"],r("ret[i]","x[i]"),i),numeric[e+"eqS"]=numeric.pointwise2(["ret[i]","x"],r("ret[i]","x"),i),numeric[e+"eq"]=numeric.compile("var n = arguments.length, i, x = arguments[0], y;\\nvar V = numeric."+e+"eqV, S = numeric."+e+"eqS\\n"+"var s = numeric.dim(x);\\n"+"for(i=1;i!==n;++i) { \\n"+"  y = arguments[i];\\n"+\'  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\\n\'+"  else numeric._biforeach(x,y,s,0,S);\\n"+"}\\nreturn x;\\n")}for(e=0;numeric.mathfuns2.length>e;++e)t=numeric.mathfuns2[e],delete numeric.ops2[t];\nfor(e=0;numeric.mathfuns.length>e;++e)t=numeric.mathfuns[e],numeric.ops1[t]=t;for(e in numeric.ops1)numeric.ops1.hasOwnProperty(e)&&(i="",t=numeric.ops1[e],-1!==numeric.myIndexOf.call(numeric.mathfuns,e)&&Math.hasOwnProperty(t)&&(i="var "+t+" = Math."+t+";\\n"),numeric[e+"eqV"]=numeric.pointwise2(["ret[i]"],"ret[i] = "+t+"(ret[i]);",i),numeric[e+"eq"]=numeric.compile("x",\'if(typeof x !== "object") return \'+t+"x\\n"+"var i;\\n"+"var V = numeric."+e+"eqV;\\n"+"var s = numeric.dim(x);\\n"+"numeric._foreach(x,s,0,V);\\n"+"return x;\\n"),numeric[e+"V"]=numeric.pointwise2(["x[i]"],"ret[i] = "+t+"(x[i]);",i),numeric[e]=numeric.compile("x",\'if(typeof x !== "object") return \'+t+"(x)\\n"+"var i;\\n"+"var V = numeric."+e+"V;\\n"+"var s = numeric.dim(x);\\n"+"return numeric._foreach2(x,s,0,V);\\n"));for(e=0;numeric.mathfuns.length>e;++e)t=numeric.mathfuns[e],delete numeric.ops1[t];for(e in numeric.mapreducers)numeric.mapreducers.hasOwnProperty(e)&&(t=numeric.mapreducers[e],numeric[e+"V"]=numeric.mapreduce2(t[0],t[1]),numeric[e]=numeric.compile("x","s","k",t[1]+\'if(typeof x !== "object") {\'+"    xi = x;\\n"+t[0]+"\\n"+"    return accum;\\n"+"}"+\'if(typeof s === "undefined") s = numeric.dim(x);\\n\'+\'if(typeof k === "undefined") k = 0;\\n\'+"if(k === s.length-1) return numeric."+e+"V(x);\\n"+"var xi;\\n"+"var n = x.length, i;\\n"+"for(i=n-1;i!==-1;--i) {\\n"+"   xi = arguments.callee(x[i]);\\n"+t[0]+"\\n"+"}\\n"+"return accum;\\n"))}(),numeric.truncVV=numeric.pointwise(["x[i]","y[i]"],"ret[i] = round(x[i]/y[i])*y[i];","var round = Math.round;"),numeric.truncVS=numeric.pointwise(["x[i]","y"],"ret[i] = round(x[i]/y)*y;","var round = Math.round;"),numeric.truncSV=numeric.pointwise(["x","y[i]"],"ret[i] = round(x/y[i])*y[i];","var round = Math.round;"),numeric.trunc=function trunc(e,t){return"object"==typeof e?"object"==typeof t?numeric.truncVV(e,t):numeric.truncVS(e,t):"object"==typeof t?numeric.truncSV(e,t):Math.round(e/t)*t},numeric.inv=function inv(e){var t,n,r,i,a,s,o,e,u=numeric.dim(e),c=Math.abs,l=u[0],h=u[1],f=numeric.clone(e),p=numeric.identity(l);for(s=0;h>s;++s){var m=-1,d=-1;for(a=s;a!==l;++a)o=c(f[a][s]),o>d&&(m=a,d=o);for(n=f[m],f[m]=f[s],f[s]=n,i=p[m],p[m]=p[s],p[s]=i,e=n[s],o=s;o!==h;++o)n[o]/=e;for(o=h-1;-1!==o;--o)i[o]/=e;for(a=l-1;-1!==a;--a)if(a!==s){for(t=f[a],r=p[a],e=t[s],o=s+1;o!==h;++o)t[o]-=n[o]*e;for(o=h-1;o>0;--o)r[o]-=i[o]*e,--o,r[o]-=i[o]*e;0===o&&(r[0]-=i[0]*e)}}return p},numeric.det=function det(e){var t=numeric.dim(e);if(2!==t.length||t[0]!==t[1])throw Error("numeric: det() only works on square matrices");var n,r,i,a,s,o,u,c,l=t[0],h=1,f=numeric.clone(e);for(r=0;l-1>r;r++){for(i=r,n=r+1;l>n;n++)Math.abs(f[n][r])>Math.abs(f[i][r])&&(i=n);for(i!==r&&(u=f[i],f[i]=f[r],f[r]=u,h*=-1),a=f[r],n=r+1;l>n;n++){for(s=f[n],o=s[r]/a[r],i=r+1;l-1>i;i+=2)c=i+1,s[i]-=a[i]*o,s[c]-=a[c]*o;i!==l&&(s[i]-=a[i]*o)}if(0===a[r])return 0;h*=a[r]}return h*f[r][r]},numeric.transpose=function transpose(e){var t,n,r,i,a,s=e.length,o=e[0].length,u=Array(o);for(n=0;o>n;n++)u[n]=Array(s);for(t=s-1;t>=1;t-=2){for(i=e[t],r=e[t-1],n=o-1;n>=1;--n)a=u[n],a[t]=i[n],a[t-1]=r[n],--n,a=u[n],a[t]=i[n],a[t-1]=r[n];0===n&&(a=u[0],a[t]=i[0],a[t-1]=r[0])}if(0===t){for(r=e[0],n=o-1;n>=1;--n)u[n][0]=r[n],--n,u[n][0]=r[n];0===n&&(u[0][0]=r[0])}return u},numeric.negtranspose=function negtranspose(e){var t,n,r,i,a,s=e.length,o=e[0].length,u=Array(o);for(n=0;o>n;n++)u[n]=Array(s);for(t=s-1;t>=1;t-=2){for(i=e[t],r=e[t-1],n=o-1;n>=1;--n)a=u[n],a[t]=-i[n],a[t-1]=-r[n],--n,a=u[n],a[t]=-i[n],a[t-1]=-r[n];0===n&&(a=u[0],a[t]=-i[0],a[t-1]=-r[0])}if(0===t){for(r=e[0],n=o-1;n>=1;--n)u[n][0]=-r[n],--n,u[n][0]=-r[n];0===n&&(u[0][0]=-r[0])}return u},numeric._random=function _random(e,t){var n,r,i=e[t],a=Array(i);if(t===e.length-1){for(r=Math.random,n=i-1;n>=1;n-=2)a[n]=r(),a[n-1]=r();return 0===n&&(a[0]=r()),a}for(n=i-1;n>=0;n--)a[n]=_random(e,t+1);return a},numeric.random=function random(e){return numeric._random(e,0)},numeric.norm2=function norm2(e){return Math.sqrt(numeric.norm2Squared(e))},numeric.linspace=function linspace(e,t,n){if(n===void 0&&(n=Math.max(Math.round(t-e)+1,1)),2>n)return 1===n?[e]:[];var r,i=Array(n);for(n--,r=n;r>=0;r--)i[r]=(r*t+(n-r)*e)/n;return i},numeric.getBlock=function getBlock(e,t,n){function r(e,a){var s,o=t[a],u=n[a]-o,c=Array(u);if(a===i.length-1){for(s=u;s>=0;s--)c[s]=e[s+o];return c}for(s=u;s>=0;s--)c[s]=r(e[s+o],a+1);return c}var i=numeric.dim(e);return r(e,0)},numeric.setBlock=function setBlock(e,t,n,r){function i(e,r,s){var o,u=t[s],c=n[s]-u;if(s===a.length-1)for(o=c;o>=0;o--)e[o+u]=r[o];for(o=c;o>=0;o--)i(e[o+u],r[o],s+1)}var a=numeric.dim(e);return i(e,r,0),e},numeric.getRange=function getRange(e,t,n){var r,i,a,s,o=t.length,u=n.length,c=Array(o);for(r=o-1;-1!==r;--r)for(c[r]=Array(u),a=c[r],s=e[t[r]],i=u-1;-1!==i;--i)a[i]=s[n[i]];return c},numeric.blockMatrix=function blockMatrix(e){var t=numeric.dim(e);if(4>t.length)return numeric.blockMatrix([e]);var n,r,i,a,s,o=t[0],u=t[1];for(n=0,r=0,i=0;o>i;++i)n+=e[i][0].length;for(a=0;u>a;++a)r+=e[0][a][0].length;var c=Array(n);for(i=0;n>i;++i)c[i]=Array(r);var l,h,f,p,m,d=0;for(i=0;o>i;++i){for(l=r,a=u-1;-1!==a;--a)for(s=e[i][a],l-=s[0].length,f=s.length-1;-1!==f;--f)for(m=s[f],h=c[d+f],p=m.length-1;-1!==p;--p)h[l+p]=m[p];d+=e[i][0].length}return c},numeric.tensor=function tensor(e,t){if("number"==typeof e||"number"==typeof t)return numeric.mul(e,t);var n=numeric.dim(e),r=numeric.dim(t);if(1!==n.length||1!==r.length)throw Error("numeric: tensor product is only defined for vectors");var i,a,s,o,u=n[0],c=r[0],l=Array(u);for(a=u-1;a>=0;a--){for(i=Array(c),o=e[a],s=c-1;s>=3;--s)i[s]=o*t[s],--s,i[s]=o*t[s],--s,i[s]=o*t[s],--s,i[s]=o*t[s];for(;s>=0;)i[s]=o*t[s],--s;l[a]=i}return l},numeric.T=function T(e,t){this.x=e,this.y=t},numeric.t=function t(e,t){return new numeric.T(e,t)},numeric.Tbinop=function Tbinop(e,t,n,r,i){if(numeric.indexOf,"string"!=typeof i){var a;i="";for(a in numeric)numeric.hasOwnProperty(a)&&(e.indexOf(a)>=0||t.indexOf(a)>=0||n.indexOf(a)>=0||r.indexOf(a)>=0)&&a.length>1&&(i+="var "+a+" = numeric."+a+";\\n")}return numeric.compile(["y"],"var x = this;\\nif(!(y instanceof numeric.T)) { y = new numeric.T(y); }\\n"+i+"\\n"+"if(x.y) {"+"  if(y.y) {"+"    return new numeric.T("+r+");\\n"+"  }\\n"+"  return new numeric.T("+n+");\\n"+"}\\n"+"if(y.y) {\\n"+"  return new numeric.T("+t+");\\n"+"}\\n"+"return new numeric.T("+e+");\\n")},numeric.T.prototype.add=numeric.Tbinop("add(x.x,y.x)","add(x.x,y.x),y.y","add(x.x,y.x),x.y","add(x.x,y.x),add(x.y,y.y)"),numeric.T.prototype.sub=numeric.Tbinop("sub(x.x,y.x)","sub(x.x,y.x),neg(y.y)","sub(x.x,y.x),x.y","sub(x.x,y.x),sub(x.y,y.y)"),numeric.T.prototype.mul=numeric.Tbinop("mul(x.x,y.x)","mul(x.x,y.x),mul(x.x,y.y)","mul(x.x,y.x),mul(x.y,y.x)","sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))"),numeric.T.prototype.reciprocal=function reciprocal(){var e=numeric.mul,t=numeric.div;if(this.y){var n=numeric.add(e(this.x,this.x),e(this.y,this.y));return new numeric.T(t(this.x,n),t(numeric.neg(this.y),n))}return new T(t(1,this.x))},numeric.T.prototype.div=function div(e){if(e instanceof numeric.T||(e=new numeric.T(e)),e.y)return this.mul(e.reciprocal());var t=numeric.div;return this.y?new numeric.T(t(this.x,e.x),t(this.y,e.x)):new numeric.T(t(this.x,e.x))},numeric.T.prototype.dot=numeric.Tbinop("dot(x.x,y.x)","dot(x.x,y.x),dot(x.x,y.y)","dot(x.x,y.x),dot(x.y,y.x)","sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))"),numeric.T.prototype.transpose=function transpose(){var e=numeric.transpose,t=this.x,n=this.y;return n?new numeric.T(e(t),e(n)):new numeric.T(e(t))},numeric.T.prototype.transjugate=function transjugate(){var e=numeric.transpose,t=this.x,n=this.y;return n?new numeric.T(e(t),numeric.negtranspose(n)):new numeric.T(e(t))},numeric.Tunop=function Tunop(e,t,n){return"string"!=typeof n&&(n=""),numeric.compile("var x = this;\\n"+n+"\\n"+"if(x.y) {"+"  "+t+"\\n"+"}\\n"+e+"\\n")},numeric.T.prototype.exp=numeric.Tunop("return new numeric.T(ex);","return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex));","var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;"),numeric.T.prototype.conj=numeric.Tunop("return new numeric.T(x.x);","return new numeric.T(x.x,numeric.neg(x.y));"),numeric.T.prototype.neg=numeric.Tunop("return new numeric.T(neg(x.x));","return new numeric.T(neg(x.x),neg(x.y));","var neg = numeric.neg;"),numeric.T.prototype.sin=numeric.Tunop("return new numeric.T(numeric.sin(x.x));","return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));"),numeric.T.prototype.cos=numeric.Tunop("return new numeric.T(numeric.cos(x.x));","return x.exp().add(x.neg().exp()).div(2);"),numeric.T.prototype.abs=numeric.Tunop("return new numeric.T(numeric.abs(x.x));","return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));","var mul = numeric.mul;"),numeric.T.prototype.log=numeric.Tunop("return new numeric.T(numeric.log(x.x));","var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\\nreturn new numeric.T(numeric.log(r.x),theta.x);"),numeric.T.prototype.norm2=numeric.Tunop("return numeric.norm2(x.x);","var f = numeric.norm2Squared;\\nreturn Math.sqrt(f(x.x)+f(x.y));"),numeric.T.prototype.inv=function inv(){var e=this;if(e.y===void 0)return new numeric.T(numeric.inv(e.x));var t,n,r,i,a,s,o,u,c,l,h,t,n,r,f,p,m,d,g,v,y,b=e.x.length,x=numeric.identity(b),_=numeric.rep([b,b],0),M=numeric.clone(e.x),w=numeric.clone(e.y);for(t=0;b>t;t++){for(m=M[t][t],d=w[t][t],f=m*m+d*d,r=t,n=t+1;b>n;n++)m=M[n][t],d=w[n][t],p=m*m+d*d,p>f&&(r=n,f=p);for(r!==t&&(y=M[t],M[t]=M[r],M[r]=y,y=w[t],w[t]=w[r],w[r]=y,y=x[t],x[t]=x[r],x[r]=y,y=_[t],_[t]=_[r],_[r]=y),i=M[t],a=w[t],u=x[t],c=_[t],m=i[t],d=a[t],n=t+1;b>n;n++)g=i[n],v=a[n],i[n]=(g*m+v*d)/f,a[n]=(v*m-g*d)/f;for(n=0;b>n;n++)g=u[n],v=c[n],u[n]=(g*m+v*d)/f,c[n]=(v*m-g*d)/f;for(n=t+1;b>n;n++){for(s=M[n],o=w[n],l=x[n],h=_[n],m=s[t],d=o[t],r=t+1;b>r;r++)g=i[r],v=a[r],s[r]-=g*m-v*d,o[r]-=v*m+g*d;for(r=0;b>r;r++)g=u[r],v=c[r],l[r]-=g*m-v*d,h[r]-=v*m+g*d}}for(t=b-1;t>0;t--)for(u=x[t],c=_[t],n=t-1;n>=0;n--)for(l=x[n],h=_[n],m=M[n][t],d=w[n][t],r=b-1;r>=0;r--)g=u[r],v=c[r],l[r]-=m*g-d*v,h[r]-=m*v+d*g;return new numeric.T(x,_)},numeric.T.prototype.get=function get(e){var t,n=this.x,r=this.y,i=0,a=e.length;if(r){for(;a>i;)t=e[i],n=n[t],r=r[t],i++;return new numeric.T(n,r)}for(;a>i;)t=e[i],n=n[t],i++;return new numeric.T(n)},numeric.T.prototype.set=function set(e,t){var n,r=this.x,i=this.y,a=0,s=e.length,o=t.x,u=t.y;if(0===s)return u?this.y=u:i&&(this.y=void 0),this.x=r,this;if(u){for(i||(i=numeric.rep(numeric.dim(r),0),this.y=i);s-1>a;)n=e[a],r=r[n],i=i[n],a++;return n=e[a],r[n]=o,i[n]=u,this}if(i){for(;s-1>a;)n=e[a],r=r[n],i=i[n],a++;return n=e[a],r[n]=o,i[n]=o instanceof Array?numeric.rep(numeric.dim(o),0):0,this}for(;s-1>a;)n=e[a],r=r[n],a++;return n=e[a],r[n]=o,this},numeric.T.prototype.getRows=function getRows(e,t){var n,r,i=t-e+1,a=Array(i),s=this.x,o=this.y;for(n=e;t>=n;n++)a[n-e]=s[n];if(o){for(r=Array(i),n=e;t>=n;n++)r[n-e]=o[n];return new numeric.T(a,r)}return new numeric.T(a)},numeric.T.prototype.setRows=function setRows(e,t,n){var r,i=this.x,a=this.y,s=n.x,o=n.y;for(r=e;t>=r;r++)i[r]=s[r-e];if(o)for(a||(a=numeric.rep(numeric.dim(i),0),this.y=a),r=e;t>=r;r++)a[r]=o[r-e];else if(a)for(r=e;t>=r;r++)a[r]=numeric.rep([s[r-e].length],0);return this},numeric.T.prototype.getRow=function getRow(e){var t=this.x,n=this.y;return n?new numeric.T(t[e],n[e]):new numeric.T(t[e])},numeric.T.prototype.setRow=function setRow(e,t){var n=this.x,r=this.y,i=t.x,a=t.y;return n[e]=i,a?(r||(r=numeric.rep(numeric.dim(n),0),this.y=r),r[e]=a):r&&(r=numeric.rep([i.length],0)),this},numeric.T.prototype.getBlock=function getBlock(e,t){var n=this.x,r=this.y,i=numeric.getBlock;return r?new numeric.T(i(n,e,t),i(r,e,t)):new numeric.T(i(n,e,t))},numeric.T.prototype.setBlock=function setBlock(e,t,n){n instanceof numeric.T||(n=new numeric.T(n));var r=this.x,i=this.y,a=numeric.setBlock,s=n.x,o=n.y;return o?(i||(this.y=numeric.rep(numeric.dim(this),0),i=this.y),a(r,e,t,s),a(i,e,t,o),this):(a(r,e,t,s),i&&a(i,e,t,numeric.rep(numeric.dim(s),0)),void 0)},numeric.T.rep=function rep(e,t){var n=numeric.T;t instanceof n||(t=new n(t));var r=t.x,i=t.y,a=numeric.rep;return i?new n(a(e,r),a(e,i)):new n(a(e,r))},numeric.T.diag=function diag(e){e instanceof numeric.T||(e=new numeric.T(e));var t=e.x,n=e.y,r=numeric.diag;return n?new numeric.T(r(t),r(n)):new numeric.T(r(t))},numeric.T.eig=function eig(){if(this.y)throw Error("eig: not implemented for complex matrices.");return numeric.eig(this.x)},numeric.T.identity=function identity(e){return new numeric.T(numeric.identity(e))},numeric.T.prototype.getDiag=function getDiag(){var e=numeric,t=this.x,n=this.y;return n?new e.T(e.getDiag(t),e.getDiag(n)):new e.T(e.getDiag(t))},numeric.house=function house(e){var t=numeric.clone(e),n=e[0]>=0?1:-1,r=n*numeric.norm2(e);t[0]+=r;var i=numeric.norm2(t);if(0===i)throw Error("eig: internal error");return numeric.div(t,i)},numeric.toUpperHessenberg=function toUpperHessenberg(e){var t=numeric.dim(e);if(2!==t.length||t[0]!==t[1])throw Error("numeric: toUpperHessenberg() only works on square matrices");var n,r,i,a,s,o,u,c,l,h,f=t[0],p=numeric.clone(e),m=numeric.identity(f);for(r=0;f-2>r;r++){for(a=Array(f-r-1),n=r+1;f>n;n++)a[n-r-1]=p[n][r];if(numeric.norm2(a)>0){for(s=numeric.house(a),o=numeric.getBlock(p,[r+1,r],[f-1,f-1]),u=numeric.tensor(s,numeric.dot(s,o)),n=r+1;f>n;n++)for(c=p[n],l=u[n-r-1],i=r;f>i;i++)c[i]-=2*l[i-r];for(o=numeric.getBlock(p,[0,r+1],[f-1,f-1]),u=numeric.tensor(numeric.dot(o,s),s),n=0;f>n;n++)for(c=p[n],l=u[n],i=r+1;f>i;i++)c[i]-=2*l[i-r-1];for(o=Array(f-r-1),n=r+1;f>n;n++)o[n-r-1]=m[n];for(u=numeric.tensor(s,numeric.dot(s,o)),n=r+1;f>n;n++)for(h=m[n],l=u[n-r-1],i=0;f>i;i++)h[i]-=2*l[i]}}return{H:p,Q:m}},numeric.epsilon=2.220446049250313e-16,numeric.QRFrancis=function(e,t){t===void 0&&(t=1e4),e=numeric.clone(e),numeric.clone(e);var n,r,i,a,s,o,u,c,l,h,f,p,m,d,g,v,y,b,x=numeric.dim(e),_=x[0],M=numeric.identity(_);if(3>_)return{Q:M,B:[[0,_-1]]};var w=numeric.epsilon;for(b=0;t>b;b++){for(v=0;_-1>v;v++)if(Math.abs(e[v+1][v])<w*(Math.abs(e[v][v])+Math.abs(e[v+1][v+1]))){var I=numeric.QRFrancis(numeric.getBlock(e,[0,0],[v,v]),t),C=numeric.QRFrancis(numeric.getBlock(e,[v+1,v+1],[_-1,_-1]),t);for(p=Array(v+1),g=0;v>=g;g++)p[g]=M[g];for(m=numeric.dot(I.Q,p),g=0;v>=g;g++)M[g]=m[g];for(p=Array(_-v-1),g=v+1;_>g;g++)p[g-v-1]=M[g];for(m=numeric.dot(C.Q,p),g=v+1;_>g;g++)M[g]=m[g-v-1];return{Q:M,B:I.B.concat(numeric.add(C.B,v+1))}}if(i=e[_-2][_-2],a=e[_-2][_-1],s=e[_-1][_-2],o=e[_-1][_-1],c=i+o,u=i*o-a*s,l=numeric.getBlock(e,[0,0],[2,2]),c*c>=4*u){var S,T;S=.5*(c+Math.sqrt(c*c-4*u)),T=.5*(c-Math.sqrt(c*c-4*u)),l=numeric.add(numeric.sub(numeric.dot(l,l),numeric.mul(l,S+T)),numeric.diag(numeric.rep([3],S*T)))}else l=numeric.add(numeric.sub(numeric.dot(l,l),numeric.mul(l,c)),numeric.diag(numeric.rep([3],u)));for(n=[l[0][0],l[1][0],l[2][0]],r=numeric.house(n),p=[e[0],e[1],e[2]],m=numeric.tensor(r,numeric.dot(r,p)),g=0;3>g;g++)for(f=e[g],d=m[g],y=0;_>y;y++)f[y]-=2*d[y];for(p=numeric.getBlock(e,[0,0],[_-1,2]),m=numeric.tensor(numeric.dot(p,r),r),g=0;_>g;g++)for(f=e[g],d=m[g],y=0;3>y;y++)f[y]-=2*d[y];for(p=[M[0],M[1],M[2]],m=numeric.tensor(r,numeric.dot(r,p)),g=0;3>g;g++)for(h=M[g],d=m[g],y=0;_>y;y++)h[y]-=2*d[y];var E;for(v=0;_-2>v;v++){for(y=v;v+1>=y;y++)if(Math.abs(e[y+1][y])<w*(Math.abs(e[y][y])+Math.abs(e[y+1][y+1]))){var I=numeric.QRFrancis(numeric.getBlock(e,[0,0],[y,y]),t),C=numeric.QRFrancis(numeric.getBlock(e,[y+1,y+1],[_-1,_-1]),t);for(p=Array(y+1),g=0;y>=g;g++)p[g]=M[g];for(m=numeric.dot(I.Q,p),g=0;y>=g;g++)M[g]=m[g];for(p=Array(_-y-1),g=y+1;_>g;g++)p[g-y-1]=M[g];for(m=numeric.dot(C.Q,p),g=y+1;_>g;g++)M[g]=m[g-y-1];return{Q:M,B:I.B.concat(numeric.add(C.B,y+1))}}for(E=Math.min(_-1,v+3),n=Array(E-v),g=v+1;E>=g;g++)n[g-v-1]=e[g][v];for(r=numeric.house(n),p=numeric.getBlock(e,[v+1,v],[E,_-1]),m=numeric.tensor(r,numeric.dot(r,p)),g=v+1;E>=g;g++)for(f=e[g],d=m[g-v-1],y=v;_>y;y++)f[y]-=2*d[y-v];for(p=numeric.getBlock(e,[0,v+1],[_-1,E]),m=numeric.tensor(numeric.dot(p,r),r),g=0;_>g;g++)for(f=e[g],d=m[g],y=v+1;E>=y;y++)f[y]-=2*d[y-v-1];for(p=Array(E-v),g=v+1;E>=g;g++)p[g-v-1]=M[g];for(m=numeric.tensor(r,numeric.dot(r,p)),g=v+1;E>=g;g++)for(h=M[g],d=m[g-v-1],y=0;_>y;y++)h[y]-=2*d[y]}}throw Error("numeric: eigenvalue iteration does not converge -- increase maxiter?")},numeric.eig=function eig(e,t){var n,r,i,a,s,o,u,c,l,h,f,p,m,d,g,v,y,b=numeric.toUpperHessenberg(e),x=numeric.QRFrancis(b.H,t),_=numeric.T,M=e.length,w=x.B,I=numeric.dot(x.Q,numeric.dot(b.H,numeric.transpose(x.Q))),C=new _(numeric.dot(x.Q,b.Q)),S=w.length,T=Math.sqrt;for(r=0;S>r;r++)if(n=w[r][0],n===w[r][1]);else{if(a=n+1,s=I[n][n],o=I[n][a],u=I[a][n],c=I[a][a],0===o&&0===u)continue;l=-s-c,h=s*c-o*u,f=l*l-4*h,f>=0?(p=0>l?-.5*(l-T(f)):-.5*(l+T(f)),v=(s-p)*(s-p)+o*o,y=u*u+(c-p)*(c-p),v>y?(v=T(v),d=(s-p)/v,g=o/v):(y=T(y),d=u/y,g=(c-p)/y),i=new _([[g,-d],[d,g]]),C.setRows(n,a,i.dot(C.getRows(n,a)))):(p=-.5*l,m=.5*T(-f),v=(s-p)*(s-p)+o*o,y=u*u+(c-p)*(c-p),v>y?(v=T(v+m*m),d=(s-p)/v,g=o/v,p=0,m/=v):(y=T(y+m*m),d=u/y,g=(c-p)/y,p=m/y,m=0),i=new _([[g,-d],[d,g]],[[p,m],[m,-p]]),C.setRows(n,a,i.dot(C.getRows(n,a))))}var E=C.dot(e).dot(C.transjugate()),M=e.length,k=numeric.T.identity(M);for(a=0;M>a;a++)if(a>0)for(r=a-1;r>=0;r--){var A=E.get([r,r]),F=E.get([a,a]);numeric.neq(A.x,F.x)||numeric.neq(A.y,F.y)?(p=E.getRow(r).getBlock([r],[a-1]),m=k.getRow(a).getBlock([r],[a-1]),k.set([a,r],E.get([r,a]).neg().sub(p.dot(m)).div(A.sub(F)))):k.setRow(a,k.getRow(r))}for(a=0;M>a;a++)p=k.getRow(a),k.setRow(a,p.div(p.norm2()));return k=k.transpose(),k=C.transjugate().dot(k),{lambda:E.getDiag(),E:k}},numeric.ccsSparse=function ccsSparse(e){var t,n,r,i,a=e.length,s=[];for(r=a-1;-1!==r;--r){n=e[r];for(i in n){for(i=parseInt(i);i>=s.length;)s[s.length]=0;0!==n[i]&&s[i]++}}var t=s.length,o=Array(t+1);for(o[0]=0,r=0;t>r;++r)o[r+1]=o[r]+s[r];var u=Array(o[t]),c=Array(o[t]);for(r=a-1;-1!==r;--r){n=e[r];for(i in n)0!==n[i]&&(s[i]--,u[o[i]+s[i]]=r,c[o[i]+s[i]]=n[i])}return[o,u,c]},numeric.ccsFull=function ccsFull(e){var t,n,r,i,a=e[0],s=e[1],o=e[2],u=numeric.ccsDim(e),c=u[0],l=u[1],h=numeric.rep([c,l],0);for(t=0;l>t;t++)for(r=a[t],i=a[t+1],n=r;i>n;++n)h[s[n]][t]=o[n];return h},numeric.ccsTSolve=function ccsTSolve(e,t,n,r,i){function a(e){var t;if(0===n[e]){for(n[e]=1,t=s[e];s[e+1]>t;++t)a(o[t]);i[h]=e,++h}}var s=e[0],o=e[1],u=e[2],c=s.length-1,l=Math.max,h=0;r===void 0&&(n=numeric.rep([c],0)),r===void 0&&(r=numeric.linspace(0,n.length-1)),i===void 0&&(i=[]);var f,p,m,d,g,v,y;for(f=r.length-1;-1!==f;--f)a(r[f]);for(i.length=h,f=i.length-1;-1!==f;--f)n[i[f]]=0;for(f=r.length-1;-1!==f;--f)p=r[f],n[p]=t[p];for(f=i.length-1;-1!==f;--f){for(p=i[f],m=s[p],d=l(s[p+1],m),g=m;g!==d;++g)if(o[g]===p){n[p]/=u[g];break}for(y=n[p],g=m;g!==d;++g)v=o[g],v!==p&&(n[v]-=y*u[g])}return n},numeric.ccsDFS=function ccsDFS(e){this.k=Array(e),this.k1=Array(e),this.j=Array(e)},numeric.ccsDFS.prototype.dfs=function dfs(e,t,n,r,i,a){var s,o,u,c=0,l=i.length,h=this.k,f=this.k1,p=this.j;if(0===r[e])for(r[e]=1,p[0]=e,h[0]=o=t[e],f[0]=u=t[e+1];;)if(o>=u){if(i[l]=p[c],0===c)return;++l,--c,o=h[c],u=f[c]}else s=a[n[o]],0===r[s]?(r[s]=1,h[c]=o,++c,p[c]=s,o=t[s],f[c]=u=t[s+1]):++o},numeric.ccsLPSolve=function ccsLPSolve(e,t,n,r,i,a,s){var o=e[0],u=e[1],c=e[2];o.length-1;var l,h,f,p,m,d,g,v,y,b=t[0],x=t[1],_=t[2];for(h=b[i],f=b[i+1],r.length=0,l=h;f>l;++l)s.dfs(a[x[l]],o,u,n,r,a);for(l=r.length-1;-1!==l;--l)n[r[l]]=0;for(l=h;l!==f;++l)p=a[x[l]],n[p]=_[l];for(l=r.length-1;-1!==l;--l){for(p=r[l],m=o[p],d=o[p+1],g=m;d>g;++g)if(a[u[g]]===p){n[p]/=c[g];break}for(y=n[p],g=m;d>g;++g)v=a[u[g]],v!==p&&(n[v]-=y*c[g])}return n},numeric.ccsLUP1=function ccsLUP1(e,t){var n,r,i,a,s,o,u,c=e[0].length-1,l=[numeric.rep([c+1],0),[],[]],h=[numeric.rep([c+1],0),[],[]],f=l[0],p=l[1],m=l[2],d=h[0],g=h[1],v=h[2],y=numeric.rep([c],0),b=numeric.rep([c],0),x=numeric.ccsLPSolve,_=(Math.max,Math.abs),M=numeric.linspace(0,c-1),w=numeric.linspace(0,c-1),I=new numeric.ccsDFS(c);for(t===void 0&&(t=1),n=0;c>n;++n){for(x(l,e,y,b,n,w,I),a=-1,s=-1,r=b.length-1;-1!==r;--r)i=b[r],n>=i||(o=_(y[i]),o>a&&(s=i,a=o));for(t*a>_(y[n])&&(r=M[n],a=M[s],M[n]=a,w[a]=n,M[s]=r,w[r]=s,a=y[n],y[n]=y[s],y[s]=a),a=f[n],s=d[n],u=y[n],p[a]=M[n],m[a]=1,++a,r=b.length-1;-1!==r;--r)i=b[r],o=y[i],b[r]=0,y[i]=0,n>=i?(g[s]=i,v[s]=o,++s):(p[a]=M[i],m[a]=o/u,++a);f[n+1]=a,d[n+1]=s}for(r=p.length-1;-1!==r;--r)p[r]=w[p[r]];return{L:l,U:h,P:M,Pinv:w}},numeric.ccsDFS0=function ccsDFS0(e){this.k=Array(e),this.k1=Array(e),this.j=Array(e)},numeric.ccsDFS0.prototype.dfs=function dfs(e,t,n,r,i,a){var s,o,u,c=0,l=i.length,h=this.k,f=this.k1,p=this.j;if(0===r[e])for(r[e]=1,p[0]=e,h[0]=o=t[a[e]],f[0]=u=t[a[e]+1];;){if(isNaN(o))throw Error("Ow!");if(o>=u){if(i[l]=a[p[c]],0===c)return;++l,--c,o=h[c],u=f[c]}else s=n[o],0===r[s]?(r[s]=1,h[c]=o,++c,p[c]=s,s=a[s],o=t[s],f[c]=u=t[s+1]):++o}},numeric.ccsLPSolve0=function ccsLPSolve0(e,t,n,r,i,a,s,o){var u=e[0],c=e[1],l=e[2];u.length-1;var h,f,p,m,d,g,v,y,b,x=t[0],_=t[1],M=t[2];for(f=x[i],p=x[i+1],r.length=0,h=f;p>h;++h)o.dfs(_[h],u,c,n,r,a,s);for(h=r.length-1;-1!==h;--h)m=r[h],n[s[m]]=0;for(h=f;h!==p;++h)m=_[h],n[m]=M[h];for(h=r.length-1;-1!==h;--h){for(m=r[h],y=s[m],d=u[m],g=u[m+1],v=d;g>v;++v)if(c[v]===y){n[y]/=l[v];break}for(b=n[y],v=d;g>v;++v)n[c[v]]-=b*l[v];n[y]=b}},numeric.ccsLUP0=function ccsLUP0(e,t){var n,r,i,a,s,o,u,c=e[0].length-1,l=[numeric.rep([c+1],0),[],[]],h=[numeric.rep([c+1],0),[],[]],f=l[0],p=l[1],m=l[2],d=h[0],g=h[1],v=h[2],y=numeric.rep([c],0),b=numeric.rep([c],0),x=numeric.ccsLPSolve0,_=(Math.max,Math.abs),M=numeric.linspace(0,c-1),w=numeric.linspace(0,c-1),I=new numeric.ccsDFS0(c);for(t===void 0&&(t=1),n=0;c>n;++n){for(x(l,e,y,b,n,w,M,I),a=-1,s=-1,r=b.length-1;-1!==r;--r)i=b[r],n>=i||(o=_(y[M[i]]),o>a&&(s=i,a=o));for(t*a>_(y[M[n]])&&(r=M[n],a=M[s],M[n]=a,w[a]=n,M[s]=r,w[r]=s),a=f[n],s=d[n],u=y[M[n]],p[a]=M[n],m[a]=1,++a,r=b.length-1;-1!==r;--r)i=b[r],o=y[M[i]],b[r]=0,y[M[i]]=0,n>=i?(g[s]=i,v[s]=o,++s):(p[a]=M[i],m[a]=o/u,++a);f[n+1]=a,d[n+1]=s}for(r=p.length-1;-1!==r;--r)p[r]=w[p[r]];return{L:l,U:h,P:M,Pinv:w}},numeric.ccsLUP=numeric.ccsLUP0,numeric.ccsDim=function ccsDim(e){return[numeric.sup(e[1])+1,e[0].length-1]},numeric.ccsGetBlock=function ccsGetBlock(e,t,n){var r=numeric.ccsDim(e),i=r[0],a=r[1];t===void 0?t=numeric.linspace(0,i-1):"number"==typeof t&&(t=[t]),n===void 0?n=numeric.linspace(0,a-1):"number"==typeof n&&(n=[n]);var s,o,u,c,l,h=t.length,f=n.length,p=numeric.rep([a],0),m=[],d=[],g=[p,m,d],v=e[0],y=e[1],b=e[2],x=numeric.rep([i],0),_=0,M=numeric.rep([i],0);for(o=0;f>o;++o){c=n[o];var w=v[c],I=v[c+1];for(s=w;I>s;++s)u=y[s],M[u]=1,x[u]=b[s];for(s=0;h>s;++s)l=t[s],M[l]&&(m[_]=s,d[_]=x[t[s]],++_);for(s=w;I>s;++s)u=y[s],M[u]=0;p[o+1]=_}return g},numeric.ccsDot=function ccsDot(e,t){var n,r,i,a,s,o,u,c,l,h,f,p=e[0],m=e[1],d=e[2],g=t[0],v=t[1],y=t[2],b=numeric.ccsDim(e),x=numeric.ccsDim(t),_=b[0],M=(b[1],x[1]),w=numeric.rep([_],0),I=numeric.rep([_],0),C=Array(_),S=numeric.rep([M],0),T=[],E=[],k=[S,T,E];for(i=0;i!==M;++i){for(a=g[i],s=g[i+1],l=0,r=a;s>r;++r)for(h=v[r],f=y[r],o=p[h],u=p[h+1],n=o;u>n;++n)c=m[n],0===I[c]&&(C[l]=c,I[c]=1,l+=1),w[c]=w[c]+d[n]*f;for(a=S[i],s=a+l,S[i+1]=s,r=l-1;-1!==r;--r)f=a+r,n=C[r],T[f]=n,E[f]=w[n],I[n]=0,w[n]=0;S[i+1]=S[i]+l}return k},numeric.ccsLUPSolve=function ccsLUPSolve(e,t){var n=e.L,r=e.U;e.P;var i=t[0],a=!1;"object"!=typeof i&&(t=[[0,t.length],numeric.linspace(0,t.length-1),t],i=t[0],a=!0);var s,o,u,c,l,h,f=t[1],p=t[2],m=n[0].length-1,d=i.length-1,g=numeric.rep([m],0),v=Array(m),y=numeric.rep([m],0),b=Array(m),x=numeric.rep([d+1],0),_=[],M=[],w=numeric.ccsTSolve,I=0;for(s=0;d>s;++s){for(l=0,u=i[s],c=i[s+1],o=u;c>o;++o)h=e.Pinv[f[o]],b[l]=h,y[h]=p[o],++l;for(b.length=l,w(n,y,g,b,v),o=b.length-1;-1!==o;--o)y[b[o]]=0;if(w(r,g,y,v,b),a)return y;for(o=v.length-1;-1!==o;--o)g[v[o]]=0;for(o=b.length-1;-1!==o;--o)h=b[o],_[I]=h,M[I]=y[h],y[h]=0,++I;x[s+1]=I}return[x,_,M]},numeric.ccsbinop=function ccsbinop(e,t){return t===void 0&&(t=""),numeric.compile("X","Y","var Xi = X[0], Xj = X[1], Xv = X[2];\\nvar Yi = Y[0], Yj = Y[1], Yv = Y[2];\\nvar n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\\nvar Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\\nvar x = numeric.rep([m],0),y = numeric.rep([m],0);\\nvar xk,yk,zk;\\nvar i,j,j0,j1,k,p=0;\\n"+t+"for(i=0;i<n;++i) {\\n"+"  j0 = Xi[i]; j1 = Xi[i+1];\\n"+"  for(j=j0;j!==j1;++j) {\\n"+"    k = Xj[j];\\n"+"    x[k] = 1;\\n"+"    Zj[p] = k;\\n"+"    ++p;\\n"+"  }\\n"+"  j0 = Yi[i]; j1 = Yi[i+1];\\n"+"  for(j=j0;j!==j1;++j) {\\n"+"    k = Yj[j];\\n"+"    y[k] = Yv[j];\\n"+"    if(x[k] === 0) {\\n"+"      Zj[p] = k;\\n"+"      ++p;\\n"+"    }\\n"+"  }\\n"+"  Zi[i+1] = p;\\n"+"  j0 = Xi[i]; j1 = Xi[i+1];\\n"+"  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\\n"+"  j0 = Zi[i]; j1 = Zi[i+1];\\n"+"  for(j=j0;j!==j1;++j) {\\n"+"    k = Zj[j];\\n"+"    xk = x[k];\\n"+"    yk = y[k];\\n"+e+"\\n"+"    Zv[j] = zk;\\n"+"  }\\n"+"  j0 = Xi[i]; j1 = Xi[i+1];\\n"+"  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\\n"+"  j0 = Yi[i]; j1 = Yi[i+1];\\n"+"  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\\n"+"}\\n"+"return [Zi,Zj,Zv];")},function(){var k,A,B,C;for(k in numeric.ops2)A=isFinite(eval("1"+numeric.ops2[k]+"0"))?"[Y[0],Y[1],numeric."+k+"(X,Y[2])]":"NaN",B=isFinite(eval("0"+numeric.ops2[k]+"1"))?"[X[0],X[1],numeric."+k+"(X[2],Y)]":"NaN",C=isFinite(eval("1"+numeric.ops2[k]+"0"))&&isFinite(eval("0"+numeric.ops2[k]+"1"))?"numeric.ccs"+k+"MM(X,Y)":"NaN",numeric["ccs"+k+"MM"]=numeric.ccsbinop("zk = xk "+numeric.ops2[k]+"yk;"),numeric["ccs"+k]=numeric.compile("X","Y",\'if(typeof X === "number") return \'+A+";\\n"+\'if(typeof Y === "number") return \'+B+";\\n"+"return "+C+";\\n")}(),numeric.ccsScatter=function ccsScatter(e){var t,n=e[0],r=e[1],i=e[2],a=numeric.sup(r)+1,s=n.length,o=numeric.rep([a],0),u=Array(s),c=Array(s),l=numeric.rep([a],0);for(t=0;s>t;++t)l[r[t]]++;for(t=0;a>t;++t)o[t+1]=o[t]+l[t];var h,f,p=o.slice(0);for(t=0;s>t;++t)f=r[t],h=p[f],u[h]=n[t],c[h]=i[t],p[f]=p[f]+1;return[o,u,c]},numeric.ccsGather=function ccsGather(e){var t,n,r,i,a,s=e[0],o=e[1],u=e[2],c=s.length-1,l=o.length,h=Array(l),f=Array(l),p=Array(l);for(a=0,t=0;c>t;++t)for(r=s[t],i=s[t+1],n=r;n!==i;++n)f[a]=t,h[a]=o[n],p[a]=u[n],++a;return[h,f,p]},numeric.sdim=function dim(e,t,n){if(t===void 0&&(t=[]),"object"!=typeof e)return t;n===void 0&&(n=0),n in t||(t[n]=0),e.length>t[n]&&(t[n]=e.length);var r;for(r in e)e.hasOwnProperty(r)&&dim(e[r],t,n+1);return t},numeric.sclone=function clone(e,t,n){t===void 0&&(t=0),n===void 0&&(n=numeric.sdim(e).length);var r,i=Array(e.length);if(t===n-1){for(r in e)e.hasOwnProperty(r)&&(i[r]=e[r]);return i}for(r in e)e.hasOwnProperty(r)&&(i[r]=clone(e[r],t+1,n));return i},numeric.sdiag=function diag(e){var t,n,r=e.length,i=Array(r);for(t=r-1;t>=1;t-=2)n=t-1,i[t]=[],i[t][t]=e[t],i[n]=[],i[n][n]=e[n];return 0===t&&(i[0]=[],i[0][0]=e[t]),i},numeric.sidentity=function identity(e){return numeric.sdiag(numeric.rep([e],1))},numeric.stranspose=function transpose(e){var t,n,r,i=[];e.length;for(t in e)if(e.hasOwnProperty(t)){r=e[t];for(n in r)r.hasOwnProperty(n)&&("object"!=typeof i[n]&&(i[n]=[]),i[n][t]=r[n])}return i},numeric.sLUP=function LUP(){throw Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.")},numeric.sdotMM=function dotMM(e,t){var n,r,i,a,s,o,u,c=e.length,l=(t.length,numeric.stranspose(t)),h=l.length,f=Array(c);for(i=c-1;i>=0;i--){for(u=[],n=e[i],s=h-1;s>=0;s--){o=0,r=l[s];for(a in n)n.hasOwnProperty(a)&&a in r&&(o+=n[a]*r[a]);o&&(u[s]=o)}f[i]=u}return f},numeric.sdotMV=function dotMV(e,t){var n,r,i,a,s=e.length,o=Array(s);for(r=s-1;r>=0;r--){n=e[r],a=0;for(i in n)n.hasOwnProperty(i)&&t[i]&&(a+=n[i]*t[i]);a&&(o[r]=a)}return o},numeric.sdotVM=function dotMV(e,t){var n,r,i,a,s=[];for(n in e)if(e.hasOwnProperty(n)){i=t[n],a=e[n];for(r in i)i.hasOwnProperty(r)&&(s[r]||(s[r]=0),s[r]+=a*i[r])}return s},numeric.sdotVV=function dotVV(e,t){var n,r=0;for(n in e)e[n]&&t[n]&&(r+=e[n]*t[n]);return r},numeric.sdot=function dot(e,t){var n=numeric.sdim(e).length,r=numeric.sdim(t).length,i=1e3*n+r;switch(i){case 0:return e*t;case 1001:return numeric.sdotVV(e,t);case 2001:return numeric.sdotMV(e,t);case 1002:return numeric.sdotVM(e,t);case 2002:return numeric.sdotMM(e,t);default:throw Error("numeric.sdot not implemented for tensors of order "+n+" and "+r)}},numeric.sscatter=function scatter(e){var t,n,r,i,a=e[0].length,s=e.length,o=[];for(n=a-1;n>=0;--n)if(e[s-1][n]){for(i=o,r=0;s-2>r;r++)t=e[r][n],i[t]||(i[t]=[]),i=i[t];i[e[r][n]]=e[r+1][n]}return o},numeric.sgather=function gather(e,t,n){t===void 0&&(t=[]),n===void 0&&(n=[]);var r,i,a;r=n.length;for(i in e)if(e.hasOwnProperty(i))if(n[r]=parseInt(i),a=e[i],"number"==typeof a){if(a){if(0===t.length)for(i=r+1;i>=0;--i)t[i]=[];for(i=r;i>=0;--i)t[i].push(n[i]);t[r+1].push(a)}}else gather(a,t,n);return n.length>r&&n.pop(),t},numeric.cLU=function LU(e){var t,n,r,i,a,s,o=e[0],u=e[1],c=e[2],l=o.length,h=0;for(t=0;l>t;t++)o[t]>h&&(h=o[t]);h++;var f,p,m,d=Array(h),g=Array(h),v=numeric.rep([h],1/0),y=numeric.rep([h],-1/0);for(r=0;l>r;r++)t=o[r],n=u[r],v[t]>n&&(v[t]=n),n>y[t]&&(y[t]=n);for(t=0;h-1>t;t++)y[t]>y[t+1]&&(y[t+1]=y[t]);for(t=h-1;t>=1;t--)v[t]<v[t-1]&&(v[t-1]=v[t]);var b=0,x=0;for(t=0;h>t;t++)g[t]=numeric.rep([y[t]-v[t]+1],0),d[t]=numeric.rep([t-v[t]],0),b+=t-v[t]+1,x+=y[t]-t+1;for(r=0;l>r;r++)t=o[r],g[t][u[r]-v[t]]=c[r];for(t=0;h-1>t;t++)for(i=t-v[t],f=g[t],n=t+1;t>=v[n]&&h>n;n++)if(a=t-v[n],s=y[t]-t,p=g[n],m=p[a]/f[i]){for(r=1;s>=r;r++)p[r+a]-=m*f[r+i];d[n][t-v[n]]=m}var l,_,M,f=[],p=[],w=[],I=[],C=[],S=[];for(l=0,_=0,t=0;h>t;t++){for(i=v[t],a=y[t],M=g[t],n=t;a>=n;n++)M[n-i]&&(f[l]=t,p[l]=n,w[l]=M[n-i],l++);for(M=d[t],n=i;t>n;n++)M[n-i]&&(I[_]=t,C[_]=n,S[_]=M[n-i],_++);I[_]=t,C[_]=t,S[_]=1,_++}return{U:[f,p,w],L:[I,C,S]}},numeric.cLUsolve=function LUsolve(e,t){var n=e.L,r=e.U,i=numeric.clone(t),a=n[0],s=n[1],o=n[2],u=r[0],c=r[1],l=r[2],h=u.length;a.length;var f,p,m=i.length;for(p=0,f=0;m>f;f++){for(;f>s[p];)i[f]-=o[p]*i[s[p]],p++;p++}for(p=h-1,f=m-1;f>=0;f--){for(;c[p]>f;)i[f]-=l[p]*i[c[p]],p--;i[f]/=l[p],p--}return i},numeric.cgrid=function grid(e,t){"number"==typeof e&&(e=[e,e]);var n,r,i,a=numeric.rep(e,-1);if("function"!=typeof t)switch(t){case"L":t=function(t,n){return t>=e[0]/2||e[1]/2>n};break;default:t=function(){return!0}}for(i=0,n=1;e[0]-1>n;n++)for(r=1;e[1]-1>r;r++)t(n,r)&&(a[n][r]=i,i++);return a},numeric.cdelsq=function delsq(e){var t,n,r,i,a,s=[[-1,0],[0,-1],[0,1],[1,0]],o=numeric.dim(e),u=o[0],c=o[1],l=[],h=[],f=[];for(t=1;u-1>t;t++)for(n=1;c-1>n;n++)if(!(0>e[t][n])){for(r=0;4>r;r++)i=t+s[r][0],a=n+s[r][1],0>e[i][a]||(l.push(e[t][n]),h.push(e[i][a]),f.push(-1));l.push(e[t][n]),h.push(e[t][n]),f.push(4)}return[l,h,f]},numeric.cdotMV=function dotMV(e,t){var n,r,i,a=e[0],s=e[1],o=e[2],u=a.length;for(i=0,r=0;u>r;r++)a[r]>i&&(i=a[r]);for(i++,n=numeric.rep([i],0),r=0;u>r;r++)n[a[r]]+=o[r]*t[s[r]];return n},numeric.Spline=function Spline(e,t,n,r,i){this.x=e,this.yl=t,this.yr=n,this.kl=r,this.kr=i},numeric.Spline.prototype._at=function _at(e,t){var e,n,r,i,a=this.x,s=this.yl,o=this.yr,u=this.kl,c=this.kr,l=numeric.add,h=numeric.sub,f=numeric.mul;n=h(f(u[t],a[t+1]-a[t]),h(o[t+1],s[t])),r=l(f(c[t+1],a[t]-a[t+1]),h(o[t+1],s[t])),i=(e-a[t])/(a[t+1]-a[t]);var p=i*(1-i);return l(l(l(f(1-i,s[t]),f(i,o[t+1])),f(n,p*(1-i))),f(r,p*i))},numeric.Spline.prototype.at=function at(e){if("number"==typeof e){var t,n,r,i=this.x,a=i.length,s=Math.floor;for(t=0,n=a-1;n-t>1;)r=s((t+n)/2),e>=i[r]?t=r:n=r;return this._at(e,t)}var o,a=e.length,u=Array(a);for(o=a-1;-1!==o;--o)u[o]=this.at(e[o]);return u},numeric.Spline.prototype.diff=function diff(){var e,t,n,r=this.x,i=this.yl,a=this.yr,s=this.kl,o=this.kr,u=i.length,c=s,l=o,h=Array(u),f=Array(u),p=numeric.add,m=numeric.mul,d=numeric.div,g=numeric.sub;for(e=u-1;-1!==e;--e)t=r[e+1]-r[e],n=g(a[e+1],i[e]),h[e]=d(p(m(n,6),m(s[e],-4*t),m(o[e+1],-2*t)),t*t),f[e+1]=d(p(m(n,-6),m(s[e],2*t),m(o[e+1],4*t)),t*t);return new numeric.Spline(r,c,l,h,f)},numeric.Spline.prototype.roots=function roots(){function e(e){return e*e}var t=[],n=this.x,r=this.yl,i=this.yr,a=this.kl,s=this.kr;\n"number"==typeof r[0]&&(r=[r],i=[i],a=[a],s=[s]);var o,u,c,l,h,f,p,m,d,g,v,y,b,x,_,M,w,I,C,S,T,E,k,A,F=r.length,D=n.length-1,t=Array(F),P=Math.sqrt;for(o=0;o!==F;++o){for(l=r[o],h=i[o],f=a[o],p=s[o],m=[],u=0;u!==D;u++){for(u>0&&0>h[u]*l[u]&&m.push(n[u]),M=n[u+1]-n[u],w=n[u],v=l[u],y=h[u+1],d=f[u]/M,g=p[u+1]/M,_=e(d-g+3*(v-y))+12*g*v,b=g+3*v+2*d-3*y,x=3*(g+d+2*(v-y)),0>=_?(C=b/x,I=C>n[u]&&n[u+1]>C?[n[u],C,n[u+1]]:[n[u],n[u+1]]):(C=(b-P(_))/x,S=(b+P(_))/x,I=[n[u]],C>n[u]&&n[u+1]>C&&I.push(C),S>n[u]&&n[u+1]>S&&I.push(S),I.push(n[u+1])),E=I[0],C=this._at(E,u),c=0;I.length-1>c;c++)if(k=I[c+1],S=this._at(k,u),0!==C)if(0===S||C*S>0)E=k,C=S;else{for(var V=0;;){if(A=(C*k-S*E)/(C-S),E>=A||A>=k)break;if(T=this._at(A,u),T*S>0)k=A,S=T,-1===V&&(C*=.5),V=-1;else{if(!(T*C>0))break;E=A,C=T,1===V&&(S*=.5),V=1}}m.push(A),E=I[c+1],C=this._at(E,u)}else m.push(E),E=k,C=S;0===S&&m.push(k)}t[o]=m}return"number"==typeof this.yl[0]?t[0]:t},numeric.spline=function spline(e,t,n,r){var i,a=e.length,s=[],o=[],u=[],c=numeric.sub,l=numeric.mul,h=numeric.add;for(i=a-2;i>=0;i--)o[i]=e[i+1]-e[i],u[i]=c(t[i+1],t[i]);("string"==typeof n||"string"==typeof r)&&(n=r="periodic");var f=[[],[],[]];switch(typeof n){case"undefined":s[0]=l(3/(o[0]*o[0]),u[0]),f[0].push(0,0),f[1].push(0,1),f[2].push(2/o[0],1/o[0]);break;case"string":s[0]=h(l(3/(o[a-2]*o[a-2]),u[a-2]),l(3/(o[0]*o[0]),u[0])),f[0].push(0,0,0),f[1].push(a-2,0,1),f[2].push(1/o[a-2],2/o[a-2]+2/o[0],1/o[0]);break;default:s[0]=n,f[0].push(0),f[1].push(0),f[2].push(1)}for(i=1;a-1>i;i++)s[i]=h(l(3/(o[i-1]*o[i-1]),u[i-1]),l(3/(o[i]*o[i]),u[i])),f[0].push(i,i,i),f[1].push(i-1,i,i+1),f[2].push(1/o[i-1],2/o[i-1]+2/o[i],1/o[i]);switch(typeof r){case"undefined":s[a-1]=l(3/(o[a-2]*o[a-2]),u[a-2]),f[0].push(a-1,a-1),f[1].push(a-2,a-1),f[2].push(1/o[a-2],2/o[a-2]);break;case"string":f[1][f[1].length-1]=0;break;default:s[a-1]=r,f[0].push(a-1),f[1].push(a-1),f[2].push(1)}s="number"!=typeof s[0]?numeric.transpose(s):[s];var p=Array(s.length);if("string"==typeof n)for(i=p.length-1;-1!==i;--i)p[i]=numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(f)),s[i]),p[i][a-1]=p[i][0];else for(i=p.length-1;-1!==i;--i)p[i]=numeric.cLUsolve(numeric.cLU(f),s[i]);return p="number"==typeof t[0]?p[0]:numeric.transpose(p),new numeric.Spline(e,t,t,p,p)},numeric.fftpow2=function fftpow2(e,t){var n=e.length;if(1!==n){var r,i,a=Math.cos,s=Math.sin,o=Array(n/2),u=Array(n/2),c=Array(n/2),l=Array(n/2);for(i=n/2,r=n-1;-1!==r;--r)--i,c[i]=e[r],l[i]=t[r],--r,o[i]=e[r],u[i]=t[r];fftpow2(o,u),fftpow2(c,l),i=n/2;var h,f,p,m=-6.283185307179586/n;for(r=n-1;-1!==r;--r)--i,-1===i&&(i=n/2-1),h=m*r,f=a(h),p=s(h),e[r]=o[i]+f*c[i]-p*l[i],t[r]=u[i]+f*l[i]+p*c[i]}},numeric._ifftpow2=function _ifftpow2(e,t){var n=e.length;if(1!==n){var r,i,a=Math.cos,s=Math.sin,o=Array(n/2),u=Array(n/2),c=Array(n/2),l=Array(n/2);for(i=n/2,r=n-1;-1!==r;--r)--i,c[i]=e[r],l[i]=t[r],--r,o[i]=e[r],u[i]=t[r];_ifftpow2(o,u),_ifftpow2(c,l),i=n/2;var h,f,p,m=6.283185307179586/n;for(r=n-1;-1!==r;--r)--i,-1===i&&(i=n/2-1),h=m*r,f=a(h),p=s(h),e[r]=o[i]+f*c[i]-p*l[i],t[r]=u[i]+f*l[i]+p*c[i]}},numeric.ifftpow2=function ifftpow2(e,t){numeric._ifftpow2(e,t),numeric.diveq(e,e.length),numeric.diveq(t,t.length)},numeric.convpow2=function convpow2(e,t,n,r){numeric.fftpow2(e,t),numeric.fftpow2(n,r);var i,a,s,o,u,c=e.length;for(i=c-1;-1!==i;--i)a=e[i],o=t[i],s=n[i],u=r[i],e[i]=a*s-o*u,t[i]=a*u+o*s;numeric.ifftpow2(e,t)},numeric.T.prototype.fft=function fft(){var e,t,n=this.x,r=this.y,i=n.length,a=Math.log,s=a(2),o=Math.ceil(a(2*i-1)/s),u=Math.pow(2,o),c=numeric.rep([u],0),l=numeric.rep([u],0),h=Math.cos,f=Math.sin,p=-3.141592653589793/i,m=numeric.rep([u],0),d=numeric.rep([u],0);for(Math.floor(i/2),e=0;i>e;e++)m[e]=n[e];if(r!==void 0)for(e=0;i>e;e++)d[e]=r[e];for(c[0]=1,e=1;u/2>=e;e++)t=p*e*e,c[e]=h(t),l[e]=f(t),c[u-e]=h(t),l[u-e]=f(t);var g=new numeric.T(m,d),v=new numeric.T(c,l);return g=g.mul(v),numeric.convpow2(g.x,g.y,numeric.clone(v.x),numeric.neg(v.y)),g=g.mul(v),g.x.length=i,g.y.length=i,g},numeric.T.prototype.ifft=function ifft(){var e,t,n=this.x,r=this.y,i=n.length,a=Math.log,s=a(2),o=Math.ceil(a(2*i-1)/s),u=Math.pow(2,o),c=numeric.rep([u],0),l=numeric.rep([u],0),h=Math.cos,f=Math.sin,p=3.141592653589793/i,m=numeric.rep([u],0),d=numeric.rep([u],0);for(Math.floor(i/2),e=0;i>e;e++)m[e]=n[e];if(r!==void 0)for(e=0;i>e;e++)d[e]=r[e];for(c[0]=1,e=1;u/2>=e;e++)t=p*e*e,c[e]=h(t),l[e]=f(t),c[u-e]=h(t),l[u-e]=f(t);var g=new numeric.T(m,d),v=new numeric.T(c,l);return g=g.mul(v),numeric.convpow2(g.x,g.y,numeric.clone(v.x),numeric.neg(v.y)),g=g.mul(v),g.x.length=i,g.y.length=i,g.div(i)},numeric.gradient=function gradient(e,t){var n=t.length,r=e(t);if(isNaN(r))throw Error("gradient: f(x) is a NaN!");var i,a,s,o,u,c,l,h,f,p,m=Math.max,d=numeric.clone(t),g=Array(n),m=(numeric.div,numeric.sub,Math.max),v=.001,y=Math.abs,b=Math.min,x=0;for(i=0;n>i;i++)for(var _=m(1e-6*r,1e-8);;){if(++x,x>20)throw Error("Numerical gradient fails");if(d[i]=t[i]+_,a=e(d),d[i]=t[i]-_,s=e(d),d[i]=t[i],isNaN(a)||isNaN(s))_/=16;else{if(g[i]=(a-s)/(2*_),u=t[i]-_,c=t[i],l=t[i]+_,h=(a-r)/_,f=(r-s)/_,p=m(y(g[i]),y(r),y(a),y(s),y(u),y(c),y(l),1e-8),o=b(m(y(h-g[i]),y(f-g[i]),y(h-f))/p,_/p),!(o>v))break;_/=16}}return g},numeric.uncmin=function uncmin(e,t,n,r,i,a,s){var o=numeric.gradient;s===void 0&&(s={}),n===void 0&&(n=1e-8),r===void 0&&(r=function(t){return o(e,t)}),i===void 0&&(i=1e3),t=numeric.clone(t);var u,c,l=t.length,h=e(t);if(isNaN(h))throw Error("uncmin: f(x0) is a NaN!");var f=Math.max,p=numeric.norm2;n=f(n,numeric.epsilon);var m,d,g,v,y,b,x,_,M,w,I=s.Hinv||numeric.identity(l),C=numeric.dot,S=(numeric.inv,numeric.sub),T=numeric.add,E=numeric.tensor,k=numeric.div,A=numeric.mul,F=numeric.all,D=numeric.isFinite,P=numeric.neg,V=0,O="";for(d=r(t);i>V;){if("function"==typeof a&&a(V,t,h,d,I)){O="Callback returned true";break}if(!F(D(d))){O="Gradient has Infinity or NaN";break}if(m=P(C(I,d)),!F(D(m))){O="Search direction has Infinity or NaN";break}if(w=p(m),n>w){O="Newton step smaller than tol";break}for(M=1,c=C(d,m),y=t;i>V&&!(n>M*w)&&(v=A(m,M),y=T(t,v),u=e(y),u-h>=.1*M*c||isNaN(u));)M*=.5,++V;if(n>M*w){O="Line search step size smaller than tol";break}if(V===i){O="maxit reached during line search";break}g=r(y),b=S(g,d),_=C(b,v),x=C(I,b),I=S(T(I,A((_+C(b,x))/(_*_),E(v,v))),k(T(E(x,v),E(v,x)),_)),t=y,h=u,d=g,++V}return{solution:t,f:h,gradient:d,invHessian:I,iterations:V,message:O}},numeric.Dopri=function Dopri(e,t,n,r,i,a,s){this.x=e,this.y=t,this.f=n,this.ymid=r,this.iterations=i,this.events=s,this.message=a},numeric.Dopri.prototype._at=function _at(e,t){function n(e){return e*e}var r=this,i=r.x,a=r.y,s=r.f,o=r.ymid;i.length;var u,c,l,h,f,p,e,m;Math.floor;var d,g,v,y=.5,b=numeric.add,x=numeric.mul,_=numeric.sub;return u=i[t],c=i[t+1],h=a[t],f=a[t+1],m=c-u,l=u+y*m,p=o[t],d=_(s[t],x(h,1/(u-l)+2/(u-c))),g=_(s[t+1],x(f,1/(c-l)+2/(c-u))),v=[n(e-c)*(e-l)/n(u-c)/(u-l),n(e-u)*n(e-c)/n(u-l)/n(c-l),n(e-u)*(e-l)/n(c-u)/(c-l),(e-u)*n(e-c)*(e-l)/n(u-c)/(u-l),(e-c)*n(e-u)*(e-l)/n(u-c)/(c-l)],b(b(b(b(x(h,v[0]),x(p,v[1])),x(f,v[2])),x(d,v[3])),x(g,v[4]))},numeric.Dopri.prototype.at=function at(e){var t,n,r,i=Math.floor;if("number"!=typeof e){var a=e.length,s=Array(a);for(t=a-1;-1!==t;--t)s[t]=this.at(e[t]);return s}var o=this.x;for(t=0,n=o.length-1;n-t>1;)r=i(.5*(t+n)),e>=o[r]?t=r:n=r;return this._at(e,t)},numeric.dopri=function dopri(e,t,n,r,i,a,s){i===void 0&&(i=1e-6),a===void 0&&(a=1e3);var o,u,c,l,h,f,p,m,d,g,v=[e],y=[n],b=[r(e,n)],x=[],_=.2,M=[.075,.225],w=[44/45,-56/15,32/9],I=[19372/6561,-25360/2187,64448/6561,-212/729],C=[9017/3168,-355/33,46732/5247,49/176,-5103/18656],S=[35/384,0,500/1113,125/192,-2187/6784,11/84],T=[.10013431883002395,0,.3918321794184259,-0.02982460176594817,.05893268337240795,-0.04497888809104361,.023904308236133973],E=[.2,.3,.8,8/9,1,1],k=[-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,.025],A=0,F=(t-e)/10,D=0,P=numeric.add,V=numeric.mul,O=(Math.max,Math.min),q=Math.abs,j=numeric.norminf,N=Math.pow,L=numeric.any,R=numeric.lt,B=numeric.and;numeric.sub;var $,G,z,U=new numeric.Dopri(v,y,b,x,-1,"");for("function"==typeof s&&($=s(e,n));t>e&&a>D;)if(++D,e+F>t&&(F=t-e),o=r(e+E[0]*F,P(n,V(_*F,b[A]))),u=r(e+E[1]*F,P(P(n,V(M[0]*F,b[A])),V(M[1]*F,o))),c=r(e+E[2]*F,P(P(P(n,V(w[0]*F,b[A])),V(w[1]*F,o)),V(w[2]*F,u))),l=r(e+E[3]*F,P(P(P(P(n,V(I[0]*F,b[A])),V(I[1]*F,o)),V(I[2]*F,u)),V(I[3]*F,c))),h=r(e+E[4]*F,P(P(P(P(P(n,V(C[0]*F,b[A])),V(C[1]*F,o)),V(C[2]*F,u)),V(C[3]*F,c)),V(C[4]*F,l))),d=P(P(P(P(P(n,V(b[A],F*S[0])),V(u,F*S[2])),V(c,F*S[3])),V(l,F*S[4])),V(h,F*S[5])),f=r(e+F,d),p=P(P(P(P(P(V(b[A],F*k[0]),V(u,F*k[2])),V(c,F*k[3])),V(l,F*k[4])),V(h,F*k[5])),V(f,F*k[6])),g="number"==typeof p?q(p):j(p),g>i){if(F=.2*F*N(i/g,.25),e+F===e){U.msg="Step size became too small";break}}else{if(x[A]=P(P(P(P(P(P(n,V(b[A],F*T[0])),V(u,F*T[2])),V(c,F*T[3])),V(l,F*T[4])),V(h,F*T[5])),V(f,F*T[6])),++A,v[A]=e+F,y[A]=d,b[A]=f,"function"==typeof s){var Y,X,Z=e,Q=e+.5*F;if(G=s(Q,x[A-1]),z=B(R($,0),R(0,G)),L(z)||(Z=Q,Q=e+F,$=G,G=s(Q,d),z=B(R($,0),R(0,G))),L(z)){for(var W,H,J=0,K=1,et=1;;){if("number"==typeof $)X=(et*G*Z-K*$*Q)/(et*G-K*$);else for(X=Q,m=$.length-1;-1!==m;--m)0>$[m]&&G[m]>0&&(X=O(X,(et*G[m]*Z-K*$[m]*Q)/(et*G[m]-K*$[m])));if(Z>=X||X>=Q)break;Y=U._at(X,A-1),H=s(X,Y),W=B(R($,0),R(0,H)),L(W)?(Q=X,G=H,z=W,et=1,-1===J?K*=.5:K=1,J=-1):(Z=X,$=H,K=1,1===J?et*=.5:et=1,J=1)}return d=U._at(.5*(e+X),A-1),U.f[A]=r(X,Y),U.x[A]=X,U.y[A]=Y,U.ymid[A-1]=d,U.events=z,U.iterations=D,U}}e+=F,n=d,$=G,F=O(.8*F*N(i/g,.25),4*F)}return U.iterations=D,U},numeric.LU=function(e,t){t=t||!1;var n,r,i,a,s,o,u,c,l,h=Math.abs,f=e.length,p=f-1,m=Array(f);for(t||(e=numeric.clone(e)),i=0;f>i;++i){for(u=i,o=e[i],l=h(o[i]),r=i+1;f>r;++r)a=h(e[r][i]),a>l&&(l=a,u=r);for(m[i]=u,u!=i&&(e[i]=e[u],e[u]=o,o=e[i]),s=o[i],n=i+1;f>n;++n)e[n][i]/=s;for(n=i+1;f>n;++n){for(c=e[n],r=i+1;p>r;++r)c[r]-=c[i]*o[r],++r,c[r]-=c[i]*o[r];r===p&&(c[r]-=c[i]*o[r])}}return{LU:e,P:m}},numeric.LUsolve=function LUsolve(e,t){var n,r,i,a,s,o=e.LU,u=o.length,c=numeric.clone(t),l=e.P;for(n=u-1;-1!==n;--n)c[n]=t[n];for(n=0;u>n;++n)for(i=l[n],l[n]!==n&&(s=c[n],c[n]=c[i],c[i]=s),a=o[n],r=0;n>r;++r)c[n]-=c[r]*a[r];for(n=u-1;n>=0;--n){for(a=o[n],r=n+1;u>r;++r)c[n]-=c[r]*a[r];c[n]/=a[n]}return c},numeric.solve=function solve(e,t,n){return numeric.LUsolve(numeric.LU(e,n),t)},numeric.echelonize=function echelonize(e){var t,n,r,i,a,s,o,u,c=numeric.dim(e),l=c[0],h=c[1],f=numeric.identity(l),p=Array(l),m=Math.abs,d=numeric.diveq;for(e=numeric.clone(e),t=0;l>t;++t){for(r=0,a=e[t],s=f[t],n=1;h>n;++n)m(a[r])<m(a[n])&&(r=n);for(p[t]=r,d(s,a[r]),d(a,a[r]),n=0;l>n;++n)if(n!==t){for(o=e[n],u=o[r],i=h-1;-1!==i;--i)o[i]-=a[i]*u;for(o=f[n],i=l-1;-1!==i;--i)o[i]-=s[i]*u}}return{I:f,A:e,P:p}},numeric.__solveLP=function __solveLP(e,t,n,r,i,a,s){var o,u=numeric.sum,c=(numeric.log,numeric.mul),l=numeric.sub,h=numeric.dot,f=numeric.div,p=numeric.add,m=e.length,d=n.length,g=!1,v=0,y=1,b=(numeric.transpose(t),numeric.svd,numeric.transpose),x=(numeric.leq,Math.sqrt),_=Math.abs;numeric.muleq;var M,w=(numeric.norminf,numeric.any,Math.min),I=numeric.all,C=numeric.gt,S=Array(m),T=Array(d);numeric.rep([d],1);var E,k,A=numeric.solve,F=l(n,h(t,a)),D=h(e,e);for(E=v;i>E;++E){var P,V;for(P=d-1;-1!==P;--P)T[P]=f(t[P],F[P]);var O=b(T);for(P=m-1;-1!==P;--P)S[P]=u(O[P]);y=.25*_(D/h(e,S));var q=100*x(D/h(S,S));for((!isFinite(y)||y>q)&&(y=q),k=p(e,c(y,S)),M=h(O,T),P=m-1;-1!==P;--P)M[P][P]+=1;V=A(M,f(k,y),!0);var j=f(F,h(t,V)),N=1;for(P=d-1;-1!==P;--P)0>j[P]&&(N=w(N,-.999*j[P]));if(o=l(a,c(V,N)),F=l(n,h(t,o)),!I(C(F,0)))return{solution:a,message:"",iterations:E};if(a=o,r>y)return{solution:o,message:"",iterations:E};if(s){var L=h(e,k),R=h(t,k);for(g=!0,P=d-1;-1!==P;--P)if(0>L*R[P]){g=!1;break}}else g=a[m-1]>=0?!1:!0;if(g)return{solution:o,message:"Unbounded",iterations:E}}return{solution:a,message:"maximum iteration count exceeded",iterations:E}},numeric._solveLP=function _solveLP(e,t,n,r,i){var a,s=e.length,o=n.length,u=(numeric.sum,numeric.log,numeric.mul,numeric.sub),c=numeric.dot;numeric.div,numeric.add;var l=numeric.rep([s],0).concat([1]),h=numeric.rep([o,1],-1),f=numeric.blockMatrix([[t,h]]),p=n,a=numeric.rep([s],0).concat(Math.max(0,numeric.sup(numeric.neg(n)))+1),m=numeric.__solveLP(l,f,p,r,i,a,!1),d=numeric.clone(m.solution);d.length=s;var g=numeric.inf(u(n,c(t,d)));if(0>g)return{solution:0/0,message:"Infeasible",iterations:m.iterations};var v=numeric.__solveLP(e,t,n,r,i-m.iterations,d,!0);return v.iterations+=m.iterations,v},numeric.solveLP=function solveLP(e,t,n,r,i,a,s){if(s===void 0&&(s=1e3),a===void 0&&(a=numeric.epsilon),r===void 0)return numeric._solveLP(e,t,n,a,s);var o,u=r.length,c=r[0].length,l=t.length,h=numeric.echelonize(r),f=numeric.rep([c],0),p=h.P,m=[];for(o=p.length-1;-1!==o;--o)f[p[o]]=1;for(o=c-1;-1!==o;--o)0===f[o]&&m.push(o);var d=numeric.getRange,g=numeric.linspace(0,u-1),v=numeric.linspace(0,l-1),y=d(r,g,m),b=d(t,v,p),x=d(t,v,m),_=numeric.dot,M=numeric.sub,w=_(b,h.I),I=M(x,_(w,y)),C=M(n,_(w,i)),S=Array(p.length),T=Array(m.length);for(o=p.length-1;-1!==o;--o)S[o]=e[p[o]];for(o=m.length-1;-1!==o;--o)T[o]=e[m[o]];var E=M(T,_(S,_(h.I,y))),k=numeric._solveLP(E,I,C,a,s),A=k.solution;if(A!==A)return k;var F=_(h.I,M(i,_(y,A))),D=Array(e.length);for(o=p.length-1;-1!==o;--o)D[p[o]]=F[o];for(o=m.length-1;-1!==o;--o)D[m[o]]=A[o];return{solution:D,message:k.message,iterations:k.iterations}},numeric.MPStoLP=function MPStoLP(e){function t(t){throw Error("MPStoLP: "+t+"\\nLine "+n+": "+e[n]+"\\nCurrent state: "+o[s]+"\\n")}e instanceof String&&e.split("\\n");var n,r,i,a,s=0,o=["Initial state","NAME","ROWS","COLUMNS","RHS","BOUNDS","ENDATA"],u=e.length,c=0,l={},h=[],f=0,p={},m=0,d=[],g=[],v=[];for(n=0;u>n;++n){i=e[n];var y=i.match(/\\S*/g),b=[];for(r=0;y.length>r;++r)""!==y[r]&&b.push(y[r]);if(0!==b.length){for(r=0;o.length>r&&i.substr(0,o[r].length)!==o[r];++r);if(o.length>r){if(s=r,1===r&&(a=b[1]),6===r)return{name:a,c:d,A:numeric.transpose(g),b:v,rows:l,vars:p}}else switch(s){case 0:case 1:t("Unexpected line");case 2:switch(b[0]){case"N":0===c?c=b[1]:t("Two or more N rows");break;case"L":l[b[1]]=f,h[f]=1,v[f]=0,++f;break;case"G":l[b[1]]=f,h[f]=-1,v[f]=0,++f;break;case"E":l[b[1]]=f,h[f]=0,v[f]=0,++f;break;default:t("Parse error "+numeric.prettyPrint(b))}break;case 3:p.hasOwnProperty(b[0])||(p[b[0]]=m,d[m]=0,g[m]=numeric.rep([f],0),++m);var x=p[b[0]];for(r=1;b.length>r;r+=2)if(b[r]!==c){var _=l[b[r]];g[x][_]=(0>h[_]?-1:1)*parseFloat(b[r+1])}else d[x]=parseFloat(b[r+1]);break;case 4:for(r=1;b.length>r;r+=2)v[l[b[r]]]=(0>h[l[b[r]]]?-1:1)*parseFloat(b[r+1]);break;case 5:break;case 6:t("Internal error")}}}t("Reached end of file without ENDATA")},numeric.seedrandom={pow:Math.pow,random:Math.random},function(e,t,n,r,i,a,s){function o(e){var t,r,i=this,a=e.length,s=0,o=i.i=i.j=i.m=0;for(i.S=[],i.c=[],a||(e=[a++]);n>s;)i.S[s]=s++;for(s=0;n>s;s++)t=i.S[s],o=l(o+t+e[s%a]),r=i.S[o],i.S[s]=r,i.S[o]=t;i.g=function(e){var t=i.S,r=l(i.i+1),a=t[r],s=l(i.j+a),o=t[s];t[r]=o,t[s]=a;for(var u=t[l(a+o)];--e;)r=l(r+1),a=t[r],s=l(s+a),o=t[s],t[r]=o,t[s]=a,u=u*n+t[l(a+o)];return i.i=r,i.j=s,u},i.g(n)}function u(e,t,n,r,i){if(n=[],i=typeof e,t&&"object"==i)for(r in e)if(5>r.indexOf("S"))try{n.push(u(e[r],t-1))}catch(a){}return n.length?n:e+("string"!=i?"\\0":"")}function c(e,t,n,r){for(e+="",n=0,r=0;e.length>r;r++)t[l(r)]=l((n^=19*t[l(r)])+e.charCodeAt(r));e="";for(r in t)e+=String.fromCharCode(t[r]);return e}function l(e){return e&n-1}t.seedrandom=function(l,h){var f,p=[];return l=c(u(h?[l,e]:arguments.length?l:[(new Date).getTime(),e,window],3),p),f=new o(p),c(f.S,e),t.random=function(){for(var e=f.g(r),t=s,o=0;i>e;)e=(e+o)*n,t*=n,o=f.g(1);for(;e>=a;)e/=2,t/=2,o>>>=1;return(e+o)/t},l},s=t.pow(n,r),i=t.pow(2,i),a=2*i,c(t.random(),e)}([],numeric.seedrandom,256,6,52),function(e){function t(e){if("object"!=typeof e)return e;var n,r=[],i=e.length;for(n=0;i>n;n++)r[n+1]=t(e[n]);return r}function n(e){if("object"!=typeof e)return e;var t,r=[],i=e.length;for(t=1;i>t;t++)r[t-1]=n(e[t]);return r}function r(e,t,n){var r,i,a,s,o;for(a=1;n>=a;a+=1){for(e[a][a]=1/e[a][a],o=-e[a][a],r=1;a>r;r+=1)e[r][a]=o*e[r][a];if(s=a+1,s>n)break;for(i=s;n>=i;i+=1)for(o=e[a][i],e[a][i]=0,r=1;a>=r;r+=1)e[r][i]=e[r][i]+o*e[r][a]}}function i(e,t,n,r){var i,a,s,o;for(a=1;n>=a;a+=1){for(o=0,i=1;a>i;i+=1)o+=e[i][a]*r[i];r[a]=(r[a]-o)/e[a][a]}for(s=1;n>=s;s+=1)for(a=n+1-s,r[a]=r[a]/e[a][a],o=-r[a],i=1;a>i;i+=1)r[i]=r[i]+o*e[i][a]}function a(e,t,n,r){var i,a,s,o,u,c;for(a=1;n>=a;a+=1){if(r[1]=a,c=0,s=a-1,1>s){if(c=e[a][a]-c,0>=c)break;e[a][a]=Math.sqrt(c)}else{for(o=1;s>=o;o+=1){for(u=e[o][a],i=1;o>i;i+=1)u-=e[i][a]*e[i][o];u/=e[o][o],e[o][a]=u,c+=u*u}if(c=e[a][a]-c,0>=c)break;e[a][a]=Math.sqrt(c)}r[1]=0}}function s(e,t,n,s,o,u,c,l,h,f,p,m,d,g,v,y){function b(){for(g[1]=g[1]+1,S=P,I=1;f>=I;I+=1){for(S+=1,L=-l[I],C=1;s>=C;C+=1)L+=c[C][I]*o[C];if(X>Math.abs(L)&&(L=0),I>p)v[S]=L;else if(v[S]=-Math.abs(L),L>0){for(C=1;s>=C;C+=1)c[C][I]=-c[C][I];l[I]=-l[I]}}for(I=1;d>=I;I+=1)v[P+m[I]]=0;for(O=0,N=0,I=1;f>=I;I+=1)v[P+I]<N*v[j+I]&&(O=I,N=v[P+I]/v[j+I]);return 0===O?999:0}function x(){for(I=1;s>=I;I+=1){for(L=0,C=1;s>=C;C+=1)L+=e[C][I]*c[C][O];v[I]=L}for(T=A,I=1;s>=I;I+=1)v[T+I]=0;for(C=d+1;s>=C;C+=1)for(I=1;s>=I;I+=1)v[T+I]=v[T+I]+e[I][C]*v[C];for(U=!0,I=d;I>=1;I-=1){for(L=v[I],S=D+I*(I+3)/2,T=S-I,C=I+1;d>=C;C+=1)L-=v[S]*v[F+C],S+=C;if(L/=v[T],v[F+I]=L,p>m[I])break;if(0>L)break;U=!1,k=I}if(!U)for(R=v[V+k]/v[F+k],I=1;d>=I&&!(p>m[I])&&!(0>v[F+I]);I+=1)N=v[V+I]/v[F+I],R>N&&(R=N,k=I);for(L=0,I=A+1;A+s>=I;I+=1)L+=v[I]*v[I];if(X>=Math.abs(L)){if(U)return y[1]=1,999;for(I=1;d>=I;I+=1)v[V+I]=v[V+I]-R*v[F+I];return v[V+d+1]=v[V+d+1]+R,700}for(L=0,I=1;s>=I;I+=1)L+=v[A+I]*c[I][O];for(B=-v[P+O]/L,Y=!0,U||B>R&&(B=R,Y=!1),I=1;s>=I;I+=1)o[I]=o[I]+B*v[A+I],X>Math.abs(o[I])&&(o[I]=0);for(u[1]=u[1]+B*L*(B/2+v[V+d+1]),I=1;d>=I;I+=1)v[V+I]=v[V+I]-B*v[F+I];if(v[V+d+1]=v[V+d+1]+B,!Y){for(L=-l[O],C=1;s>=C;C+=1)L+=o[C]*c[C][O];if(O>p)v[P+O]=L;else if(v[P+O]=-Math.abs(L),L>0){for(C=1;s>=C;C+=1)c[C][O]=-c[C][O];l[O]=-l[O]}return 700}for(d+=1,m[d]=O,S=D+(d-1)*d/2+1,I=1;d-1>=I;I+=1)v[S]=v[I],S+=1;if(d===s)v[S]=v[s];else{for(I=s;I>=d+1&&0!==v[I]&&($=Math.max(Math.abs(v[I-1]),Math.abs(v[I])),G=Math.min(Math.abs(v[I-1]),Math.abs(v[I])),N=v[I-1]>=0?Math.abs($*Math.sqrt(1+G*G/($*$))):-Math.abs($*Math.sqrt(1+G*G/($*$))),$=v[I-1]/N,G=v[I]/N,1!==$);I-=1)if(0===$)for(v[I-1]=G*N,C=1;s>=C;C+=1)N=e[C][I-1],e[C][I-1]=e[C][I],e[C][I]=N;else for(v[I-1]=N,z=G/(1+$),C=1;s>=C;C+=1)N=$*e[C][I-1]+G*e[C][I],e[C][I]=z*(e[C][I-1]+N)-e[C][I],e[C][I-1]=N;v[S]=v[d]}return 0}function _(){if(S=D+k*(k+1)/2+1,T=S+k,0===v[T])return 798;if($=Math.max(Math.abs(v[T-1]),Math.abs(v[T])),G=Math.min(Math.abs(v[T-1]),Math.abs(v[T])),N=v[T-1]>=0?Math.abs($*Math.sqrt(1+G*G/($*$))):-Math.abs($*Math.sqrt(1+G*G/($*$))),$=v[T-1]/N,G=v[T]/N,1===$)return 798;if(0===$){for(I=k+1;d>=I;I+=1)N=v[T-1],v[T-1]=v[T],v[T]=N,T+=I;for(I=1;s>=I;I+=1)N=e[I][k],e[I][k]=e[I][k+1],e[I][k+1]=N}else{for(z=G/(1+$),I=k+1;d>=I;I+=1)N=$*v[T-1]+G*v[T],v[T]=z*(v[T-1]+N)-v[T],v[T-1]=N,T+=I;for(I=1;s>=I;I+=1)N=$*e[I][k]+G*e[I][k+1],e[I][k+1]=z*(e[I][k]+N)-e[I][k+1],e[I][k]=N}return 0}function M(){for(T=S-k,I=1;k>=I;I+=1)v[T]=v[S],S+=1,T+=1;return v[V+k]=v[V+k+1],m[k]=m[k+1],k+=1,d>k?797:0}function w(){return v[V+d]=v[V+d+1],v[V+d+1]=0,m[d]=0,d-=1,g[2]=g[2]+1,0}var I,C,S,T,E,k,A,F,D,P,V,O,q,j,N,L,R,B,$,G,z,U,Y,X,Z,Q,W;q=Math.min(s,f),S=2*s+q*(q+5)/2+2*f+1,X=1e-60;do X+=X,Z=1+.1*X,Q=1+.2*X;while(1>=Z||1>=Q);for(I=1;s>=I;I+=1)v[I]=t[I];for(I=s+1;S>=I;I+=1)v[I]=0;for(I=1;f>=I;I+=1)m[I]=0;if(E=[],0===y[1]){if(a(e,n,s,E),0!==E[1])return y[1]=2,void 0;i(e,n,s,t),r(e,n,s)}else{for(C=1;s>=C;C+=1)for(o[C]=0,I=1;C>=I;I+=1)o[C]=o[C]+e[I][C]*t[I];for(C=1;s>=C;C+=1)for(t[C]=0,I=C;s>=I;I+=1)t[C]=t[C]+e[C][I]*o[I]}for(u[1]=0,C=1;s>=C;C+=1)for(o[C]=t[C],u[1]=u[1]+v[C]*o[C],v[C]=0,I=C+1;s>=I;I+=1)e[I][C]=0;for(u[1]=-u[1]/2,y[1]=0,A=s,F=A+s,V=F+q,D=V+q+1,P=D+q*(q+1)/2,j=P+f,I=1;f>=I;I+=1){for(L=0,C=1;s>=C;C+=1)L+=c[C][I]*c[C][I];v[j+I]=Math.sqrt(L)}for(d=0,g[1]=0,g[2]=0,W=0;;){if(W=b(),999===W)return;for(;;){if(W=x(),0===W)break;if(999===W)return;if(700===W)if(k===d)w();else{for(;;)if(_(),W=M(),797!==W)break;w()}}}}function o(e,r,i,a,o,u){e=t(e),r=t(r),i=t(i);var c,l,h,f,p,m,d=[],g=[],v=[],y=[],b=[];if(o=o||0,u=u?t(u):[,0],a=a?t(a):[],l=e.length-1,h=i[1].length-1,!a)for(c=1;h>=c;c+=1)a[c]=0;for(c=1;h>=c;c+=1)g[c]=0;for(f=0,p=Math.min(l,h),c=1;l>=c;c+=1)v[c]=0;for(d[1]=0,c=1;2*l+p*(p+5)/2+2*h+1>=c;c+=1)y[c]=0;for(c=1;2>=c;c+=1)b[c]=0;return s(e,r,l,l,v,d,i,a,l,h,o,g,f,b,y,u),m="",1===u[1]&&(m="constraints are inconsistent, no solution!"),2===u[1]&&(m="matrix D in quadratic function is not positive definite!"),{solution:n(v),value:n(d),unconstrained_solution:n(r),iterations:n(b),iact:n(g),message:m}}e.solveQP=o}(numeric),numeric.svd=function svd(e){function t(e,t){return e=Math.abs(e),t=Math.abs(t),e>t?e*Math.sqrt(1+t*t/e/e):0==t?e:t*Math.sqrt(1+e*e/t/t)}var n,r=numeric.epsilon,i=1e-64/r,a=50,s=0,o=0,u=0,c=0,l=0,h=numeric.clone(e),f=h.length,p=h[0].length;if(p>f)throw"Need more rows than columns";var m=Array(p),d=Array(p);for(o=0;p>o;o++)m[o]=d[o]=0;var g=numeric.rep([p,p],0),v=0,y=0,b=0,x=0,_=0,M=0,w=0;for(o=0;p>o;o++){for(m[o]=y,w=0,l=o+1,u=o;f>u;u++)w+=h[u][o]*h[u][o];if(i>=w)y=0;else for(v=h[o][o],y=Math.sqrt(w),v>=0&&(y=-y),b=v*y-w,h[o][o]=v-y,u=l;p>u;u++){for(w=0,c=o;f>c;c++)w+=h[c][o]*h[c][u];for(v=w/b,c=o;f>c;c++)h[c][u]+=v*h[c][o]}for(d[o]=y,w=0,u=l;p>u;u++)w+=h[o][u]*h[o][u];if(i>=w)y=0;else{for(v=h[o][o+1],y=Math.sqrt(w),v>=0&&(y=-y),b=v*y-w,h[o][o+1]=v-y,u=l;p>u;u++)m[u]=h[o][u]/b;for(u=l;f>u;u++){for(w=0,c=l;p>c;c++)w+=h[u][c]*h[o][c];for(c=l;p>c;c++)h[u][c]+=w*m[c]}}_=Math.abs(d[o])+Math.abs(m[o]),_>x&&(x=_)}for(o=p-1;-1!=o;o+=-1){if(0!=y){for(b=y*h[o][o+1],u=l;p>u;u++)g[u][o]=h[o][u]/b;for(u=l;p>u;u++){for(w=0,c=l;p>c;c++)w+=h[o][c]*g[c][u];for(c=l;p>c;c++)g[c][u]+=w*g[c][o]}}for(u=l;p>u;u++)g[o][u]=0,g[u][o]=0;g[o][o]=1,y=m[o],l=o}for(o=p-1;-1!=o;o+=-1){for(l=o+1,y=d[o],u=l;p>u;u++)h[o][u]=0;if(0!=y){for(b=h[o][o]*y,u=l;p>u;u++){for(w=0,c=l;f>c;c++)w+=h[c][o]*h[c][u];for(v=w/b,c=o;f>c;c++)h[c][u]+=v*h[c][o]}for(u=o;f>u;u++)h[u][o]=h[u][o]/y}else for(u=o;f>u;u++)h[u][o]=0;h[o][o]+=1}for(r*=x,c=p-1;-1!=c;c+=-1)for(var I=0;a>I;I++){var C=!1;for(l=c;-1!=l;l+=-1){if(r>=Math.abs(m[l])){C=!0;break}if(r>=Math.abs(d[l-1]))break}if(!C){s=0,w=1;var S=l-1;for(o=l;c+1>o&&(v=w*m[o],m[o]=s*m[o],!(r>=Math.abs(v)));o++)for(y=d[o],b=t(v,y),d[o]=b,s=y/b,w=-v/b,u=0;f>u;u++)_=h[u][S],M=h[u][o],h[u][S]=_*s+M*w,h[u][o]=-_*w+M*s}if(M=d[c],l==c){if(0>M)for(d[c]=-M,u=0;p>u;u++)g[u][c]=-g[u][c];break}if(I>=a-1)throw"Error: no convergence.";for(x=d[l],_=d[c-1],y=m[c-1],b=m[c],v=((_-M)*(_+M)+(y-b)*(y+b))/(2*b*_),y=t(v,1),v=0>v?((x-M)*(x+M)+b*(_/(v-y)-b))/x:((x-M)*(x+M)+b*(_/(v+y)-b))/x,s=1,w=1,o=l+1;c+1>o;o++){for(y=m[o],_=d[o],b=w*y,y=s*y,M=t(v,b),m[o-1]=M,s=v/M,w=b/M,v=x*s+y*w,y=-x*w+y*s,b=_*w,_*=s,u=0;p>u;u++)x=g[u][o-1],M=g[u][o],g[u][o-1]=x*s+M*w,g[u][o]=-x*w+M*s;for(M=t(v,b),d[o-1]=M,s=v/M,w=b/M,v=s*y+w*_,x=-w*y+s*_,u=0;f>u;u++)_=h[u][o-1],M=h[u][o],h[u][o-1]=_*s+M*w,h[u][o]=-_*w+M*s}m[l]=0,m[c]=v,d[c]=x}for(o=0;d.length>o;o++)r>d[o]&&(d[o]=0);for(o=0;p>o;o++)for(u=o-1;u>=0;u--)if(d[u]<d[o]){for(s=d[u],d[u]=d[o],d[o]=s,c=0;h.length>c;c++)n=h[c][o],h[c][o]=h[c][u],h[c][u]=n;for(c=0;g.length>c;c++)n=g[c][o],g[c][o]=g[c][u],g[c][u]=n;o=u}return{U:h,S:d,V:g}},numeric}),define("math/distance",["require","numeric"],function(e){var t=e("numeric"),n={hypot:function(e,t){return 0===e&&0===t?0:Math.abs(e)>Math.abs(t)?Math.abs(e)*Math.sqrt(t/e*(t/e)+1):Math.abs(t)*Math.sqrt(e/t*(e/t)+1)},mean:function(e,t){return e>0==t>0?e+.5*(t-e):.5*(e+t)},dot:function(e,t,n,r){return e*n+t*r},pointToSegmentParameter:function(e,t,n,r,i,a){var s=this.hypot(i-n,a-r);if(0===s)return 0;var o=this.dot((e-n)/s,(t-r)/s,(i-n)/s,(a-r)/s);return o},closestPointOnSegment:function(e,t,n,r,i,a){var s=this.pointToSegmentParameter(e,t,n,r,i,a);return 0>=s?[n,r]:s>=1?[i,a]:[n+s*(i-n),r+s*(a-r)]},pointToSegment:function(e,t,n,r,i,a){var s=this.closestPointOnSegment(e,t,n,r,i,a);return this.hypot(e-s[0],t-s[1])},approx:function(e,t,n){if(n>50)throw Error("Within "+(52-n)+" bits isn\'t really approximate any more");var r=Math.max(Math.max(Math.abs(e),Math.abs(t)),1),i=void 0===n?.5:Math.pow(.5,n);return r===r+i*Math.abs(t-e)},isLine:function(e,r,i,a,s,o){var u=t.svd([[e,r,1],[i,a,1],[s,o,1]]).S;return n.approx(u[u.length-1]/u[0],0)},isCircle:function(e,r,i,a,s,o,u,c){var l=t.svd([[e*e+r*r,e,r,1],[i*i+a*a,i,a,1],[s*s+o*o,s,o,1],[u*u+c*c,u,c,1]]).S;return n.approx(l[l.length-1]/l[0],0)},isConic:function(e,r,i,a,s,o,u,c,l,h,f,p){var m=t.svd([[e*e,r*r,2*e*r,e,r,1],[i*i,a*a,2*i*a,i,a,1],[s*s,o*o,2*s*o,s,o,1],[u*u,c*c,2*u*c,u,c,1],[l*l,h*h,2*l*h,l,h,1],[f*f,p*p,2*f*p,f,p,1]]).S;return n.approx(m[m.length-1]/m[0],0)},conicQuadraticParameters:function(e,n,r,i,a,s,o,u,c,l){return{a:t.det([[n*n,2*e*n,e,n,1],[i*i,2*r*i,r,i,1],[s*s,2*a*s,a,s,1],[u*u,2*o*u,o,u,1],[l*l,2*c*l,c,l,1]]),b:t.det([[e*e,n*n,e,n,1],[r*r,i*i,r,i,1],[a*a,s*s,a,s,1],[o*o,u*u,o,u,1],[c*c,l*l,c,l,1]]),c:-t.det([[e*e,2*e*n,e,n,1],[r*r,2*r*i,r,i,1],[a*a,2*a*s,a,s,1],[o*o,2*o*u,o,u,1],[c*c,2*c*l,c,l,1]])}},classifyConic:function(e,r,i,a,s,o,u,c,l,h,f,p){if(n.isLine(e,r,s,o,f,p))return"line";if(n.isCircle(e,r,i,a,l,h,f,p))return"circle";if(!n.isConic(e,r,i,a,s,o,u,c,l,h,f,p))return"none";var m=n.conicQuadraticParameters(e,r,i,a,s,o,u,c,l,h),d=t.svd([[m.a,m.b],[m.b,m.c]]).S;return n.approx(d[d.length-1]/d[0],0,20)?"parabola":m.b*m.b>m.a*m.c?"hyperbola":"ellipse"}};return n}),define("math/poi",["require","console","./distance"],function(e){function t(e,t){var n;e>t&&(n=e,e=t,t=n);var r=e>0,i=t>0,a=Math.abs(e)>.01,s=Math.abs(t)>.01;if(a||s)return g.mean(e,t);if(0===e)return t*Math.abs(t);if(0===t)return e*Math.abs(e);if(r!==i)return 0;var o=r?Math.sqrt(e*t):-Math.sqrt(e*t);return o>=e&&t>=o?o:g.mean(e,t)}function n(e,n,i,a,s){if(!isFinite(n)||!isFinite(a)||0>n==0>a)return d.log("bisectZero called with bad y values",[n,a]),null;for(;;){var o=t(e,i),u=s(o);if(!isFinite(u))return null;if(o===e||o===i)return Math.abs(n)<=Math.abs(a)?[e,n]:[i,a];if(0===u)return r(e,n,o,u,i,a,s);0>n!=0>u?(i=o,a=u):(e=o,n=u)}}function r(e,n,r,s,o,u,c){var l;if(!isFinite(s))return null;isFinite(n)||(l=i(e,n,r,s,c),e=l[0],n=l[1]),isFinite(u)||(l=i(r,s,o,u,c),o=l[0],u=l[1]);var h,f;h=n===s?[e,n]:a(e,n,r,s,c,s),f=u===s?[o,u]:a(r,s,o,u,c,s);var p=t(h[0],f[0]);return[p,c(p)]}function i(e,n,r,i,a){if(isFinite(n)===isFinite(i))return d.log("bisectFinite called with bad y values",[n,i]),null;for(;;){var s=t(e,r),o=a(s);if(s===e||s===r)return isFinite(n)?[e,n]:[r,i];isFinite(o)!==isFinite(n)?(r=s,i=o):(e=s,n=o)}}function a(e,n,r,i,a,s){if(n===s==(i===s))return d.log("bisectConstant called with bad y values",[n,i,s]),null;for(;;){var o=t(e,r),u=a(o);if(o===e||o===r)return n===s?[e,n]:[r,i];u===s!=(n===s)?(r=o,i=u):(e=o,n=u)}}function s(e,n,i,a,s,o,u){if(!(i>e&&s>i))return d.log("bisectExtremum called with bad x values",[e,i,s]),null;if(!(isFinite(n)&&isFinite(a)&&isFinite(o)&&n!==a&&a!==o&&a>n==a>o))return d.log("bisectExtremum called with bad y values",[n,a,o]),null;for(;;){var c=t(e,i),l=u(c),h=t(i,s),f=u(h);if(!isFinite(l)||!isFinite(f))return null;if(c===e||c===i||h===i||h===s)return l>a==a>n?[c,l]:f>a==a>n?[h,f]:[i,a];if(l===a||f===a)return r(e,n,i,a,s,o,u);l>n==a>n&&l>n==l>a?(s=i,o=a,i=c,a=l):f>o==a>o&&f>a==f>o?(e=i,n=a,i=h,a=f):(e=c,n=l,s=h,o=f)}}function o(e,t,n,r,i,a,s,o){var u=Math.abs(r-t),c=Math.abs(a-r),l=Math.abs(o-a);return u>c&&u>l?[[e,t],[n,r]]:l>c&&l>u?[[i,a],[s,o]]:[[n,r],[i,a]]}function u(e,n,r,a,s,u,c,l){if(!(r>e&&s>r))return d.log("bisectJump called with bad x values",[e,r,s]),null;if(!isFinite(n)||!isFinite(u))return d.log("bisectJump called with bad y values",[n,a,u]),null;if(!isFinite(a))return[i(e,n,r,a,c),i(r,a,s,u,c)];if(l>Math.abs(a-((s-r)*n+(r-e)*u)/(s-e)))return null;for(;;){var h,f,p=t(e,r),m=c(p),v=t(r,s),y=c(v),b=Math.abs(m-g.mean(n,a)),x=Math.abs(y-g.mean(a,u));if(l||(l=0),l>=b&&l>=x)return null;if(!isFinite(m))return h=i(e,n,p,m,c),f=i(p,m,s,u,c),[h,f];if(!isFinite(y))return h=i(e,n,v,y,c),f=i(v,y,s,u,c),[h,f];if(!(p!==e&&p!==r||v!==r&&v!==s))return Math.abs(a-n)>Math.abs(u-a)?(h=[e,n],f=[r,a]):(h=[r,a],f=[s,u]),[h,f];if(p===e||p===r)return o(e,n,r,a,v,y,s,u);if(v===r||v===s)return o(e,n,p,m,r,a,s,u);b>x?(s=r,u=a,r=p,a=m):(e=r,n=a,r=v,a=y)}}function c(e,t){for(var i,a,s,o,u,c,l,h={x:[],y:[]},f=0,p=e.length;p>f;f++){i=e[f],l=void 0,0===i[1]&&(l=[i[0],i[1]]);for(var m=0,d=i.length;d-2>m;m+=2)a=i[m],s=i[m+1],o=i[m+2],u=i[m+3],l?0!==u&&(l[0]!==i[0]&&(c=r(l[0],l[1],a,s,o,u,t),h.x.push(c[0]),h.y.push(c[1])),l=void 0):0===u?l=[a,s]:0>s!=0>u&&(c=n(a,s,o,u,t),c&&(h.x.push(c[0]),h.y.push(c[1])))}return h}function l(e,t,i){for(var a,o,u,c,l,h,f,p,m,d={x:[],y:[]},g=0,v=e.length;v>g;g++){a=e[g];for(var y=0,b=a.length;b-4>y;y+=2)if(o=a[y],u=a[y+1],c=a[y+2],l=a[y+3],h=a[y+4],f=a[y+5],isFinite(u)&&isFinite(l)&&isFinite(f))if(u!==l&&l===f)m=[o,u];else if(u===l&&l!==f&&m)l>m[1]==l>f&&(p=r(m[0],m[1],c,l,h,f,t),d.x.push(p[0]),d.y.push(p[1])),m=void 0;else if(u===l&&l===f);else if(l>u==l>f)if(i){if(i(o)>0==i(h)>0)continue;p=n(o,i(o),h,i(h),i),null===p&&(p=s(o,u,c,l,h,f,t)),p&&(d.x.push(p[0]),d.y.push(t(p[0])))}else p=s(o,u,c,l,h,f,t),p&&(d.x.push(p[0]),d.y.push(p[1]))}return d}function h(e,t){var n=t(0);return isFinite(n)?{x:[0],y:[t(0)]}:{x:[],y:[]}}function f(e){for(var t=e.length,n={x:[],y:[]},r=0;t>r;r++){var i=e[r];0===parseFloat(i[1].toFixed(7))&&(n.x.push(i[0]),n.y.push(i[1])),0===parseFloat(i[i.length-1].toFixed(7))&&(n.x.push(i[i.length-2]),n.y.push(i[i.length-1]))}return n}function p(e,t,n){var r=c(e,t),i=f(e,t);return r.x.push.apply(r.x,i.x),r.y.push.apply(r.y,i.y),{zeros:r,intercept:h(e,t),extrema:l(e,t,n)}}function m(e,t,n){var r,i,a,s=c(e,n),o=l(e,n);for(r=0,i=o.x.length;i>r;r++)g.approx(o.y[r],0)&&(s.x.push(o.x[r]),s.y.push(o.y[r]));for(r=0,a=s.x.length;a>r;r++)s.y[r]=t(s.x[r]);return s}var d=e("console"),g=e("./distance");return{bisectJump:u,bisectExtremum:s,bisectFinite:i,bisectZero:n,findExtrema:l,findZeros:c,findPOIs:p,findIntersections:m,INTERSECTION:1001,ZERO:1002,INTERCEPT:1003,EXTREMUM:1004,EDGE:1005,DEFINITION:1006,TRACE:1007}}),define("graphing/graphmode",{X:1,Y:2,XYPOINT:3,XYPOINT_MOVABLE:4,PARAMETRIC:5,POLAR:6,POLYGONFILL:7,IMPLICIT:8,NONE:10}),define("math/plotter",["require","pjs","./distance","./poi","graphing/graphmode"],function(e){function t(e,t){for(var n,r=new C,i=t.min;t.max+t.step/2>=i;i+=t.step)n=e(i),isFinite(n[0])&&isFinite(n[1])?r.addPoint(n):r.breakSegment();return r.finish()}function n(e,t){for(var n,r=new C(t),i=t.min;t.max+t.step/2>=i;i+=t.step)n=e(i),isFinite(n)?r.addPoint([i,n]):r.breakSegment();return r.finish()}function r(e,t){var n=new C(t);return n.addPoint([t.min,e[0]+t.min*e[1]]),n.addPoint([t.max,e[0]+t.max*e[1]]),n.finish()}function i(e,t,n){var r,i,a,s,o,u,c=n.fn,l=n.jumpTolerance,h=n.stepPerturbation;r=e[0],i=e[1],o=t[0],u=t[1],a=M.mean(r,o),s=c(a);var f=w.bisectJump(r,i,a,s,o,u,c,l);if(f)for(var p=[-h,h],m=0;p.length>m;m++)if(r=e[0]+p[m],i=c(r),isFinite(i)||(r=e[0],i=e[1]),o=t[0]+p[m],u=c(o),isFinite(u)||(o=t[0],u=t[1]),a=M.mean(r,o),s=c(a),w.bisectJump(r,i,a,s,o,u,c,l))return f}function a(e,t){var n,r=new T(e,t),i=t.min,a=e(i),s=[i,a];for(isFinite(a)&&r.accumulator.addPoint([i,a]),i+=t.step;t.max+t.step/2>=i;i+=t.step){var o=i;a=e(o),isFinite(a)||(o=i+r.stepPerturbation,a=e(o)),isFinite(a)||(o=i-r.stepPerturbation,a=e(o)),isFinite(a)&&isFinite(s[1])?(S(s,[o,a],r),r.accumulator.addPoint([o,a])):isFinite(a)&&!isFinite(s[1])?(n=w.bisectFinite(s[0],s[1],o,a,e),n[0]!==o&&r.accumulator.addPoint(n),S(n,[o,a],r),r.accumulator.addPoint([o,a])):!isFinite(a)&&isFinite(s[1])&&(n=w.bisectFinite(s[0],s[1],o,a,e),S(s,n,r),n[0]!==s[0]&&r.accumulator.addPoint(n),r.accumulator.breakSegment()),s=[o,a]}return r.accumulator.finish()}function s(e,t,n,r){function i(e,t){var i=0===t%2?1:-1;if(!r&&-1===i)return!1;for(var a=t*(Math.PI/n),s=[u,u+1,u+2,u+3],o=0,c=s.length;c>o;o++)if(isFinite(e(s[o]))!==isFinite(e(s[o]+a))||Math.abs(e(s[o])-i*e(s[o]+a))>l)return!1;return!0}var a,s,o,u=t.min,c=t.max-t.min,l=t.xtolerance&&t.ytolerance?Math.min(t.xtolerance,t.ytolerance):t.tolerance,h=Math.floor(c/(Math.PI/n));\nfor(a=1;h>=a;a++)if(i(e,a)){for(o=a,s=2;h>=s*a;s++)i(e,s*a)||(o=void 0);if(o)break}return o?o*(Math.PI/n):null}function o(e){return[e[1]*Math.cos(e[0]),e[1]*Math.sin(e[0])]}function u(e,t){return t.map=o,a(e,t)}function c(e,t){for(var n=e.min,r=e.max,i=e.step,a=r-n,s=Math.ceil(a/i),o=a/s,u=0;s>u;u++)t(n+u*o);t(r)}function l(e,t){if(t.max<t.min)return[];var n=new C(t),r=10,i=t.min,a=e(i);isFinite(a[0])&&isFinite(a[1])&&n.addPoint(a);var s;return c(t,function(t){s=e(t),h(e,i,a,t,s,r,n),i=t,a=s}),n.finish()}function h(e,t,n,r,i,a,s){if(r!==t){var o=s.xtolerance,u=s.ytolerance,c=M.mean(t,r),l=e(c,!0),f=isFinite(n[0])&&isFinite(n[1]),p=isFinite(i[0])&&isFinite(i[1]),m=isFinite(l[0])&&isFinite(l[1]);if(0===a||c===t||c===r)return s.breakSegment(),p&&s.addPoint(i),void 0;if(f||p){if(f!==p){for(var d=t,g=r,v=n,y=i;t!==c&&c!==r;)m==f?(t=c,n=l,f=m):(r=c,i=l,p=m),c=t+(r-t)/2,l=e(c,!0),m=isFinite(l[0])&&isFinite(l[1]);return f?(h(e,d,v,t,n,a-1,s),s.breakSegment()):(s.breakSegment(),s.addPoint(i),h(e,r,i,g,y,a-1,s)),void 0}if(f&&m&&p){var b=M.pointToSegmentParameter(l[0],l[1],n[0],n[1],i[0],i[1]);if(b>.2&&.8>b&&o>=Math.abs(l[0]-(n[0]+b*(i[0]-n[0])))&&u>=Math.abs(l[1]-(n[1]+b*(i[1]-n[1]))))return s.addPoint(i),void 0}(n[0]!==l[0]||n[1]!==l[1])&&h(e,t,n,c,l,a-1,s),(i[0]!==l[0]||i[1]!==l[1])&&h(e,c,l,r,i,a-1,s)}}}function f(e,t){for(var n,r,i,a=t.xmin,s=t.ymin,o=t.xmax,u=t.ymax,c=6,l=0,h=1e4,f=-1,m=function(){r++},d=function(){i++},g=12;;){if(r=0,i=0,n={fn:e,mindepth:l,accumulator:{push:m,exhaust:d},xtolerance:t.xtolerance,ytolerance:t.ytolerance},p(n,c+l,a,u,e(a,u),o,u,e(o,u),o,s,e(o,s),a,s,e(a,s)),r===f||r>h){l--;break}if(0===i)break;if(l+=Math.max(1,Math.floor(Math.log((h-r)/i)/Math.log(4))),l>g){l=g;break}f=r}var v=h>r,y=[],b=function(){};return n={fn:e,mindepth:l,accumulator:{push:function(){Array.prototype.push.apply(y,arguments)},exhaust:b},xtolerance:t.xtolerance,ytolerance:t.ytolerance},p(n,c+l,a,u,e(a,u),o,u,e(o,u),o,s,e(o,s),a,s,e(a,s)),{segments:y,resolved:v}}function p(e,t,n,r,i,a,s,o,u,c,l,h,f,m){var d=e.fn,g=e.mindepth,v=e.accumulator,y=e.xtolerance,b=e.ytolerance;if(t||(t=0),0>t)return v.exhaust(),void 0;2*y>Math.abs(n-a)&&2*b>Math.abs(r-f)&&(t=0),t--;var x=.5*(n+a),_=.5*(r+s),w=d(x,_),I=.5*(n+h),C=.5*(r+f),S=d(I,C),T=.5*(a+u),E=.5*(s+c),k=d(T,E),A=.5*(h+u),F=.5*(f+c),D=d(A,F),P=.5*(I+T),V=.5*(_+F),O=d(P,V),q=function(){p(e,t,n,r,i,x,_,w,P,V,O,I,C,S),p(e,t,x,_,w,a,s,o,T,E,k,P,V,O),p(e,t,P,V,O,T,E,k,u,c,l,A,F,D),p(e,t,I,C,S,P,V,O,A,F,D,h,f,m)};if(t>g)return q();if(isFinite(i)!==isFinite(o)||isFinite(i)!==isFinite(l)||isFinite(i)!==isFinite(m))return q();if(i>0==o>0&&w>0!=i>0)return q();if(o>0==l>0&&k>0!=o>0)return q();if(l>0==m>0&&D>0!=l>0)return q();if(m>0==i>0&&S>0!=m>0)return q();if(i>0!=o>0&&o>0!=l>0&&l>0!=m>0)return q();if(i>0!=o>0||o>0!=l>0||l>0!=m>0){var j=[],N=function(e,n,r,i,a,s,o,u,c){var l,h,f,p,m,d=1*(r>0)+2*(s>0)+4*(c>0);switch(d){case 0:return!1;case 7:return!1;case 2:return!0;case 5:return!0;case 1:l=r/(r-c),h=(1-l)*e+l*o,p=(1-l)*n+l*u,l=r/(r-s),f=(1-l)*e+l*i,m=(1-l)*n+l*a;break;case 4:l=c/(c-r),h=(1-l)*o+l*e,p=(1-l)*u+l*n,l=c/(c-s),f=(1-l)*o+l*i,m=(1-l)*u+l*a;break;case 3:l=r/(r-c),h=(1-l)*e+l*o,p=(1-l)*n+l*u,l=s/(s-c),f=(1-l)*i+l*o,m=(1-l)*a+l*u;break;case 6:l=c/(c-r),h=(1-l)*o+l*e,p=(1-l)*u+l*n,l=s/(s-r),f=(1-l)*i+l*e,m=(1-l)*a+l*n}if(Math.abs(f-h)>y||Math.abs(m-p)>b){if(t>=0)return!0;v.exhaust()}return j.push(f,m),!1};if(N(n,r,i,x,_,w,a,s,o))return q();if(N(a,s,o,T,E,k,u,c,l))return q();if(N(u,c,l,A,F,D,h,f,m))return q();if(N(h,f,m,I,C,S,n,r,i))return q();var L=j[0],R=j[1],B=j[2],$=j[3],G=M.mean(L,B),z=M.mean(R,$),U=B-L,Y=$-R,X=M.hypot(U,Y),Z=d(G,z),Q=d(G+Y/X*b,z-U/X*y),W=d(G-Y/X*b,z+U/X*y);if(Q>Z==W>Z)return q();if(Q>0==W>0){if(t>=0)return q();v.exhaust()}v.push(j)}}function m(e){if(!e)return!1;var t=e.viewport.xmin,n=e.viewport.xmax,r=e.viewport.ymin,i=e.viewport.ymax;return!isFinite(t)||!isFinite(n)||t>=n?!1:!isFinite(r)||!isFinite(i)||r>=i?!1:!isFinite(e.screen.width)||0>=e.screen.width?!1:!isFinite(e.screen.height)||0>=e.screen.height?!1:!0}function d(e,t,n){var r,i=e.viewport.xmin,a=e.viewport.xmax,o=e.viewport.ymin,u=e.viewport.ymax,c=e.trigAngleMultiplier||1,l=e.oversample||4,h=1/l*(a-i)/e.screen.width,f=1/l*(u-o)/e.screen.height,p=t.domainBound;switch(t.graphMode){case I.X:if(o=Math.max(o,p[0]),u=Math.min(u,p[1]),!isFinite(u)||!isFinite(o)||o>=u)return!1;r={min:o,max:u,xtolerance:f,ytolerance:h,step:f};break;case I.Y:if(i=Math.max(i,p[0]),a=Math.min(a,p[1]),!isFinite(a)||!isFinite(i)||i>=a)return!1;r={min:i,max:a,xtolerance:h,ytolerance:f,step:h};break;case I.POLAR:r={min:0,max:6*(2*Math.PI/c),step:2*Math.PI/c/1e3,tolerance:Math.min(h,f)};var m=s(n,r,c,"="===t.operator);m&&(r.max=r.min+m);break;case I.PARAMETRIC:t.domain&&(r={min:t.domain.min,max:t.domain.max,step:t.domain.step,xtolerance:h,ytolerance:f});break;case I.IMPLICIT:r={xmin:i,xmax:a,ymin:o,ymax:u,xtolerance:h,ytolerance:f};break;default:return!1}return r}function g(e){var t,n;if(1===e.length&&4===e[0].length)return"line";for(var r=0;e.length>r;r++){var i=e[r],a=i.length;if(12>a)return"unknown";try{n=M.classifyConic(i[0],i[1],i[2*Math.floor(1*a/12)],i[2*Math.floor(1*a/12)+1],i[2*Math.floor(2*a/12)],i[2*Math.floor(2*a/12)+1],i[2*Math.floor(3*a/12)],i[2*Math.floor(3*a/12)+1],i[2*Math.floor(4*a/12)],i[2*Math.floor(4*a/12)+1],i[a-2],i[a-1])}catch(s){return"unknown"}if("none"===n)return"none";if(t&&n!==t)return"none";t=n}return t}function v(e,t,n,i){var s,o,c,h=d(e,t,n);if(h){switch(t.graphMode){case I.X:case I.Y:s=t.isLinear?r(t.linearCoefficients,h):a(n,h);break;case I.POLAR:s=u(n,h);break;case I.IMPLICIT:s=f(n,h);break;case I.PARAMETRIC:h.step||(h.step=(h.max-h.min)/1e3),s=l(n,h)}o=s.segments}else o=[],s={resolved:!0};var p;if(t.graphMode!==I.PARAMETRIC&&t.graphMode!==I.IMPLICIT&&(p=w.findPOIs(o,n,i),o=y(o,p)),(!p||p.zeros.x.length+p.extrema.x.length+p.intercept.x.length>250)&&(p={zeros:{x:[],y:[]},extrema:{x:[],y:[]},intercept:{x:[],y:[]}}),t.graphMode===I.X)for(var m in p)p.hasOwnProperty(m)&&(c=p[m].y,p[m].y=p[m].x,p[m].x=c);var v={segments:o,resolved:s.resolved,graphMode:t.graphMode,color:t.color,style:t.style,operator:t.operator,poi:p,conic:t.graphMode===I.IMPLICIT?"unknown":g(o),expr:null};return v}function y(e,t){for(var n,r,i,a=e.length,s=Array(a),o=t.extrema,u=0,c=o.x.length,l=0;a>l;l++){n=e[l],i=n.length,r=[];for(var h=0;i>h;h+=2){for(;c>u&&o.x[u]<=n[h];)o.x[u]!==n[h]&&r.push(o.x[u],o.y[u]),u++;r.push(n[h],n[h+1])}s[l]=r}return s}function b(e,t,n){var r,i,a,s,o,u=[];switch(n){case I.POLAR:o=this.mapPolar;break;case I.X:o=function(e){return[e[1],e[0]]}}for(r=0;e.length>r;r++)for(s=e[r],i=0;s.length>i;i+=2)a=[s[i],s[i+1]],o&&(a=o(a)),u.push(a[0],a[1]);for(r=t.length-1;r>=0;r--)for(s=t[r],i=s.length-2;i>=0;i-=2)a=[s[i],s[i+1]],o&&(a=o(a)),u.push(a[0],a[1]);return u}function x(e,t,n){for(var r=function(e){var t=e[e.length-1];return t[t.length-2]},i=[],a=0,s=0,o=[],u=[],c=-1/0,l=-1/0;;){if(l>=c){if(a>=t.length)break;u.push(t[a++])}if(c>=l){if(s>=e.length)break;o.push(e[s++])}if(c=r(u),l=r(o),M.approx(c,l,4)){i.push(b(o,u,n)),u=[],o=[];var h=Math.max(c,l);c=h,l=h}}return i}var _=e("pjs"),M=e("./distance"),w=e("./poi"),I=e("graphing/graphmode"),C=_(function(e){e.init=function(e){this.domain=e,e?(this.xtolerance=e.xtolerance||e.tolerance||0,this.ytolerance=e.ytolerance||e.tolerance||0,this.map=e.map):this.xtolerance=this.ytolerance=0,this.segments=[],this.segment=null,this.pivotPoint=null,this.pendingPoint=null},e.colinear=function(e,t,n){this.map&&(e=this.map(e),t=this.map(t),n=this.map(n));var r=M.pointToSegmentParameter(n[0],n[1],e[0],e[1],t[0],t[1]);if(1>r)return!1;var i=[e[0]+r*(t[0]-e[0]),e[1]+r*(t[1]-e[1])];return Math.abs(n[0]-i[0])<=this.xtolerance&&Math.abs(n[1]-i[1])<=this.ytolerance},e.addPoint=function(e){if(this.n+=1,!this.segment)return this.segment=[e[0],e[1]],void 0;if(0>this.xtolerance&&0>this.ytolerance)return this.segment.push(e[0],e[1]),void 0;if(!this.pivotPoint)return this.pivotPoint=e,this.pendingPoint=e,void 0;var t=[this.segment[this.segment.length-2],this.segment[this.segment.length-1]];this.colinear(t,this.pivotPoint,e)||(this.flushPending(),this.pivotPoint=e),this.pendingPoint=e},e.flushPending=function(){this.pendingPoint&&(this.segment.push(this.pendingPoint[0],this.pendingPoint[1]),this.pivotPoint=null,this.pendingPoint=null)},e.breakSegment=function(){this.flushPending(),this.segment&&(this.segment.length>2&&this.segments.push(this.segment),this.segment=null)},e.getSegments=function(){return this.breakSegment(),this.segments},e.finish=function(){return{segments:this.getSegments(),resolved:!0}},e.exhaust=function(){}}),S=function(e,t,n){if(isFinite(n.jumpTolerance)&&!(0>=n.jumpTolerance)){var r=i(e,t,n);r&&(n.accumulator.addPoint(r[0]),n.accumulator.breakSegment(),n.accumulator.addPoint(r[1]))}},T=function(e,t){this.accumulator=new C(t),this.fn=e,this.jumpTolerance=t.ytolerance||t.tolerance,this.stepPerturbation=t.step/10};return{Accumulator:C,sampleParametricNaive:t,sampleXYNaive:n,sampleLinear:r,sampleXY:a,findPiPeriod:s,samplePolar:u,sampleParametricRecursive:l,subsampleParametricRecursive:h,sampleImplicitRecursive:f,subsampleImplicitRecursive:p,validateViewState:m,computeDomain:d,computeGraphData:v,polygonsFromSegments:x}}),define("jison",[],function(){var e={trace:function(){},yy:{},symbols_:{error:2,sentence:3,expr:4,EOF:5,assignment:6,equation:7,function_declaration:8,regression:9,ordered_pair_list:10,double_inequality:11,"boolean":12,identifier:13,"=":14,FUNCTION_PROTOTYPE:15,",":16,"~":17,comparator:18,IDENTIFIER_BASE:19,ordered_pair_list_elements:20,ordered_pair:21,"(":22,")":23,list:24,"[":25,list_elements:26,"]":27,range:28,optional_commas_ellipsis:29,"...":30,list_element_access_impmul:31,expr_atom_impmul:32,list_element_access:33,expr_atom:34,expr_sum:35,"<":36,">":37,">=":38,"<=":39,"+":40,expr_product:41,"-":42,"*":43,"/":44,exponent:45,"^N":46,"^I":47,"^":48,"{":49,"}":50,function_call:51,function_call_unary:52,trig_function_call:53,log_function_call:54,ln_function_call:55,"left|":56,"right|":57,FRAC:58,SQRT:59,"!":60,repeated_operator:61,DERIVATIVE:62,expr_piecewise:63,constant:64,NUMBER:65,repeated_operator_symbol:66,SUM:67,PROD:68,_:69,"{_visible":70,piecewise_list:71,"}_visible":72,incomplete_piecewise_list:73,piecewise_element:74,":":75,trig_function:76,TRIG_FUNCTION:77,log_prefix:78,LOG:79,LOG_BASE_N:80,LN:81,function_argument_list:82,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"=",15:"FUNCTION_PROTOTYPE",16:",",17:"~",19:"IDENTIFIER_BASE",22:"(",23:")",25:"[",27:"]",30:"...",36:"<",37:">",38:">=",39:"<=",40:"+",42:"-",43:"*",44:"/",46:"^N",47:"^I",48:"^",49:"{",50:"}",56:"left|",57:"right|",58:"FRAC",59:"SQRT",60:"!",62:"DERIVATIVE",65:"NUMBER",67:"SUM",68:"PROD",69:"_",70:"{_visible",72:"}_visible",75:":",77:"TRIG_FUNCTION",79:"LOG",80:"LOG_BASE_N",81:"LN"},productions_:[0,[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,3],[3,2],[3,4],[3,1],[6,3],[9,3],[7,3],[11,5],[13,1],[10,1],[20,1],[20,3],[21,5],[24,3],[28,5],[29,1],[29,2],[29,2],[29,3],[26,1],[26,3],[31,4],[33,4],[4,1],[18,1],[18,1],[18,1],[18,1],[12,3],[12,3],[12,5],[35,3],[35,3],[35,1],[41,2],[41,3],[41,3],[41,1],[45,1],[45,1],[45,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,2],[32,7],[32,4],[32,7],[32,2],[32,1],[32,2],[32,1],[34,1],[34,3],[34,2],[34,2],[34,2],[34,1],[34,1],[34,1],[34,1],[66,1],[66,1],[61,9],[63,3],[63,2],[71,3],[71,1],[73,3],[73,1],[74,3],[74,1],[64,1],[64,2],[52,5],[52,4],[76,1],[53,4],[53,2],[53,7],[53,9],[53,3],[53,5],[78,1],[78,1],[78,3],[78,5],[54,4],[54,2],[54,5],[54,3],[55,4],[55,2],[55,5],[55,3],[51,4],[82,3],[82,3],[8,2]],performAction:function(e,t,n,r,i,a){var s=a.length-1;switch(i){case 1:return a[s-1];case 2:return a[s-1];case 3:return a[s-1];case 4:return a[s-1];case 5:return a[s-1];case 6:return a[s-1];case 7:return a[s-1];case 8:return a[s-1];case 9:return r.ErrorMsg.missingRHS(a[s-2]._symbol);case 10:var o=r.parseFunctionDeclaration(a[s-1]).identifier._symbol;return r.ErrorMsg.missingRHS(o);case 11:return r.ErrorMsg.malformedPoint();case 12:return r.ErrorMsg.blankExpression();case 13:this.$=r.Assignment(a[s-2],a[s]),r.setInput(this.$,this._$);break;case 14:this.$=r.Regression(a[s-2],a[s]),r.setInput(this.$,this._$);break;case 15:this.$=r.Equation(a[s-2],a[s]),r.setInput(this.$,this._$);break;case 16:this.$=r.DoubleInequality([a[s-4],a[s-3],a[s-2],a[s-1],a[s]]),r.setInput(this.$,this._$);break;case 17:this.$=r.Identifier(e),r.setInput(this.$,this._$);break;case 18:this.$=r.OrderedPair.fromList(a[s]),r.setInput(this.$,this._$);break;case 19:this.$=[a[s]];break;case 20:a[s-2].push(a[s]),this.$=a[s-2];break;case 21:this.$=r.OrderedPair([a[s-3],a[s-1]]);break;case 22:this.$=r.List(a[s-1]),r.setInput(this.$,this._$);break;case 23:this.$=r.Range([r.List(a[s-3]),r.List(a[s-1])]);break;case 28:this.$=[a[s]];break;case 29:a[s-2].push(a[s]),this.$=a[s-2];break;case 30:this.$=r.ListAccess([a[s-3],a[s-1]]);break;case 31:this.$=r.ListAccess([a[s-3],a[s-1]]);break;case 32:this.$=a[s],r.setInput(this.$,this._$);break;case 33:this.$="<";break;case 34:this.$=">";break;case 35:this.$=">=";break;case 36:this.$="<=";break;case 37:this.$=r.Comparator[a[s-1]]([a[s-2],a[s]]),r.setInput(this.$,this._$);break;case 38:this.$=r.Comparator["="]([a[s-2],a[s]]),r.setInput(this.$,this._$);break;case 39:var u=r.Comparator[a[s-3]]([a[s-4],a[s-2]]),c=r.Comparator[a[s-1]]([a[s-2],a[s]]);this.$=r.And([u,c]),r.setInput(this.$,this._$);break;case 40:this.$=r.Add([a[s-2],a[s]]);break;case 41:this.$=r.Subtract([a[s-2],a[s]]);break;case 42:this.$=a[s];break;case 43:this.$=r.Multiply([a[s-1],a[s]]);break;case 44:this.$=r.Multiply([a[s-2],a[s]]);break;case 45:this.$=r.Divide([a[s-2],a[s]]);break;case 46:this.$=a[s];break;case 47:this.$=r.Constant(Number(a[s]));break;case 48:this.$=r.Identifier(a[s]);break;case 49:this.$=a[s-1];break;case 50:this.$=a[s];break;case 51:this.$=a[s];break;case 52:this.$=a[s];break;case 53:this.$=a[s];break;case 54:this.$=a[s];break;case 55:this.$=a[s];break;case 56:this.$=a[s];break;case 57:this.$=a[s-1];break;case 58:this.$=a[s-1];break;case 59:this.$=r.FunctionCall("\\\\abs",[a[s-1]]);break;case 60:this.$=r.Exponent([a[s-1],a[s]]);break;case 61:this.$=r.Divide([a[s-4],a[s-1]]);break;case 62:this.$=r.FunctionCall("\\\\sqrt",[a[s-1]]);break;case 63:this.$=r.FunctionCall("\\\\nthroot",[a[s-1],a[s-4]]);break;case 64:this.$=r.FunctionCall("\\\\factorial",[a[s-1]]);break;case 65:this.$=a[s];break;case 66:this.$=r.Derivative(a[s-1],[a[s]]);break;case 67:this.$=a[s];break;case 68:this.$=a[s];break;case 69:this.$=r.Negative([r.Exponent([r.Constant(Number(a[s-1])),a[s]])]);break;case 70:this.$=r.Exponent([a[s-1],a[s]]);break;case 71:this.$=r.FunctionCall("\\\\factorial",[a[s-1]]);break;case 72:this.$=r.Negative([a[s]]);break;case 73:this.$=a[s];break;case 74:this.$=a[s];break;case 75:this.$=a[s];break;case 76:this.$=a[s];break;case 77:this.$=r.Sum;break;case 78:this.$=r.Product;break;case 79:this.$=a[s-8]([a[s-5],a[s-3],a[s-1],a[s]]);break;case 80:this.$=r.Piecewise.chain(a[s-1]);break;case 81:this.$=r.Piecewise.empty();break;case 82:a[s-2].push({condition:r.Constant(!0),if_expr:a[s]}),this.$=a[s-2];break;case 83:this.$=a[s];break;case 84:a[s-2].push(a[s]),this.$=a[s-2];break;case 85:this.$=[a[s]];break;case 86:this.$={condition:a[s-2],if_expr:a[s]};break;case 87:this.$={condition:a[s],if_expr:r.Constant(1)};break;case 88:this.$=r.Constant(Number(e));break;case 89:this.$=r.Constant(-a[s]);break;case 90:this.$=r.FunctionExponent([a[s-4],a[s-2],a[s]]);break;case 91:this.$=r.FunctionCall(a[s-3],[a[s-1]]);break;case 92:this.$=r.Identifier(e);break;case 93:this.$=r.FunctionCall(a[s-3],[a[s-1]]);break;case 94:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply(a[s-1]._symbol);this.$=r.FunctionCall(a[s-1],[a[s]]);break;case 95:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply(a[s-6]._symbol);if(1!=a[s-2].constantValue)throw r.ErrorMsg.badTrigExponent(a[s-6]._symbol);this.$=r.FunctionCall(r.Identifier(r.inverses[a[s-6]._symbol]),[a[s]]);break;case 96:if(1!=a[s-4].constantValue)throw r.ErrorMsg.badTrigExponent(a[s-8]._symbol);this.$=r.FunctionCall(r.Identifier(r.inverses[a[s-8]._symbol]),[a[s-1]]);break;case 97:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply(a[s-2]._symbol);if("2"!=a[s-1])throw r.ErrorMsg.badTrigExponent(a[s-2]._symbol);this.$=r.Exponent([r.FunctionCall(a[s-2],[a[s]]),r.Constant(2)]);break;case 98:if("2"!=a[s-3])throw r.ErrorMsg.badTrigExponent(a[s-4]._symbol);this.$=r.Exponent([r.FunctionCall(a[s-4],[a[s-1]]),r.Constant(2)]);break;case 99:this.$=r.Constant(10);break;case 100:this.$=r.Constant(Number(e));break;case 101:this.$=a[s];break;case 102:this.$=a[s-1];break;case 103:this.$=r.FunctionCall(r.Identifier("log"),[a[s-1],a[s-3]]);break;case 104:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply("log");this.$=r.FunctionCall(r.Identifier("log"),[a[s],a[s-1]]);break;case 105:if("2"!=a[s-3])throw r.ErrorMsg.badLogExponent("log");this.$=r.Exponent([r.FunctionCall(r.Identifier("log"),[a[s-1],a[s-4]]),r.Constant(2)]);break;case 106:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply("log");if("2"!=a[s-1])throw r.ErrorMsg.badLogExponent("log");this.$=r.Exponent([r.FunctionCall(r.Identifier("log"),[a[s],a[s-2]]),r.Constant(2)]);break;case 107:this.$=r.FunctionCall(r.Identifier("ln"),[a[s-1]]);break;case 108:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply("ln");this.$=r.FunctionCall(r.Identifier("ln"),[a[s]]);break;case 109:if("2"!=a[s-3])throw r.ErrorMsg.badLogExponent("ln");this.$=r.Exponent([r.FunctionCall(r.Identifier("ln"),[a[s-1]]),r.Constant(2)]);break;case 110:if(!a[s].okForImplicitFunction())throw r.ErrorMsg.badImplicitMultiply("ln");if("2"!=a[s-1])throw r.ErrorMsg.badLogExponent("ln");this.$=r.Exponent([r.FunctionCall(r.Identifier("ln"),[a[s]]),r.Constant(2)]);break;case 111:this.$=r.FunctionCall(a[s-3],a[s-1]);break;case 112:this.$=a[s-2].concat([a[s]]);break;case 113:this.$=[a[s-2],a[s]];break;case 114:var l=r.parseFunctionDeclaration(a[s-1]);this.$=r.FunctionDefinition(l.identifier,l.args,a[s]),r.setInput(this.$,this._$)}},table:[{3:1,4:2,5:[1,12],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:[1,11],19:[1,15],20:14,21:17,22:[1,19],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{1:[3]},{5:[1,51],14:[1,53],16:[1,52],17:[1,54],18:55,36:[1,56],37:[1,57],38:[1,58],39:[1,59]},{5:[1,60]},{5:[1,61]},{5:[1,62]},{5:[1,63]},{5:[1,64]},{5:[1,65]},{5:[1,66]},{5:[2,50],14:[1,67],16:[2,50],17:[2,50],19:[2,50],22:[1,68],25:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],56:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50],70:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50]},{4:70,5:[1,69],13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{1:[2,12]},{5:[2,32],14:[2,32],16:[2,32],17:[2,32],19:[2,32],22:[2,32],23:[2,32],25:[2,32],27:[2,32],30:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[1,73],42:[1,74],43:[2,32],44:[2,32],46:[2,32],47:[2,32],48:[2,32],49:[2,32],50:[2,32],56:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],62:[2,32],67:[2,32],68:[2,32],70:[2,32],72:[2,32],75:[2,32],77:[2,32],79:[2,32],80:[2,32],81:[2,32]},{5:[2,18],16:[1,75]},{5:[2,17],14:[2,17],16:[2,17],17:[2,17],19:[2,17],22:[2,17],23:[2,17],25:[2,17],27:[2,17],30:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],42:[2,17],43:[2,17],44:[2,17],46:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],62:[2,17],65:[2,17],67:[2,17],68:[2,17],70:[2,17],72:[2,17],75:[2,17],77:[2,17],79:[2,17],80:[2,17],81:[2,17]},{5:[2,42],13:71,14:[2,42],16:[2,42],17:[2,42],19:[1,15],22:[1,72],23:[2,42],25:[2,42],27:[2,42],30:[2,42],31:33,32:76,36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],42:[2,42],43:[1,77],44:[1,78],46:[2,42],47:[2,42],48:[2,42],49:[1,34],50:[2,42],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,42],58:[1,36],59:[1,37],60:[2,42],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,42],75:[2,42],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,19],16:[2,19]},{5:[2,46],14:[2,46],16:[2,46],17:[2,46],19:[2,46],22:[2,46],23:[2,46],25:[1,81],27:[2,46],30:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],42:[2,46],43:[2,46],44:[2,46],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,46],50:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[1,80],62:[2,46],67:[2,46],68:[2,46],70:[2,46],72:[2,46],75:[2,46],77:[2,46],79:[2,46],80:[2,46],81:[2,46]},{4:85,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,68],14:[2,68],16:[2,68],17:[2,68],19:[2,68],22:[2,68],23:[2,68],25:[2,68],27:[2,68],30:[2,68],36:[2,68],37:[2,68],38:[2,68],39:[2,68],40:[2,68],42:[2,68],43:[2,68],44:[2,68],46:[2,68],47:[2,68],48:[2,68],49:[2,68],50:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],62:[2,68],67:[2,68],68:[2,68],70:[2,68],72:[2,68],75:[2,68],77:[2,68],79:[2,68],80:[2,68],81:[2,68]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:87,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,86],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,73],14:[2,73],16:[2,73],17:[2,73],19:[2,73],22:[2,73],23:[2,73],25:[2,73],27:[2,73],30:[2,73],36:[2,73],37:[2,73],38:[2,73],39:[2,73],40:[2,73],42:[2,73],43:[2,73],44:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],62:[2,73],67:[2,73],68:[2,73],70:[2,73],72:[2,73],75:[2,73],77:[2,73],79:[2,73],80:[2,73],81:[2,73]},{5:[2,74],14:[2,74],16:[2,74],17:[2,74],19:[2,74],22:[2,74],23:[2,74],25:[2,74],27:[2,74],30:[2,74],36:[2,74],37:[2,74],38:[2,74],39:[2,74],40:[2,74],42:[2,74],43:[2,74],44:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],62:[2,74],67:[2,74],68:[2,74],70:[2,74],72:[2,74],75:[2,74],77:[2,74],79:[2,74],80:[2,74],81:[2,74]},{5:[2,75],14:[2,75],16:[2,75],17:[2,75],19:[2,75],22:[2,75],23:[2,75],25:[2,75],27:[2,75],30:[2,75],36:[2,75],37:[2,75],38:[2,75],39:[2,75],40:[2,75],42:[2,75],43:[2,75],44:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],62:[2,75],67:[2,75],68:[2,75],70:[2,75],72:[2,75],75:[2,75],77:[2,75],79:[2,75],80:[2,75],81:[2,75]},{5:[2,76],14:[2,76],16:[2,76],17:[2,76],19:[2,76],22:[2,76],23:[2,76],25:[1,90],27:[2,76],30:[2,76],36:[2,76],37:[2,76],38:[2,76],39:[2,76],40:[2,76],42:[2,76],43:[2,76],44:[2,76],45:88,46:[1,82],47:[1,83],48:[1,84],49:[2,76],50:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[1,89],62:[2,76],67:[2,76],68:[2,76],70:[2,76],72:[2,76],75:[2,76],77:[2,76],79:[2,76],80:[2,76],81:[2,76]},{5:[2,88],14:[2,88],16:[2,88],17:[2,88],19:[2,88],22:[2,88],23:[2,88],25:[2,88],27:[2,88],30:[2,88],36:[2,88],37:[2,88],38:[2,88],39:[2,88],40:[2,88],42:[2,88],43:[2,88],44:[2,88],46:[2,88],47:[2,88],48:[2,88],49:[2,88],50:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],62:[2,88],67:[2,88],68:[2,88],70:[2,88],72:[2,88],75:[2,88],77:[2,88],79:[2,88],80:[2,88],81:[2,88]},{4:92,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],26:91,28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,51],14:[2,51],16:[2,51],17:[2,51],19:[2,51],22:[2,51],23:[2,51],25:[2,51],27:[2,51],30:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],42:[2,51],43:[2,51],44:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],62:[2,51],67:[2,51],68:[2,51],70:[2,51],72:[2,51],75:[2,51],77:[2,51],79:[2,51],80:[2,51],81:[2,51]},{5:[2,52],14:[2,52],16:[2,52],17:[2,52],19:[2,52],22:[2,52],23:[2,52],25:[2,52],27:[2,52],30:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],42:[2,52],43:[2,52],44:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],62:[2,52],67:[2,52],68:[2,52],70:[2,52],72:[2,52],75:[2,52],77:[2,52],79:[2,52],80:[2,52],81:[2,52]},{5:[2,53],14:[2,53],16:[2,53],17:[2,53],19:[2,53],22:[2,53],23:[2,53],25:[2,53],27:[2,53],30:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],42:[2,53],43:[2,53],44:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],62:[2,53],67:[2,53],68:[2,53],70:[2,53],72:[2,53],75:[2,53],77:[2,53],79:[2,53],80:[2,53],81:[2,53]},{5:[2,54],14:[2,54],16:[2,54],17:[2,54],19:[2,54],22:[2,54],23:[2,54],25:[2,54],27:[2,54],30:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],42:[2,54],43:[2,54],44:[2,54],46:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],62:[2,54],67:[2,54],68:[2,54],70:[2,54],72:[2,54],75:[2,54],77:[2,54],79:[2,54],80:[2,54],81:[2,54]},{5:[2,55],14:[2,55],16:[2,55],17:[2,55],19:[2,55],22:[2,55],23:[2,55],25:[2,55],27:[2,55],30:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],42:[2,55],43:[2,55],44:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],62:[2,55],67:[2,55],68:[2,55],70:[2,55],72:[2,55],75:[2,55],77:[2,55],79:[2,55],80:[2,55],81:[2,55]},{5:[2,56],14:[2,56],16:[2,56],17:[2,56],19:[2,56],22:[2,56],23:[2,56],25:[2,56],27:[2,56],30:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],42:[2,56],43:[2,56],44:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],62:[2,56],67:[2,56],68:[2,56],70:[2,56],72:[2,56],75:[2,56],77:[2,56],79:[2,56],80:[2,56],81:[2,56]},{4:93,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:94,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{49:[1,95]},{25:[1,97],49:[1,96]},{5:[2,65],14:[2,65],16:[2,65],17:[2,65],19:[2,65],22:[2,65],23:[2,65],25:[2,65],27:[2,65],30:[2,65],36:[2,65],37:[2,65],38:[2,65],39:[2,65],40:[2,65],42:[2,65],43:[2,65],44:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],62:[2,65],67:[2,65],68:[2,65],70:[2,65],72:[2,65],75:[2,65],77:[2,65],79:[2,65],80:[2,65],81:[2,65]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:98,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,67],14:[2,67],16:[2,67],17:[2,67],19:[2,67],22:[2,67],23:[2,67],25:[2,67],27:[2,67],30:[2,67],36:[2,67],37:[2,67],38:[2,67],39:[2,67],40:[2,67],42:[2,67],43:[2,67],44:[2,67],46:[2,67],47:[2,67],48:[2,67],49:[2,67],50:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],62:[2,67],67:[2,67],68:[2,67],70:[2,67],72:[2,67],75:[2,67],77:[2,67],79:[2,67],80:[2,67],81:[2,67]},{13:71,19:[1,15],22:[1,99],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:100,42:[1,21],46:[1,102],48:[1,101],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,103],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:104,42:[1,21],46:[1,105],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,106],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:107,42:[1,21],46:[1,108],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{69:[1,109]},{4:115,12:114,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],71:110,72:[1,111],73:112,74:113,76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,92],22:[2,92],25:[2,92],42:[2,92],46:[2,92],48:[2,92],49:[2,92],56:[2,92],58:[2,92],59:[2,92],62:[2,92],65:[2,92],67:[2,92],68:[2,92],70:[2,92],77:[2,92],79:[2,92],80:[2,92],81:[2,92]},{19:[2,99],22:[2,99],25:[2,99],42:[2,99],46:[2,99],49:[2,99],56:[2,99],58:[2,99],59:[2,99],62:[2,99],65:[2,99],67:[2,99],68:[2,99],69:[1,116],70:[2,99],77:[2,99],79:[2,99],80:[2,99],81:[2,99]},{19:[2,100],22:[2,100],25:[2,100],42:[2,100],46:[2,100],49:[2,100],56:[2,100],58:[2,100],59:[2,100],62:[2,100],65:[2,100],67:[2,100],68:[2,100],70:[2,100],77:[2,100],79:[2,100],80:[2,100],81:[2,100]},{69:[2,77]},{69:[2,78]},{1:[2,1]},{4:117,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:118,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:119,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:121,13:120,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,33],22:[2,33],25:[2,33],42:[2,33],49:[2,33],56:[2,33],58:[2,33],59:[2,33],62:[2,33],65:[2,33],67:[2,33],68:[2,33],70:[2,33],77:[2,33],79:[2,33],80:[2,33],81:[2,33]},{19:[2,34],22:[2,34],25:[2,34],42:[2,34],49:[2,34],56:[2,34],58:[2,34],59:[2,34],62:[2,34],65:[2,34],67:[2,34],68:[2,34],70:[2,34],77:[2,34],79:[2,34],80:[2,34],81:[2,34]},{19:[2,35],22:[2,35],25:[2,35],42:[2,35],49:[2,35],56:[2,35],58:[2,35],59:[2,35],62:[2,35],65:[2,35],67:[2,35],68:[2,35],70:[2,35],77:[2,35],79:[2,35],80:[2,35],81:[2,35]},{19:[2,36],22:[2,36],25:[2,36],42:[2,36],49:[2,36],56:[2,36],58:[2,36],59:[2,36],62:[2,36],65:[2,36],67:[2,36],68:[2,36],70:[2,36],77:[2,36],79:[2,36],80:[2,36],81:[2,36]},{1:[2,2]},{1:[2,3]},{1:[2,4]},{1:[2,5]},{1:[2,6]},{1:[2,7]},{1:[2,8]},{4:123,5:[1,122],13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:125,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43],82:124},{1:[2,10]},{5:[2,114]},{5:[2,50],14:[2,50],16:[2,50],17:[2,50],19:[2,50],22:[1,68],23:[2,50],25:[2,50],27:[2,50],30:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50],70:[2,50],72:[2,50],75:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50]},{4:126,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:127,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:128,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{21:129,22:[1,130]},{5:[2,43],14:[2,43],16:[2,43],17:[2,43],19:[2,43],22:[2,43],23:[2,43],25:[1,90],27:[2,43],30:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],42:[2,43],43:[2,43],44:[2,43],45:88,46:[1,82],47:[1,83],48:[1,84],49:[2,43],50:[2,43],56:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[1,89],62:[2,43],67:[2,43],68:[2,43],70:[2,43],72:[2,43],75:[2,43],77:[2,43],79:[2,43],80:[2,43],81:[2,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:131,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:132,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,70],14:[2,70],16:[2,70],17:[2,70],19:[2,70],22:[2,70],23:[2,70],25:[2,70],27:[2,70],30:[2,70],36:[2,70],37:[2,70],38:[2,70],39:[2,70],40:[2,70],42:[2,70],43:[2,70],44:[2,70],46:[2,70],47:[2,70],48:[2,70],49:[2,70],50:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],62:[2,70],67:[2,70],68:[2,70],70:[2,70],72:[2,70],75:[2,70],77:[2,70],79:[2,70],80:[2,70],81:[2,70]},{5:[2,71],14:[2,71],16:[2,71],17:[2,71],19:[2,71],22:[2,71],23:[2,71],25:[2,71],27:[2,71],30:[2,71],36:[2,71],37:[2,71],38:[2,71],39:[2,71],40:[2,71],42:[2,71],43:[2,71],44:[2,71],46:[2,71],47:[2,71],48:[2,71],49:[2,71],50:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],62:[2,71],67:[2,71],68:[2,71],70:[2,71],72:[2,71],75:[2,71],77:[2,71],79:[2,71],80:[2,71],81:[2,71]},{4:133,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,47],14:[2,47],16:[2,47],17:[2,47],19:[2,47],22:[2,47],23:[2,47],25:[2,47],27:[2,47],30:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],42:[2,47],43:[2,47],44:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],62:[2,47],65:[2,47],67:[2,47],68:[2,47],70:[2,47],72:[2,47],75:[2,47],77:[2,47],79:[2,47],80:[2,47],81:[2,47]},{5:[2,48],14:[2,48],16:[2,48],17:[2,48],19:[2,48],22:[2,48],23:[2,48],25:[2,48],27:[2,48],30:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],42:[2,48],43:[2,48],44:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],62:[2,48],65:[2,48],67:[2,48],68:[2,48],70:[2,48],72:[2,48],75:[2,48],77:[2,48],79:[2,48],80:[2,48],81:[2,48]},{49:[1,134]},{16:[1,135],23:[1,136]},{5:[2,89],14:[2,89],16:[2,89],17:[2,89],19:[2,89],22:[2,89],23:[2,89],25:[2,89],27:[2,89],30:[2,89],36:[2,89],37:[2,89],38:[2,89],39:[2,89],40:[2,89],42:[2,89],43:[2,89],44:[2,89],45:137,46:[1,82],47:[1,83],48:[1,84],49:[2,89],50:[2,89],56:[2,89],57:[2,89],58:[2,89],59:[2,89],60:[2,89],62:[2,89],67:[2,89],68:[2,89],70:[2,89],72:[2,89],75:[2,89],77:[2,89],79:[2,89],80:[2,89],81:[2,89]},{5:[2,72],14:[2,72],16:[2,72],17:[2,72],19:[2,72],22:[2,72],23:[2,72],25:[1,81],27:[2,72],30:[2,72],36:[2,72],37:[2,72],38:[2,72],39:[2,72],40:[2,72],42:[2,72],43:[2,72],44:[2,72],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,72],50:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[1,80],62:[2,72],67:[2,72],68:[2,72],70:[2,72],72:[2,72],75:[2,72],77:[2,72],79:[2,72],80:[2,72],81:[2,72]},{5:[2,60],14:[2,60],16:[2,60],17:[2,60],19:[2,60],22:[2,60],23:[2,60],25:[2,60],27:[2,60],30:[2,60],36:[2,60],37:[2,60],38:[2,60],39:[2,60],40:[2,60],42:[2,60],43:[2,60],44:[2,60],46:[2,60],47:[2,60],48:[2,60],49:[2,60],50:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],62:[2,60],67:[2,60],68:[2,60],70:[2,60],72:[2,60],75:[2,60],77:[2,60],79:[2,60],80:[2,60],81:[2,60]},{5:[2,64],14:[2,64],16:[2,64],17:[2,64],19:[2,64],22:[2,64],23:[2,64],25:[2,64],27:[2,64],30:[2,64],36:[2,64],37:[2,64],38:[2,64],39:[2,64],40:[2,64],42:[2,64],43:[2,64],44:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],62:[2,64],67:[2,64],68:[2,64],70:[2,64],72:[2,64],75:[2,64],77:[2,64],79:[2,64],80:[2,64],81:[2,64]},{4:138,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{16:[1,141],27:[1,139],29:140,30:[1,142]},{16:[2,28],27:[2,28],30:[2,28]},{50:[1,143]},{57:[1,144]},{4:145,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:146,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:147,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,66],13:71,14:[2,66],16:[2,66],17:[2,66],19:[1,15],22:[1,72],23:[2,66],25:[2,66],27:[2,66],30:[2,66],31:33,32:76,36:[2,66],37:[2,66],38:[2,66],39:[2,66],40:[2,66],42:[2,66],43:[1,77],44:[1,78],46:[2,66],47:[2,66],48:[2,66],49:[1,34],50:[2,66],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,66],58:[1,36],59:[1,37],60:[2,66],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,66],75:[2,66],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:148,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,94],13:71,14:[2,94],16:[2,94],17:[2,94],19:[1,15],22:[1,72],23:[2,94],25:[2,94],27:[2,94],30:[2,94],31:33,32:76,36:[2,94],37:[2,94],38:[2,94],39:[2,94],40:[2,94],42:[2,94],43:[1,77],44:[1,78],46:[2,94],47:[2,94],48:[2,94],49:[1,34],50:[2,94],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,94],58:[1,36],59:[1,37],60:[2,94],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,94],75:[2,94],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{49:[1,149]},{13:71,19:[1,15],22:[1,151],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:150,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:152,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,104],13:71,14:[2,104],16:[2,104],17:[2,104],19:[1,15],22:[1,72],23:[2,104],25:[2,104],27:[2,104],30:[2,104],31:33,32:76,36:[2,104],37:[2,104],38:[2,104],39:[2,104],40:[2,104],42:[2,104],43:[1,77],44:[1,78],46:[2,104],47:[2,104],48:[2,104],49:[1,34],50:[2,104],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,104],58:[1,36],59:[1,37],60:[2,104],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,104],75:[2,104],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,153],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:154,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:155,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,108],13:71,14:[2,108],16:[2,108],17:[2,108],19:[1,15],22:[1,72],23:[2,108],25:[2,108],27:[2,108],30:[2,108],31:33,32:76,36:[2,108],37:[2,108],38:[2,108],39:[2,108],40:[2,108],42:[2,108],43:[1,77],44:[1,78],46:[2,108],47:[2,108],48:[2,108],49:[1,34],50:[2,108],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,108],58:[1,36],59:[1,37],60:[2,108],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,108],75:[2,108],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,156],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:157,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{49:[1,158]},{72:[1,159]},{5:[2,81],14:[2,81],16:[2,81],17:[2,81],19:[2,81],22:[2,81],23:[2,81],25:[2,81],27:[2,81],30:[2,81],36:[2,81],37:[2,81],38:[2,81],39:[2,81],40:[2,81],42:[2,81],43:[2,81],44:[2,81],46:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],62:[2,81],67:[2,81],68:[2,81],70:[2,81],72:[2,81],75:[2,81],77:[2,81],79:[2,81],80:[2,81],81:[2,81]},{16:[1,160],72:[2,83]},{16:[2,85],72:[2,85]},{16:[2,87],72:[2,87],75:[1,161]},{14:[1,163],18:162,36:[1,56],37:[1,57],38:[1,58],39:[1,59]},{13:164,19:[1,15],49:[1,165]},{5:[1,166]},{5:[2,15]},{5:[2,14]},{5:[2,50],18:167,19:[2,50],22:[1,68],25:[2,50],36:[1,56],37:[1,57],38:[1,58],39:[1,59],40:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],56:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50],70:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50]},{5:[2,37],16:[2,37],18:168,36:[1,56],37:[1,57],38:[1,58],39:[1,59],72:[2,37],75:[2,37]},{1:[2,9]},{5:[2,13]},{16:[1,170],23:[1,169]},{16:[1,172],23:[1,171]},{23:[1,136]},{5:[2,40],13:71,14:[2,40],16:[2,40],17:[2,40],19:[1,15],22:[1,72],23:[2,40],25:[2,40],27:[2,40],30:[2,40],31:33,32:76,36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],42:[2,40],43:[1,77],44:[1,78],46:[2,40],47:[2,40],48:[2,40],49:[1,34],50:[2,40],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,40],58:[1,36],59:[1,37],60:[2,40],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,40],75:[2,40],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,41],13:71,14:[2,41],16:[2,41],17:[2,41],19:[1,15],22:[1,72],23:[2,41],25:[2,41],27:[2,41],30:[2,41],31:33,32:76,36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],42:[2,41],43:[1,77],44:[1,78],46:[2,41],47:[2,41],48:[2,41],49:[1,34],50:[2,41],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,41],58:[1,36],59:[1,37],60:[2,41],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,41],75:[2,41],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,20],16:[2,20]},{4:173,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,44],14:[2,44],16:[2,44],17:[2,44],19:[2,44],22:[2,44],23:[2,44],25:[1,81],27:[2,44],30:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],42:[2,44],43:[2,44],44:[2,44],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,44],50:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[1,80],62:[2,44],67:[2,44],68:[2,44],70:[2,44],72:[2,44],75:[2,44],77:[2,44],79:[2,44],80:[2,44],81:[2,44]},{5:[2,45],14:[2,45],16:[2,45],17:[2,45],19:[2,45],22:[2,45],23:[2,45],25:[1,81],27:[2,45],30:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],42:[2,45],43:[2,45],44:[2,45],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,45],50:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[1,80],62:[2,45],67:[2,45],68:[2,45],70:[2,45],72:[2,45],75:[2,45],77:[2,45],79:[2,45],80:[2,45],81:[2,45]},{27:[1,174]},{4:175,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:176,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,57],14:[2,57],16:[2,57],17:[2,57],19:[2,57],22:[2,57],23:[2,57],25:[2,57],27:[2,57],30:[2,57],36:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],42:[2,57],43:[2,57],44:[2,57],46:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],62:[2,57],67:[2,57],68:[2,57],70:[2,57],72:[2,57],75:[2,57],77:[2,57],79:[2,57],80:[2,57],81:[2,57]},{5:[2,69],14:[2,69],16:[2,69],17:[2,69],19:[2,69],22:[2,69],23:[2,69],25:[2,69],27:[2,69],30:[2,69],36:[2,69],37:[2,69],38:[2,69],39:[2,69],40:[2,69],42:[2,69],43:[2,69],44:[2,69],46:[2,69],47:[2,69],48:[2,69],49:[2,69],50:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],62:[2,69],67:[2,69],68:[2,69],70:[2,69],72:[2,69],75:[2,69],77:[2,69],79:[2,69],80:[2,69],81:[2,69]},{27:[1,177]},{5:[2,22],14:[2,22],16:[2,22],17:[2,22],19:[2,22],22:[2,22],23:[2,22],25:[2,22],27:[2,22],30:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],42:[2,22],43:[2,22],44:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],62:[2,22],67:[2,22],68:[2,22],70:[2,22],72:[2,22],75:[2,22],77:[2,22],79:[2,22],80:[2,22],81:[2,22]},{4:92,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],26:178,28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:179,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,30:[1,180],31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{16:[1,181],19:[2,24],22:[2,24],25:[2,24],42:[2,24],49:[2,24],56:[2,24],58:[2,24],59:[2,24],62:[2,24],65:[2,24],67:[2,24],68:[2,24],70:[2,24],77:[2,24],79:[2,24],80:[2,24],81:[2,24]},{5:[2,58],14:[2,58],16:[2,58],17:[2,58],19:[2,58],22:[2,58],23:[2,58],25:[2,58],27:[2,58],30:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],42:[2,58],43:[2,58],44:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],62:[2,58],67:[2,58],68:[2,58],70:[2,58],72:[2,58],75:[2,58],77:[2,58],79:[2,58],80:[2,58],81:[2,58]},{5:[2,59],14:[2,59],16:[2,59],17:[2,59],19:[2,59],22:[2,59],23:[2,59],25:[2,59],27:[2,59],30:[2,59],36:[2,59],37:[2,59],38:[2,59],39:[2,59],40:[2,59],42:[2,59],43:[2,59],44:[2,59],46:[2,59],47:[2,59],48:[2,59],49:[2,59],50:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],62:[2,59],67:[2,59],68:[2,59],70:[2,59],72:[2,59],75:[2,59],77:[2,59],79:[2,59],80:[2,59],81:[2,59]},{50:[1,182]},{50:[1,183]},{27:[1,184]},{23:[1,185]},{42:[1,186]},{5:[2,97],13:71,14:[2,97],16:[2,97],17:[2,97],19:[1,15],22:[1,72],23:[2,97],25:[2,97],27:[2,97],30:[2,97],31:33,32:76,36:[2,97],37:[2,97],38:[2,97],39:[2,97],40:[2,97],42:[2,97],43:[1,77],44:[1,78],46:[2,97],47:[2,97],48:[2,97],49:[1,34],50:[2,97],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,97],58:[1,36],59:[1,37],60:[2,97],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,97],75:[2,97],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:187,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{23:[1,188]},{4:189,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,106],13:71,14:[2,106],16:[2,106],17:[2,106],19:[1,15],22:[1,72],23:[2,106],25:[2,106],27:[2,106],30:[2,106],31:33,32:76,36:[2,106],37:[2,106],38:[2,106],39:[2,106],40:[2,106],42:[2,106],43:[1,77],44:[1,78],46:[2,106],47:[2,106],48:[2,106],49:[1,34],50:[2,106],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,106],58:[1,36],59:[1,37],60:[2,106],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,106],75:[2,106],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{23:[1,190]},{4:191,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,110],13:71,14:[2,110],16:[2,110],17:[2,110],19:[1,15],22:[1,72],23:[2,110],25:[2,110],27:[2,110],30:[2,110],31:33,32:76,36:[2,110],37:[2,110],38:[2,110],39:[2,110],40:[2,110],42:[2,110],43:[1,77],44:[1,78],46:[2,110],47:[2,110],48:[2,110],49:[1,34],50:[2,110],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,110],58:[1,36],59:[1,37],60:[2,110],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,110],75:[2,110],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:192,19:[1,15]},{5:[2,80],14:[2,80],16:[2,80],17:[2,80],19:[2,80],22:[2,80],23:[2,80],25:[2,80],27:[2,80],30:[2,80],36:[2,80],37:[2,80],38:[2,80],39:[2,80],40:[2,80],42:[2,80],43:[2,80],44:[2,80],46:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],56:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],62:[2,80],67:[2,80],68:[2,80],70:[2,80],72:[2,80],75:[2,80],77:[2,80],79:[2,80],80:[2,80],81:[2,80]},{4:193,12:114,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],74:194,76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:195,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:121,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:196,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,101],22:[2,101],25:[2,101],42:[2,101],46:[2,101],49:[2,101],56:[2,101],58:[2,101],59:[2,101],62:[2,101],65:[2,101],67:[2,101],68:[2,101],70:[2,101],77:[2,101],79:[2,101],80:[2,101],81:[2,101]},{4:197,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{1:[2,11]},{4:198,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:199,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,111],14:[2,111],16:[2,111],17:[2,111],19:[2,111],22:[2,111],23:[2,111],25:[2,111],27:[2,111],30:[2,111],36:[2,111],37:[2,111],38:[2,111],39:[2,111],40:[2,111],42:[2,111],43:[2,111],44:[2,111],46:[2,111],47:[2,111],48:[2,111],49:[2,111],50:[2,111],56:[2,111],57:[2,111],58:[2,111],59:[2,111],60:[2,111],62:[2,111],67:[2,111],68:[2,111],70:[2,111],72:[2,111],75:[2,111],77:[2,111],79:[2,111],80:[2,111],81:[2,111]},{4:200,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,91],14:[2,91],16:[2,91],17:[2,91],19:[2,91],22:[2,91],23:[2,91],25:[2,91],27:[2,91],30:[2,91],36:[2,91],37:[2,91],38:[2,91],39:[2,91],40:[2,91],42:[2,91],43:[2,91],44:[2,91],45:201,46:[1,82],47:[1,83],48:[1,84],49:[2,91],50:[2,91],56:[2,91],57:[2,91],58:[2,91],59:[2,91],60:[2,91],62:[2,91],67:[2,91],68:[2,91],70:[2,91],72:[2,91],75:[2,91],77:[2,91],79:[2,91],80:[2,91],81:[2,91]},{4:202,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{16:[1,135]},{5:[2,31],14:[2,31],16:[2,31],17:[2,31],19:[2,31],22:[2,31],23:[2,31],25:[2,31],27:[2,31],30:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],42:[2,31],43:[2,31],44:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31],56:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],62:[2,31],67:[2,31],68:[2,31],70:[2,31],72:[2,31],75:[2,31],77:[2,31],79:[2,31],80:[2,31],81:[2,31]},{50:[1,203]},{23:[1,204]},{5:[2,30],14:[2,30],16:[2,30],17:[2,30],19:[2,30],22:[2,30],23:[2,30],25:[2,30],27:[2,30],30:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],42:[2,30],43:[2,30],44:[2,30],46:[2,30],47:[2,30],48:[2,30],49:[2,30],50:[2,30],56:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],62:[2,30],67:[2,30],68:[2,30],70:[2,30],72:[2,30],75:[2,30],77:[2,30],79:[2,30],80:[2,30],81:[2,30]},{16:[1,206],27:[1,205]},{16:[2,29],27:[2,29],30:[2,29]},{16:[1,207],19:[2,25],22:[2,25],25:[2,25],42:[2,25],49:[2,25],56:[2,25],58:[2,25],59:[2,25],62:[2,25],65:[2,25],67:[2,25],68:[2,25],70:[2,25],77:[2,25],79:[2,25],80:[2,25],81:[2,25]},{19:[2,26],22:[2,26],25:[2,26],42:[2,26],49:[2,26],56:[2,26],58:[2,26],59:[2,26],62:[2,26],65:[2,26],67:[2,26],68:[2,26],70:[2,26],77:[2,26],79:[2,26],80:[2,26],81:[2,26]},{49:[1,208]},{5:[2,62],14:[2,62],16:[2,62],17:[2,62],19:[2,62],22:[2,62],23:[2,62],25:[2,62],27:[2,62],30:[2,62],36:[2,62],37:[2,62],38:[2,62],39:[2,62],40:[2,62],42:[2,62],43:[2,62],44:[2,62],46:[2,62],47:[2,62],48:[2,62],49:[2,62],50:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],62:[2,62],67:[2,62],68:[2,62],70:[2,62],72:[2,62],75:[2,62],77:[2,62],79:[2,62],80:[2,62],81:[2,62]},{49:[1,209]},{5:[2,93],14:[2,93],16:[2,93],17:[2,93],19:[2,93],22:[2,93],23:[2,93],25:[2,93],27:[2,93],30:[2,93],36:[2,93],37:[2,93],38:[2,93],39:[2,93],40:[2,93],42:[2,93],43:[2,93],44:[2,93],46:[2,93],47:[2,93],48:[2,93],49:[2,93],50:[2,93],56:[2,93],57:[2,93],58:[2,93],59:[2,93],60:[2,93],62:[2,93],67:[2,93],68:[2,93],70:[2,93],72:[2,93],75:[2,93],77:[2,93],79:[2,93],80:[2,93],81:[2,93]},{42:[1,211],64:210,65:[1,26]},{23:[1,212]},{5:[2,103],14:[2,103],16:[2,103],17:[2,103],19:[2,103],22:[2,103],23:[2,103],25:[2,103],27:[2,103],30:[2,103],36:[2,103],37:[2,103],38:[2,103],39:[2,103],40:[2,103],42:[2,103],43:[2,103],44:[2,103],46:[2,103],47:[2,103],48:[2,103],49:[2,103],50:[2,103],56:[2,103],57:[2,103],58:[2,103],59:[2,103],60:[2,103],62:[2,103],67:[2,103],68:[2,103],70:[2,103],72:[2,103],75:[2,103],77:[2,103],79:[2,103],80:[2,103],81:[2,103]},{23:[1,213]},{5:[2,107],14:[2,107],16:[2,107],17:[2,107],19:[2,107],22:[2,107],23:[2,107],25:[2,107],27:[2,107],30:[2,107],36:[2,107],37:[2,107],38:[2,107],39:[2,107],40:[2,107],42:[2,107],43:[2,107],44:[2,107],46:[2,107],47:[2,107],48:[2,107],49:[2,107],50:[2,107],56:[2,107],57:[2,107],58:[2,107],59:[2,107],60:[2,107],62:[2,107],67:[2,107],68:[2,107],70:[2,107],72:[2,107],75:[2,107],77:[2,107],79:[2,107],80:[2,107],81:[2,107]},{23:[1,214]},{14:[1,215]},{14:[1,163],18:162,36:[1,56],37:[1,57],38:[1,58],39:[1,59],72:[2,82]},{16:[2,84],72:[2,84]},{16:[2,86],72:[2,86]},{16:[2,38],72:[2,38],75:[2,38]},{50:[1,216]},{5:[2,16]},{5:[2,39],16:[2,39],72:[2,39],75:[2,39]},{16:[2,112],23:[2,112]},{5:[2,90],14:[2,90],16:[2,90],17:[2,90],19:[2,90],22:[2,90],23:[2,90],25:[2,90],27:[2,90],30:[2,90],36:[2,90],37:[2,90],38:[2,90],39:[2,90],40:[2,90],42:[2,90],43:[2,90],44:[2,90],46:[2,90],47:[2,90],48:[2,90],49:[2,90],50:[2,90],56:[2,90],57:[2,90],58:[2,90],59:[2,90],60:[2,90],62:[2,90],67:[2,90],68:[2,90],70:[2,90],72:[2,90],75:[2,90],77:[2,90],79:[2,90],80:[2,90],81:[2,90]},{16:[2,113],23:[2,113]},{5:[2,49],14:[2,49],16:[2,49],17:[2,49],19:[2,49],22:[2,49],23:[2,49],25:[2,49],27:[2,49],30:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],42:[2,49],43:[2,49],44:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],62:[2,49],65:[2,49],67:[2,49],68:[2,49],70:[2,49],72:[2,49],75:[2,49],77:[2,49],79:[2,49],80:[2,49],81:[2,49]},{5:[2,21],16:[2,21]},{5:[2,23],14:[2,23],16:[2,23],17:[2,23],19:[2,23],22:[2,23],23:[2,23],25:[2,23],27:[2,23],30:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],42:[2,23],43:[2,23],44:[2,23],46:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],62:[2,23],67:[2,23],68:[2,23],70:[2,23],72:[2,23],75:[2,23],77:[2,23],79:[2,23],80:[2,23],81:[2,23]},{4:179,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,27],22:[2,27],25:[2,27],42:[2,27],49:[2,27],56:[2,27],58:[2,27],59:[2,27],62:[2,27],65:[2,27],67:[2,27],68:[2,27],70:[2,27],77:[2,27],79:[2,27],80:[2,27],81:[2,27]},{4:217,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:218,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{50:[1,219]},{65:[1,220]},{5:[2,98],14:[2,98],16:[2,98],17:[2,98],19:[2,98],22:[2,98],23:[2,98],25:[2,98],27:[2,98],30:[2,98],36:[2,98],37:[2,98],38:[2,98],39:[2,98],40:[2,98],42:[2,98],43:[2,98],44:[2,98],46:[2,98],47:[2,98],48:[2,98],49:[2,98],50:[2,98],56:[2,98],57:[2,98],58:[2,98],59:[2,98],60:[2,98],62:[2,98],67:[2,98],68:[2,98],70:[2,98],72:[2,98],75:[2,98],77:[2,98],79:[2,98],80:[2,98],81:[2,98]},{5:[2,105],14:[2,105],16:[2,105],17:[2,105],19:[2,105],22:[2,105],23:[2,105],25:[2,105],27:[2,105],30:[2,105],36:[2,105],37:[2,105],38:[2,105],39:[2,105],40:[2,105],42:[2,105],43:[2,105],44:[2,105],46:[2,105],47:[2,105],48:[2,105],49:[2,105],50:[2,105],56:[2,105],57:[2,105],58:[2,105],59:[2,105],60:[2,105],62:[2,105],67:[2,105],68:[2,105],70:[2,105],72:[2,105],75:[2,105],77:[2,105],79:[2,105],80:[2,105],81:[2,105]},{5:[2,109],14:[2,109],16:[2,109],17:[2,109],19:[2,109],22:[2,109],23:[2,109],25:[2,109],27:[2,109],30:[2,109],36:[2,109],37:[2,109],38:[2,109],39:[2,109],40:[2,109],42:[2,109],43:[2,109],44:[2,109],46:[2,109],47:[2,109],48:[2,109],49:[2,109],50:[2,109],56:[2,109],57:[2,109],58:[2,109],59:[2,109],60:[2,109],62:[2,109],67:[2,109],68:[2,109],70:[2,109],72:[2,109],75:[2,109],77:[2,109],79:[2,109],80:[2,109],81:[2,109]},{4:221,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,102],22:[2,102],25:[2,102],42:[2,102],46:[2,102],49:[2,102],56:[2,102],58:[2,102],59:[2,102],62:[2,102],65:[2,102],67:[2,102],68:[2,102],70:[2,102],77:[2,102],79:[2,102],80:[2,102],81:[2,102]},{50:[1,222]},{50:[1,223]},{13:71,19:[1,15],22:[1,225],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:224,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{50:[2,89]},{50:[1,226]},{5:[2,61],14:[2,61],16:[2,61],17:[2,61],19:[2,61],22:[2,61],23:[2,61],25:[2,61],27:[2,61],30:[2,61],36:[2,61],37:[2,61],38:[2,61],39:[2,61],40:[2,61],42:[2,61],43:[2,61],44:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],62:[2,61],67:[2,61],68:[2,61],70:[2,61],72:[2,61],75:[2,61],77:[2,61],79:[2,61],80:[2,61],81:[2,61]},{5:[2,63],14:[2,63],16:[2,63],17:[2,63],19:[2,63],22:[2,63],23:[2,63],25:[2,63],27:[2,63],30:[2,63],36:[2,63],37:[2,63],38:[2,63],39:[2,63],40:[2,63],42:[2,63],43:[2,63],44:[2,63],46:[2,63],47:[2,63],48:[2,63],49:[2,63],50:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],62:[2,63],67:[2,63],68:[2,63],70:[2,63],72:[2,63],75:[2,63],77:[2,63],79:[2,63],80:[2,63],81:[2,63]},{5:[2,95],13:71,14:[2,95],16:[2,95],17:[2,95],19:[1,15],22:[1,72],23:[2,95],25:[2,95],27:[2,95],30:[2,95],31:33,32:76,36:[2,95],37:[2,95],38:[2,95],39:[2,95],40:[2,95],42:[2,95],43:[1,77],44:[1,78],46:[2,95],47:[2,95],48:[2,95],49:[1,34],50:[2,95],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,95],58:[1,36],59:[1,37],60:[2,95],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,95],75:[2,95],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:227,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{45:228,46:[1,82],47:[1,83],48:[1,84]},{23:[1,229]},{4:230,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,96],14:[2,96],16:[2,96],17:[2,96],19:[2,96],22:[2,96],23:[2,96],25:[2,96],27:[2,96],30:[2,96],36:[2,96],37:[2,96],38:[2,96],39:[2,96],40:[2,96],42:[2,96],43:[2,96],44:[2,96],46:[2,96],47:[2,96],48:[2,96],49:[2,96],50:[2,96],56:[2,96],57:[2,96],58:[2,96],59:[2,96],60:[2,96],62:[2,96],67:[2,96],68:[2,96],70:[2,96],72:[2,96],75:[2,96],77:[2,96],79:[2,96],80:[2,96],81:[2,96]},{5:[2,79],14:[2,79],16:[2,79],17:[2,79],19:[2,79],22:[2,79],23:[2,79],25:[2,79],27:[2,79],30:[2,79],36:[2,79],37:[2,79],38:[2,79],39:[2,79],40:[2,79],42:[2,79],43:[2,79],44:[2,79],46:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],56:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],62:[2,79],67:[2,79],68:[2,79],70:[2,79],72:[2,79],75:[2,79],77:[2,79],79:[2,79],80:[2,79],81:[2,79]}],defaultActions:{12:[2,12],49:[2,77],50:[2,78],51:[2,1],60:[2,2],61:[2,3],62:[2,4],63:[2,5],64:[2,6],65:[2,7],66:[2,8],69:[2,10],70:[2,114],118:[2,15],119:[2,14],122:[2,9],123:[2,13],166:[2,11],198:[2,16],220:[2,89]},parseError:function(e){throw Error(e)\n},parse:function(e){function t(){var e;return e=n.lexer.lex()||1,"number"!=typeof e&&(e=n.symbols_[e]||e),e}var n=this,r=[0],i=[null],a=[],s=this.table,o="",u=0,c=0,l=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,this.lexer.yylloc===void 0&&(this.lexer.yylloc={});var h=this.lexer.yylloc;a.push(h);var f=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var p,m,d,g,v,y,b,x,_,M={};;){if(d=r[r.length-1],this.defaultActions[d]?g=this.defaultActions[d]:((null===p||p===void 0)&&(p=t()),g=s[d]&&s[d][p]),g===void 0||!g.length||!g[0]){var w="";if(!l){_=[];for(y in s[d])this.terminals_[y]&&y>2&&_.push("\'"+this.terminals_[y]+"\'");w=this.lexer.showPosition?"Parse error on line "+(u+1)+":\\n"+this.lexer.showPosition()+"\\nExpecting "+_.join(", ")+", got \'"+(this.terminals_[p]||p)+"\'":"Parse error on line "+(u+1)+": Unexpected "+(1==p?"end of input":"\'"+(this.terminals_[p]||p)+"\'"),this.parseError(w,{text:this.lexer.match,token:this.terminals_[p]||p,line:this.lexer.yylineno,loc:h,expected:_})}}if(g[0]instanceof Array&&g.length>1)throw Error("Parse Error: multiple actions possible at state: "+d+", token: "+p);switch(g[0]){case 1:r.push(p),i.push(this.lexer.yytext),a.push(this.lexer.yylloc),r.push(g[1]),p=null,m?(p=m,m=null):(c=this.lexer.yyleng,o=this.lexer.yytext,u=this.lexer.yylineno,h=this.lexer.yylloc,l>0&&l--);break;case 2:if(b=this.productions_[g[1]][1],M.$=i[i.length-b],M._$={first_line:a[a.length-(b||1)].first_line,last_line:a[a.length-1].last_line,first_column:a[a.length-(b||1)].first_column,last_column:a[a.length-1].last_column},f&&(M._$.range=[a[a.length-(b||1)].range[0],a[a.length-1].range[1]]),v=this.performAction.call(M,o,c,u,this.yy,g[1],i,a),v!==void 0)return v;b&&(r=r.slice(0,2*-1*b),i=i.slice(0,-1*b),a=a.slice(0,-1*b)),r.push(this.productions_[g[1]][0]),i.push(M.$),a.push(M._$),x=s[r[r.length-2]][r[r.length-1]],r.push(x);break;case 3:return!0}}return!0}},t=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e;var t=e.match(/(?:\\r\\n?|\\n).*/g);return t?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\\r\\n?|\\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\\r\\n?|\\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\\n/g,"")},upcomingInput:function(){var e=this.match;return 20>e.length&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\\n/g,"")},showPosition:function(){var e=this.pastInput(),t=Array(e.length+1).join("-");return e+this.upcomingInput()+"\\n"+t+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var e,t,n,r,i;this._more||(this.yytext="",this.match="");for(var a=this._currentRules(),s=0;a.length>s&&(n=this._input.match(this.rules[a[s]]),!n||t&&!(n[0].length>t[0].length)||(t=n,r=s,this.options.flex));s++);return t?(i=t[0].match(/(?:\\r\\n?|\\n).*/g),i&&(this.yylineno+=i.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:i?i[i.length-1].length-i[i.length-1].match(/\\r?\\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,a[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e?e:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return e!==void 0?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)}};return e.options={},e.performAction=function(e,t,n,r){switch(n){case 0:break;case 1:return 49;case 2:return 50;case 3:return"MATH_SHIFT";case 4:return t.yytext=this.matches[this.matches.length-1],46;case 5:return t.yytext=this.matches[this.matches.length-1],47;case 6:return 48;case 7:return t.yytext=Number(this.matches[2])+Number(this.matches[5])/Number(this.matches[6]),65;case 8:return 65;case 9:return 43;case 10:return 44;case 11:return t.yytext=this.matches[3],62;case 12:return t.yytext=this.matches[this.matches.length-1],80;case 13:return 81;case 14:return 79;case 15:return 58;case 16:return 59;case 17:return 67;case 18:return 68;case 19:return 19;case 20:return 56;case 21:return 57;case 22:return 42;case 23:return 40;case 24:return 14;case 25:return 17;case 26:return 17;case 27:return"...";case 28:return 69;case 29:return 60;case 30:return 5;case 31:return 22;case 32:return 23;case 33:return 25;case 34:return 27;case 35:return 70;case 36:return 72;case 37:return 75;case 38:return 38;case 39:return 39;case 40:return 37;case 41:return 36;case 42:return 16;case 43:return 15;case 44:return 77;case 45:return t.yytext="\\\\sign",19;case 46:return t.yytext="\\\\gcd",19;case 47:return t.yytext="\\\\lcm",19;case 48:return t.yytext="\\\\stdevp",19;case 49:return t.yytext="\\\\stdevp",19;case 50:return t.yytext="\\\\stdev",19;case 51:return t.yytext="\\\\stdev",19;case 52:return t.yytext="\\\\var",19;case 53:return t.yytext="\\\\"+this.matches[3]+this.matches[4],19;case 54:return 19;case 55:break;case 56:return"UNRECOGNIZED"}},e.rules=[/^(?:(\\\\space|\\\\:|\\s|\\\\ )+)/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\$)/,/^(?:\\^([0-9]))/,/^(?:\\^([a-zA-Z]))/,/^(?:\\^)/,/^(?:(([0-9]+)((?:\\s|\\\\space|\\\\:|\\\\ )*)\\\\frac((?:\\s|\\\\space|\\\\:|\\\\ )*)\\{([0-9]+)\\}\\{([0-9]+)\\}))/,/^(?:[0-9]+(\\.[0-9]+)?|(\\.[0-9]+))/,/^(?:\\*|(\\\\cdot))/,/^(?:\\/)/,/^(?:(\\\\frac((?:\\s|\\\\space|\\\\:|\\\\ )*)\\{d\\}\\{d(((\\\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?))\\}))/,/^(?:(\\\\log)((?:\\s|\\\\space|\\\\:|\\\\ )*)*_([0-9]))/,/^(?:(\\\\ln))/,/^(?:(\\\\log))/,/^(?:(\\\\frac))/,/^(?:(\\\\sqrt))/,/^(?:(\\\\sum))/,/^(?:(\\\\prod))/,/^(?:(\\\\length))/,/^(?:\\\\left\\|)/,/^(?:\\\\right\\|)/,/^(?:-)/,/^(?:\\+)/,/^(?:=)/,/^(?:~)/,/^(?:\\\\sim\\b)/,/^(?:\\.\\.\\.)/,/^(?:[_])/,/^(?:!)/,/^(?:$)/,/^(?:(\\()|\\\\left\\()/,/^(?:(\\))|\\\\right\\))/,/^(?:(\\[)|\\\\left\\[)/,/^(?:(\\])|\\\\right\\])/,/^(?:(\\\\\\{)|\\\\left\\\\\\{)/,/^(?:(\\\\\\})|\\\\right\\\\\\})/,/^(?::)/,/^(?:(\\\\ge|>=))/,/^(?:(\\\\le|<=))/,/^(?:(\\\\gt|>))/,/^(?:(\\\\lt|<))/,/^(?:,)/,/^(?:(###)(((?:\\s|\\\\space|\\\\:|\\\\ )*)(?:((\\\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?)|((\\\\operatorname\\{([a-zA-Z]+)\\})((_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?)))((?:\\s|\\\\space|\\\\:|\\\\ )*)(\\\\left\\(|\\()((?:\\s|\\\\space|\\\\:|\\\\ )*)((\\\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?)(((?:\\s|\\\\space|\\\\:|\\\\ )*),((?:\\s|\\\\space|\\\\:|\\\\ )*)((\\\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?)((?:\\s|\\\\space|\\\\:|\\\\ )*))*((?:\\s|\\\\space|\\\\:|\\\\ )*)(\\\\right\\)|\\))((?:\\s|\\\\space|\\\\:|\\\\ )*)=))/,/^(?:(\\\\(arc)?(sin|cos|tan|cot|sec|csc)h?))/,/^(?:(\\\\signum))/,/^(?:(\\\\(gcf|mcd)))/,/^(?:(\\\\mcm))/,/^(?:(\\\\stdDevP))/,/^(?:(\\\\stddevp))/,/^(?:(\\\\stdDev))/,/^(?:(\\\\stddev))/,/^(?:(\\\\variance))/,/^(?:((\\\\operatorname\\{([a-zA-Z]+)\\})((_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?)))/,/^(?:((\\\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\\{[a-zA-Z0-9]+\\})?))/,/^(?:(###))/,/^(?:.)/],e.conditions={conditional:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],inclusive:!0},INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],inclusive:!0}},e}();return e.lexer=t,e}),define("math/policy",["require","graphing/graphmode"],function(e){var t=e("graphing/graphmode"),n={assignmentForbidden:function(e){return"x"===e||"y"===e||"theta"===e||"tmp"===e.slice(0,3)},validRegressionParameter:function(e){return"x"!==e&&"y"!==e},sliderVariables:function(e){-1!==e.indexOf("theta")&&(e=e.filter(function(e){return"r"!==e}));var t=this;return e.filter(function(e){return!t.assignmentForbidden(e)})},validLHS:function(e){return"theta"!==e},unplottablePolarFunction:function(e,t){return"theta"!==e?!1:-1!==t.indexOf("r")},validDoubleInequalitySymbol:function(e){return"x"===e||"y"===e},validDoubleInequalityVariables:function(e){return e.length>2?!1:e.every(n.validDoubleInequalitySymbol)},validExpressionVariable:function(e){return"x"===e},validSolvedVariable:function(e){return"x"===e||"y"===e||"r"===e},validImplicitVariables:function(e){return 2!==e.length?!1:"x"===e[0]&&"y"===e[1]||"y"===e[0]&&"x"===e[1]||"r"===e[0]&&"theta"===e[1]||"theta"===e[0]&&"r"===e[1]},graphableListVariables:function(e,t){return"x"===e||"y"===e||"r"===e||"x"===t||"y"===t},validParametricVariable:function(e){return"t"===e},validParametricVariables:function(e){return 1===e.length&&n.validParametricVariable(e[0])},validInequalityVariables:function(e){switch(e.length){case 1:return"x"===e[0]||"y"===e[0]||"r"===e[0];case 2:return n.validImplicitVariables(e);default:return!1}},validFirstColumnVariable:function(e){return"y"!==e&&"r"!==e&&"theta"!==e&&!e.match(/y_(\\d+)/)},complicatedPolarImplicit:function(e,t){return"theta"===e||"r"===e&&1!==t},constantGraphMode:function(e){return"x"===e?t.X:"r"===e?t.POLAR:t.Y},graphMode:function(e,n){return"y"===n?t.X:"x"===e?t.X:"r"===e&&"theta"===n?t.POLAR:t.Y},tableableAsConstant:function(e){return"x"===e?!1:"r"===e?!1:"theta"===e?!1:!0},implicitIndependent:function(){return"x"},implicitDependency:function(e){return"y"===e?"x":"theta"===e?"r":"y"},graphableAsConstant:function(e){return"y"===e||"x"===e||"r"===e},graphableAsBareIdentifier:function(e){return"x"===e}};return n}),define("math/builtin",["require","math/distance"],function(e){var t=e("math/distance"),n={};n.mod=function(e,t){return e-t*Math.floor(e/t)},n.sign=function(e){return 0===e?0:e>0?1:0>e?-1:0/0},n.lcm=function(e,t){e=Math.round(e),t=Math.round(t);var r=n.getGCD(e,t);return Math.abs(e*t/r)},n.gcd=function(e,t){return n.getGCD(e,t)},n.nCr=function(e,t){if(e=Math.round(e),t=Math.round(t),t>e||0>e||0>t)return 0;for(var n=1,r=0;t>r;r++)n*=(e-r)/(r+1);return n},n.nPr=function(e,t){if(e=Math.round(e),t=Math.round(t),t>e||0>e||0>t)return 0;for(var n=1,r=0;t>r;r++)n*=e-r;return n},n.factorial=function(e){return n.gamma(e+1)},n._integerFactorial=function(e){if(e!==Math.floor(e))return 0/0;if(0>e)return 0/0;if(e>170)return 0/0;if(0===e||1===e)return 1;for(var t=1,n=2;e>=n;n++)t*=n;return t},n.gamma=function(e){return e===Math.floor(e)?n._integerFactorial(e-1):0>e?Math.PI/(Math.sin(Math.PI*e)*n.gamma(1-e)):Math.exp(n.lnGamma(e))},n.lnGamma=function(e){if(0>e)return 0/0;for(var t=[57.15623566586292,-59.59796035547549,14.136097974741746,-.4919138160976202,3399464998481189e-20,4652362892704858e-20,-9837447530487956e-20,.0001580887032249125,-.00021026444172410488,.00021743961811521265,-.0001643181065367639,8441822398385275e-20,-26190838401581408e-21,36899182659531625e-22],n=.9999999999999971,r=0;14>r;r++)n+=t[r]/(e+r+1);var i=e+5.2421875;return(e+.5)*Math.log(i)-i+Math.log(2.5066282746310007*n/e)},n.bernoulliTable=[1/6,-1/30,1/42,-1/30,5/66,-691/2730,7/6,-3617/510,43867/798,-174611/330,854513/138,-236364091/2730,8553103/6,-23749461029/870],n.cotDerivative=function(e,t){if(e!==Math.floor(e))return 0/0;if(0>e)return 0/0;if(0===e)return 1/n.tan(t);var r=n.sin(t);if(1===e)return-1/(r*r);var i=n.cos(t);if(2===e)return 2*i/(r*r*r);var a,s,o,u,c,l=[0,2];for(s=3;e>=s;s++){for(a=[],o=0;s>o;o++)u=0,c=0,o>0&&(u=(s-o+1)*l[o-1]),s>o+2&&(c=(o+1)*l[o+1]),a.push(-(u+c));l=a}var h=0;for(o=e-1;o>=0;o--)h=a[o]+i*h;return h/Math.pow(r,e+1)},n.polyGamma=function(e,t){if(0>e)return 0/0;if(e!==Math.floor(e))return 0/0;var r=0===e%2?-1:1;if(0>t)return-r*n.polyGamma(e,1-t)-Math.pow(Math.PI,e+1)*n.cotDerivative(e,Math.PI*t);for(var i=n.factorial(e),a=0,s=Math.pow(t,-(e+1));10>t;)a+=s,t++,s=Math.pow(t,-(e+1));a+=0===e?-Math.log(t):s*t/e,a+=.5*s;for(var o=n.bernoulliTable,u=e+1,c=2,l=s*t*u/c,h=1/(t*t),f=1;14>=f;f++)l*=h,a+=l*o[f-1],u++,c++,l*=u/c,u++,c++,l*=u/c;return i*r*a},n.getGCD=function(e,t){var n=Math.round(e),r=Math.round(t);if(0>n&&(n=-n),0>r&&(r=-r),r>n){var i=r;r=n,n=i}if(0===r)return n;for(var a=n%r;a>0;)n=r,r=a,a=n%r;return r},n.toFraction=function(e,t){if(1/0===e)return{n:1/0,d:1};if(e===-1/0)return{n:-1/0,d:1};if(!isFinite(e))return{n:0/0,d:1};var n,r,i,a=0,s=1,o=1,u=0;for(t||(t=1e6);;){if(n=Math.floor(e),r=n*s+a,i=n*u+o,i>t)break;if(a=s,o=u,s=r,u=i,e===n)break;e=1/(e-n)}return{n:s,d:u}},n.log=function(e){var t=Math.log(e);return Math.exp(Math.round(t))===e?Math.round(t):t},n.log_base=function(e,t){var n=Math.log(e)/Math.log(t);return Math.pow(t,Math.round(n))===e?Math.round(n):n},n.pow=function(e,r){if(e>=0||r===Math.floor(r))return Math.pow(e,r);var i=n.toFraction(r,100);return t.approx(i.n/i.d,r,2)&&1===i.d%2?(0===i.n%2?1:-1)*Math.pow(-e,r):0/0},n.nthroot=function(e,t){return n.pow(e,1/t)};var r=1/Math.PI;return n.sin=function(e){var t=Math.abs(e);return.5*(2*t*r%2)+t===t?0:Math.sin(e)},n.cos=function(e){var t=Math.abs(e);return.5*((2*t*r+1)%2)+t===t?0:Math.cos(e)},n.tan=function(e){var t=Math.abs(e);return.5*(2*t*r%2)+t===t?0:.5*((2*t*r+1)%2)+t===t?1/0:Math.tan(e)},n.sec=function(e){var t=Math.abs(e);return.5*((2*t*r+1)%2)+t===t?1/0:1/Math.cos(e)},n.csc=function(e){var t=Math.abs(e);return.5*(2*t*r%2)+t===t?1/0:1/Math.sin(e)},n.cot=function(e){var t=Math.abs(e);return.5*(2*t*r%2)+t===t?1/0:.5*((2*t*r+1)%2)+t===t?0:1/Math.tan(e)},n.acot=function(e){return Math.PI/2-Math.atan(e)},n.acsc=function(e){return Math.asin(1/e)},n.asec=function(e){return Math.acos(1/e)},n.sinh=function(e){return(Math.exp(e)-Math.exp(-e))/2},n.cosh=function(e){return(Math.exp(e)+Math.exp(-e))/2},n.tanh=function(e){return e>0?(1-Math.exp(-2*e))/(1+Math.exp(-2*e)):(Math.exp(2*e)-1)/(Math.exp(2*e)+1)},n.sech=function(e){return 1/n.cosh(e)},n.csch=function(e){return 1/n.sinh(e)},n.coth=function(e){return 1/n.tanh(e)},n.asinh=function(e){return Math.log(e+Math.sqrt(e*e+1))},n.acosh=function(e){return Math.log(e+Math.sqrt(e+1)*Math.sqrt(e-1))},n.atanh=function(e){return.5*Math.log((1+e)/(1-e))},n.asech=function(e){return Math.log(1/e+Math.sqrt(1/e+1)*Math.sqrt(1/e-1))},n.acsch=function(e){return Math.log(1/e+Math.sqrt(1/(e*e)+1))},n.acoth=function(e){return.5*Math.log((e+1)/(e-1))},n.mean=function(e){for(var t=0,n=0;e.length>n;n++)t+=e[n];return t/e.length},n.total=function(e){for(var t=0,n=0;e.length>n;n++)t+=e[n];return t},n.length=function(e){return e.length},n.listMin=function(e){if(1>e.length)return 0/0;var t=e[0];if(isNaN(t))return 0/0;for(var n=1;e.length>n;n++){if(isNaN(e[n]))return 0/0;t>e[n]&&(t=e[n])}return t},n.listMax=function(e){if(1>e.length)return 0/0;var t=e[0];if(isNaN(t))return 0/0;for(var n=1;e.length>n;n++){if(isNaN(e[n]))return 0/0;e[n]>=t&&(t=e[n])}return t},n.quantile=function(e,t){if(!isFinite(t)||0>t||t>1)return 0/0;var r=e.length,i=n.sortPerm(e),a=t*(r-1);return Math.floor(a)===a?e[i[a]]:(Math.ceil(a)-a)*e[i[Math.floor(a)]]+(a-Math.floor(a))*e[i[Math.ceil(a)]]},n.sortPerm=function(e){for(var t=e.length,n=[],r=0;t>r;r++)n.push(r);return n.sort(function(t,n){return e[t]-e[n]}),n},n.upperQuantileIndex=function(e,t){return n.sortPerm(e)[Math.ceil(t*(e.length-1))]+1},n.lowerQuantileIndex=function(e,t){return n.sortPerm(e)[Math.floor(t*(e.length-1))]+1},n.median=function(e){return n.quantile(e,.5)},n.argMin=function(e){if(1>e.length)return 0;var t=e[0];if(isNaN(t))return 0;for(var n=0,r=1;e.length>r;r++){if(isNaN(e[r]))return 0;t>e[r]&&(n=r,t=e[r])}return n+1},n.argMax=function(e){if(1>e.length)return 0;var t=e[0];if(isNaN(t))return 0;for(var n=0,r=1;e.length>r;r++)if(e[r]>=t){if(isNaN(e[r]))return 0;n=r,t=e[r]}return n+1},n.varp=function(e){for(var t=n.mean(e),r=0,i=0;e.length>i;i++){var a=e[i]-t;r+=a*a}return r/e.length},n.mad=function(e){for(var t=n.mean(e),r=0,i=0;e.length>i;i++)r+=Math.abs(e[i]-t);return r/e.length},n.var=function(e){var t=e.length;return n.varp(e)*t/(t-1)},n.covp=function(e,t){if(e.length!==t.length)return 0/0;for(var r=e.length,i=n.mean(e),a=n.mean(t),s=0,o=0;r>o;o++)s+=(e[o]-i)*(t[o]-a);return s/r},n.cov=function(e,t){if(e.length!==t.length)return 0/0;var r=e.length;return n.covp(e,t)*r/(r-1)},n.corr=function(e,t){if(e.length!==t.length)return 0/0;for(var r,i,a=e.length,s=n.mean(e),o=n.mean(t),u=0,c=0,l=0,h=0;a>h;h++)r=e[h]-s,i=t[h]-o,u+=r*r,c+=i*i,l+=r*i;return l/Math.sqrt(u*c)},n.stdev=function(e){return Math.sqrt(n.var(e))},n.stdevp=function(e){return Math.sqrt(n.varp(e))},n}),define("math/functions",["require","math/builtin"],function(e){function t(e){for(var t=0;e.length>t;t++)e[t].compiled&&delete e[t].compiled.fn}function n(e){for(var t=0;e.length>t;t++){var n=e[t].compiled;n&&(n.fn=i(n.args,n.source))}}function r(e,t){for(var n=[],r=0;t>r;r++)n.push("values["+r+"]");return i(["values"],"return "+e(n))}function i(e,t){var n=e.join(","),r="return (function("+n+"){"+t+"})",i=Function(["BuiltIn"],r);return i(a)}var a=e("math/builtin");return{dehydrateGraphData:t,rehydrateGraphData:n,closureFunctionWithBuiltIn:i,createEvaluateFunction:r}});var define_enum_constant,enum_strings={},debuggable_enums=!0;if(debuggable_enums)define_enum_constant=function(e){this[e]=e};else{var next_enum=1e3;define_enum_constant=function(e){enum_strings[next_enum]=e,this[e]=next_enum++}}define_enum_constant("EXPRESSION"),define_enum_constant("FUNCTION_DEFINITION"),define_enum_constant("VARIABLE_DEFINITION"),define_enum_constant("ORDERED_PAIR_LIST"),define_enum_constant("DOUBLE_INEQUALITY"),define_enum_constant("COMPARATOR"),define_enum_constant("CHAINED_COMPARATOR"),define_enum_constant("EQUATION"),define_enum_constant("CONSTANT"),define_enum_constant("IDENTIFIER"),define_enum_constant("LIST"),define("math/enums",function(){}),define("math/parsenode/base",["require","console","pjs","math/policy","math/functions","../enums"],function(e){var t=e("console"),n=e("pjs"),r=e("math/policy"),i=e("math/functions");return e("../enums"),n(function(e,n,a){e.init=function(){this._dependencies=[],this._inputString="",this._exports=[]},e.exportPenalty=0;var s=0;e.tmpVar=function(){return"tmp"+s++},e.statementType=EXPRESSION,e.dependencies=function(){return this.getDependencies()},e.evaluateOnce=function(e){void 0===e&&(e={});var t=this.getConcreteTree(e),n=t.getEvaluationInfo();return n?n[0].val:0/0},e.setInputString=function(e){this._inputString=e},e.getInputString=function(){return this._inputString},e.addDependency=function(e){this.dependsOn(e)||this._dependencies.push(e)},e.addDependencies=function(e){for(var t=0;e.length>t;t++)this.addDependency(e[t])},e.getDependencies=function(){return this._dependencies},e.removeDependency=function(e){this._dependencies.splice(this._dependencies.indexOf(e),1)},e.dependsOn=function(e){return this._dependencies.indexOf(e)>-1},e.getExports=function(){return this._exports},e.exportsSymbol=function(e){return this._exports.indexOf(e)>-1},e.exportTo=function(e,t){var n=this.getExports();if(0!==n.length){if(n.length>1)throw Error("exportsTo unimplemented for nodes that define multiple symbols.");var i=n[0];r.assignmentForbidden(i)||t[i]||(t[i]=e.blocksExport?e:this)}},e.getOperator=function(){return this.operator||"="},e.isInequality=function(){return!1},e.isShadeBetween=function(){return!1},e.getAllIds=function(){return this.userData?[this.userData.id]:[]},e.getEvaluationInfo=function(){return!1},e.getSliderInfo=function(){return!1},e.getSliderVariables=function(e){return r.sliderVariables(e.getDependencies())},e.okForImplicitFunction=function(){return!1},e.getConcreteTree=function(){return t.log("Warning - default empty version of getConcreteTree being called"),this},e.tryGetConcreteTree=function(){var e;try{e=this.getConcreteTree.apply(this,arguments)}catch(t){if(!(t instanceof a))throw t;e=t}return e},e.getCompiledFunctions=function(e){var t=this.getEvalStrings(),n=t.statements.join(";")+";return "+t.expression;if(void 0===e){e=this.getDependencies();var r=e.indexOf("x");if(-1!==r){var a=e[0];e[0]=e[r],e[r]=a}}return[{args:e,source:n,fn:i.closureFunctionWithBuiltIn(e,n)}]},e.getCompiledDerivatives=function(){var e=this.getDependencies(),t=this.takeDerivative(e[0]||"x");return t.getCompiledFunctions()}})}),define("lib/worker-i18n",["require","underscore"],function(e){var t=e("underscore"),n=function(e,n){return n&&0!==t.size(n)?JSON.stringify({msg:e,vars:n}):e};return{t:n}}),define("math/parsenode/error",["require","pjs","./base"],function(e){var t=e("pjs"),n=e("./base");return t(n,function(e,t){e.init=function(e){t.init.call(this),this._msg=e,this._sliderVariables=[],this.blocksExport=!0},e.evaluateOnce=function(){return this._msg},e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this},e.isError=!0,e.getError=function(){return this._msg},e.setDependencies=function(e){return this._dependencies=e,this},e.allowExport=function(){return this.blocksExport=!1,this}})}),define("graphing/label",["math/builtin","math/distance"],function(e,t){function n(n,r){if(isNaN(n))return{string:"undefined",value:n};if(0===n)return{string:"0",value:n};r||(r=n);var c,l,h=e.toFraction(n/Math.PI,24);if(o(r)&&t.approx(h.n/h.d*Math.PI,n,3))return c=0===h.n?"0":1===h.n?"π":-1===h.n?"-π":""+h.n+"π",l=1===h.d?"":"/"+(""+h.d),{string:c+l,value:h.n/h.d*Math.PI};var f,p,m;if(o(r))m=s(i(n.toFixed(u(r)))),p=null,f=null;else{var d=a(n.toExponential(u(r/n))).split("e");f=d[0]+"×"+"10",p=d[1].replace("+",""),m=a(n.toExponential(u(r/n))).replace("+","")}return{string:m,mantissa:f,superscript:p,value:parseFloat(m)}}function r(e,t,r,i){var a=n(e,t),s=n(i(a.value),r);return[a,s]}function i(e){return-1===e.indexOf(".")?e:e.replace(d,"")}function a(e){return e.replace(g,"e")}function s(e){return"-0"===e?"0":e}function o(e){return e=Math.abs(e),e>1e-4&&1e7>e}function u(e){return e=Math.abs(e),e=Math.max(e,1e-16),Math.max(0,Math.floor(4.5-Math.log(e)/Math.LN10))}function c(e){return e=a(e),e.replace(/([\\d\\.\\-]+)e\\+?([\\d\\-]+)/,"$1<span class=\'dcg-cross\'>×</span>10<sup>$2</sup>")}function l(e){return e=a(e),e.replace(/([\\d\\.\\-]+)e\\+?([\\d\\-]+)/,"$1\\\\times10^{$2}")}function h(e){return v.hasOwnProperty(e)?v[e]:e}function f(e){var t=e.split("_"),n="";return t[0].length>1&&(n+="\\\\"),n+=t[0],t[1]&&(n+=1===t[1].length?"_"+t[1]:"_{"+t[1]+"}"),n}function p(e){var t=e.split("_").map(h),n=t[0];return t[1]&&(n+="<sub>"+t[1]+"</sub>"),n}function m(e){return e.replace(/[{}\\\\]/g,"")}var d=/\\.?0+$/,g=/\\.?0+e/,v={pi:"π",tau:"τ",theta:"θ",phi:"ϕ"};return{stripZeros:i,htmlSciNote:c,latexSciNote:l,value:n,point:r,formatSymbol:h,identifierToLatex:f,latexToIdentifier:m,identifierToHTML:p}}),define("math/errormsg",["require","lib/worker-i18n","math/parsenode/error","graphing/label","math/policy"],function(e){var t=e("lib/worker-i18n"),n=e("math/parsenode/error"),r=e("graphing/label"),i=e("math/policy");return{parseError:function(){return n(t.t("Sorry, I don\'t understand this."))},deeplyNested:function(){return n(t.t("Definitions are nested too deeply."))},wrongArity:function(e,i,a){e=r.formatSymbol(e);var s,o;if(1===i)o=t.t("For example, try typing: __dependency__(x).",{dependency:e}),s=a>1?t.t("Function \'__dependency__\' requires only 1 argument. __supplement__",{dependency:e,supplement:o}):t.t("Function \'__dependency__\' requires an argument. __supplement__",{dependency:e,supplement:o});else{for(var u=[],c=0;i>c;c++)u[c]=c+1;var l=r.formatSymbol(e)+"("+u.join(", ")+")";o=t.t("For example, try typing: __recommendation__.",{recommendation:l}),s=t.t("Function \'__dependency__\' requires __assignment_arity__ arguments. __supplement__",{dependency:e,assignment_arity:i,supplement:o})}return n(s)},wrongParametrizedReducerArity:function(e){return n(t.t("Function \'__symbol__\' requires 2 arguments. For example, try typing: __recommendation__.",{symbol:r.formatSymbol(e),recommendation:r.formatSymbol(e)+"([1,2,3], 1)"}))},wrongDoubleReducerArity:function(e){return n(t.t("Function \'__symbol__\' requires 2 arguments. For example, try typing: __recommendation__.",{symbol:r.formatSymbol(e),recommendation:r.formatSymbol(e)+"([1,2,3], [3,2,1])"}))},zeroArgReducer:function(e){return n(t.t("Function \'__symbol__\' requires at least one argument. For example, try typing: __symbol__(1, 2).",{symbol:r.formatSymbol(e)}))},missingRHS:function(e){return e=r.formatSymbol(e),n(t.t("What do you want \'__symbol__\' to equal?",{symbol:e}))},malformedPoint:function(){return n(t.t("Points are written like this: (1, 2)."))},badImplicitMultiply:function(e){return e=r.formatSymbol(e),n(t.t("Use parentheses around the argument of \'__symbol__\'.",{symbol:e}))},badTrigExponent:function(e){var r=e+"^2",i=e+"^-1";return n(t.t("Only __form1__ and __form2__ are supported. Otherwise, use parens.",{form1:r,form2:i}))},badLogExponent:function(e){var r=e+"^2";return n(t.t("Only __form__ is supported. Otherwise, use parens.",{form:r}))},blankExpression:function(){return n(t.t("You haven\'t written anything yet."))},functionNotDefined:function(e){return e=r.formatSymbol(e),n(t.t("Function \'__dependency__\' is not defined.",{dependency:e}))},parameterAlreadyDefined:function(e){return e=r.formatSymbol(e),n(t.t("You can\'t use \'__dependency__\' as a parameter of this function because \'__dependency__\' is already defined.",{dependency:e}))},cannotRedefine:function(e){return e=r.formatSymbol(e),n(t.t("You can\'t redefine \'__symbol__\' because it\'s already defined.",{symbol:e}))},multiplyDefined:function(e){return e=r.formatSymbol(e),n(t.t("You\'ve defined \'__dependency__\' in more than one place. Try picking a different variable, or deleting some of the definitions of \'__dependency__\'.",{dependency:e}))},shadowedIndex:function(e){return e=r.formatSymbol(e),n(t.t("You can\'t use \'__symbol__\' as an index because it\'s already defined.",{symbol:e}))},cycle:function(e){e=e.map(r.formatSymbol);var i=e.pop();return n(t.t("\'__symbols__\' and \'__lastSymbol__\' can\'t be defined in terms of each other.",{symbols:e.join("\', \'"),lastSymbol:i}))},tooManyVariables:function(e){if(e=e.map(r.formatSymbol),0===e.length)return n(t.t("Too many variables, I don\'t know what to do with this."));var i=e.pop();return n(t.t("Too many variables. Try defining \'__variables__\'.",{variables:(e.length?e.join("\', \'")+"\' or \'":"")+i}))},addArgumentsToDefinition:function(e,i,a){e=e.map(r.formatSymbol),i=r.formatSymbol(i),a=a.map(r.formatSymbol);var s=i+"("+a.join(",")+","+e.join(",")+")",o=e.pop(),u={symbols:e.join("\', \'"),lastSymbol:o,newSignature:s};return e.length?n(t.t("Try including \'__symbols__\' and \'__lastSymbol__\' as arguments by defining the function as \'__newSignature__\'.",u)):n(t.t("Try including \'__lastSymbol__\' as an argument by defining the function as \'__newSignature__\'.",u))},invalidLHS:function(e){return e=r.formatSymbol(e),n(t.t("Sorry, you can\'t graph __symbol__ as a function of anything yet.",{symbol:e}))},unplottablePolarFunction:function(){return n(t.t("We can\'t plot θ as a function of r. Try plotting r(θ) instead."))},invalidInequalityVariables:function(){return n(t.t("We only plot inequalities of x and y, or r and θ."))},invalidImplicitVariables:function(){return n(t.t("We only support implicit equations of x and y."))},unsolvable:function(){return n(t.t("We don\'t solve complicated single-variable equations yet."))},singleVariableListSolve:function(){return n(t.t("We don\'t solve single-variable equations involving lists yet."))},complicatedImplicitInequality:function(){return n(t.t("We can only plot inequalities when one variable is quadratic or linear."))},complicatedPolarImplicit:function(){return n(t.t("Polar equations must be linear in r."))},invalidDoubleInequalityVariables:function(){return n(t.t("We only plot double inequalities of x and y."))},mismatchedDoubleInequality:function(){return n(t.t("Double inequalities must both go the same way, e.g. 1 < y < 2."))},complicatedDoubleInequality:function(){return n(t.t("We only support solved double inequalities. Try deleting one side of the inequality."))},equationRequired:function(e){return e?n(t.t("Try adding \'__lhs__\' to the beginning of this equation.",{lhs:i.implicitDependency(e)+"="})):n(t.t("Try adding an equals sign to turn this into an equation."))},variableAsFunction:function(e){return e=r.formatSymbol(e),n(t.t("Variable \'__dependency__\' can\'t be used as a function.",{dependency:e}))},nestedList:function(){return n(t.t("Nested lists are not allowed."))},invalidTableHeader:function(e){return n(t.t("Table headers must be simple expressions. __supplement__",{supplement:e}))},invalidTableEntry:function(e){return n(t.t("Table entries must be simple expressions. __supplement__",{supplement:e}))},invalidFirstTableColumn:function(){return n(t.t("First column may not be __most__ or __last__.",{most:"\'y\', \'r\',",last:"\'θ\'"}))},invalidDependentFirstTableColumn:function(){return n(t.t("This column header can\'t be defined elsewhere in the calculator."))},invalidRegressionParameter:function(e){return n(t.t("\'__symbol__\' may not be used as a regression parameter.",{symbol:r.formatSymbol(e)}))},optimizationError:function(){return n(t.t("Failed to find regression coefficients."))},nonListRegression:function(){return n(t.t("Regressions must contain at least one list of data."))},badListInReducer:function(e){return n(t.t("When __symbol__ is called with more than two arguments, no argument can be a list.",{symbol:r.formatSymbol(e)}))},nonListDoubleReducer:function(e){return n(t.t("Both arguments of \'__symbol__\' must be lists. For example, try typing: __recommendation__.",{symbol:r.formatSymbol(e),recommendation:r.formatSymbol(e)+"([1,2,3], [3,2,1])"}))},nonListParametrizedReducer:function(e){return n(t.t("The first argument of \'__symbol__\' must be a list. For example, try typing: __recommendation__.",{symbol:r.formatSymbol(e),recommendation:r.formatSymbol(e)+"([1,2,3], 1)"}))},indexIntoNonList:function(){return n(t.t("Cannot index into something that is not a list."))},listAsIndex:function(){return n(t.t("List index must not be a list."))},variableRange:function(e){return n(t.t("Range cannot depend on free variable \'__symbol__\'.",{symbol:r.formatSymbol(e[0])}))},nonArithmeticRange:function(){return n(t.t("Ranges must be arithmetic sequences."))}}}),define("math/parsenode/expression",["require","pjs","./base","math/errormsg"],function(e){var t=e("pjs"),n=e("./base"),r=e("math/errormsg");return t(n,function(e,t){e.init=function(e){if(!Array.isArray(e))throw new TypeError("Argument to expression constructor must be an Array.");t.init.call(this),this.args=e,this.registerDependencies(),this.computeTreeSize()\n},e.registerDependencies=function(){for(var e=0;this.args.length>e;e++)this.addDependencies(this.args[e].getDependencies())},e.computeTreeSize=function(){for(var e=0,t=0;this.args.length>t;t++)this.args[t].treeSize&&(e+=this.args[t].treeSize);if(this.treeSize=e+1,e>1e4)throw r.deeplyNested()},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);for(var n=[],r=0;this.args.length>r;r++)n.push(this.args[r].getConcreteTree(e,t));return this.copyWithArgs(n)},e.copyWithArgs=function(e){return new this.constructor(e)}})}),define("math/parsenode/constant",["require","pjs","./base"],function(e){var t=e("pjs"),n=e("./base");return t(n,function(e,t){e.init=function(e){t.init.call(this,[]),this.constantValue=e},e.isConstant=!0,e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this},e.getEvalStrings=function(){return{statements:[],expression:this.scalarExprString()}},e.scalarExprString=function(){return this.constantValue>0?this.constantValue+"":"("+(this.constantValue+"")+")"},e.getEvaluationInfo=function(){return[{val:this.constantValue,operator:"="}]},e.okForImplicitFunction=function(){return!0}})}),define("math/parsenode/list",["require","pjs","./expression","./constant","math/errormsg"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./constant"),i=e("math/errormsg");return t(n,function(e,t,n){function a(e){for(var t=1/0,n=0;e.length>n;n++)e[n].isList&&(t=Math.min(t,e[n].length));return t}e.init=function(e){t.init.call(this,e),this.length=e.length},e.isList=!0,e.elementAt=function(e){return e=Math.floor(e),e>=0&&this.args.length>e?this.args[e]:r(0/0)},e.getEvalStrings=function(){for(var e=[],t=0;this.args.length>t;t++)e.push(this.args[t].getEvalStrings());return e},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);for(var n=[],r=0;this.args.length>r;r++){var a=this.args[r].getConcreteTree(e,t);if(a.isList)throw i.nestedList();n.push(a)}return new this.constructor(n)},e.getEvaluationInfo=function(){return this.args.every(function(e){return e.isConstant})?[{val:this.args.map(function(e){return e.constantValue}),operator:"="}]:void 0},e.getCompiledFunctions=function(e){return this.args.map(function(t){return t.getCompiledFunctions(e)[0]})},n.eachArgs=function(e,t){var n=a(e);if(!isFinite(n))return t(e),void 0;for(var r=0;n>r;r++){for(var i=[],s=0;e.length>s;s++)i.push(e[s].isList?e[s].elementAt(r):e[s]);t(i)}},n.mapArgs=function(e,t){var n=a(e);if(!isFinite(n))return[t(e)];for(var r=[],i=0;n>i;i++){for(var s=[],o=0;e.length>o;o++)s.push(e[o].isList?e[o].elementAt(i):e[o]);r.push(t(s))}return r}})}),define("math/parsenode/scalarexpression",["require","pjs","./expression","./constant","./list"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./constant"),i=e("./list");return t(n,function(e,t){e.init=function(e){t.init.call(this,e)},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n,r=[],a=!1;for(n=0;this.args.length>n;n++){var s=this.args[n].getConcreteTree(e,t);s.isList&&(a=!0),r.push(s)}if(!a)return this._constantCollapsedCopy(r,e);var o=this,u=i.mapArgs(r,function(t){return o._constantCollapsedCopy(t,e)});return i(u)},e._constantCollapsedCopy=function(e){for(var t=[],n=0;e.length>n;n++){if(!e[n].isConstant)return this.copyWithArgs(e);t.push(e[n].constantValue)}return r(this.evaluate(t))},e.getEvalStrings=function(){for(var e=[],t=[],n=0;this.args.length>n;n++){var r=this.args[n].getEvalStrings();e=e.concat(r.statements),t.push(r.expression)}return{statements:e,expression:this.scalarEvalExpression(t)}}})}),define("math/parsenode/expressionTypes",["require","pjs","./scalarexpression"],function(e){var t=e("pjs"),n=e("./scalarexpression");return{Add:t(n,{}),Subtract:t(n,{}),Multiply:t(n,{}),Divide:t(n,{}),Exponent:t(n,{}),Negative:t(n,{}),And:t(n,{isInequality:function(){return this.args[0].isInequality()&&this.args[1].isInequality()}})}}),define("math/parsenode/freevariable",["require","pjs","./scalarexpression"],function(e){var t=e("pjs"),n=e("./scalarexpression");return t(n,function(e,t){e.init=function(e){t.init.call(this,[]),this.addDependency(e),this._symbol=e},e.isFreeVariable=!0,e.scalarEvalExpression=function(){return this._symbol},e.copyWithArgs=function(){return this},e._constantCollapsedCopy=function(){return this},e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this}})}),define("math/parsenode/identifier",["require","pjs","./expression","./freevariable","graphing/label"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./freevariable"),i=e("graphing/label");return t(n,function(e,t){e.init=function(e){t.init.call(this,[]),this._symbol=i.latexToIdentifier(e),this.addDependency(this._symbol)},e.evaluate=function(){throw"Cannot evaluate undefined variable "+this._symbol},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n=e[this._symbol];if(n){if(n.isError)throw n;return n.isFunction?n.getConcreteInvocationTree(e,[],t):n.getConcreteTree(e,t)}return r(this._symbol)},e.okForImplicitFunction=function(){return!0}})}),define("math/parsenode/dummyindex",["require","pjs","./freevariable"],function(e){var t=e("pjs"),n=e("./freevariable");return t(n,function(e,t){e.init=function(){t.init.apply(this,arguments)}})}),define("math/parsenode/range",["require","pjs","./expression","math/errormsg","./list","./constant","math/distance"],function(e){var t=e("pjs"),n=e("./expression"),r=e("math/errormsg"),i=e("./list"),a=e("./constant"),s=e("math/distance");return t(n,function(e,t){function n(e,t,n,i,a){if(e.length>n&&!s.approx(a,e.elementAt(n).constantValue,10))throw r.nonArithmeticRange();if(t.length>=i-n&&i-n>1&&!s.approx(a,t.elementAt(t.length-i+n).constantValue,10))throw r.nonArithmeticRange()}e.init=function(e){t.init.call(this,e),this.beginning=e[0],this.end=e[1]},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var s=this.beginning.getConcreteTree(e,t),o=this.end.getConcreteTree(e,t);if(s.getDependencies().length)throw r.variableRange(s.getDependencies());if(o.getDependencies().length)throw r.variableRange(o.getDependencies());if(!s.isList||!o.isList)throw Error("Programming Error: range bounds must be List nodes.");var u,c=s.elementAt(0).constantValue,l=o.elementAt(o.length-1).constantValue,h=l-c;u=1===s.length?h>=0?1:-1:s.elementAt(1).constantValue-c;var f=Math.round(h/u)+1;if(!isFinite(f)||s.length>f||o.length>f)throw r.nonArithmeticRange();for(var p=[a(c)],m=1;f>m;m++){var d=c+m*u;n(s,o,m,f,d),p.push(a(d))}return i(p)}})}),define("math/parsenode/listaccess",["require","pjs","./expression","math/errormsg"],function(e){var t=e("pjs"),n=e("./expression"),r=e("math/errormsg");return t(n,function(e,t){e.init=function(e){t.init.call(this,e),this.list=e[0],this.index=e[1]},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n=this.index.getConcreteTree(e,t);if(n.isList)throw r.listAsIndex();if(n.isConstant){var i=this.list.getConcreteTree(e,t);if(!i.isList)throw r.indexIntoNonList();return i.getConcreteTree(e,t).elementAt(n.constantValue-1)}return new this.constructor([this.list.getConcreteTree(e,t),n])},e.getEvalStrings=function(){var e=this.index.getEvalStrings(),t=this.list.getEvalStrings(),n=e.statements.slice(),r=this.tmpVar();n.push("var "+r);for(var i=[],a=0;t.length>a;a++)i.push("case "+a+":"+t[a].statements.join(";")+";"+r+"="+t[a].expression);i.push("default:"+r+"=NaN");var s="switch(Math.floor("+e.expression+")-1){\\n"+i.join(";break\\n")+"\\n}";return n.push(s),{statements:n,expression:r}}})}),define("math/parsenode/orderedpair",["require","pjs","./expression","./list","math/policy"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./list"),i=e("math/policy");return t(n,function(e,t,n){e.getCompiledFunctions=function(e){return[this.args[0].getCompiledFunctions(e)[0],this.args[1].getCompiledFunctions(e)[0]]},e.getSliderVariables=function(e){return i.sliderVariables(e.getDependencies()).filter(function(e){return!i.validParametricVariable(e)})},e.getConcreteTree=function(e,t){for(var n=[],r=0;this.args.length>r;r++)n.push(this.args[r].getConcreteTree(e,t));return this.copyWithArgs(n)},n.fromList=function(e){if(1===e.length)return e[0];for(var t=[],i=[],a=0;e.length>a;a++)t.push(e[a].args[0]),i.push(e[a].args[1]);return n([r(t),r(i)])}})}),define("math/parsenode/movablepoint",["require","pjs","./orderedpair"],function(e){var t=e("pjs"),n=e("./orderedpair");return t(n,function(e,t){e.init=function(e,n,r){t.init.call(this,e),this._moveIds=n,this._moveMatrix=r},e.isMovablePoint=!0})}),define("math/comparators",["require"],function(){var e={"<":{inclusive:!1,direction:-1},"!=":{inclusive:!1,direction:0},">":{inclusive:!1,direction:1},"<=":{inclusive:!0,direction:-1},"=":{inclusive:!0,direction:0},">=":{inclusive:!0,direction:1}},t=function(e,t){switch(t){case-1:return e?"<=":"<";case 0:return e?"=":"!=";case 1:return e?">=":">";default:throw"Programming error.  Comparators must have a direction of -1, 0, or 1"}};return{table:e,get:t}}),define("math/parsenode/basecomparator",["require","pjs","./scalarexpression","./expressionTypes","math/comparators","math/functions"],function(e){var t=e("pjs"),n=e("./scalarexpression"),r=e("./expressionTypes").Subtract,i=e("math/comparators").table,a=e("math/functions");return t(n,function(e,n,s){s.create=function(e,n){return n=n||e,t(s,function(t){t.operator=e,t.isInequality=function(){return 0!==i[e].direction},t.compiledOperator=n,t.scalarEvalExpression=function(e){return e.join(n)},t.evaluate=a.createEvaluateFunction(t.scalarEvalExpression,2)})},e.init=function(e){n.init.call(this,e),this._difference=-1===i[this.operator].direction?r([e[1],e[0]]):r([e[0],e[1]])}})}),define("math/parsenode/comparator",["require","math/parsenode/basecomparator"],function(e){var t=e("math/parsenode/basecomparator");return{"<":t.create("<"),">":t.create(">"),"<=":t.create("<="),">=":t.create(">="),"=":t.create("=","===")}}),define("math/parsenode/piecewise",["require","pjs","./scalarexpression","./constant"],function(e){var t=e("pjs"),n=e("./scalarexpression"),r=e("./constant"),i=t(n,{});return i.chain=function(e){for(var t,n=r(0/0);e.length;)t=e.pop(),n=i([t.condition,t.if_expr,n]);return n},i.empty=function(){return i([r(!0),r(1),r(0/0)])},i}),define("math/parsenode/doubleinequality",["require","pjs","./base","./identifier","./constant","./piecewise","math/comparators","./comparator"],function(e){var t=e("pjs"),n=e("./base"),r=e("./identifier"),i=e("./constant"),a=e("./piecewise"),s=e("math/comparators"),o=e("./comparator");return t(n,function(e,t){e.init=function(e){t.init.call(this),this._symbol=e[2]._symbol,this._operators=[e[1],e[3]],this._expressions=[e[0],e[4]];var n=s.get(s.table[e[1]].inclusive&&s.table[e[3]].inclusive,s.table[e[1]].direction);this._indicator=o[n]([e[0],e[4]]),this.addDependency(this._symbol),this.addDependencies(this._expressions[0].getDependencies()),this.addDependencies(this._expressions[1].getDependencies())},e.isInequality=function(){return!0},e.isShadeBetween=function(){return!0},e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this.constructor.call(this,[a([this._indicator,this._expressions[0],i(0/0)]).getConcreteTree(e,t),this._operators[0],r(this._symbol),this._operators[1],a([this._indicator,this._expressions[1],i(0/0)]).getConcreteTree(e,t)])},e.getCompiledFunctions=function(e){return[this._expressions[0].getCompiledFunctions(e)[0],this._expressions[1].getCompiledFunctions(e)[0]]},e.getCompiledDerivatives=function(){return[this._expressions[0].getCompiledDerivatives()[0],this._expressions[1].getCompiledDerivatives()[0]]}})}),define("math/parsenode/repeatedoperator",["require","pjs","./scalarexpression","./dummyindex","./constant","math/errormsg"],function(e){var t=e("pjs"),n=e("./scalarexpression"),r=e("./dummyindex"),i=e("./constant"),a=e("math/errormsg");return t(n,function(e,t){e.init=function(e){t.init.call(this,e),this._index=e[0],this._index instanceof r&&this.removeDependency(this._index._symbol)},e.getEvalStrings=function(){var e=[],t=this.tmpVar(),n=this._index._symbol,r=this.tmpVar(),i=this.tmpVar(),a=this.args[1].getEvalStrings(),s=this.args[2].getEvalStrings(),o=this.args[3].getEvalStrings();Array.prototype.push.apply(e,a.statements),e.push("var "+r+" = Math.round("+a.expression+")"),Array.prototype.push.apply(e,s.statements),e.push("var "+i+" = Math.round("+s.expression+")"),e.push("var "+t+"="+this.starting_value);var u="for (var "+n+"="+r+";"+n+"<="+i+";"+n+"++) {"+o.statements.join(";")+";"+t+this.in_place_operator+o.expression+"};",c="if(!isFinite("+i+"-"+r+")) {"+t+"=("+i+"<"+r+"?"+this.starting_value+":NaN);}else{"+u+"}";return e.push(c),{statements:e,expression:t}},e.getConcreteTree=function(e,n){if(n&&n[this.type])return n[this.type].call(this,e,n);if(e[this._index._symbol])throw a.shadowedIndex(this._index._symbol);var i=Object.create(e);i[this._index._symbol]=r(this._index._symbol);var s=t.getConcreteTree.call(this,i,n);return s},e.evaluate=function(e,t,n){var r=n.getCompiledFunctions([this._index._symbol])[0].fn;if(t=Math.round(t),e=Math.round(e),!isFinite(t-e))return e>t?this.starting_value:0/0;for(var i=this.starting_value,a=e;t>=a;a++)i=this.update(i,r(a));return i},e._constantCollapsedCopy=function(e){if(e[1].isConstant&&e[2].isConstant){var t=e[1].constantValue,n=e[2].constantValue,r=e[3];if(r.isConstant)return i(this.evaluateConstant([t,n,r.constantValue]));var a=r.getDependencies();if(0===a.length||1===a.length&&a[0]===e[0]._symbol)return i(this.evaluate(t,n,r))}return this.copyWithArgs(e)}})}),define("math/parsenode/sum",["require","pjs","./repeatedoperator"],function(e){var t=e("pjs"),n=e("./repeatedoperator");return t(n,function(e){e.in_place_operator="+=",e.starting_value=0,e.evaluateConstant=function(e){var t=1+Math.round(e[1])-Math.round(e[0]);return 0>=t?this.starting_value:t*e[2]},e.update=function(e,t){return e+t}})}),define("math/parsenode/product",["require","pjs","./repeatedoperator"],function(e){var t=e("pjs"),n=e("./repeatedoperator");return t(n,function(e){e.in_place_operator="*=",e.starting_value=1,e.evaluateConstant=function(e){var t=1+Math.round(e[1])-Math.round(e[0]);return 0>=t?this.starting_value:Math.pow(e[2],t)},e.update=function(e,t){return e*t}})}),define("math/parsenode/functioncall",["require","pjs","./expression","math/errormsg","./identifier","./expressionTypes"],function(e){var t=e("pjs"),n=e("./expression"),r=e("math/errormsg"),i=e("./identifier"),a=e("./expressionTypes").Multiply;return t(n,function(e,t){e.init=function(e,n){"string"==typeof e&&(e=i(e)),this._symbol=e._symbol,t.init.call(this,n),this.addDependency(this._symbol)},e.copyWithArgs=function(e){return new this.constructor(i(this._symbol),e)},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n=e[this._symbol];if(n&&n.isError)throw n;if(!n||!n.isFunction){if(1==this.args.length){var s=[i(this._symbol),this.args[0]];return a(s).getConcreteTree(e,t)}if(n)throw r.variableAsFunction(this._symbol);throw r.functionNotDefined(this._symbol)}for(var o=[],u=0;this.args.length>u;u++){var c=this.args[u].getConcreteTree(e,t);o.push(c)}return n.getConcreteInvocationTree(e,o,t)}})}),define("math/parsenode/functionexponent",["require","pjs","./expression","./expressionTypes","./functioncall"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./expressionTypes"),i=r.Multiply,a=r.Exponent,s=e("./functioncall");return t(n,function(e){e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n=this.args[0]._symbol;return e[n]&&e[n].isFunction?a([s(n,[this.args[1]]),this.args[2]]).getConcreteTree(e,t):i([this.args[0],a([this.args[1],this.args[2]])]).getConcreteTree(e,t)}})}),define("math/parsenode/nativefunction",["require","pjs","./scalarexpression","math/errormsg","math/functions"],function(e){var t=e("pjs"),n=e("./scalarexpression"),r=e("math/errormsg"),i=e("math/functions");return t(n,function(e,n,a){e.init=function(e){if(e.length!==this._arity)throw r.wrongArity(this._symbol,this._arity,e.length);n.init.call(this,e)},e.scalarEvalExpression=function(e){return this.head+"("+e.join(",")+")"},a.create=function(e,n,r){return t(a,function(t,a,s){s.isFunction=!0,t._symbol=e,t.head=n,t._arity=r,t.evaluate=i.createEvaluateFunction(t.scalarEvalExpression.bind(t),t._arity),s.getConcreteInvocationTree=function(e,t,n){return s(t).getConcreteTree(e,n)}})}})}),define("math/parsenode/trigfunction",["require","pjs","./nativefunction","./expressionTypes","./identifier"],function(e){var t=e("pjs"),n=e("./nativefunction"),r=e("./expressionTypes").Multiply,i=e("./identifier");return t(n,function(e,t,n,a){n.create=function(e,t){var n=1,s=a.create(e,t,n);return s.getConcreteInvocationTree=function(e,t,n){var a=e.trigAngleMultiplier?[r([t[0],i("trigAngleMultiplier")])]:t;return s(a).getConcreteTree(e,n)},s}})}),define("math/parsenode/inversetrigfunction",["require","pjs","./nativefunction","./expressionTypes","./identifier"],function(e){var t=e("pjs"),n=e("./nativefunction"),r=e("./expressionTypes").Divide,i=e("./identifier");return t(n,function(e,t,n,a){n.create=function(e,t){var n=1,s=a.create(e,t,n);return s.getConcreteInvocationTree=function(e,t,n){var a=s(t),o=e.trigAngleMultiplier?r([a,i("trigAngleMultiplier")]):a;return o.getConcreteTree(e,n)},s}})}),define("math/parsenode/reducerfunction",["require","pjs","./expression","./list","./constant","math/functions","math/errormsg"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./list"),i=e("./constant"),a=e("math/functions"),s=e("math/errormsg");return t(n,function(e,n,o){e.evalExpression=function(e){return this.head+"("+e.join(",")+")"},e.getEvalStrings=function(){for(var e=this.args[0],t=[],n=[],r=0;e.length>r;r++){var i=e.elementAt(r).getEvalStrings();t=t.concat(i.statements),n.push(i.expression)}var a=["["+n.join(",")+"]"];return{statements:t,expression:this.evalExpression(a)}},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n,i,a=this.args;if(0===a.length)throw s.zeroArgReducer(this._symbol);if(1===a.length)n=a[0].getConcreteTree(e,t),i=!n.isList;else{if(2===a.length&&(a[0].isList||a[1].isList)){var o=this;return r(r.mapArgs(this.args,function(n){return o.copyWithArgs(n).getConcreteTree(e,t)}))}i=!0}var u=[];if(i){for(var c=0;a.length>c;c++){if(a[c].isList)throw s.badListInReducer(this._symbol);u.push(a[c].getConcreteTree(e,t))}n=r(u)}return this._constantCollapsedCopy([n])},e._constantCollapsedCopy=function(e){for(var t=e[0],n=[],r=0;t.length>r;r++){var a=t.elementAt(r);if(!a.isConstant)return this.copyWithArgs(e);n.push(a.constantValue)}return i(this.evaluate([n]))},o.create=function(e,n){return t(o,function(t,r,i){t._symbol=e,t.head=n,t._arity=1,i.isFunction=!0,t.evaluate=a.createEvaluateFunction(t.evalExpression.bind(t),t._arity),i.getConcreteInvocationTree=function(e,t,n){return i(t).getConcreteTree(e,n)}})}})}),define("math/parsenode/doublereducerfunction",["require","pjs","./expression","./constant","math/parsenode/list","math/functions","math/errormsg"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./constant"),i=e("math/parsenode/list"),a=e("math/functions"),s=e("math/errormsg");return t(n,function(e,n,o){e.init=function(){if(n.init.apply(this,arguments),2!==this.args.length)throw s.wrongDoubleReducerArity(this._symbol)},e.evalExpression=function(e){return this.head+"("+e.join(",")+")"},e.getEvalStrings=function(){for(var e=[],t=[],n=0;this.args.length>n;n++){for(var r=this.args[n],i=[],a=0;r.length>a;a++){var s=r.elementAt(a).getEvalStrings();Array.prototype.push.apply(e,s.statements),i.push(s.expression)}t.push("["+i.join(",")+"]")}return{statements:e,expression:this.evalExpression(t)}},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n=this.args.map(function(n){return n.getConcreteTree(e,t)});if(!n[0].isList||!n[1].isList)throw s.nonListDoubleReducer(this._symbol);return n[0].length>n[1].length&&(n[0]=i(n[0].args.slice(0,n[1].length))),n[1].length>n[0].length&&(n[1]=i(n[1].args.slice(0,n[0].length))),this._constantCollapsedCopy(n)},e._constantCollapsedCopy=function(e){for(var t=[],n=0;e.length>n;n++){for(var i=[],a=e[n],s=0;a.length>s;s++){var o=a.elementAt(s);if(!o.isConstant)return this.copyWithArgs(e);i.push(o.constantValue)}t.push(i)}return r(this.evaluate(t))},o.create=function(e,n){return t(o,function(t,r,i){t._symbol=e,t.head=n,t._arity=2,i.isFunction=!0,t.evaluate=a.createEvaluateFunction(t.evalExpression.bind(t),t._arity),i.getConcreteInvocationTree=function(e,t,n){return i(t).getConcreteTree(e,n)}})}})}),define("math/parsenode/parametrizedreducerfunction",["require","pjs","./expression","./list","./constant","math/functions","math/errormsg"],function(e){var t=e("pjs"),n=e("./expression"),r=e("./list"),i=e("./constant"),a=e("math/functions"),s=e("math/errormsg");return t(n,function(e,n,o){e.init=function(){if(n.init.apply(this,arguments),2!==this.args.length)throw s.wrongParametrizedReducerArity(this._symbol)},e.evalExpression=function(e){return this.head+"("+e.join(",")+")"},e.getEvalStrings=function(){for(var e=this.args[0],t=this.args[1],n=[],r=[],i=0;e.length>i;i++){var a=e.elementAt(i).getEvalStrings();Array.prototype.push.apply(n,a.statements),r.push(a.expression)}var s=t.getEvalStrings();Array.prototype.push.apply(n,s.statements);var o=["["+r.join(",")+"]",s.expression];return{statements:n,expression:this.evalExpression(o)}},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);var n=this.args.map(function(n){return n.getConcreteTree(e,t)});if(!n[0].isList)throw s.nonListParametrizedReducer(this._symbol);return n[1].isList?r(n[1].args.map(function(e){return this._constantCollapsedCopy([n[0],e])}.bind(this))):this._constantCollapsedCopy(n)},e._constantCollapsedCopy=function(e){var t=e[0],n=e[1];if(!n.isConstant)return this.copyWithArgs(e);for(var r=[],a=0;t.length>a;a++){var s=t.elementAt(a);if(!s.isConstant)return this.copyWithArgs(e);r.push(s.constantValue)}return i(this.evaluate([r,n.constantValue]))},o.create=function(e,n){return t(o,function(t,r,i){t._symbol=e,t.head=n,t._arity=2,i.isFunction=!0,t.evaluate=a.createEvaluateFunction(t.evalExpression.bind(t),t._arity),i.getConcreteInvocationTree=function(e,t,n){return i(t).getConcreteTree(e,n)}})}})}),define("math/parsenode/builtinfunction",["require","math/parsenode/nativefunction","math/parsenode/trigfunction","math/parsenode/inversetrigfunction","math/parsenode/reducerfunction","math/parsenode/doublereducerfunction","math/parsenode/parametrizedreducerfunction"],function(e){var t=e("math/parsenode/nativefunction"),n=e("math/parsenode/trigfunction"),r=e("math/parsenode/inversetrigfunction"),i=e("math/parsenode/reducerfunction"),a=e("math/parsenode/doublereducerfunction"),s=e("math/parsenode/parametrizedreducerfunction");return{sin:n.create("sin","BuiltIn.sin"),cos:n.create("cos","BuiltIn.cos"),tan:n.create("tan","BuiltIn.tan"),cot:n.create("cot","BuiltIn.cot"),sec:n.create("sec","BuiltIn.sec"),csc:n.create("csc","BuiltIn.csc"),arcsin:r.create("arcsin","Math.asin"),arccos:r.create("arccos","Math.acos"),arctan:r.create("arctan","Math.atan"),arccot:r.create("arccot","BuiltIn.acot"),arcsec:r.create("arcsec","BuiltIn.asec"),arccsc:r.create("arccsc","BuiltIn.acsc"),sinh:t.create("sinh","BuiltIn.sinh",1),cosh:t.create("cosh","BuiltIn.cosh",1),tanh:t.create("tanh","BuiltIn.tanh",1),coth:t.create("coth","BuiltIn.coth",1),sech:t.create("sech","BuiltIn.sech",1),csch:t.create("csch","BuiltIn.csch",1),arcsinh:t.create("arcsinh","BuiltIn.asinh",1),arccosh:t.create("arccosh","BuiltIn.acosh",1),arctanh:t.create("arctanh","BuiltIn.atanh",1),arccoth:t.create("arccoth","BuiltIn.acoth",1),arcsech:t.create("arcsech","BuiltIn.asech",1),arccsch:t.create("arccsch","BuiltIn.acsch",1),pow:t.create("pow","BuiltIn.pow",2),sqrt:t.create("sqrt","Math.sqrt",1),nthroot:t.create("nthroot","BuiltIn.nthroot",2),log:t.create("log","BuiltIn.log_base",2),ln:t.create("ln","BuiltIn.log",1),exp:t.create("exp","Math.exp",1),floor:t.create("floor","Math.floor",1),ceil:t.create("ceil","Math.ceil",1),round:t.create("round","Math.round",1),abs:t.create("abs","Math.abs",1),sign:t.create("sign","BuiltIn.sign",1),mod:t.create("mod","BuiltIn.mod",2),lcm:t.create("lcm","BuiltIn.lcm",2),gcd:t.create("gcd","BuiltIn.gcd",2),nCr:t.create("nCr","BuiltIn.nCr",2),nPr:t.create("nPr","BuiltIn.nPr",2),factorial:t.create("factorial","BuiltIn.factorial",1),polyGamma:t.create("polyGamma","BuiltIn.polyGamma",2),mean:i.create("mean","BuiltIn.mean"),total:i.create("total","BuiltIn.total"),stdev:i.create("stdev","BuiltIn.stdev"),stdevp:i.create("stdevp","BuiltIn.stdevp"),mad:i.create("mad","BuiltIn.mad"),length:i.create("length","BuiltIn.length"),min:i.create("min","BuiltIn.listMin"),max:i.create("max","BuiltIn.listMax"),argmin:i.create("argmin","BuiltIn.argMin"),argmax:i.create("argmax","BuiltIn.argMax"),median:i.create("median","BuiltIn.median"),"var":i.create("var","BuiltIn.var"),cov:a.create("cov","BuiltIn.cov"),covp:a.create("covp","BuiltIn.covp"),corr:a.create("corr","BuiltIn.corr"),quantile:s.create("quantile","BuiltIn.quantile"),upperQuantileIndex:s.create("upperQuantileIndex","BuiltIn.upperQuantileIndex"),lowerQuantileIndex:s.create("lowerQuantileIndex","BuiltIn.lowerQuantileIndex")}}),define("math/builtinframe",["require","math/parsenode/constant","math/parsenode/builtinfunction"],function(e){var t=e("math/parsenode/constant"),n=e("math/parsenode/builtinfunction"),r={pi:t(Math.PI),tau:t(2*Math.PI),e:t(Math.E),trigAngleMultiplier:t(1)};for(var i in n)n.hasOwnProperty(i)&&(r[i]=n[i]);return r}),define("math/parsenode/derivative",["require","pjs","./scalarexpression","./freevariable","./identifier","math/builtinframe"],function(e){var t=e("pjs"),n=e("./scalarexpression"),r=e("./freevariable"),i=e("./identifier"),a=e("math/builtinframe");return t(n,function(e,t){e.init=function(e,n){this._symbol=i(e)._symbol,t.init.call(this,n)},e.getConcreteTree=function(e,n){if(n&&n[this.type])return n[this.type].call(this,e,n);if(e[this._symbol]){var i=Object.create(e);i[this._symbol]=r(this._symbol);var a={};return a[this._symbol]=e[this._symbol],t.getConcreteTree.call(this,i,n).substitute(a).getConcreteTree(e,n)}return t.getConcreteTree.call(this,e,n)},e._constantCollapsedCopy=function(e){return e[0].takeDerivative(this._symbol).getConcreteTree(a)}})}),define("math/parsenode/equation",["require","./base","pjs","./expressionTypes","math/parsenode/comparator"],function(e){var t=e("./base"),n=e("pjs"),r=e("./expressionTypes").Subtract,i=e("math/parsenode/comparator");return n(t,function(e,t){e.init=function(e,n){t.init.call(this),this.addDependencies(e.getDependencies()),this.addDependencies(n.getDependencies()),this._lhs=e,this._rhs=n,this._difference=r([this._lhs,this._rhs])},e.asComparator=function(){return i["="]([this._lhs,this._rhs])},e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this.asComparator().getConcreteTree(e,t)}})}),define("math/parsenode/assignment",["require","./base","math/policy","./equation","./identifier","pjs"],function(e){var t=e("./base"),n=e("math/policy"),r=e("./equation"),i=e("./identifier"),a=e("pjs");return a(t,function(e,t){e.init=function(e,n){t.init.call(this),e=e._symbol,this.addDependencies(n.getDependencies()),this._expression=n,this._symbol=e,this._exports=this.computeExports()},e.computeExports=function(){var e=this._symbol;if(n.assignmentForbidden(e))return[];for(var t=this.getDependencies(),r=0;t.length>r;r++)if(t[r]===e)return[];return[e]},e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this._expression.getConcreteTree(e,t)},e.asEquation=function(){var e=r(i(this._symbol),this._expression);return e.userData=this.userData,e},e.getSliderInfo=function(){return this._expression.isConstant&&"number"==typeof this._expression.constantValue&&isFinite(this._expression.constantValue)?{value:this._expression.constantValue}:void 0}})}),define("math/parsenode/functiondefinition",["require","pjs","./base","math/errormsg","math/policy"],function(e){var t=e("pjs"),n=e("./base"),r=e("math/errormsg"),i=e("math/policy");return t(n,function(e,t){e.init=function(e,n,r){t.init.call(this),e=e._symbol,this._argSymbols=n.map(function(e){return e._symbol}),this._symbol=e,this._exports=i.assignmentForbidden(e)?[]:[e],this._expression=r,this.addDependencies(this._argSymbols),this.addDependencies(this._expression.getDependencies())},e.isFunction=!0,e.getConcreteInvocationTree=function(e,t,n){if(t.length!==this._argSymbols.length)throw r.wrongArity(this._symbol,this._argSymbols.length,t.length);for(var i=Object.create(e),a=0;this._argSymbols.length>a;a++)i[this._argSymbols[a]]=t[a];return this._expression.getConcreteTree(i,n)},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);for(var n=0;this._argSymbols.length>n;n++){if(e[this._argSymbols[n]])throw r.parameterAlreadyDefined(this._argSymbols[n]);if(this._argSymbols[n]===this._symbol)throw r.parameterAlreadyDefined(this._argSymbols[n])}return this._expression.getConcreteTree(e,t)},e.getArgs=function(){return this._args},e.getSliderVariables=function(e){var t=this._argSymbols;return i.sliderVariables(e.getDependencies()).filter(function(e){return-1===t.indexOf(e)})}})}),define("math/parsenode/optimizedregression",["require","pjs","./base"],function(e){var t=e("pjs"),n=e("./base");return t(n,function(e,t){e.init=function(e,n,r,i,a){t.init.call(this),this.parameters=e,this.residuals=n,this.statistics=r,this.model=i,this.isModelValid=a.isModelValid,this.residualVariable=a.residualVariable,this.residualSuggestionId=a.residualSuggestionId,this.shouldSuggestLogMode=a.shouldSuggestLogMode,this._exports=[this.residualVariable];for(var s in e)e.hasOwnProperty(s)&&this._exports.push(s);this.addDependencies(i.getDependencies())},e.getCompiledFunctions=function(){return this.model.getCompiledFunctions.apply(this.model,arguments)},e.evaluate=function(){return this.model.evaluate.apply(this.model,arguments)}})}),define("math/parsenode/regression",["require","pjs","./base","numeric","math/distance","math/builtin","math/policy","graphing/label","math/errormsg","./error","./optimizedregression","./list","./functioncall","./identifier","./constant","./freevariable","./expressionTypes"],function(e){var t=e("pjs"),n=e("./base"),r=e("numeric"),i=e("math/distance"),a=e("math/builtin"),s=e("math/policy"),o=e("graphing/label"),u=e("math/errormsg"),c=e("./error"),l=e("./optimizedregression"),h=e("./list"),f=e("./functioncall"),p=e("./identifier"),m=e("./constant"),d=e("./freevariable"),g=e("./expressionTypes"),v=g.Subtract;return t(n,function(e,t){function n(e,t){for(var n=0,r=0;e.length>r;r++){var i=e[r].fn.apply(void 0,t);n+=i*i}return n/e.length}function g(e,t){for(var n=[],r=0;e.length>r;r++)n.push(e[r].fn.apply(void 0,t));return n}function y(e,t){for(var n=[],r=0;e.length>r;r++){for(var i=[],a=0;e[r].length>a;a++)i.push(e[r][a].fn.apply(void 0,t));n.push(i)}return n}function b(e,t,i,a,s){for(var o=[],u=0;t.length>u;u++)o.push(0);for(var c=y(t,o),l=r.LU(r.dot(c,r.transpose(c)),!0),h=o,f=!1,p=0;5>p;p++){var m=g(e,o),d=r.neg(r.LUsolve(l,r.dot(c,m)));if(!r.all(r.isFinite(d)))return _(e,t,i,a,s);if(o=r.add(h,d),f=r.all(r.eq(h,o)))break;h=o}return{solution:o,MSE:n(e,o)}}function x(e,t,i,a){for(var s=i,o=n(e,s),u=.001,c=2,l=.1,h=[],f=0;t.length>f;f++)h.push(1);for(var p=0,m=!1,d=y(t,s),v=s,b=o;a>p&&!m;){var x=g(e,s),_=r.transpose(d),M=r.dot(d,_);if(!r.all(r.isFinite(x)))break;if(!r.all(r.isFinite(M)))break;for(var w=!1;a>p&&!m&&!w;){p+=1;var I=r.LU(r.add(M,r.diag(r.mul(u,h))),!0),C=r.neg(r.LUsolve(I,r.dot(d,x))),S=C;if(s=r.add(v,S),o=n(e,s),m=r.all(r.eq(s,v))){v=s,b=o;break}var T;if(isFinite(o)&&b>=o&&(T=y(t,s),w=r.all(r.isFinite(T))),w){d=T,v=s,b=o,u*=l,u=Math.max(1e-64,u);break}u*=c}}return{solution:v,MSE:n(e,v)}}function _(e,t,n,r,a){var s,o=[];\nfor(r||(r={}),a||(a={}),s=0;n.length>s;s++){var u=n[s];a[u]&&isFinite(a[u].constantValue)?o.push(+a[u].constantValue):r.hasOwnProperty(u)&&isFinite(r[u])?o.push(+r[u]):o.push(1)}var c=T(30,n),l=E(e,t,c,3,5),h=E(e,t,l,60,1),f=x(e,t,h[0],250),p=x(e,t,o,100);return isFinite(p.MSE)?p.MSE<f.MSE?p:i.approx(p.MSE,f.MSE,8)?p:f:f}function M(e,t,r){var i,a,o=e.getDependencies();for(a=0;o.length>a;a++)if(!s.validRegressionParameter(o[a]))throw u.invalidRegressionParameter(o[a]);var c=e.getCompiledFunctions(o);if(o.length){var l={};for(a=1;o.length>a;a++)l[o[a]]=d(o[0]);var h=e.substitute(l).isLinear(o[0]),f=[];for(a=0;o.length>a;a++)f.push(e.takeDerivative(o[a]).getCompiledFunctions(o));i=h?b(c,f,o,t,r):_(c,f,o,t,r)}else i={solution:[],MSE:n(c,[])};var p={};for(a=0;o.length>a;a++)p[o[a]]=m(i.solution[a]);return p}function w(e,t){var n=e.length,r=e[0],a=t[0],s=e[n-1],o=t[n-1];if(!(isFinite(r)&&isFinite(s)&&isFinite(a)&&isFinite(o)))return!1;if(0===o-a)return!1;var u=s-r;if(0===u)return!1;for(var c=1;n-1>c;c++){var l=e[c],h=t[c],f=(o*(l-r)+a*(s-l))/u;if(!i.approx(h,f,5))return!1}return!0}function I(e,t,n){var r=Object.create(t);for(var i in n)n.hasOwnProperty(i)&&(r[i]=n[i]);return e.getConcreteTree(r)}e.init=function(e,n){t.init.call(this),this._lhs=e,this.isLhsSimple=e instanceof p||e instanceof h,this._logLhs=f("ln",[e]),this._rhs=n,this._difference=v([e,n]),this._logDifference=v([f("ln",[e]),f("ln",[n])]),this.addDependencies(e.getDependencies()),this.addDependencies(n.getDependencies())},e.isRegression=!0,e.chooseResidualVariable=function(e){if(this.userData&&this.userData.residualVariable){var t=o.latexToIdentifier(this.userData.residualVariable);if(!e[t])return t}for(var n,r=this.getDependencies(),i=0;r.length>i;i++){var a=r[i].match(/_(.*)/);if(a&&(n="e_"+a[1],!e[n]))return n}for(var s=1;;){if(n="e_"+s,!e[n])return n;s++}},e.getRHSModel=function(e,t){function n(e){for(var t=0;r.length>t;t++)if(r[t].node===this)return r[t].tmpVar;var n=d(this.tmpVar()),a=this.getConcreteTree(e);return a.getDependencies().length&&(i=!1),r.push({node:this,tmpVar:n,symbol:n._symbol,concrete:a}),n}var r=[],i=!0,a={List:n,TableColumn:n,Range:n},s=this._rhs.tryGetConcreteTree(e,a);return{node:s,substituted:s.isError?s:s.substitute(t),replacedNodes:r,isValid:i}};var C=[18.9,.105,.0113,.089,4.414,34.32,8.61,.373,.06,.149,1.84,9.26,5,.7,.2,1.13,2.61,1.89,1,.007,30,120,1500,4e-4,7.23,-1,-.0081,-.03,-28.6,-1.71,-.4,-6.94,-.777],S=function(e){var t=503*e%C.length;return C[t]},T=function(e,t){for(var n,r=[],i=t.length,a=0;e>a;a++){n=[];for(var s=0;i>s;s++)n[s]=0===a?0:1===a?1:S(a*i+s);r.push(n)}return r},E=function(e,t,n,r,i){for(var a=[],s=0;n.length>s;s++)a.push({soln:x(e,t,n[s],r),startingVals:n[s]});a.sort(function(e,t){return isNaN(e.soln.MSE)?1:isNaN(t.soln.MSE)?-1:e.soln.MSE-t.soln.MSE});for(var o=[],u=0;i>u;u++)o.push(a[u].startingVals);return o};e.computeStatistics=function(e,t,n,r,s){for(var o=0,u=0;n.length>u;u++){var c=n.args[u].constantValue;o+=c*c}var l=o/n.length,f=e.isList?a.varp(e.args.map(function(e){return+e.constantValue})):0;if(e.getDependencies().length||!isFinite(f)||0>=f||!this.isLhsSimple)return{RMSE:Math.sqrt(l)};var p=1-l/f;if(t.isValid&&1===t.replacedNodes.length){var m=[],d=[],g=r&&(s===k.LINLOG||s===k.LOGLOG);h.eachArgs([t.replacedNodes[0].concrete,e],function(e){m.push(g?Math.log(e[0].constantValue):+e[0].constantValue),d.push(+e[1].constantValue)});var v=a.corr(m,d);if(i.approx(v*v,p,8))return{r:v,rsquared:v*v}}return{Rsquared:p}},e.getResidualSuggestionId=function(e,t){var n,r=this._rhs.getDependencies();for(var i in t)if(t.hasOwnProperty(i)&&t[i].concreteTree.isTable&&t[i].concreteTree.columns[0]){var a=t[i].rawTree.columns;if(a&&a.length){var s=a[0].getExports();if(1===s.length&&-1!==r.indexOf(s[0])){for(var o=1;a.length>o;o++)if(-1!==a[o].getDependencies().indexOf(e))return void 0;n=n?n:i}}}return n?n:void 0};var k={NONE:0,LOGLIN:1,LOGLOG:2,LINLOG:3};e.linearizingTransformation=function(e,t){if(!this.isLhsSimple)return k.NONE;var n=t.substituted;if(n.isError)return k.NONE;var r=n.getDependencies();if(1!==r.length)return k.NONE;if(isFinite(t.node.polynomialOrder(r[0])))return k.NONE;var i=n.getCompiledFunctions(r);if(1!==i.length)return k.NONE;var a=i[0].fn,s=t.replacedNodes[0].concrete;if(!s.isList)return k.NONE;var o=s.args.map(function(e){return+e.constantValue});if(3>o.length)return k.NONE;o.sort(function(e,t){return e-t});var u=o.map(a),c=u.map(Math.log),l=o.map(Math.log),h=e.args.every(function(e){return isFinite(Math.log(+e.constantValue))});return w(o,c)&&h?k.LOGLIN:w(l,c)&&h?k.LOGLOG:w(l,u)?k.LINLOG:k.NONE},e.optimize=function(e,t,n,r){var i=this._lhs.getConcreteTree(e),a=this._difference.getConcreteTree(e);if(!a.isList)throw u.nonListRegression();var s,c=M(a,this.userData.regressionParameters,n),h=this.getRHSModel(e,c),f=I(this._difference,e,c),p=this.linearizingTransformation(i,h);if(!this.userData.isLogModeRegression||p!==k.LOGLIN&&p!==k.LOGLOG)s=this.computeStatistics(i,h,f,this.userData.isLogModeRegression,p);else{var m=this._logDifference.getConcreteTree(e),d=this._logLhs.getConcreteTree(e);c=M(m,this.userData.regressionParamters,n),h=this.getRHSModel(e,c),f=I(this._difference,e,c);var g=I(this._logDifference,e,c);s=this.computeStatistics(d,h,g,this.userData.isLogModeRegression,p)}var v=this.chooseResidualVariable(t),y=this.getResidualSuggestionId(v,r);return this.userData.residualVariable=o.identifierToLatex(v),l(c,f,s,h.substituted,{isModelValid:h.isValid,residualVariable:v,residualSuggestionId:y,shouldSuggestLogMode:p!==k.NONE})},e.tryOptimize=function(){try{return this.optimize.apply(this,arguments)}catch(e){if(e instanceof c)return e;throw e}},e.exportTo=function(e,t){if(!e.isError){for(var n in e.parameters)e.parameters.hasOwnProperty(n)&&(s.assignmentForbidden(n)||(t[n]=t[n]?u.multiplyDefined(n):e.parameters[n]));s.assignmentForbidden(e.residualVariable)||(t[e.residualVariable]=e.residuals)}},e.getSliderVariables=function(){return[]}})}),define("math/parsenode/table",["require","pjs","./base","math/policy","./constant","./list"],function(e){var t=e("pjs"),n=e("./base"),r=e("math/policy"),i=e("./constant"),a=e("./list");return t(n,function(e,t){function n(e){return e.isError?i(0/0):e}e.init=function(e){t.init.call(this),this.columns=e,this._exports=[];for(var n=0;e.length>n;n++)this.addDependencies(e[n].getDependencies()),Array.prototype.push.apply(this._exports,e[n].getExports())},e.exportPenalty=1,e.isTable=!0,e.canAutoRegress=function(e){if(e.isError)return!1;if(this.columns.length>2)return!1;for(var t=0;this.columns.length>t;t++){var n=this.columns[t].getExports();if(1!==n.length)return!1;if(r.assignmentForbidden(n[0]))return!1;if(e.columns[t].isError)return!1;if(!e.columns[t].isIndependent)return!1;var i=e.columns[t].values.args.length;if(2>i)return!1;for(var a=0;i>a;a++)if(isNaN(+e.columns[t].values.args[a].constantValue))return!1}return!0},e.exportTo=function(e,t){for(var i=0;this.columns.length>i;i++){var s=this.columns[i].getExports();if(s.length){var o=s[0];r.assignmentForbidden(o)||t[o]||(t[o]=e.isError?e:e.columns[i].isError?e.columns[i]:a(e.columns[i].values.args.map(n)))}}},e.getConcreteTree=function(e,t){if(t&&t[this.type])return t[this.type].call(this,e,t);for(var n=[],r=Object.create(e),i=0;this.columns.length>i;i++){var a=this.columns[i].getConcreteTree(r,e,t);a.isIndependent&&(r[a.header._symbol]=a.values),n.push(a)}return this.constructor(n)},e.getAllIds=function(){return this.columns.map(function(e){return e.header.userData.id})}})}),define("math/parsenode/tablecolumn",["require","pjs","./base","./list","./identifier","math/policy"],function(e){var t=e("pjs"),n=e("./base"),r=e("./list"),i=e("./identifier"),a=e("math/policy");return t(n,function(e,t){e.init=function(e,n,r){t.init.call(this),this.header=e,this.length=n,this.values=r,this.isIndependent=!1,this.addDependencies(e.getDependencies()),this.addDependencies(r.getDependencies()),this._exports=this._computeExports()},e._computeExports=function(){if(!(this.header instanceof i))return[];var e=this.header._symbol;return a.assignmentForbidden(e)?[]:[e]},e.getConcreteTree=function(e,t){var n,i,a=this.header.getConcreteTree(e);if(a.isFreeVariable){n=[];for(var s=0;this.values.args.length>s;s++){var o=this.values.args[s].tryGetConcreteTree(e);n.push(o)}return i=this.constructor(a,this.length,r(n)),i.isIndependent=!0,i}if(a.isConstant){for(var u=[],c=0;this.length>c;c++)u.push(a);n=r(u)}else n=a;return a=this.header.getConcreteTree(t),i=this.constructor(a,this.length,n)},e.isDiscrete=function(e){return 1!==this.header.getDependencies().length||1!==e.header.getDependencies().length||this.header.getDependencies()[0]!==e.header.getDependencies()[0]}})}),define("math/parsenode/solvedequation",["require","pjs","./base"],function(e){var t=e("pjs"),n=e("./base");return t(n,function(e,t){e.init=function(e,n){t.init.call(this),this._symbol=e,this._expression=n,this.addDependencies(n.getDependencies())},e.getConcreteTree=function(e,t){return t&&t[this.type]?t[this.type].call(this,e,t):this.constructor(this._symbol,this._expression.getConcreteTree(e,t))},e.getEvaluationInfo=function(){return this._expression.isList?this._expression.args.map(function(e){return{val:e.constantValue,operator:"="}}):this._expression.getEvaluationInfo()},e.getCompiledFunctions=function(){return this._expression.getCompiledFunctions.apply(this._expression,arguments)},e.evaluate=function(){return this._expression.evaluate.apply(this._expression,arguments)}})}),define("parsenodes",["require","math/parsenode/expressionTypes","math/parsenode/base","math/parsenode/expression","math/parsenode/scalarexpression","math/parsenode/error","math/parsenode/constant","math/parsenode/identifier","math/parsenode/freevariable","math/parsenode/dummyindex","math/parsenode/list","math/parsenode/range","math/parsenode/listaccess","math/parsenode/orderedpair","math/parsenode/movablepoint","math/parsenode/basecomparator","math/parsenode/comparator","math/parsenode/doubleinequality","math/parsenode/repeatedoperator","math/parsenode/sum","math/parsenode/product","math/parsenode/functioncall","math/parsenode/functionexponent","math/parsenode/piecewise","math/parsenode/derivative","math/parsenode/builtinfunction","math/parsenode/assignment","math/parsenode/functiondefinition","math/parsenode/equation","math/parsenode/regression","math/parsenode/table","math/parsenode/tablecolumn","math/parsenode/solvedequation","math/parsenode/optimizedregression"],function(e){var t=e("math/parsenode/expressionTypes"),n={Base:e("math/parsenode/base"),Expression:e("math/parsenode/expression"),ScalarExpression:e("math/parsenode/scalarexpression"),Error:e("math/parsenode/error"),Constant:e("math/parsenode/constant"),Identifier:e("math/parsenode/identifier"),FreeVariable:e("math/parsenode/freevariable"),DummyIndex:e("math/parsenode/dummyindex"),List:e("math/parsenode/list"),Range:e("math/parsenode/range"),ListAccess:e("math/parsenode/listaccess"),OrderedPair:e("math/parsenode/orderedpair"),MovablePoint:e("math/parsenode/movablepoint"),BaseComparator:e("math/parsenode/basecomparator"),Comparator:e("math/parsenode/comparator"),DoubleInequality:e("math/parsenode/doubleinequality"),RepeatedOperator:e("math/parsenode/repeatedoperator"),Sum:e("math/parsenode/sum"),Product:e("math/parsenode/product"),FunctionCall:e("math/parsenode/functioncall"),FunctionExponent:e("math/parsenode/functionexponent"),Piecewise:e("math/parsenode/piecewise"),Derivative:e("math/parsenode/derivative"),BuiltInFunction:e("math/parsenode/builtinfunction"),Assignment:e("math/parsenode/assignment"),FunctionDefinition:e("math/parsenode/functiondefinition"),Equation:e("math/parsenode/equation"),Regression:e("math/parsenode/regression"),Table:e("math/parsenode/table"),TableColumn:e("math/parsenode/tablecolumn"),SolvedEquation:e("math/parsenode/solvedequation"),OptimizedRegression:e("math/parsenode/optimizedregression")};for(var r in t)n[r]=t[r];for(var i in n)n.hasOwnProperty(i)&&"Comparator"!==i&&"BuiltInFunction"!==i&&(n[i].prototype.type=i);for(var a in n.Comparator)n.Comparator.hasOwnProperty(a)&&(n.Comparator[a].prototype.type="Comparator[\'"+a+"\']");for(var s in n.BuiltInFunction)n.BuiltInFunction.hasOwnProperty(s)&&(n.BuiltInFunction[s].prototype.type="BuiltInFunction[\'"+s+"\']");return n}),define("math/inverses",[],function(){var e={},t=["sin","cos","tan","cot","sec","csc","sinh","cosh","tanh","coth","sech","csch"];return t.forEach(function(t){e[t]="arc"+t,e["arc"+t]=t}),e}),define("math/baseparser",["require","jison","parsenodes","math/inverses","math/errormsg"],function(e){function t(e){var t="\\\\operatorname";return e.slice(0,t.length)===t?"\\\\"+e.slice(t.length+1,e.length-1):e}var n=e("jison"),r=n.yy,i=e("parsenodes"),a=e("math/inverses"),s=e("math/errormsg"),o={};o.parse=function(e){try{return n.parse("###"+e)}catch(t){return t instanceof i.Error?t:s.parseError()}},r.ErrorMsg=s,r.setInput=function(e,t){e.setInputString(r.lexer.matched.slice(Math.max(3,t.first_column),t.last_column))};for(var u in i)r[u]=i[u];return r.inverses=a,r.parseFunctionDeclaration=function(e){e=e.replace("###","");var n="(?:\\\\s|\\\\\\\\space|\\\\\\\\ |\\\\\\\\\\\\:)*",r="(?:\\\\\\\\operatorname\\\\{[a-zA-Z]+\\\\}|[a-zA-Z]|\\\\\\\\[a-zA-Z]+)",a="(?:_[a-zA-Z0-9]|_{[a-zA-Z0-9]+})?",s=r+a,o="(?:"+s+"(?:\\\\,"+s+")*)",u="("+s+")"+"(?:\\\\\\\\left)?\\\\(("+o+")(?:\\\\\\\\right)?\\\\)=",c=RegExp(u),l=RegExp(n,"g");e=e.replace(l,"");var h=c.exec(e);return{identifier:i.Identifier(t(h[1])),args:h[2].split(",").map(function(e){return i.Identifier(e)})}},o}),define("math/features/repr",["require","parsenodes"],function(e){var t=e("parsenodes"),n=function(e,t,n){n=n||0;var r=Array(n+1).join("  "),i=r+"  ";return"[\\n"+i+e.map(function(e){return e.repr(t,n+1)}).join(",\\n"+i)+"\\n"+r+"]"},r=function(e,t){return t=t||"",""+t+e};t.DoubleInequality.prototype.repr=t.Expression.prototype.repr=function(e,t){return r(this.type,e)+"("+n(this.args,e,t)+")"},t.Identifier.prototype.repr=t.FreeVariable.prototype.repr=function(e){return r(this.type,e)+"(\'"+this._symbol+"\')"},t.Constant.prototype.repr=function(e){return r(this.type,e)+"("+this.constantValue+")"},t.FunctionCall.prototype.repr=function(e,t){return r(this.type,e)+"("+"\'"+this._symbol+"\'"+", "+n(this.args,e,t)+")"},t.Assignment.prototype.repr=function(e,n){return r(this.type,e)+"("+t.Identifier(this._symbol).repr(e,n)+", "+this._expression.repr(e,n)+")"},t.Regression.prototype.repr=t.Equation.prototype.repr=function(e,t){return r(this.type,e)+"("+this._lhs.repr(e,t)+", "+this._rhs.repr(e,t)+")"},t.FunctionDefinition.prototype.repr=function(e,i){return r(this.type,e)+"("+t.Identifier(this._symbol).repr(e,i)+", "+n(this._argSymbols.map(function(e){return t.Identifier(e)}),e,i)+", "+this._expression.repr(e,i)+")"},t.Error.prototype.repr=function(e){return r(this.type,e)+"(\'"+this._msg+"\')"},t.Derivative.prototype.repr=function(e,t){return r(this.type,e)+"("+"\'"+this._symbol+"\'"+", "+n(this.args,e,t)+")"},t.SolvedEquation.prototype.repr=function(e,t){return r(this.type,e)+"("+"\'"+this._symbol+"\'"+", "+this._expression.repr(e,t)+")"},t.OptimizedRegression.prototype.repr=function(e,t){return r(this.type,e)+"("+JSON.stringify(this.parameters)+", "+JSON.stringify(this.residuals)+", "+JSON.stringify(this.statistics)+", "+this.model.repr(e,t+1)+", "+JSON.stringify({isModelValid:this.isModelValid,residualVariable:this.residualVariable,residualSuggestionId:this.residualSuggestionId,shouldSuggestLogMode:this.shouldSuggestLogMode})+")"},t.Table.prototype.repr=function(e,t){return r(this.type,e)+"("+n(this.columns,e,t)+")"},t.TableColumn.prototype.repr=function(e,t){return r(this.type,e)+"("+this.header.repr(e,t)+", "+this.length+", "+n(this.values,e,t)+")"}}),define("math/features/scalarEvalExpression",["require","parsenodes","math/functions"],function(e){var t=e("parsenodes"),n=e("math/functions"),r={Add:function(e){return"("+e.join("+")+")"},Multiply:function(e){return"("+e.join("*")+")"},Divide:function(e){return"("+e.join("/")+")"},Subtract:function(e){return"("+e.join("-")+")"},Exponent:function(e){return"BuiltIn.pow("+e.join(",")+")"},Negative:function(e){return"(-"+e[0]+")"},And:function(e){return e.join("&&")},Piecewise:function(e){return"("+e[0]+"?"+e[1]+":"+e[2]+")"}},i={Add:2,Multiply:2,Divide:2,Subtract:2,Exponent:2,Negative:1,And:2,Piecewise:3};for(var a in r){var s=t[a].prototype;s.scalarEvalExpression=r[a],s.evaluate=n.createEvaluateFunction(s.scalarEvalExpression,i[a])}}),define("math/features/okForImplicitFunction",["require","parsenodes"],function(e){var t=e("parsenodes");t.Add.prototype.okForImplicitFunction=t.Subtract.prototype.okForImplicitFunction=t.Add.prototype.okForImplicitFunction=t.Multiply.prototype.okForImplicitFunction=t.Divide.prototype.okForImplicitFunction=t.Exponent.prototype.okForImplicitFunction=function(){for(var e=0;this.args.length>e;e++)if(!this.args[e].okForImplicitFunction())return!1;return!0},t.Piecewise.prototype.okForImplicitFunction=function(){return this.args[1].isConstant&&1===this.args[1].constantValue&&this.args[2].isConstant&&isNaN(this.args[2].constantValue)}}),define("math/features/constantcollapsedcopy",["require","parsenodes"],function(e){var t=e("parsenodes"),n=t.Constant,r={Add:function(e){return e[0].isConstant&&e[1].isConstant?n(this.evaluate([e[0].constantValue,e[1].constantValue])):0===e[0].constantValue?e[1]:0===e[1].constantValue?e[0]:this.copyWithArgs(e)},Multiply:function(e){return e[0].isConstant&&e[1].isConstant?n(this.evaluate([e[0].constantValue,e[1].constantValue])):1===e[0].constantValue?e[1]:1===e[1].constantValue?e[0]:this.copyWithArgs(e)},Subtract:function(e){return e[0].isConstant&&e[1].isConstant?n(this.evaluate([e[0].constantValue,e[1].constantValue])):0===e[0].constantValue?t.Negative([e[1]]):0===e[1].constantValue?e[0]:this.copyWithArgs(e)},Divide:function(e){return e[0].isConstant&&e[1].isConstant?n(this.evaluate([e[0].constantValue,e[1].constantValue])):1===e[1].constantValue?e[0]:this.copyWithArgs(e)},Exponent:function(e){return e[0].isConstant&&e[1].isConstant?n(this.evaluate([e[0].constantValue,e[1].constantValue])):1===e[1].constantValue?e[0]:this.copyWithArgs(e)},Negative:function(e){return e[0].isConstant?n(-e[0].constantValue):e[0]instanceof t.Negative?e[0].args[0]:this.copyWithArgs(e)},And:function(e){return e[0].isConstant&&e[1].isConstant?n(e[0].constantValue&&e[1].constantValue):e[0].isConstant&&e[0]===!0?e[1]:e[0].isConstant&&e[0]===!1?n(!1):e[1].isConstant&&e[1]===!0?e[0]:e[1].isConstant&&e[1]===!1?n(!1):this.copyWithArgs(e)},Piecewise:function(e){return e[0].isConstant&&e[0].constantValue===!0?e[1]:e[0].isConstant&&e[0].constantValue===!1?e[2]:this.copyWithArgs(e)}};for(var i in r)t[i].prototype._constantCollapsedCopy=r[i]}),define("math/features/polynomialorder",["require","parsenodes"],function(e){var t=e("parsenodes"),n={Expression:"this.dependsOn(symbol) ? Infinity : 0",FreeVariable:"(symbol === this._symbol ? 1 : 0)",Constant:"0",Add:"Math.max(order0, order1)",Subtract:"Math.max(order0, order1)",Multiply:"order0 + order1",Negative:"order0",Divide:"order1 > 0 ? Infinity : order0"},r=function(e){return e=e.replace("order0","this.args[0].polynomialOrder(symbol)"),e=e.replace("order1","this.args[1].polynomialOrder(symbol)"),Function(["symbol"],"return "+e)};for(var i in n){var a=n[i];t[i].prototype.polynomialOrder=r(a)}t.Exponent.prototype.polynomialOrder=function(e){var t=this.args[0].polynomialOrder(e),n=this.args[1].polynomialOrder(e);if(0===t&&0===n)return 0;var r=this.args[1];return r.isConstant&&r.constantValue===Math.round(r.constantValue)&&r.constantValue>0?t*r.constantValue:1/0},t.Piecewise.prototype.polynomialOrder=function(e){return this.dependsOn(e)?this.args[2].isConstant&&isNaN(this.args[2].constantValue)?this.args[1].dependsOn(e)?1/0:0:1/0:0},t.List.prototype.polynomialOrder=function(){return 1/0}}),define("math/features/polynomialcoefficients",["require","parsenodes"],function(e){var t=e("parsenodes"),n=t.Constant(0),r=t.Constant(1);t.FreeVariable.prototype.getPolynomialCoefficients=function(e){return e===this._symbol?[n,r]:[this]},t.Constant.prototype.getPolynomialCoefficients=function(){return[this]},t.Add.prototype.getPolynomialCoefficients=function(e){for(var n=this.args[0].getPolynomialCoefficients(e),r=this.args[1].getPolynomialCoefficients(e),i=n.length-1,a=r.length-1,s=[],o=0;Math.max(i,a)>=o;o++)i>=o&&a>=o?s.push(t.Add([n[o],r[o]])):s.push(i>a?n[o]:r[o]);return s},t.Subtract.prototype.getPolynomialCoefficients=function(e){for(var n=this.args[0].getPolynomialCoefficients(e),r=this.args[1].getPolynomialCoefficients(e),i=n.length-1,a=r.length-1,s=[],o=0;Math.max(i,a)>=o;o++)i>=o&&a>=o?s.push(t.Subtract([n[o],r[o]])):s.push(i>a?n[o]:t.Negative([r[o]]));return s},t.Negative.prototype.getPolynomialCoefficients=function(e){for(var n=this.args[0].getPolynomialCoefficients(e),r=[],i=0;n.length>i;i++)r.push(t.Negative([n[i]]));return r},t.Exponent.prototype.getPolynomialCoefficients=function(e){var r=this.args[0].getPolynomialCoefficients(e),i=this.args[1].getPolynomialCoefficients(e),a=r.length-1,s=i.length-1;if(s>0)throw"can\'t solve for variable in exponent";if(0===a)return[t.Exponent([r[0],i[0]])];if(this.args[1].isConstant){var o=this.args[1].constantValue;switch(o){case 0:return[n];case 1:return r;case 2:return t.Multiply([this.args[0],this.args[0]]).getPolynomialCoefficients(e)}}throw"Unable to compile polynomial representation"},t.Multiply.prototype.getPolynomialCoefficients=function(e){for(var n=this.args[0].getPolynomialCoefficients(e),r=this.args[1].getPolynomialCoefficients(e),i=n.length-1,a=r.length-1,s=[],o=0;i>=o;o++)for(var u=0;a>=u;u++){var c=t.Multiply([n[o],r[u]]),l=s[o+u];s[o+u]=void 0===l?c:t.Add([l,c])}return s},t.Divide.prototype.getPolynomialCoefficients=function(e){var n=this.args[0].getPolynomialCoefficients(e),r=this.args[1].getPolynomialCoefficients(e),i=r.length-1,a=[];if(i>0)throw"Can\'t solve for variable in denominator";for(var s=0;n.length>s;s++)a.push(t.Divide([n[s],r[0]]));return a},t.Expression.prototype.getPolynomialCoefficients=function(e){if(this.dependsOn(e))throw"Unimplemented polynomialCoefficient call";return[this]},t.Piecewise.prototype.getPolynomialCoefficients=function(e){if(!this.dependsOn(e))return[this];var n=this.args[1].getPolynomialCoefficients(e);return this.args[0].dependsOn(e)?n:[t.Piecewise(this.args[0],n[0],this.args[2])]}}),define("math/features/extractconditions",["require","parsenodes"],function(e){var t=e("parsenodes");t.Expression.prototype.extractConditions=function(e,t){for(var n=0;this.args.length>n;n++){var r=this.args[n];t=r.extractConditions(e,t)}return t},t.Constant.prototype.extractConditions=function(e,t){return t},t.Piecewise.prototype.extractConditions=function(e,n){if(!this.dependsOn(e))return n;if(!this.args[0].dependsOn(e))return n=this.args[1].extractConditions(e,n),n=this.args[2].extractConditions(e,n);var r={};return r[e]=n,t.Piecewise([this.args[0].substitute(r),n,t.Constant(0/0)])}}),define("math/features/bounddomain",["require","parsenodes","math/builtinframe"],function(e){var t=e("parsenodes"),n=e("math/builtinframe"),r=t.Constant(0);t.Base.prototype.boundDomain=function(){return!1},t.List.prototype.boundDomain=function(){return!1},t.Expression.prototype.boundDomain=function(e){for(var t=[-1/0,1/0],n=0;this.args.length>n;n++){var r=this.args[n],i=r.boundDomain(e);if(!i)return!1;t=[Math.max(t[0],i[0]),Math.min(t[1],i[1])]}return t},t.Constant.prototype.boundDomain=function(){return[-1/0,1/0]},t.Piecewise.prototype.boundDomain=function(e){if(!this.args[2].isConstant||!isNaN(this.args[2].constantValue))return!1;var t=this.args[0].boundDomain(e),n=this.args[1].boundDomain(e);return t&&n?[Math.max(t[0],n[0]),Math.min(t[1],n[1])]:!1},t.BaseComparator.prototype.boundDomain=function(e){if("="===this.operator)return!1;var t=this._difference,i=t.polynomialOrder(e);if(i>1)return!1;if(1>i)return[-1/0,1/0];var a=t.getPolynomialCoefficients(e),s=a[1]?a[1].getConcreteTree(n):r,o=a[0]?a[0].getConcreteTree(n):r;if(!s.isConstant||!o.isConstant)return!1;if(!isFinite(s.constantValue)||!isFinite(o.constantValue))return!1;if(0===s.constantValue)return[-1/0,1/0];var u=-o.constantValue/s.constantValue;return 0>s.constantValue?[-1/0,u]:[u,1/0]}}),define("math/features/derivative",["require","parsenodes","math/baseparser","math/builtinframe","math/parsenode/builtinfunction"],function(e){var t=e("parsenodes"),n=e("math/baseparser"),r=e("math/builtinframe"),i=e("math/parsenode/builtinfunction"),a=t.Constant(0),s=t.Constant(1),o=t.Constant(2),u={FreeVariable:function(e){return e===this._symbol?s:a},Constant:function(){return isFinite(this.constantValue)?a:t.Constant(this.constantValue)},Negative:function(e){return t.Negative([this.args[0].takeDerivative(e)])},Add:function(e){return t.Add([this.args[0].takeDerivative(e),this.args[1].takeDerivative(e)])},Subtract:function(e){return t.Subtract([this.args[0].takeDerivative(e),this.args[1].takeDerivative(e)])},Multiply:function(e){return t.Add([m(e,this.args[0],t.Multiply([this.args[0].takeDerivative(e),this.args[1]])),m(e,this.args[1],t.Multiply([this.args[0],this.args[1].takeDerivative(e)]))])},Divide:function(e){return t.Subtract([m(e,this.args[0],t.Divide([this.args[0].takeDerivative(e),this.args[1]])),m(e,this.args[1],t.Divide([t.Multiply([this.args[0],this.args[1].takeDerivative(e)]),t.Exponent([this.args[1],o])]))])},Exponent:function(e){return t.Add([m(e,this.args[0],t.Multiply([t.Multiply([this.args[1],t.Exponent([this.args[0],t.Subtract([this.args[1],s])])]),this.args[0].takeDerivative(e)])),m(e,this.args[1],t.Multiply([t.Piecewise([t.Comparator["="]([this.args[0],a]),t.Piecewise([t.Comparator[">"]([this.args[1],a]),a,t.Constant(0/0)]),t.Multiply([t.FunctionCall("\\\\ln",[this.args[0]]),t.Exponent([this.args[0],this.args[1]])])]),this.args[1].takeDerivative(e)]))]).getConcreteTree(r)},Sum:function(e){return this.copyWithArgs([this.args[0],this.args[1],this.args[2],this.args[3].takeDerivative(e)])},Product:function(e){var n=t.Sum([this.args[0],this.args[1],this.args[2],t.Piecewise([t.Comparator["="]([a,this.args[3]]),s,a])]),r=t.Multiply([t.Sum([this.args[0],this.args[1],this.args[2],t.Divide([this.args[3].takeDerivative(e),this.args[3]])]),t.Product(this.args)]),i=t.Product([this.args[0],this.args[1],this.args[2],t.Piecewise([t.Comparator["="]([a,this.args[3]]),this.args[3].takeDerivative(e),this.args[3]])]);return t.Piecewise([t.Comparator["="]([a,n]),r,t.Piecewise([t.Comparator["="]([s,n]),i,a])])},Piecewise:function(e){return 2===this.args.length?t.Piecewise([this.args[0],this.args[1].takeDerivative(e)]):3===this.args.length?t.Piecewise([this.args[0],this.args[1].takeDerivative(e),this.args[2].takeDerivative(e)]):void 0},List:function(e){return t.List(this.args.map(function(t){return t.takeDerivative(e)}))},ListAccess:function(e){return this.constructor([this.args[0].takeDerivative(e),this.args[1]])},SolvedEquation:function(e){return this._expression.takeDerivative(e)},OptimizedRegression:function(e){return this.model.takeDerivative(e)}},c={exp:"\\\\exp(x)*x_1",ln:"\\\\{x >= 0: x_1/x \\\\}",sqrt:"x_1/(2*\\\\sqrt{x})",sin:"\\\\cos(x)*x_1",cos:"-\\\\sin(x)*x_1",tan:"\\\\sec(x)^2*x_1",arcsin:"x_1/\\\\sqrt{1 - x^2}",arccos:"-x_1/\\\\sqrt{1 - x^2}",arctan:"x_1/(1+x^2)",sinh:"\\\\cosh(x)*x_1",cosh:"\\\\sinh(x)*x_1",tanh:"(\\\\sech(x))^2*x_1",arcsinh:"x_1/\\\\sqrt{x^2 + 1}",arccosh:"\\\\{ x > 0: x_1/\\\\sqrt{x^2 - 1} \\\\}",arctanh:"\\\\{ \\\\abs(x) < 1: x_1/(1 - x^2) \\\\}",csc:"-\\\\cot(x)*\\\\csc(x)*x_1",sec:"\\\\tan(x)*\\\\sec(x)*x_1",cot:"-\\\\csc(x)^2*x_1",arccsc:"-x_1/(\\\\abs(x)*\\\\sqrt{x^2 - 1})",arcsec:"x_1/(\\\\abs(x)\\\\sqrt{x^2 - 1})",arccot:"-x_1/(1+x^2)",csch:"-\\\\coth(x)*\\\\csch(x)*x_1",sech:"-\\\\tanh(x)*\\\\sech(x)*x_1",coth:"-(\\\\csch(x))^2*x_1",arccsch:"-x_1/(\\\\abs(x)*\\\\sqrt{1 + x^2})",arcsech:"\\\\{ x >= 0: -x_1/(x*\\\\sqrt{1 - x^2}) \\\\}",arccoth:"\\\\{ \\\\abs(x) > 1 : x_1/(1 - x^2) \\\\}",factorial:"(x)!*\\\\polyGamma(0, x + 1)*x_1",floor:"\\\\{ \\\\mod(x, 1) > 0: 0*x_1 \\\\}",ceil:"\\\\{ \\\\mod(x, 1) > 0: 0*x_1 \\\\}",round:"\\\\{ \\\\abs(\\\\mod(x, 1) - 0.5) > 0: 0*x_1 \\\\}",abs:"\\\\{ \\\\abs(x) > 0: \\\\sign(x)*x_1 \\\\}",sign:"\\\\{ \\\\abs(x) > 0: 0*x_1 \\\\}",mean:"\\\\mean(x_1)",total:"\\\\total(x_1)",length:"0","var":"2*\\\\cov(x, x_1)",stdev:"\\\\cov(x, x_1)/\\\\stdev(x)",stdevp:"\\\\covp(x, x_1)/\\\\stdevp(x)",mad:"\\\\mean(\\\\sign(x-\\\\mean(x))*(x_1 - \\\\mean(x_1)))",min:"x_1[\\\\argmin(x)]",max:"x_1[\\\\argmax(x)]",median:"0.5*(x_1[\\\\lowerQuantileIndex(x, 0.5)] + x_1[\\\\upperQuantileIndex(x, 0.5)])",argmin:"0/0",argmax:"0/0"},l={log:["\\\\{x > 0: \\\\frac{x_1}{x*\\\\ln(y)}\\\\}","\\\\frac{-\\\\log_{y}(x)*y_1}{y*\\\\ln(y)}"],pow:["y*x^{y - 1}*x_1","x^{y}*\\\\ln(x)*y_1"],nthroot:["x^{1/y - 1}/y*x_1","-\\\\frac{x^{1/y}*\\\\ln(x)*y_1}{y^2}"],polyGamma:["0/0","\\\\polyGamma(1 + x, y)*y_1"],mod:["\\\\{ \\\\abs(\\\\mod(x, y)) > 0: x_1 \\\\}","\\\\{ \\\\mod(x/y, 1) > 0: -\\\\floor(x/y)*y_1 \\\\}"],cov:["\\\\cov(x_1, y)","\\\\cov(x, y_1)"],covp:["\\\\covp(x_1, y)","\\\\covp(x, y_1)"],corr:["(\\\\cov(x_1, y) - (\\\\cov(x, y)*\\\\cov(x, x_1)/\\\\var(x)))/(\\\\stdevp(x)\\\\stdevp(y))","(\\\\cov(x, y_1) - (\\\\cov(x, y)*\\\\cov(y, y_1)/\\\\var(y)))/(\\\\stdevp(x)\\\\stdevp(y))"],quantile:["\\\\{ \\\\floor(y*(\\\\length(x)-1)) = y*(\\\\length(x)-1) :   x_1[\\\\upperQuantileIndex(x, y)],  (\\\\ceil(y*(\\\\length(x)-1)) - y*(\\\\length(x)-1))*x_1[\\\\lowerQuantileIndex(x, y)] +   (y*(\\\\length(x)-1) - \\\\floor(y*(\\\\length(x)-1)))*x_1[\\\\upperQuantileIndex(x, y)]\\\\}","\\\\{ \\\\floor(y*(\\\\length(x)-1)) < y*(\\\\length(x)-1) :   (x[\\\\upperQuantileIndex(x, y)] - x[\\\\lowerQuantileIndex(x, y)])*y_1\\\\}"],upperQuantileIndex:["0/0","0/0"],lowerQuantileIndex:["0/0","0/0"],lcm:["0/0","0/0"],gcd:["0/0","0/0"],nCr:["0/0","0/0"],nPr:["0/0","0/0"]},h=function(e){return function(t){var n=this.args,i={x:n[0],x_1:n[0].takeDerivative(t)};return m(t,n[0],e.substitute(i)).getConcreteTree(r)}},f=function(e,n){return function(i){var a=this.args,s={x:a[0],x_1:a[0].takeDerivative(i),y:a[1],y_1:a[1].takeDerivative(i)};return t.Add([m(i,a[0],e.substitute(s)),m(i,a[1],n.substitute(s))]).getConcreteTree(r)}};for(var p in c)i[p].prototype.takeDerivative=h(n.parse(c[p]));for(p in l)i[p].prototype.takeDerivative=f(n.parse(l[p][0]),n.parse(l[p][1]));var m=function(e,t,n){return t.dependsOn(e)?n:a};for(var d in u){var g=u[d];t[d].prototype.takeDerivative=g}}),define("math/features/substitute",["require","parsenodes"],function(e){var t=e("parsenodes"),n={Identifier:function(e){return e[this._symbol]?e[this._symbol]:this},FreeVariable:function(e){return e[this._symbol]?e[this._symbol]:this},Constant:function(){return this},Expression:function(e){return this.copyWithArgs(this.args.map(function(t){return t.substitute(e)}))},List:function(e){return t.List(this.args.map(function(t){return t.substitute(e)}))},SolvedEquation:function(e){return this.constructor(this._symbol,this._expression.substitute(e))},OptimizedRegression:function(e){return this.constructor(this.model.substitute(e),this.parameters,this.residualVariables,this.residuals,this.statistics)}};for(var r in n)t[r].prototype.substitute=n[r]}),define("math/features/solve",["require","math/baseparser","math/parsenode/constant","math/parsenode/equation","math/parsenode/solvedequation","math/parsenode/basecomparator","math/parsenode/list","math/errormsg","math/builtinframe","math/policy"],function(e){function t(e){return s(e),0===e.a.constantValue?0===e.b.constantValue?u(0===e.c.constantValue):v.getConcreteTree(e):0>e.f.constantValue-e.g.constantValue?f([u(!1)]):0===e.f.constantValue-e.g.constantValue?y.getConcreteTree(e):b.getConcreteTree(e)}function n(e){var t=Object.create(m);return t.a=e[2]?e[2].tryGetConcreteTree(m):g,t.b=e[1]?e[1].tryGetConcreteTree(m):g,t.c=e[0]?e[0].tryGetConcreteTree(m):g,t}function r(e){return 0===e.a.constantValue?0===e.b.constantValue?0:1:2}function i(e,t,i){for(var a,s,o=[],u=[],c=0;t.length>c;c++){var l=t[c],h=0;f.eachArgs([e],function(e){var t=e[0];h=Math.max(h,t.polynomialOrder(l))});var p=h>2,m=t.length>1&&!d.validSolvedVariable(l),v=i&&e.extractConditions(l,g)!==g;p||m||v?(u[c]={},o[c]=1/0):(u[c]=[],o[c]=0,f.eachArgs([e],function(e){var t=e[0];s=n(t.getPolynomialCoefficients(l)),u[c].push(s),o[c]=Math.max(o[c],r(s))\n}))}var y;if(1===t.length)s=u[0],a=t[0],y=o[0];else{var b;b=0===o[0]?1:0===o[1]?0:o[0]<o[1]?0:1,s=u[b],a=t[b],y=o[b]}return{localFrame:s,variableOfInterest:a,effectiveOrder:y}}function a(e,t){return t?S.inequality:1===e.length?S.singleVariable:S.generalEquation}function s(e){e.f=x.getConcreteTree(e),e.g=_.getConcreteTree(e),e.p=M.getConcreteTree(e),e.q=w.getConcreteTree(e),e.m=u(1e305)}var o=e("math/baseparser"),u=e("math/parsenode/constant"),c=e("math/parsenode/equation"),l=e("math/parsenode/solvedequation"),h=e("math/parsenode/basecomparator"),f=e("math/parsenode/list"),p=e("math/errormsg"),m=e("math/builtinframe"),d=e("math/policy"),g=u(0),v=o.parse("[-c/b]"),y=o.parse("[-b/(2*a)]"),b=o.parse("[\\\\{a>0:q,p\\\\},\\\\{a>0:p,q\\\\}]"),x=o.parse("b*b"),_=o.parse("4*a*c"),M=o.parse("(-b+\\\\sqrt{b*b-4*a*c})/(2*a)"),w=o.parse("(-b-\\\\sqrt{b*b-4*a*c})/(2*a)"),I=o.parse("[\\\\{a=0:\\\\{b<0:-c/b\\\\},q\\\\},\\\\{a=0:\\\\{b>=0:-c/b\\\\},p\\\\}]"),C=o.parse("[\\\\{a=0:\\\\{b<0:-c/b\\\\},a>0:q\\\\},\\\\{a=0:\\\\{b=0:\\\\{c>0:-m\\\\}\\\\},a>0:\\\\{f<g:-m\\\\},p\\\\},\\\\{a=0:\\\\{b=0:\\\\{c>0:m\\\\}\\\\},a>0:\\\\{f<g:m\\\\},q\\\\},\\\\{a=0:\\\\{b>0:-c/b\\\\},a>0:p\\\\}]"),S={singleVariable:t,inequality:function(e){return s(e),C.getConcreteTree(e)},generalEquation:function(e){return s(e),I.getConcreteTree(e)}};c.prototype.solve=function(e){return this.asComparator().solve(e)},h.prototype.solve=function(e){var t=this.tryGetConcreteTree(e);if(t.isError)return t;if(t.isConstant)return t;var n="="!==this.getOperator(),r=this._difference.tryGetConcreteTree(e),s=r.getDependencies();if(0===s.length)return r.isList?f(r.args.map(function(e){return u(0===e.constantValue)})):u(0===r.constantValue);if(1===s.length&&r.isList&&!n)return p.singleVariableListSolve();var o=r.isList?r:f([r]);if(s.length>2)return p.tooManyVariables(this.getSliderVariables(t)).setDependencies(s);if(n&&!d.validInequalityVariables(s))return p.invalidInequalityVariables().setDependencies(s);if(2===s.length&&!d.validImplicitVariables(s))return p.invalidImplicitVariables().setDependencies(s);var c=i(o,s,n),h=c.localFrame,m=c.effectiveOrder,g=c.variableOfInterest;if(d.complicatedPolarImplicit(g,m)&&(n||s.length>1))return p.complicatedPolarImplicit().setDependencies(s);if(m>2)return 1===s.length?p.unsolvable().setDependencies(s):n?p.complicatedImplicitInequality().setDependencies(s):r;for(var v=a(s,n),y=[],b=0;h.length>b;b++){var x=v(h[b]);if(x.isError)return x;if(x.isConstant)y.push(x);else for(var _=0;x.args.length>_;_++){var M=x.args[_],w=o.args[b].extractConditions(g,M).getConcreteTree(e);y.push(w)}}return l(g,f(y))}}),define("worker/workerconfig",[],function(){return{singlevarsolutions:!0}}),define("math/evaluationstate",["require","graphing/graphmode","parsenodes","graphing/label","worker/workerconfig"],function(e){function t(e){return e.isError?e.getError():void 0===e.constantValue?"":+e.constantValue}function n(e,n){for(var r=[],i=0;e.columns.length>i;i++){var a=n.columns[i],s={dependent:!a.isIndependent,discrete:a.isIndependent};a.isError?(s.error=a.getError(),s.values=[]):s.values=a.values.args.map(t),r.push(s)}return{can_auto_regress:e.canAutoRegress(n),column_data:r}}var r=e("graphing/graphmode"),i=e("parsenodes"),a=e("graphing/label"),s=e("worker/workerconfig"),o=function(){return{operator:"=",variables:[]}},u=function(e,t){if(e.isTable)return n(e,t);var u=o();if(t.isError)return u.error=t.getError(),u.variables=e.getSliderVariables(t),u;t.isMovablePoint&&(u.move_ids=t._moveIds,u.move_matrix=t._moveMatrix),e.isInequality()&&(u.is_inequality=!0),u.operator=e.getOperator(),t instanceof i.SolvedEquation?t._expression.constantValue!==!0&&t._expression.constantValue!==!1&&(u.assignment=t._symbol):e instanceof i.Assignment&&(u.assignment=e._symbol);var c=e.getGraphMode(t);if(c!==r.NONE){u.is_graphable=!0,c===r.XYPOINT&&(u.is_point_list=!0),c===r.XYPOINT_MOVABLE&&(u.is_point_list=!0),c===r.PARAMETRIC&&(u.is_parametric=!0),t.isShadeBetween()&&(u.is_shade_between=!0);var l=e.tableInfo(t);l&&(u.is_tableable=!0,u.table_info=l)}u.variables=u.is_graphable?[]:e.getSliderVariables(t);var h=e.getSliderInfo();h?(u.is_slidable=!0,u.is_animatable=!u.is_graphable,u.constant_value=h.value):t.isConstant&&(u.constant_value=t.constantValue);var f=t.getEvaluationInfo();if(!f||e.isConstant||e.isFunction||u.is_graphable||u.is_slidable||!s.singlevarsolutions&&t instanceof i.SolvedEquation||(u.is_evaluable=!0,u.zero_values=f),t instanceof i.OptimizedRegression){var p={};for(var m in t.parameters)t.parameters.hasOwnProperty(m)&&(p[a.identifierToLatex(m)]=+t.parameters[m].constantValue);u.is_regression=!0,u.regression={parameters:p,residualVariable:a.identifierToLatex(t.residualVariable),residualSuggestionId:t.residualSuggestionId,shouldSuggestLogMode:t.shouldSuggestLogMode,statistics:t.statistics}}return u};return u.default=o,u}),define("math/statementanalysis",["require","math/evaluationstate","pjs","graphing/graphmode"],function(e){var t=e("math/evaluationstate"),n=e("pjs"),r=e("graphing/graphmode");return n(function(e){e.init=function(e,n){this.rawTree=e,this.concreteTree=n,this.evaluationState=t(e,n)},e.exportTo=function(e){this.rawTree.exportTo(this.concreteTree,e)},e.graph=function(e){return this.rawTree.graph(this.concreteTree,e)},e.getGraphMode=function(){return this.rawTree.getGraphMode(this.concreteTree)},e.getGraphInfo=function(){return this.rawTree.getGraphInfo(this.concreteTree)},e.shouldIntersect=function(){if(!this.evaluationState.is_graphable)return!1;if(!this.rawTree.userData.shouldGraph)return!1;var e=this.getGraphMode();return e===r.X||e===r.Y}})}),define("math/features/analyze",["require","parsenodes","math/statementanalysis","math/builtinframe","math/policy","math/errormsg","math/comparators"],function(e){function t(e,t){return e.filter(function(e){return!t[e]})}var n=e("parsenodes"),r=e("math/statementanalysis"),i=e("math/builtinframe"),a=e("math/policy"),s=n.Constant,o=e("math/errormsg"),u=e("math/comparators"),c=n.FreeVariable,l=s(0);n.Base.prototype.analyze=function(e){return r(this,this.tryGetConcreteTree(e))},n.Expression.prototype.analyze=function(e){var t=this.tryGetConcreteTree(e);if(t.isError)return r(this,t);var n=t.getDependencies();return n.length>1?a.validImplicitVariables(n)?r(this,o.equationRequired().setDependencies(n)):r(this,o.tooManyVariables(this.getSliderVariables(t)).setDependencies(n)):1!==n.length||a.validExpressionVariable(n[0])?r(this,t):r(this,o.equationRequired(n[0]).setDependencies(n))},n.Identifier.prototype.analyze=function(e){return r(this,this.tryGetConcreteTree(e))},n.FunctionDefinition.prototype.analyze=function(e){if(i[this._symbol])return r(this,o.cannotRedefine(this._symbol));var t=this.tryGetConcreteTree(e);if(t.isError)return r(this,t);var n=this._argSymbols,s=t.getDependencies(),u=s.filter(function(e){return-1===n.indexOf(e)});return a.unplottablePolarFunction(this._symbol,s)?r(this,o.unplottablePolarFunction()):u.some(a.assignmentForbidden)?r(this,o.addArgumentsToDefinition(u,this._symbol,n).setDependencies(s)):u.length?r(this,o.tooManyVariables(this.getSliderVariables(t)).setDependencies(s)):r(this,t)},n.Assignment.prototype.analyze=function(e){var t=this._symbol;if(!a.validLHS(t))return r(this,o.invalidLHS(t));if(i[t])return r(this,o.cannotRedefine(t));var n=this.tryGetConcreteTree(e);if(n.isError)return r(this,n);var s=n.getDependencies();if(-1!==s.indexOf(this._symbol)){var u=this.asEquation().analyze(e);return r(this,u.concreteTree)}return s.length>1?r(this,o.tooManyVariables(this.getSliderVariables(n)).allowExport().setDependencies(s)):r(this,n)},n.Regression.prototype.analyze=function(e,t,n,i){return r(this,this.tryOptimize(e,t,n,i))},n.Equation.prototype.analyze=n.BaseComparator.prototype.analyze=function(e){var t;try{t=this.solve(e)}catch(i){if(!(i instanceof n.Error))throw i;t=i}return r(this,t)},n.DoubleInequality.prototype.analyze=function(e){var t=this.tryGetConcreteTree(e);if(t.isError)return r(this,t);var n=t.getDependencies();return u.table[this._operators[0]].direction!==u.table[this._operators[1]].direction?r(this,o.mismatchedDoubleInequality()):a.validDoubleInequalitySymbol(t._symbol)?a.validDoubleInequalityVariables(n)?n.length>2?r(this,o.tooManyVariables(this.getSliderVariables(t)).setDependencies(n)):-1!==t._expressions[0].getDependencies().indexOf(t._symbol)||-1!==t._expressions[1].getDependencies().indexOf(t._symbol)?r(this,o.complicatedDoubleInequality().setDependencies(n)):r(this,t):r(this,o.invalidDoubleInequalityVariables().setDependencies(n)):r(this,o.invalidDoubleInequalityVariables().setDependencies(n))},n.And.prototype.analyze=function(e){var t=this.tryGetConcreteTree(e);if(t.isError)return r(this,t);var n=t.getDependencies();return n.length?a.validDoubleInequalityVariables(n)?r(this,o.complicatedDoubleInequality().setDependencies(n)):r(this,o.tooManyVariables(this.getSliderVariables(t)).setDependencies(n)):r(this,t)},n.OrderedPair.prototype.analyze=function(e,t){var i=this.tryGetConcreteTree(e);if(i.isError)return r(this,i);var s=r(this,i),u=i.getDependencies();if(u.length)return a.validParametricVariables(u)?s:r(this,o.tooManyVariables(this.getSliderVariables(i)).setDependencies(u));if(!s.evaluationState.is_graphable)return s;if(0!==s.evaluationState.variables.length)return s;if(this.args[0].isList||this.args[1].isList)return s;var h,f,p=[,],m=[[1,0,0],[0,1,0]],d=this.args;return d.forEach(function(n,r){if(!f)for(var i,a=n.getDependencies(),s=d[0===r?1:0],o=a.length-1;o>=0;o--){i=void 0;var u=a[o];for(var g in t)if(t[g].evaluationState.assignment===u&&t[g].evaluationState.is_slidable){i=g;break}if(void 0!==i){var v=Object.create(e);v[u]=c(u);var y=n.tryGetConcreteTree(v);if(!y.isError){var b=y.polynomialOrder(u);if(1===b){var x=y.getPolynomialCoefficients(u),_=x[1]?x[1].getConcreteTree(v):l,M=x[0]?x[0].getConcreteTree(v):l;if(M.isConstant&&_.isConstant&&0!==_.constantValue){var w=s.tryGetConcreteTree(v);if(!w.isError){var I=w.polynomialOrder(u);if(I>0){if(p[0])continue;0!==I&&(f=!0)}m[r][r]=1/_.constantValue,m[r][2]=-M.constantValue/_.constantValue,h=!0,p[r]=i;break}}}}}}}),h?(p[1]===p[0]&&(p[1]=void 0),r(this,n.MovablePoint(i.args,p,m))):s},n.Table.prototype.analyze=function(e){for(var i,s=Object.create(e),u=[],c=0;this.columns.length>c;c++){var l=this.columns[c].analyze(s,e);if(0===c&&(l.concreteTree.isIndependent?a.validFirstColumnVariable(l.concreteTree.header._symbol)?i=l.concreteTree.header._symbol:l=r(this.columns[c],o.invalidFirstTableColumn()):l=r(this.columns[c],o.invalidDependentFirstTableColumn())),l.concreteTree.isIndependent)s[l.concreteTree.header._symbol]=l.concreteTree.values;else if(!l.concreteTree.isError){var h=l.concreteTree.header.getDependencies(),f=t(h,s);f.length&&(l=r(this.columns[c],o.tooManyVariables(f).setDependencies(f)))}u.push(l.concreteTree)}var p=n.Table(u),m=r(this,p);return m.evaluationState.is_graphable=!0,m},n.TableColumn.prototype.analyze=function(e,t){var n=this.header.tableError();if(n)return r(this,o.invalidTableHeader(n));var i=this.tryGetConcreteTree(e,t);if(i.isError)return r(this,i);if(i.header.isError)return r(this,i.header);if(i.values.isError)return r(this,i.values);for(var a=0;i.values.args.length>a;a++)if(!i.values.args[a].isError){var s=this.values.args[a]&&this.values.args[a].tableError();if(s)i.values.args[a]=o.invalidTableEntry(s);else{var u=i.values.args[a].getDependencies();u.length&&(i.values.args[a]=o.tooManyVariables(u).setDependencies(u))}}return r(this,i)}}),define("math/features/getgraphmode",["require","parsenodes","math/policy","graphing/graphmode"],function(e){function t(e){var t=e._expression.getDependencies();if(1!==t.length)return i.NONE;var n=e._symbol,a=t[0];return r.graphMode(n,a)}var n=e("parsenodes"),r=e("math/policy"),i=e("graphing/graphmode");n.Base.prototype.getGraphMode=function(){return i.NONE},n.Identifier.prototype.getGraphMode=function(){return r.graphableAsBareIdentifier(this._symbol)?i.Y:i.NONE},n.Expression.prototype.getGraphMode=function(e){var t=e.getDependencies();return 1!==t.length?i.NONE:i.Y},n.BaseComparator.prototype.getGraphMode=function(e){var a=e.getDependencies();return e.isConstant?i.NONE:e instanceof n.SolvedEquation?0===a.length?r.graphableAsConstant(e._symbol)?r.constantGraphMode(e._symbol):i.NONE:t(e):i.NONE},n.DoubleInequality.prototype.getGraphMode=function(e){return r.constantGraphMode(e._symbol)},n.Equation.prototype.getGraphMode=function(e){return e.isConstant?i.NONE:e instanceof n.SolvedEquation?t(e):2!==e.getDependencies().length?i.NONE:i.IMPLICIT},n.Assignment.prototype.getGraphMode=function(e){if(e instanceof n.SolvedEquation)return t(e);var a=e.getDependencies();switch(a.length){case 0:return r.graphableAsConstant(this._symbol)?r.constantGraphMode(this._symbol):i.NONE;case 1:return e.isList&&!r.graphableListVariables(this._symbol,a[0])?i.NONE:r.graphMode(this._symbol,a[0]);case 2:return i.IMPLICIT;default:return i.NONE}},n.FunctionDefinition.prototype.getGraphMode=function(e){if(1!==this._argSymbols.length)return i.NONE;var t=r.graphMode(this._symbol,this._argSymbols[0]),n=e.getDependencies();switch(n.length){case 0:return t;case 1:return n[0]!==this._argSymbols[0]?i.NONE:t;default:return i.NONE}},n.OrderedPair.prototype.getGraphMode=function(e){if(e.isMovablePoint)return i.XYPOINT_MOVABLE;var t=e.getDependencies();return 0===t.length?i.XYPOINT:r.validParametricVariables(t)?i.PARAMETRIC:i.NONE},n.List.prototype.getGraphMode=function(e){return 1!==e.getDependencies().length?i.NONE:i.Y},n.Regression.prototype.getGraphMode=function(e){return this.isLhsSimple?e.isModelValid?1!==e.model.getDependencies().length?i.NONE:i.Y:i.NONE:i.NONE}}),define("math/features/getgraphinfo",["require","parsenodes","math/builtinframe"],function(e){var t=e("parsenodes"),n=e("math/builtinframe");t.Base.prototype.getGraphInfo=function(e){var t,r,i=e.getDependencies(),a=[0/0,0/0];switch(i.length){case 0:t=!0,a=[+e.constantValue,0],r=[-1/0,1/0];break;case 1:if(r=e.boundDomain(i[0]),r?t=e.isLinear(i[0]):(r=[-1/0,1/0],t=!1),t){var s=e.getPolynomialCoefficients(i[0]);a[0]=s[0]?+s[0].getConcreteTree(n).constantValue:0,a[1]=s[1]?+s[1].getConcreteTree(n).constantValue:0}break;case 2:t=!1,r=[-1/0,1/0]}return{graphMode:this.getGraphMode(e),color:this.userData.color,style:this.userData.style,operator:this.getOperator(),isLinear:t,linearCoefficients:a,domainBound:r}}}),define("math/features/tableinfo",["require","parsenodes","math/policy"],function(e){var t=e("parsenodes"),n=e("math/policy"),r=function(e){return e.replace(/^( |\\\\space)+/,"").replace(/( |\\\\space)+$/,"")};t.Base.prototype.tableInfo=function(){return!1},t.Identifier.prototype.tableInfo=function(){return n.graphableAsBareIdentifier(this._symbol)?n.validFirstColumnVariable(this._symbol)?{independent_variable:this._symbol,dependent_column:this._inputString,by_reference:!1}:!1:!1},t.Expression.prototype.tableInfo=function(e){var t=e.getDependencies();if(1!==t.length)return!1;var r=t[0];return n.validFirstColumnVariable(r)?{independent_variable:r,dependent_column:this._inputString,by_reference:!1}:!1},t.Assignment.prototype.tableInfo=function(e){if(e instanceof t.SolvedEquation)return!1;if(!this._inputString.length)return!1;var i=e.getDependencies();if(i.length>1)return!1;var a;if(0===i.length){if(!n.tableableAsConstant(this._symbol))return!1;a=n.implicitIndependent(this._symbol)}else a=i[0];if(!n.validFirstColumnVariable(a))return!1;var s=n.assignmentForbidden(this._symbol)?r(this._inputString.replace(/[^=]*=/,"")):r(this._inputString.split("=")[0]);return{independent_variable:a,dependent_column:s,by_reference:!n.assignmentForbidden(this._symbol)}},t.FunctionDefinition.prototype.tableInfo=function(e){if(1!==this._argSymbols.length)return!1;if(!this._inputString.length)return!1;var t=e.getDependencies();if(t.length>1)return!1;var i=this._argSymbols[0];if(!n.validFirstColumnVariable(i))return!1;var a=n.assignmentForbidden(this._symbol),s=a?r(this._inputString.replace(/[^=]*=/,"")):r(this._inputString.split("=")[0]);return{independent_variable:i,dependent_column:s,by_reference:!a}},t.BaseComparator.prototype.tableInfo=function(){return!1},t.DoubleInequality.prototype.tableInfo=function(){return!1},t.Equation.prototype.tableInfo=function(){return!1},t.OrderedPair.prototype.tableInfo=function(e){var n=e.getDependencies();return 0!==n.length?!1:e.isMovablePoint?!1:{independent_variable:"x",dependent_column:"y",by_reference:!1,values:t.List.mapArgs(e.args,function(e){return[+e[0].constantValue,+e[1].constantValue]})}},t.List.prototype.tableInfo=function(){return!1}}),define("math/features/tableerror",["require","parsenodes","lib/worker-i18n"],function(e){var t=e("parsenodes"),n=e("lib/worker-i18n");t.Base.prototype.tableError=function(){return this.isInequality()?n.t("Inequalities are not allowed."):!1},t.List.prototype.tableError=function(){return n.t("Lists are not allowed.")},t.OrderedPair.prototype.tableError=function(){return n.t("Points are not allowed.")},t.Equation.prototype.tableError=t.Assignment.prototype.tableError=function(){return n.t("Equations are not allowed.")},t.FunctionDefinition.prototype.tableError=function(){return n.t("Function definitions are not allowed.")}}),define("math/features/islinear",["require","parsenodes"],function(e){var t=e("parsenodes");t.Base.prototype.isLinear=function(){return!1},t.Expression.prototype.isLinear=function(e){return 1>=this.polynomialOrder(e)},t.SolvedEquation.prototype.isLinear=function(e){return this._expression.isLinear(e)},t.OptimizedRegression.prototype.isLinear=function(e){return this.model.isLinear(e)}}),define("graphing/columnmode",{POINTS:"POINTS",LINES:"LINES",POINTS_AND_LINES:"POINTS_AND_LINES"}),define("graphing/dragmode",{NONE:"NONE",X:"X",Y:"Y",XY:"XY"}),define("math/features/graph",["require","parsenodes","math/plotter","graphing/graphmode","math/comparators","graphing/columnmode","graphing/dragmode"],function(e){function t(e){for(var t=[],n=[],r=e.length,i=0;r>i;i++)t.push(e[i][0]),n.push(e[i][1]);return{defined:{x:t,y:n}}}function n(e){return Array.prototype.concat.apply([],e)}var r=e("parsenodes"),i=e("math/plotter"),a=e("graphing/graphmode"),s=e("math/comparators"),o=e("graphing/columnmode"),u=e("graphing/dragmode"),c=r.List;r.Base.prototype._graph=function(e,t,n){if(n.graphMode===a.NONE)return!1;var r,s=e.getCompiledFunctions();try{r=e.getCompiledDerivatives()}catch(o){}for(var u=[],c=0;s.length>c;c++){var l;e.isList?(l=this.getGraphInfo(e.args[c]),l.graphMode=n.graphMode):l=n;var h=r?i.computeGraphData(t,l,s[c].fn,r[c].fn):i.computeGraphData(t,l,s[c].fn);h.compiled=s[c],u.push(h)}return u},r.Base.prototype.graph=function(e,t){var n=this.getGraphInfo(e);return this._graph(e,t,n)},r.BaseComparator.prototype.graph=function(e,t){var n=this.getGraphInfo(e).graphMode;if(n===a.NONE)return!1;if(!e instanceof r.SolvedEquation)return!1;var o,u=this.getOperator(),c=e.getCompiledFunctions();try{o=e.getCompiledDerivatives()}catch(l){}var h,f,p=[],m=[-1,0,0,1],d=c.length;for(f=0;d>f;f++){var g=this.getGraphInfo(e._expression.args[f]);g.graphMode=n,h=o?i.computeGraphData(t,g,c[f].fn,o[f].fn):i.computeGraphData(t,g,c[f].fn),h.compiled=c[f],h.operator=s.get(s.table[u].inclusive,m[f%4]),p.push(h)}for(f=0;d>f;f+=4){var v=i.polygonsFromSegments(p[f+1].segments,p[f+2].segments,n);p.push({graphMode:a.POLYGONFILL,segments:v,poi:{}})}return p},r.DoubleInequality.prototype.graph=function(e,t){var n=this.getGraphInfo(e);if(n.graphMode===a.NONE)return!1;var r=[],o=s.get(s.table[this._operators[0]].inclusive,0),u=s.get(s.table[this._operators[1]].inclusive,0),l=this.userData,h=this;return c.eachArgs(e._expressions,function(e){var s,c;e[0].userData=e[1].userData=l,s=h._graph(e[0],t,n)[0],s.operator=o,r.push(s),c=h._graph(e[1],t,n)[0],c.operator=u,r.push(c);var f=i.polygonsFromSegments(s.segments,c.segments,s.graphMode);r.push({graphMode:a.POLYGONFILL,segments:f,poi:{}})}),r},r.OrderedPair.prototype.graph=function(e,n){var r,s=this.getGraphInfo(e);switch(s.graphMode){case a.XYPOINT_MOVABLE:return r=[[e.args[0].constantValue,e.args[1].constantValue]],[{segments:[r],graphMode:s.graphMode,color:this.userData.color,style:this.userData.style,poi:t(r)}];case a.XYPOINT:return r=[],c.eachArgs(e.args,function(e){isFinite(e[0].constantValue)&&isFinite(e[1].constantValue)&&r.push([e[0].constantValue,e[1].constantValue])}),[{segments:[r],graphMode:s.graphMode,color:this.userData.color,style:this.userData.style,poi:t(r)}];case a.PARAMETRIC:var o=this.userData,u=c.mapArgs(e.args,function(e){if(e[0].isConstant&&e[1].isConstant){var r=[[e[0].constantValue,e[1].constantValue]];return{segments:[r],graphMode:a.XYPOINT,color:o.color,style:o.style,poi:t(r)}}var u=e[0].getCompiledFunctions()[0].fn,c=e[1].getCompiledFunctions()[0].fn,l=function(e){return[u(e),c(e)]};return s.domain=o.domain,i.computeGraphData(n,s,l)});return u;default:return!1}},r.Regression.prototype.graph=function(e,t){var n=this.getGraphInfo(e);return this._graph(e.model,t,n)},r.Table.prototype.isValueDraggable=function(e,t,n){if(!e.columns[t].isIndependent)return!1;var r=this.columns[t],i=r.values,a=i&&i.args&&i.args[n];return a&&isFinite(a.constantValue)&&0===a._dependencies.length?!0:!1},r.Table.prototype.graph=function(e,r){var i=[];if(e.columns[0].isError)return i;for(var s=e.columns[0],l=s.values,h=1;this.columns.length>h;h++){var f=e.columns[h];if(!f.isError){var p=this.columns[h].header.userData;if(!p.hidden){var m=p.columnMode,d=p.dragMode,g=d===u.X||d===u.XY,v=d===u.Y||d===u.XY,y=m===o.POINTS||m===o.POINTS_AND_LINES,b=m===o.LINES||m===o.POINTS_AND_LINES,x=f.isDiscrete(s),_=b&&x,M=b&&!x,w=[];if(y){for(var I=[],C=[],S=[],T=0;l.args.length>T;T++){var E=l.args[T],k=f.values.args[T];if(E&&k&&isFinite(E.constantValue)&&isFinite(k.constantValue)){var A=g&&this.isValueDraggable(e,0,T),F=v&&this.isValueDraggable(e,h,T);A||F?(C.push([E.constantValue,k.constantValue]),S.push({index:T,dragX:A,dragY:F})):I.push([E.constantValue,k.constantValue])}}C.length&&w.push({graphMode:a.XYPOINT_MOVABLE,segments:[C],color:p.color,tableId:p.tableId,poi:t(C),movablePointInfo:S}),I.length&&w.push({segments:[I],graphMode:a.XYPOINT,poi:t(I),color:p.color,style:p.style})}if(_){var D=[],P=[],V=f.values;c.eachArgs([l,V],function(e){isFinite(e[0].constantValue)&&isFinite(e[1].constantValue)?P.push([e[0].constantValue,e[1].constantValue]):(D.push(P),P=[])}),D.push(P),w.push({segments:D.map(n),graphMode:a.PARAMETRIC,poi:[],color:p.color,style:p.style})}if(M){var O=this.columns[h].header.graph(e.columns[h].header,r);O.length&&Array.prototype.push.apply(w,O)}w.length&&(i[p.id]=w)}}}return i}}),define("parser",["require","math/baseparser","math/features/repr","math/features/scalarEvalExpression","math/features/okForImplicitFunction","math/features/constantcollapsedcopy","math/features/polynomialorder","math/features/polynomialcoefficients","math/features/extractconditions","math/features/bounddomain","math/features/derivative","math/features/substitute","math/features/solve","math/features/analyze","math/features/getgraphmode","math/features/getgraphinfo","math/features/tableinfo","math/features/tableerror","math/features/islinear","math/features/graph"],function(e){var t=e("math/baseparser");return e("math/features/repr"),e("math/features/scalarEvalExpression"),e("math/features/okForImplicitFunction"),e("math/features/constantcollapsedcopy"),e("math/features/polynomialorder"),e("math/features/polynomialcoefficients"),e("math/features/extractconditions"),e("math/features/bounddomain"),e("math/features/derivative"),e("math/features/substitute"),e("math/features/solve"),e("math/features/analyze"),e("math/features/getgraphmode"),e("math/features/getgraphinfo"),e("math/features/tableinfo"),e("math/features/tableerror"),e("math/features/islinear"),e("math/features/graph"),t}),define("math/finddependencyorder",["require","math/builtinframe","underscore"],function(e){function t(e,t){function i(t){g[t]=g[t]||{};var n,r=g[t];r.id=t,r.index=v,r.lowlink=v,y.push(r),r.instack=!0,v++;for(var o=e[t].getDependencies(),u=0;o.length>u;u++){var c=o[u];if(p.hasOwnProperty(c))for(var l=p[c],h=0;l.length>h;h++){var f=l[h];g.hasOwnProperty(f)?(n=g[f],n.instack&&(r.lowlink=Math.min(r.lowlink,n.index))):(i(f),n=g[f],r.lowlink=Math.min(r.lowlink,n.lowlink))}}if(r.lowlink===r.index)if(n=y.pop(),n.instack=!1,n===r)a(r);else{for(var m=[n];;)if(n=y.pop(),n.instack=!1,m.push(n),n===r)break;s(m)}}function a(e){b.push(e.id)}function s(t){var n,i,a=[];for(i=t.length-1;i>=0;i--){n=t[i];var s=e[n.id].getExports();Array.prototype.push.apply(a,s),a.push(s[0]),b.push(n.id)}for(a=r.unique(a),a.sort(),i=0;a.length>i;i++)d[a[i]]=a}var o,u,c,l,h,f=[],p={},m={},d={},g={},v=0,y=[],b=[];if(!t){t=[];for(o in e)e.hasOwnProperty(o)&&t.push(o)}for(o in e)if(e.hasOwnProperty(o)){for(h=e[o].exportPenalty||0;h+1>f.length;)f.push([]);f[h].push(o)}for(h=0;f.length>h;h++){var x={};for(u=0;f[h].length>u;u++){o=f[h][u];var _=e[o].getExports();for(c=0;_.length>c;c++)l=_[c],n[l]||p[l]||(x[l]=x[l]||[],x[l].push(o),x[l].length>1&&(m[l]=!0))}for(l in x)p[l]=x[l]}for(u=0;t.length>u;u++)g.hasOwnProperty(t[u])||i(t[u]);return{resolved:b,multiplyDefined:m,cyclicallyDefined:d}}var n=e("math/builtinframe"),r=e("underscore");return t}),define("math/context",["require","console","pjs","underscore","./plotter","./poi","parser","math/builtinframe","math/parsenode/constant","math/parsenode/table","math/parsenode/tablecolumn","math/parsenode/freevariable","math/parsenode/list","math/finddependencyorder","math/errormsg","graphing/graphmode","worker/workerconfig"],function(e){var t=e("console"),n=e("pjs"),r=e("underscore"),i=e("./plotter"),a=e("./poi"),s=e("parser"),o=e("math/builtinframe"),u=e("math/parsenode/constant"),c=e("math/parsenode/table"),l=e("math/parsenode/tablecolumn"),h=e("math/parsenode/freevariable"),f=e("math/parsenode/list"),p=e("math/finddependencyorder"),m=e("math/errormsg"),d=e("graphing/graphmode"),g=e("worker/workerconfig");return n(function(e){function n(e,t){var n,r=e.multiplyDefined,i=e.cyclicallyDefined;for(n in r)r.hasOwnProperty(n)&&(t[n]=m.multiplyDefined(n));for(n in i)i.hasOwnProperty(n)&&(t[n]=m.cycle(i[n]))}e.triggerGraphComputed=function(){},e.triggerStatusChange=function(){},e.triggerRemoveGraph=function(){},e.triggerRender=function(){},e.triggerRenderSlowly=function(){},e.triggerDidAddStatement=function(){},e.triggerDidRemoveStatement=function(){},e.triggerDidSetCompleteState=function(){},e.triggerDidUpdateIntersections=function(){},e.init=function(e){e||(e=o),this.parent_frame=Object.create(e),this.frame=Object.create(this.parent_frame),this.lastFrame=Object.create(this.parent_frame),this.regressionFrame=Object.create(this.parent_frame),this.statements={},this.analysis={},this.currentStatus={},this.unanalyzedIds={},this.unpublishedIds={},this.intersectIds={}},e.processChangeSet=function(e){var t,n;if(e.isCompleteState&&(this.invalidate(),this.statements={}),e.viewState&&this.setViewState(e.viewState),e.hasOwnProperty("degreeMode")&&this.setDegreeMode(e.degreeMode),e.hasOwnProperty("singlevarsolutions")&&this.setSingleVarSolutions(e.singlevarsolutions),e.hasOwnProperty("intersectIds")&&(this.intersectIds=e.intersectIds),e.statements)for(var r in e.statements){var i=e.statements[r];if(null===i){if(!e.isCompleteState&&this.statements.hasOwnProperty(r)&&(t=this.statements[r].getAllIds()),this.removeStatement(r),!e.isCompleteState&&t){for(var a=0;t.length>a;a++)this.triggerRemoveGraph(t[a]);this.triggerDidRemoveStatement(r)}}else this.addStatement(i),e.isCompleteState||this.triggerDidAddStatement(i)}e.isCompleteState&&(this.triggerDidSetCompleteState(e.statements),n=this.triggerRender,this.triggerRender=this.triggerRenderSlowly),this.updateAnalysis(),e.hasOwnProperty("intersectId")&&this._updateIntersections(e.intersectId),this.publishChanges(),e.isCompleteState&&(this.triggerRender=n)},e.setViewState=function(e){if(!r.isEqual(e,this.viewState)){this.viewState=e;for(var t in this.statements)this.statements.hasOwnProperty(t)&&(this.unpublishedIds[t]=!0)}},e.getViewState=function(){if(this.viewState){var e=Object.create(this.viewState);return e.trigAngleMultiplier=this.parent_frame&&this.parent_frame.trigAngleMultiplier?this.parent_frame.trigAngleMultiplier.constantValue:1,e}},e.setDegreeMode=function(e){this.parent_frame.trigAngleMultiplier=u(e?Math.PI/180:1),this.invalidate()},e.setSingleVarSolutions=function(e){e!==g.singlevarsolutions&&(g.singlevarsolutions=e,this.invalidate())},e.publishChanges=function(){this.updateAnalysis(),this._publishAllStatuses(),this._graphAllChanged(),this.unpublishedIds={}},e._publishAllStatuses=function(){var e={},t=this.currentStatus;this.currentStatus={};for(var n in this.unpublishedIds)if(this.analysis.hasOwnProperty(n)){var r=this.analysis[n].evaluationState;JSON.stringify(r)!==JSON.stringify(t[n])&&(e[n]=r),this.currentStatus[n]=r}this.triggerStatusChange(e)},e._graphAllChanged=function(){var e=this.getViewState();if(i.validateViewState(e)){for(var t in this.unpublishedIds)if(this.analysis.hasOwnProperty(t)){var n=this.analysis[t];if(n.rawTree.isTable)for(var a=n.graph(e),s=n.rawTree.getAllIds(),o=0;s.length>o;o++)a[s[o]]?this.triggerGraphComputed(s[o],a[s[o]]):this.triggerRemoveGraph(s[o]);else n.evaluationState.is_graphable&&n.rawTree.userData.shouldGraph?(this.triggerGraphComputed(t,n.graph(e)),this.intersectIds.hasOwnProperty(t)&&this._updateIntersections(t)):this.triggerRemoveGraph(t)}if(r.keys(this.unpublishedIds).length)for(var u in this.intersectIds)this.unpublishedIds.hasOwnProperty(u)||this.intersectIds.hasOwnProperty(u)&&this._updateIntersections(u);this.triggerRender()}},e._updateIntersections=function(e){if(this.viewState){var t=this.analysis[e];return t&&t.shouldIntersect()?(this.findSomeIntersectionsWith(e).streamRest(),void 0):(this.triggerDidUpdateIntersections(e,[]),void 0)}};var v={};e.findSomeIntersectionsWith=function(e){this.cancelIntersectionStreaming(e);var t=20,n=60,r=this,s=Array.prototype.push,o=this.getViewState(),u=r.analysis[e],c=u.getGraphInfo(),l=c.graphMode,h=u.concreteTree.getCompiledFunctions(),f=[];for(var p in r.analysis)r.analysis.hasOwnProperty(p)&&p+""!=e+""&&r.analysis[p].shouldIntersect()&&f.push(r.analysis[p]);for(var m=[],g=0;h.length>g;g++)m[g]={x:[],y:[],intersects:[]};var y=f.length-1,b=!1,x=function(){var u,p,g,_,M,w,I,C,S,T=new Date,E=!1;for(y;y>=0;y--){if(new Date-T>t){if(!b)return;if(v[e]=setTimeout(x,n),!E)return;return r.triggerDidUpdateIntersections(e,m),void 0}_=f[y],M=_.getGraphInfo().graphMode;var k=l===d.X&&M===d.X,A=l===d.Y&&M===d.Y,F=l===d.X&&M===d.Y,D=l===d.Y&&M===d.X;if(k||A||F||D){w=_.concreteTree.getCompiledFunctions();for(var P=0;h.length>P;P++){u=h[P].fn,S=i.computeDomain(o,c,u);for(var V=0;w.length>V;V++){p=w[V].fn;var O;if(k||A)O=function(e){return p(e)-u(e)};else{if(!F&&!D)continue;O=function(e){return e-p(u(e))}}C=i.sampleXY(O,S).segments,g=a.findIntersections(C,u,O),g.x.length&&(E=!0),g.intersects=Array(g.x.length);for(var q=0,j=g.x.length;j>q;q++)g.intersects[q]=_.id;l===d.X&&(I=g.y,g.y=g.x,g.x=I),s.apply(m[P].x,g.x),s.apply(m[P].y,g.y),s.apply(m[P].intersects,g.intersects)}}}}b&&E&&(r.triggerDidUpdateIntersections(e,m),r.cancelIntersectionStreaming(e))};return x(),{intersections:m,streamRest:function(){r.triggerDidUpdateIntersections(e,m),b=!0,x()}}},e.cancelIntersectionStreaming=function(e){clearTimeout(v[e]),delete v[e]},e.addStatement=function(e){if(e){var t=e.id;if(this.markDirty(t),"table"===e.type){var n=[];this.statements.hasOwnProperty(t)&&(n=this.statements[t].getAllIds()),e.shouldGraph=!0;for(var r,i,a,o=e.columns,h=[],p=0,m=0;o.length>m;m++)p=Math.max(o[m].values.length,p);for(var d=0;o.length>d;d++){r=s.parse(o[d].latex),i=[];for(var g=0,v=0;o[d].values.length>v;v++)o[d].values[v].replace(/\\\\space/g,"").match(/\\S/)?(i.push(s.parse(o[d].values[v])),g=v):i.push(u(0/0));i.splice(g+1),a=l(r,p,f(i)),a.id=o[d].id,a.header&&(a.header.userData=o[d]),h.push(a)}this.statements[t]=c(h);var y=this,b=this.statements[t].getAllIds();n.forEach(function(e){-1===b.indexOf(e)&&y.triggerRemoveGraph(e)})}else this.statements[t]=s.parse(e.latex);this.statements[t].userData=e,this.markClean(e.id),this.markDirty(e.id)\n}},e.removeStatement=function(e){if(this.statements.hasOwnProperty(e)){var t=this.statements[e];if(this.markDirty(e),t.isTable){var n=this;t.getAllIds().forEach(function(e){n.triggerRemoveGraph(e)})}else this.triggerRemoveGraph(e);delete this.statements[e]}},e.invalidate=function(){for(var e in this.statements)this.statements.hasOwnProperty(e)&&this.markDirty(e);this.currentStatus={},this.frame=Object.create(this.parent_frame),this.regressionFrame=Object.create(this.parent_frame)},e.markDirty=function(e){if(this.statements[e]&&!this.unanalyzedIds[e]){this.unanalyzedIds[e]=!0,this.unpublishedIds[e]=!0,delete this.analysis[e];for(var t=this.statements[e],n=t.getExports(),r=0;n.length>r;r++)this.markSymbolDirty(n[r]);t.isRegression&&this.invalidate(),this.cancelIntersectionStreaming(e)}},e.markSymbolDirty=function(e){delete this.frame[e],delete this.regressionFrame[e];for(var t in this.statements)this.statements.hasOwnProperty(t)&&(this.statements[t].dependsOn(e)&&this.markDirty(t),this.statements[t].exportsSymbol(e)&&this.markDirty(t))},e.markClean=function(e){delete this.unanalyzedIds[e]},e.getFrame=function(){return this.updateAnalysis(),this.frame},e.getAnalysis=function(){return this.updateAnalysis(),this.analysis},e.getStatus=function(e){return this.updateAnalysis(),this.analysis[e]?this.analysis[e].status:void 0},e.getEvaluationState=function(e){return this.updateAnalysis(),this.analysis[e]?this.analysis[e].evaluationState:void 0},e._updateRegressions=function(e){var t,r=this.frame,i=this.lastFrame,a=this.regressionFrame,s=[];for(t in e)e.hasOwnProperty(t)&&e[t].isRegression&&s.push(t);var o=this;s.sort(function(e,t){var n=o.statements[e].userData&&o.statements[e].userData.residualVariable,r=o.statements[t].userData&&o.statements[t].userData.residualVariable;return n&&!r?-1:r&&!n?1:0});var u=p(e,s);n(u,a);for(var c=u.resolved,l={},h=0;c.length>h;h++)if(t=c[h],this.statements[t].isRegression)this.analysis[t]=e[t].analyze(a,r,i,l),this.analysis[t].exportTo(r),delete e[t];else{var f=e[t].tryGetConcreteTree(a);e[t].exportTo(f,a),l[t]={rawTree:e[t],concreteTree:f}}},e.updateAnalysis=function(){var e,t={};for(e in this.unanalyzedIds)this.unanalyzedIds.hasOwnProperty(e)&&this.statements[e]&&(t[e]=this.statements[e]);this._updateRegressions(t);var r=this.analysis,i=this.frame,a=p(t);n(a,i);for(var s=a.resolved,o=0;s.length>o;o++){if(e=s[o],i.r){var u=Object.create(i,{r:h("r")});if(r[e]=this.statements[e].analyze(u,r),r[e].getGraphMode()===d.POLAR){r[e].exportTo(i);continue}}r[e]=this.statements[e].analyze(i,r),r[e].exportTo(i,a)}this.unanalyzedIds={},this.lastFrame=Object.create(this.parent_frame);for(var c in i)i.hasOwnProperty(c)&&(this.lastFrame[c]=i[c])},e.evaluateOnce=function(e){return t.log("Deprecated console.evaluateOnce - this should not run in production code"),this.analysis[e].concreteTree.constantValue},e.compile=function(e){t.log("Deprecated console.compile - this should not run in production code");var n=this.analysis[e].concreteTree.getCompiledFunctions();return 1===n.length?n[0]:n},e.evalStrings=function(e){return t.log("Deprecated console.evalStrings - this should not run in production code"),this.analysis[e].concreteTree.getEvalStrings()}})}),define("worker/workercore",["require","math/context","math/functions"],function(e){var t=e("math/context"),n=e("math/functions");return function(e){var r=t();return r.triggerGraphComputed=function(t,r){n.dehydrateGraphData(r),e("graphComputed",{id:t,graphData:r})},r.triggerDidUpdateIntersections=function(t,n){e("updateIntersections",{id:t,intersections:n})},r.triggerRender=function(){e("render")},r.triggerRenderSlowly=function(){e("renderSlowly")},r.triggerRemoveGraph=function(t){e("removeGraph",t)},r.triggerStatusChange=function(t){e("statusChange",t)},{processChangeSet:function(t){r.processChangeSet(t),e("processChangeSet",t)}}}}),define("worker/worker",["require","worker/workercore","console"],function(e){var t=e("worker/workercore"),n={},r=e("console");r.log=function(e){self.postMessage({log:JSON.stringify(e)})};var i=self;i.window=i,i.onmessage=function(e){var r=e.data&&e.data.connectionId;if(r){var a=n[r];a||(a=t(function(e,t){i.postMessage({connectionId:r,originalMessage:{type:e,payload:t}})}),n[r]=a),a.processChangeSet(e.data.originalMessage)}},i.loadMessageQueue&&i.loadMessageQueue.forEach(function(e){i.onmessage(e)})}),requirejs===void 0&&(importScripts("../vendor/require.js"),importScripts("config.js")),self.loadMessageQueue=[],self.onmessage=function(e){self.loadMessageQueue.push(e)},requirejs(["worker/worker"]),define("toplevel/worker",function(){});\n//@ sourceMappingURL=worker.js.map';});

define('worker_src',['require','text!worker_src_underlying'],function (require) {
  // Indirection here allows us to swap in an empty string in noconcat
  // mode by replacing this path with worker_src_empty
  return require('text!worker_src_underlying');
});
define('worker/create_worker_url',['require','worker_src'],function(require) {
  var workerSrc = require('worker_src');

  return function () {
    // IE workers fail if you put ?desmos_config= after the url.
    // They fail absolutely silently. The browsers doesn't make a request for the
    // javascript and no errors are thrown. This is my best attempt at feature-detecting
    // all versions of IE. Starting with IE11 microsoft wants to make it hard to sniff IE.
    // we aren't putting ?desmos_config= after the url, but we've hit too many snags with
    // IE workers to allow them. Disabling them outright until Microsoft gets its act together
    if (window.MSBlobBuilder) return null;

    // If we don't have a built worker source, load the worker dynamically
    if (!workerSrc.length) return '/assets/js/toplevel/worker.js';

    var blob;
    try {
      blob = new Blob([workerSrc], {type : 'application/javascript'});
    } catch (e1) {
      try {
        var BlobBuilder = window.BlobBuilder ||
                          window.WebKitBlobBuilder ||
                          window.MozBlobBuilder;

        var blobBuilder = new BlobBuilder();
        blobBuilder.append(workerSrc);
        blob = blobBuilder.getBlob('application/javascript');
      } catch (e2) {
        return null; // can't create a blob, abort
      }
    }

    var URL = window.URL || window.webkitURL;
    return URL.createObjectURL(blob);
  };
});

// Utilites for finding and refining points of interest in samled functions.
//
// bisect* are low level functions take endpoints and a function, and return
// a single [x, f(x)] pair, where f is the function that was passed in, or
// null if a non-finite value of the function is encountered during
// evaluation. These methods have preconditions on the endpoints that callers
// are expected to enforce (because they are called recursively). They bisect
// to machine precision.
//
// find* are higher level. They take an array of segments and a function.
// Each segment is an array of points representing a polyline that
// approximates the function over a range where the function is expected to be
// continuous. No more than one zero and one extremum will be returned between
// individual point pairs in the segments list.
//
// findPOIs collects the results of all the find* methods together.


define('math/poi',['require','console','./distance'],function(require){
  var console = require('console');
  var Distance = require('./distance');

// floatMiddle is a helper function for bisecting floats. Necessary because
// floats are denser near 0 than they are elsewhere, so using a normal mean
// results in slow bisection to 0.
//
// This function returns the arithmetic mean if both numbers have
// magnitude larger than 1e-2, 0 if the numbers are small and have opposite
// signs, and the signed geometric mean if the numbers have the same sign. The
// geometric mean bisects the exponent instead of the mantissa, which is what
// we want near 0.

function floatMiddle(a, b) {
  var tmp;
  if (a > b) {
    tmp = a; a = b; b = tmp;
  }
  var aPos = a > 0;
  var bPos = b > 0;
  var aLarge = Math.abs(a) > 1e-2;
  var bLarge = Math.abs(b) > 1e-2;
  if (aLarge || bLarge) return Distance.mean(a, b);
  if (a === 0) return b*Math.abs(b);
  if (b === 0) return a*Math.abs(a);
  if (aPos !== bPos) return 0;
  var gMean = (aPos) ? Math.sqrt(a*b) : -Math.sqrt(a*b);
  // Check if the geometric mean actually lies between the numbers (it might
  // not because of floating point rounding). If it does not, return the
  // normal mean, which is computed in a way that guarantees it will be
  // between the inputs.
  return ((gMean >= a) && (b >= gMean)) ? gMean : Distance.mean(a, b);
}

function bisectZero(x0, y0, x2, y2, fn) {
  // Preconditions:
  // 1. y0 and y2 are finite and non-zero and have opposite sign
  if (!(isFinite(y0) && isFinite(y2) && (y0 < 0) !== (y2 < 0))) {
    console.log('bisectZero called with bad y values', [y0, y2]);
    return null;
  }

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);

    if (!isFinite(y1)) return null;

    // We can't bisect any further; return x for side with y closer to 0.
    if (x1 === x0 || x1 === x2) {
      return Math.abs(y0) <= Math.abs(y2) ? [x0, y0] : [x2, y2];
    }

    // Found a 0 early. Check if we're on a flat, and return the center of it.
    if (y1 === 0) return flatCenter(x0, y0, x1, y1, x2, y2, fn);

    // Bisect on side that brackets zero
    if ((y0 < 0) !== (y1 < 0)) {
      x2 = x1; y2 = y1;
    } else {
      x0 = x1; y0 = y1;
    }
  }
}

// Returns the center of a possibly flat region with constant value y1
function flatCenter(x0, y0, x1, y1, x2, y2, fn) {
  // Preconditions:
  // 1. x0 < x1 < x2

  var edge;
  if (!isFinite(y1)) return null;

  if (!isFinite(y0)) {
    edge = bisectFinite(x0, y0, x1, y1, fn);
    x0 = edge[0];
    y0 = edge[1];
  }

  if (!isFinite(y2)) {
    edge = bisectFinite(x1, y1, x2, y2, fn);
    x2 = edge[0];
    y2 = edge[1];
  }

  var flatLeft, flatRight;

  if (y0 === y1) {
    flatLeft = [x0, y0];
  } else {
    flatLeft = bisectConstant(x0, y0, x1, y1, fn, y1);
  }

  if (y2 === y1) {
    flatRight = [x2, y2];
  } else {
    flatRight = bisectConstant(x1, y1, x2, y2, fn, y1);
  }

  var xc = floatMiddle(flatLeft[0], flatRight[0]);
  return [xc, fn(xc)];
}

function bisectFinite(x0, y0, x2, y2, fn) {
  // Preconditions:
  // 1. isFinite(y0) !== isFinite(y2)
  if (isFinite(y0) === isFinite(y2)) {
    console.log('bisectFinite called with bad y values', [y0, y2]);
    return null;
  }

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);

    // We can't bisect any further; return [x, y] pair for side that is finite.
    if (x1 === x0 || x1 === x2) return isFinite(y0) ? [x0, y0]: [x2, y2];

    // Bisect on side that brackets zero
    if (isFinite(y1) !== isFinite(y0)) {
      x2 = x1; y2 = y1;
    } else {
      x0 = x1; y0 = y1;
    }
  }
}

function bisectConstant(x0, y0, x2, y2, fn, constant) {
  // Preconditions:
  // 1. (y0 === constant) !== (y2 === constant)
  if ((y0 === constant) === (y2 === constant)) {
    console.log('bisectConstant called with bad y values', [y0, y2, constant]);
    return null;
  }

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);

    // We can't bisect any further; return [x, y] pair for side with
    // y === constant
    if (x1 === x0 || x1 === x2) return (y0 === constant) ? [x0, y0]: [x2, y2];

    if ((y1 === constant) !== (y0 === constant)) {
      x2 = x1; y2 = y1;
    } else {
      x0 = x1; y0 = y1;
    }
  }
}

function bisectExtremum(x0, y0, x2, y2, x4, y4, fn) {
  /* jshint maxcomplexity:11 */
  // Preconditions:
  // 1. x0 < x2 < x4
  // 2. y0, y2, and y4 are finite, non-equal, and y2 > y0 === y2 > y4.
  if (!(x0 < x2 && x2 < x4)) {
    console.log('bisectExtremum called with bad x values', [x0, x2, x4]);
    return null;
  }
  if (!(
    (isFinite(y0) && isFinite(y2) && isFinite(y4)) &&
    (y0 !== y2 && y2 !== y4) &&
    (y2 > y0) === (y2 > y4)
  )) {
    console.log('bisectExtremum called with bad y values', [y0, y2, y4]);
    return null;
  }

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);
    var x3 = floatMiddle(x2, x4);
    var y3 = fn(x3);

    if (!isFinite(y1) || !isFinite(y3)) return null;

    // We can't bisect any further; return x and y for most extreme value
    if (x1 === x0 || x1 === x2 || x3 === x2 || x3 === x4) {
      if ((y1 > y2) === (y2 > y0)) return [x1, y1];
      if ((y3 > y2) === (y2 > y0)) return [x3, y3];
      return [x2, y2];
    }

    // We've hit a flat. Find its edges and return x and y for its center.
    if (y1 === y2 || y3 === y2) {
      return flatCenter(x0, y0, x2, y2, x4, y4, fn);
    }

    // Bisect on side that brackets zero
    if ((y1 > y0) === (y2 > y0) && (y1 > y0) === (y1 > y2)) {
      x4 = x2; y4 = y2; x2 = x1; y2 = y1;
    } else if ((y3 > y4) === (y2 > y4) && (y3 > y2) === (y3 > y4)) {
      x0 = x2; y0 = y2; x2 = x3; y2 = y3;
    } else {
      x0 = x1; y0 = y1; x4 = x3; y4 = y3;
    }
  }
}

// Returns larget jump among 4 points. Used in final step of bisectJump
function largestJump(x0, y0, x1, y1, x2, y2, x3, y3) {
  // Preconditions:
  // 1. y0, y1, y2, and y3 are all finite
  var d1 = Math.abs(y1 - y0);
  var d2 = Math.abs(y2 - y1);
  var d3 = Math.abs(y3 - y2);

  if (d1 > d2 && d1 > d3) return [[x0, y0], [x1, y1]];
  if (d3 > d2 && d3 > d1) return [[x2, y2], [x3, y3]];
  return [[x1, y1], [x2, y2]];
}

// Tries to find the largest jump in an interval. Returns left side and right
// side of jump as [[xl, yl], [xr, yr]], or null if no jump was found.
// Tolerance is allowed to be 0, and this works for some smooth functions,
// but returns false positives for others.
function bisectJump(x0, y0, x2, y2, x4, y4, fn, tolerance) {
  /* jshint maxcomplexity:15 */
  // Preconditions:
  // 1. x0 < x2 < x4
  // 2. y0, y2, and y4 are all finite.
  // Also expect x2 - x0 ~= x4 - x2
  if (!(x0 < x2 && x2 < x4)) {
    console.log('bisectJump called with bad x values', [x0, x2, x4]);
    return null;
  }
  if (!isFinite(y0) || !isFinite(y4)) {
    console.log('bisectJump called with bad y values', [y0, y2, y4]);
    return null;
  }

  if (!isFinite(y2)) {
    return [bisectFinite(x0, y0, x2, y2, fn), bisectFinite(x2, y2, x4, y4, fn)];
  }

  if (Math.abs(y2 - ((x4 - x2)*y0 + (x2 - x0)*y4)/(x4 - x0)) < tolerance) return null;

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);
    var x3 = floatMiddle(x2, x4);
    var y3 = fn(x3);
    var dy1 = Math.abs(y1 - Distance.mean(y0, y2));
    var dy3 = Math.abs(y3 - Distance.mean(y2, y4));
    var left;
    var right;
    if (!tolerance) tolerance = 0;

    if (dy1 <= tolerance && dy3 <= tolerance) return null;

    // An undefined region counts as a jump.
    if (!isFinite(y1)) {
      left = bisectFinite(x0, y0, x1, y1, fn);
      right = bisectFinite(x1, y1, x4, y4, fn);
      return [left, right];
    }

    if (!isFinite(y3)) {
      left = bisectFinite(x0, y0, x3, y3, fn);
      right = bisectFinite(x3, y3, x4, y4, fn);
      return [left, right];
    }

    if ((x1 === x0 || x1 === x2) && (x3 === x2 || x3 === x4)) {
      if (Math.abs(y2 - y0) > Math.abs(y4 - y2)) {
        left = [x0, y0];
        right = [x2, y2];
      } else {
        left = [x2, y2];
        right = [x4, y4];
      }
      return [left, right];
    } else if (x1 === x0 || x1 === x2) {
      return largestJump(x0, y0, x2, y2, x3, y3, x4, y4);
    } else if (x3 === x2 || x3 === x4) {
      return largestJump(x0, y0, x1, y1, x2, y2, x4, y4);
    }

    if (dy1 > dy3) {
      x4 = x2; y4 = y2; x2 = x1; y2 = y1;
    } else {
      x0 = x2; y0 = y2; x2 = x3; y2 = y3;
    }
  }
}

function findZeros(segments, fn) {
  var segment;
  var accumulator = { x: [], y: [] };
  var x0;
  var y0;
  var x2;
  var y2;
  var zero;
  var flatLeft;
  for (var i=0, li=segments.length; i<li; i++) {
    segment = segments[i];
    flatLeft = undefined;
    if (segment[1] === 0) flatLeft = [segment[0], segment[1]];
    for (var j=0, lj=segment.length; j<lj-2; j = j+2) {
      x0 = segment[j];
      y0 = segment[j+1];
      x2 = segment[j+2];
      y2 = segment[j+3];

      if (!flatLeft) {
        if (y2 === 0) {
          // Entering left side of a potential flat. Save its position.
          flatLeft = [x0, y0];
        } else if ((y0 < 0) !== (y2 < 0)) {
          zero = bisectZero(x0, y0, x2, y2, fn);
          if (zero) {
            accumulator.x.push(zero[0]);
            accumulator.y.push(zero[1]);
          }
        }
      } else {
        if (y2 !== 0) {
          // Leaving right side of a flat. Add its center as a root.
          // Don't label zeros that start on segment boundaries.
          if (flatLeft[0] !== segment[0]) {
            zero = flatCenter(flatLeft[0], flatLeft[1], x0, y0, x2, y2, fn);
            accumulator.x.push(zero[0]);
            accumulator.y.push(zero[1]);
          }
          flatLeft = undefined;
        }
        // Otherwise we're in the middle of the flat; do nothing
      }
    }
    // Don't label zero that ends on a segment boundary.
  }

  return accumulator;
}

function findExtrema (segments, fn, derivative) {
  /* jshint maxcomplexity:14 */
  var segment;
  var accumulator = { x: [], y: [] };
  var x0;
  var y0;
  var x2;
  var y2;
  var x4;
  var y4;
  var extremum;
  var flatLeft;
  for (var i=0, li=segments.length; i<li; i++) {
    segment = segments[i];
    for (var j=0, lj=segment.length; j<lj - 4; j = j+2) {
      x0 = segment[j];
      y0 = segment[j+1];
      x2 = segment[j+2];
      y2 = segment[j+3];
      x4 = segment[j+4];
      y4 = segment[j+5];

      //TODO handle extremal endpoints.
      if (!(isFinite(y0) && isFinite(y2) && isFinite(y4))) continue;

      if (y0 !== y2 && y2 === y4) {
        // Entering left side of a flat. Save its position.
        flatLeft = [x0, y0];
      } else if (y0 === y2 && y2 !== y4 && flatLeft) {
        // Leaving right side of a flat.
        if ((y2 > flatLeft[1]) === (y2 > y4)) {
          // Flat is an extremum. Push it's center.
          extremum = flatCenter(flatLeft[0], flatLeft[1], x2, y2, x4, y4, fn);
          accumulator.x.push(extremum[0]);
          accumulator.y.push(extremum[1]);
        }
        flatLeft = undefined;
      } else if (y0 === y2 && y2 === y4) {
        // Middle of a flat, do nothing
      } else if ((y2 > y0) === (y2 > y4)) {
        if (derivative) {
          // If we have derivative information, find zeros of the derivative
          // to find extrema. This gives greater accuracy in the argmax/argmin
          // because the original function is flat at the extrema, but its
          // derivative is (usually) not.

          // Make sure we satisfy prereqs of bisectZero
          if ((derivative(x0) > 0) === (derivative(x4) > 0)) continue;
          extremum = bisectZero(
            x0, derivative(x0),
            x4, derivative(x4),
            derivative
          );

          // We might fail to find an extremum because the derivative is
          // undefined there (e.g., |x+1|). In that case, try again as if
          // we didn't have derivative information in the first place.
          if (extremum === null) {
            extremum = bisectExtremum(x0, y0, x2, y2, x4, y4, fn);
          }

          // Currently treat maxima and minima the same
          if (extremum) {
            accumulator.x.push(extremum[0]);
            accumulator.y.push(fn(extremum[0]));
          }
        } else {
          extremum = bisectExtremum(x0, y0, x2, y2, x4, y4, fn);
          // Currently treat maxima and minima the same
          if (extremum) {
            accumulator.x.push(extremum[0]);
            accumulator.y.push(extremum[1]);
          }
        }
      }
    }
  }
  return accumulator;
}

function findIntercept(segments, fn) {
  var intercept = fn(0);
  if (!isFinite(intercept)) return { x: [], y: []};
  return { x: [ 0 ], y: [ fn(0) ] };
}

function findEdges(segments, fn) {
  var slen = segments.length;
  var accumulator = { x: [], y: [] };
  //TODO work out robust system for labeling holes so that we can label all
  // edges.
  //
  // For now, only label edges that are close to zero as zeros.

  for (var i = 0; i < slen; i++) {
    var segment = segments[i];
    if (parseFloat(segment[1].toFixed(7)) === 0) {
      accumulator.x.push(segment[0]);
      accumulator.y.push(segment[1]);
    }

    if (parseFloat(segment[segment.length - 1].toFixed(7)) === 0) {
      accumulator.x.push(segment[segment.length - 2]);
      accumulator.y.push(segment[segment.length -1]);
    }
  }
  return accumulator;
}

function findPOIs (segments, fn, derivative) {
  var zeros = findZeros(segments, fn);
  var edges = findEdges(segments, fn);

  // Not displaying edges right now; combine them with zeros.
  zeros.x.push.apply(zeros.x, edges.x);
  zeros.y.push.apply(zeros.y, edges.y);

  return {
    zeros: zeros,
    intercept: findIntercept(segments, fn),
    extrema: findExtrema(segments, fn, derivative)
  };
}

// indicatorFn is a function that is 0 where two curves intersect, and
// indicatorSamples is a series of samples of this function. For two
// y vs x curves, the indicator function is just the difference between
// the two curves. For intersecting a y vs x curve with an x vs y curve,
// e.g. y = f(x) and x = g(y), a suitable indicator function is
// x - g(f(x)). fn1 is used at the end to get y values from the x values
// that are roots of the indicator function.
function findIntersections (indicatorSamples, fn1, indicatorFn) {

  var zeros = findZeros(indicatorSamples, indicatorFn);
  var i, elen, zlen;

  // Find tangent intersections.
  var extrema = findExtrema(indicatorSamples, indicatorFn);
  for (i = 0, elen = extrema.x.length; i < elen; i++) {
    if (Distance.approx(extrema.y[i], 0)) {
      zeros.x.push(extrema.x[i]);
      zeros.y.push(extrema.y[i]);
    }
  }

  // Find original function intersection y values.
  for (i = 0, zlen = zeros.x.length; i < zlen; i++) {
    zeros.y[i] = fn1(zeros.x[i]);
  }
  return zeros;
}

return {
  bisectJump: bisectJump,
  bisectExtremum: bisectExtremum,
  bisectFinite: bisectFinite,
  bisectZero: bisectZero,
  findExtrema: findExtrema,
  findZeros: findZeros,
  findPOIs: findPOIs,
  findIntersections: findIntersections,

  //Enums for POI type
  INTERSECTION: 1001,
  ZERO: 1002,
  INTERCEPT: 1003,
  EXTREMUM: 1004,
  EDGE: 1005,
  DEFINITION: 1006,
  TRACE: 1007
};

});

define('graphing/graphmode',{
  X: 1,
  Y: 2,
  XYPOINT: 3,
  XYPOINT_MOVABLE: 4,
  PARAMETRIC: 5,
  POLAR: 6,
  POLYGONFILL: 7,
  IMPLICIT: 8,
  NONE: 10
});

define('math/plotter',['require','pjs','./distance','./poi','graphing/graphmode'],function(require) {
  var P = require('pjs');
  var Distance = require('./distance');
  var POI = require('./poi');
  var GRAPHMODE = require('graphing/graphmode');

  var Accumulator = P(function (proto) {
    proto.init = function (domain) {
      this.domain = domain;
      if (domain) {
        this.xtolerance = domain.xtolerance || domain.tolerance || 0;
        this.ytolerance = domain.ytolerance || domain.tolerance || 0;
        this.map = domain.map;
      } else {
        this.xtolerance = this.ytolerance = 0;
      }
      this.segments = [];
      this.segment = null;
      // Second point added to colinear set; defines line direction
      this.pivotPoint = null;
      // Most recent point in colinear set
      this.pendingPoint = null;
    };

    proto.colinear = function (p0, p1, p2) {
      if (this.map) {
        p0 = this.map(p0);
        p1 = this.map(p1);
        p2 = this.map(p2);
      }

      var t = Distance.pointToSegmentParameter(
        p2[0], p2[1],
        p0[0], p0[1],
        p1[0], p1[1]
      );

      if (t < 1) return false;

      var closestPoint = [
        p0[0] + t*(p1[0] - p0[0]),
        p0[1] + t*(p1[1] - p0[1])
      ];

      return (
        Math.abs(p2[0] - closestPoint[0]) <= this.xtolerance &&
        Math.abs(p2[1] - closestPoint[1]) <= this.ytolerance
      );
    };

    proto.addPoint = function (p) {
      this.n+=1;

      if (!this.segment) {
        this.segment = [p[0], p[1]];  //First point of the segment
        return;
      }

      if (this.xtolerance < 0 && this.ytolerance < 0) {
        this.segment.push(p[0], p[1]);
        return;
      }

      if (!this.pivotPoint) {
        this.pivotPoint = p;
        this.pendingPoint = p;
        return;
      }

      // Check if the new point lies on the line segment defined by the
      // last flushed point and the pivot point. If not, flush the pending
      // point and start a new linear section.
      var lastPoint = [
        this.segment[this.segment.length - 2],
        this.segment[this.segment.length - 1]
      ];

      if (!this.colinear(lastPoint, this.pivotPoint, p)) {
        this.flushPending();
        this.pivotPoint = p;
      }

      this.pendingPoint = p;
    };

    proto.flushPending = function () {
      if (this.pendingPoint) { //Only happens when we have a segment
        this.segment.push(this.pendingPoint[0], this.pendingPoint[1]);
        this.pivotPoint = null;
        this.pendingPoint = null;
      }
    };

    proto.breakSegment = function () {
      this.flushPending();

      if (this.segment) {
        if (this.segment.length > 2) {
          this.segments.push(this.segment);
        }
        this.segment = null;
      }
    };

    proto.getSegments = function () {
      this.breakSegment();
      return this.segments;
    };

    proto.finish = function () {
      return {
        segments: this.getSegments(),
        resolved: true
      };
    };

    proto.exhaust = function () {};
  });

  //Simple sampling of a [x(t), y(t)] function.
  //Domain is provided in terms of the independent variable
  //PARAMETERS
  //fn(int) => [x, y]
  //domain = {min, max, step}
  //RETURNS
  //Unclipped list of segments which can be passed directly into onGraph
  function sampleParametricNaive (fn, domain) {
    var accumulator = new Accumulator();
    var point;
    for (var independent = domain.min; independent <= domain.max + domain.step/2; independent += domain.step) {
      point = fn(independent);
      if (isFinite(point[0]) && isFinite(point[1])) {
        accumulator.addPoint(point);
      }
      else {
        accumulator.breakSegment();
      }
    }
    return accumulator.finish();
  }

  //Simple sampling of a y(x) function.
  //PARAMETERS
  //fn(int) => y
  //domain = {min, max, step}
  //RETURNS
  //Unclipped list of segments which can be passed directly into onGraph
  function sampleXYNaive (fn, domain) {
    var accumulator = new Accumulator(domain);
    var y;
    for (var x = domain.min; x <= domain.max + domain.step/2; x += domain.step) {
      y = fn(x);
      if (isFinite(y)) {
        accumulator.addPoint([x, y]);
      } else {
        accumulator.breakSegment();
      }
    }
    return accumulator.finish();
  }

  function sampleLinear (linearCoefficients, domain) {
    var accumulator = new Accumulator(domain);
    accumulator.addPoint([domain.min, linearCoefficients[0] + domain.min*linearCoefficients[1]]);
    accumulator.addPoint([domain.max, linearCoefficients[0] + domain.max*linearCoefficients[1]]);
    return accumulator.finish();
  }

  // Only returns a jump if we also find a jump when previousPoint and point are
  // perturbed by stepPerturbation.
  function _bisectJumpRobust (previousPoint, point, params) {
    var x0, y0, x1, y1, x2, y2;
    var fn = params.fn;
    var jumpTolerance = params.jumpTolerance;
    var stepPerturbation = params.stepPerturbation;

    x0 = previousPoint[0];
    y0 = previousPoint[1];
    x2 = point[0];
    y2 = point[1];
    x1 = Distance.mean(x0, x2);
    y1 = fn(x1);

    var jump = POI.bisectJump(x0, y0, x1, y1, x2, y2, fn, jumpTolerance);

    if (!jump) return;

    // If we found a jump, check whether we still find one with a small perturbation
    // to the left or the right.
    var perturbations = [-stepPerturbation, stepPerturbation];
    for (var i = 0; i < perturbations.length; i++) {
      x0 = previousPoint[0] + perturbations[i];
      y0 = fn(x0);
      if (!isFinite(y0)) {
        x0 = previousPoint[0];
        y0 = previousPoint[1];
      }
      x2 = point[0] + perturbations[i];
      y2 = fn(x2);
      if (!isFinite(y2)) {
        x2 = point[0];
        y2 = point[1];
      }
      x1 = Distance.mean(x0, x2);
      y1 = fn(x1);

      if (POI.bisectJump(x0, y0, x1, y1, x2, y2, fn, jumpTolerance)) return jump;
    }

    // If we made it here, we didn't find a jump under either perturbation, so just
    // conclude that the jump was not robust and return nothing.
  }

  var _handleJump = function (previousPoint, point, params) {
    if (!isFinite(params.jumpTolerance) || (params.jumpTolerance <= 0)) return;
    var jump = _bisectJumpRobust(previousPoint, point, params);
    if (jump) {
      params.accumulator.addPoint(jump[0]);
      params.accumulator.breakSegment();
      params.accumulator.addPoint(jump[1]);
    }
  };

  // Thre are a few pieces of state and configuration that need to get passed to
  // subroutines in sampleXY. This is just a simple container to keep track of
  // them.
  //
  // _handleJump used to be defined inside samlpeXY to close over all of these
  // variables, but it gets called a ton, so it's worth a bit of bureaucracy to
  // avoid paying the runtime cost of closures.
  var SampleXYParameters = function (fn, domain) {
    this.accumulator = new Accumulator(domain);
    this.fn = fn;
    this.jumpTolerance = domain.ytolerance || domain.tolerance;
    this.stepPerturbation = domain.step/10;
  };

  function sampleXY (fn, domain) {

    var params = new SampleXYParameters(fn, domain);
    var edge;
    var x = domain.min;
    var y = fn(x);
    var previousPoint = [x, y];

    if (isFinite(y)) params.accumulator.addPoint([x, y]);
    for (x += domain.step; x <= domain.max + domain.step/2; x += domain.step) {
      var xp = x;
      y = fn(xp);

      // If y isn't finite, try two nearby values to see if we can find an x with a finite y.
      // Policy is to try to avoid numerically spurious jumps and holes by ignoring them if
      // they have no influence outside a region that we could have missed by sampling with
      // a small offset.
      // https://github.com/desmosinc/knox/issues/2230
      // https://github.com/desmosinc/knox/issues/4151
      if (!isFinite(y)) {
        xp = x + params.stepPerturbation;
        y = fn(xp);
      }
      if (!isFinite(y)) {
        xp = x - params.stepPerturbation;
        y = fn(xp);
      }

      if (isFinite(y) && isFinite(previousPoint[1])) {
        _handleJump(previousPoint, [xp, y], params);
        params.accumulator.addPoint([xp, y]);
      } else if (isFinite(y) && !isFinite(previousPoint[1])) {
        edge = POI.bisectFinite(previousPoint[0], previousPoint[1], xp, y, fn);
        if (edge[0] !== xp) params.accumulator.addPoint(edge);
        _handleJump(edge, [xp, y], params);
        params.accumulator.addPoint([xp, y]);
      } else if (!isFinite(y) && isFinite(previousPoint[1])) {
        edge = POI.bisectFinite(previousPoint[0], previousPoint[1], xp, y, fn);
        _handleJump(previousPoint, edge, params);
        if (edge[0] !== previousPoint[0]) params.accumulator.addPoint(edge);
        params.accumulator.breakSegment();
      }
      previousPoint = [xp, y];
    }
    return params.accumulator.finish();
  }

  function findPiPeriod (fn, domain, trigAngleMultiplier, allowAntiperiods) {
    // If the function is periodic by a multiple of 2*pi, or antiperiodic by
    // a multiple of pi within the domain, return the period.
    //
    // Can optionally pass true to find antiperiods if they exist.
    var min = domain.min;
    var range = domain.max - domain.min;
    var tolerance = (domain.xtolerance && domain.ytolerance) ?
      Math.min(domain.xtolerance, domain.ytolerance) :
      domain.tolerance;
    var piRange = Math.floor(range/(Math.PI/trigAngleMultiplier));
    var n, m, period;

    function isPeriod(fn, n) {
      var sign = (n % 2 === 0) ? 1 : -1;
      if (!allowAntiperiods && sign === -1) return false;
      var nPI = n*(Math.PI/trigAngleMultiplier);
      var vals = [ min, min + 1, min + 2, min + 3];

      for (var i = 0, ilen = vals.length; i < ilen; i++) {
        if (
          isFinite(fn(vals[i])) !== isFinite(fn(vals[i] + nPI)) ||
          Math.abs(fn(vals[i]) - sign*fn(vals[i] + nPI)) > tolerance
        ) {
          return false;
        }
      }

      return true;
    }

    for (n = 1; n <= piRange; n++) {
      if (isPeriod(fn, n)) {
        period = n;
        // Check if integer multiples of the period are also periods
        for (m = 2; m*n <= piRange; m++) {
          if (!isPeriod(fn, m*n)) period = undefined;
        }
        if (period) break;
      }
    }

    if (!period) return null;

    return period*(Math.PI/trigAngleMultiplier);
  }

  function mapPolar (p) {
    return [ p[1]*Math.cos(p[0]), p[1]*Math.sin(p[0]) ];
  }

  function samplePolar (fn, domain) {
    // Don't allow line coallescing, since linear segments of a polar
    // equation don't map to lines on the graph paper.
    domain.map = mapPolar;
    return sampleXY(fn, domain);
  }

  // Helper for calling a function at steps along a range that makes sure we
  // hit start and endpoints exactly.
  //
  // TODO, use this in sampling xy also. Not
  // doing that for now because I don't want to step on Eric's toes with
  // extrema interleaving system that is being concurrently developed.
  function eachStep (domain, fn) {
    var min = domain.min;
    var max = domain.max;
    var step = domain.step;
    var range = max - min;
    var nsteps = Math.ceil(range/step);
    var newStep = range/nsteps;
    for (var n = 0; n < nsteps; n++) {
      fn(min + n*newStep);
    }
    fn(max);
  }

  function sampleParametricRecursive (fn, domain) {
    if (domain.max < domain.min) { return [] }

    var accumulator = new Accumulator(domain);

    //Sampling parameters
    var subdivision_levels = 10;

    //Initialize for first pass through loop
    var t0 = domain.min;
    var p0 = fn(t0);
    if (isFinite(p0[0]) && isFinite(p0[1])) {
      accumulator.addPoint(p0);
    }

    var p1;
    // Note, processes first point twice; but that's okay.
    eachStep(domain, function (t1) {
      p1 = fn(t1);
      subsampleParametricRecursive(fn, t0, p0, t1, p1, subdivision_levels, accumulator);
      t0 = t1;
      p0 = p1;
    });

    return accumulator.finish();
  }

  function subsampleParametricRecursive (fn, t0, p0, t1, p1, subdivision_levels_left, accumulator) {
    /* jshint maxcomplexity:13 */
    if (t1 === t0) return; // Nothing new to add, but don't need to break;

    var xtolerance = accumulator.xtolerance, ytolerance = accumulator.ytolerance;
    var t_mid = Distance.mean(t0, t1);
    var p_mid = fn(t_mid, true);

    var p0_valid = isFinite(p0[0]) && isFinite(p0[1]);
    var p1_valid = isFinite(p1[0]) && isFinite(p1[1]);
    var p_mid_valid = isFinite(p_mid[0]) && isFinite(p_mid[1]);

    if (subdivision_levels_left === 0 || t_mid === t0 || t_mid === t1) {
      accumulator.breakSegment(); //Didn't converge.
      if (p1_valid) accumulator.addPoint(p1);
      return;
    }

    // Don't need to break segment, since p0 should already have been processed.
    if (!p0_valid && !p1_valid) return;

    if (p0_valid !== p1_valid) {
      // We're at the edge of where the function is defined.
      // Subdivide until we find where edge point to machine precision.
      var original_t0 = t0;
      var original_t1 = t1;
      var original_p0 = p0;
      var original_p1 = p1;

      while (t0 !== t_mid && t_mid !== t1) {

        if (p_mid_valid == p0_valid) {
          t0 = t_mid;
          p0 = p_mid;
          p0_valid = p_mid_valid;
        }
        else {
          t1 = t_mid;
          p1 = p_mid;
          p1_valid = p_mid_valid;
        }

        t_mid = t0 + (t1-t0)/2;
        p_mid = fn(t_mid, true);
        p_mid_valid = isFinite(p_mid[0]) && isFinite(p_mid[1]);
      } //When this loop terminates, t_mid equals either t0 or t1

      if (p0_valid) {
        subsampleParametricRecursive(fn, original_t0, original_p0, t0, p0, subdivision_levels_left-1, accumulator);
        accumulator.breakSegment();
      }
      else {
        accumulator.breakSegment();
        accumulator.addPoint(p1);
        subsampleParametricRecursive(fn, t1, p1, original_t1, original_p1, subdivision_levels_left-1, accumulator);
      }
      return;
    }

    if (p0_valid && p_mid_valid && p1_valid) {

      var t = Distance.pointToSegmentParameter(
        p_mid[0],
        p_mid[1],
        p0[0],
        p0[1],
        p1[0],
        p1[1]
      );

      // If the new point lies betwen 20 % and 80 % of the way between the
      // outer points, and the distance from the segment to the new point is
      // less than tolerance, add the rightmost point, and stop recursing.
      if (
        t > 0.2 &&
        t < 0.8 &&
        Math.abs(p_mid[0] - (p0[0] + t*(p1[0] - p0[0]))) <= xtolerance &&
        Math.abs(p_mid[1] - (p0[1] + t*(p1[1] - p0[1]))) <= ytolerance
      ) {
        accumulator.addPoint(p1);
        return;
      }
    }

    // If we didn't stop, recurse. Don't recurse between two points that are
    // equal, since this will make us do a lot of work if our point becomes
    // independent of t over some range.
    if (!(p0[0] === p_mid[0] && p0[1] === p_mid[1])) {
      subsampleParametricRecursive(fn, t0, p0, t_mid, p_mid, subdivision_levels_left - 1, accumulator);
    }
    if (!(p1[0] === p_mid[0] && p1[1] === p_mid[1])) {
      subsampleParametricRecursive(fn, t_mid, p_mid, t1, p1, subdivision_levels_left - 1, accumulator);
    }
  }

  function sampleImplicitRecursive (fn, domain) {
    var xmin = domain.xmin;
    var ymin = domain.ymin;
    var xmax = domain.xmax;
    var ymax = domain.ymax;

    var a = 6; // Devide the grid at least a times
    var b = 0; // Allow up to b extra subdivisions locally

    var maxSegments = 10000;
    // Perform an iterative deepening depth first search on how many segments we will produce.
    // This allows us to go to very high precision locally for mostly simple functions that have a few kinks,
    // while still limiting the total number of line segments that we'll ever return to the draw routine.
    var opts;
    var pointCount;
    var lastPointCount = -1;
    var exhaustedCount;
    var incrementPointCount = function () { pointCount++; };
    var incrementExhuastedCount = function () { exhaustedCount++; };

    var maxDepth = 12;

    while (true) {
      pointCount = 0;
      exhaustedCount = 0;

      opts = {
        fn: fn,
        mindepth: b,
        accumulator: {push: incrementPointCount, exhaust: incrementExhuastedCount},
        xtolerance: domain.xtolerance,
        ytolerance: domain.ytolerance
      };

      subsampleImplicitRecursive(
        opts, a + b,
        xmin, ymax, fn(xmin, ymax),
        xmax, ymax, fn(xmax, ymax),
        xmax, ymin, fn(xmax, ymin),
        xmin, ymin, fn(xmin, ymin)
      );

      if (pointCount === lastPointCount || pointCount > maxSegments) {
        b--;
        break;
      }

      if (exhaustedCount === 0) {
        break;
      } else {
        b += Math.max(1, Math.floor(Math.log((maxSegments - pointCount)/exhaustedCount)/Math.log(4)));
        if (b > maxDepth) {
          b = maxDepth;
          break;
        }
      }

      lastPointCount = pointCount;
    }

    var resolved = pointCount < maxSegments;

    var accumulator = [];
    var noop = function () {};

    opts = {
      fn: fn,
      mindepth: b,
      accumulator: {
        push: function() {Array.prototype.push.apply(accumulator, arguments);}, //Avoiding bind for phantomjs
        exhaust: noop
      },
      xtolerance: domain.xtolerance,
      ytolerance: domain.ytolerance
    };

    subsampleImplicitRecursive(
      opts, a + b,
      xmin, ymax, fn(xmin, ymax),
      xmax, ymax, fn(xmax, ymax),
      xmax, ymin, fn(xmax, ymin),
      xmin, ymin, fn(xmin, ymin)
    );

    return {
      segments: accumulator,
      resolved: resolved
    };
  }

  function subsampleImplicitRecursive (
    opts, depth,
    xtl, ytl, ftl,
    xtr, ytr, ftr,
    xbr, ybr, fbr,
    xbl, ybl, fbl
  ) {
    /* jshint maxcomplexity:19 */
    var fn = opts.fn;
    var mindepth = opts.mindepth;
    var accumulator = opts.accumulator;
    var xtolerance = opts.xtolerance;
    var ytolerance = opts.ytolerance;

    if (!depth) depth = 0;
    if (depth < 0) {
      accumulator.exhaust();
      return;
    }

    // No point in continuing to divide once the grid edges are
    // smaller than the tolerances.
    if (Math.abs(xtl - xtr) < 2*xtolerance && Math.abs(ytl - ybl) < 2*ytolerance) {
      depth = 0;
    }

    depth--;

    // Calculate midpoints of 4 edges, and the midpoint of the box.
    var xtm = 0.5*(xtl + xtr);
    var ytm = 0.5*(ytl + ytr);
    var ftm = fn(xtm, ytm);

    var xml = 0.5*(xtl + xbl);
    var yml = 0.5*(ytl + ybl);
    var fml = fn(xml, yml);

    var xmr = 0.5*(xtr + xbr);
    var ymr = 0.5*(ytr + ybr);
    var fmr = fn(xmr, ymr);

    var xbm = 0.5*(xbl + xbr);
    var ybm = 0.5*(ybl + ybr);
    var fbm = fn(xbm, ybm);

    var xmm = 0.5*(xml + xmr);
    var ymm = 0.5*(ytm + ybm);
    var fmm = fn(xmm, ymm);

    // Descend recursively into each of the 4 subboxes of the current box.
    var descend = function () {
      subsampleImplicitRecursive(
        opts, depth,
        xtl, ytl, ftl,
        xtm, ytm, ftm,
        xmm, ymm, fmm,
        xml, yml, fml
      );
      subsampleImplicitRecursive(
        opts, depth,
        xtm, ytm, ftm,
        xtr, ytr, ftr,
        xmr, ymr, fmr,
        xmm, ymm, fmm
      );
      subsampleImplicitRecursive(
        opts, depth,
        xmm, ymm, fmm,
        xmr, ymr, fmr,
        xbr, ybr, fbr,
        xbm, ybm, fbm
      );
      subsampleImplicitRecursive(
        opts, depth,
        xml, yml, fml,
        xmm, ymm, fmm,
        xbm, ybm, fbm,
        xbl, ybl, fbl
      );
    };

    if (depth > mindepth) return descend();

    // If box contains both finite and non-finite vertices, descend
    if (
      isFinite(ftl) !== isFinite(ftr) ||
      isFinite(ftl) !== isFinite(fbr) ||
      isFinite(ftl) !== isFinite(fbl)
    ) return descend();

    // Check for oxo or xox edges and descend.
    if (ftl > 0 === ftr > 0 && ftm > 0 !== ftl > 0) {
      return descend();
    }
    if (ftr > 0 === fbr > 0 && fmr > 0 !== ftr > 0) {
      return descend();
    }
    if (fbr > 0 === fbl > 0 && fbm > 0 !== fbr > 0) {
      return descend();
    }
    if (fbl > 0 === ftl > 0 && fml > 0 !== fbl > 0) {
      return descend();
    }

    // Check for xo/ox or ox/xo boxes and descend.
    if (ftl > 0 !== ftr > 0 && ftr > 0 !== fbr > 0 && fbr > 0 !== fbl > 0) {
      return descend();
    }

    // Check for oo/oo or xx/xx boxes and do nothing
    if (ftl > 0 === ftr > 0 && ftr > 0 === fbr > 0 && fbr > 0 === fbl > 0) {
      return;
    }

    // At this point, we know there are exactly two xo or ox edges in the box.
    // Interpolate is called with a 3-point edge (corner, midpoint, corner),
    // and if the signs of the function values are appropriate, pushes an edge
    // intersection onto the intersections accumulator.
    var intersections = [];
    var interpolate = function (x0, y0, f0, x1, y1, f1, x2, y2, f2) {
      /* jshint maxcomplexity:11 */
      var code = 1*(f0 > 0) + 2*(f1 > 0) + 4*(f2 > 0);

      var a, xm0, xm1, ym0, ym1;
      switch (code) {
        case 0: return false; // ooo
        case 7: return false; // xxx

        case 2: return true; // oxo
        case 5: return true; // xox

        case 1: // xoo
          a = f0/(f0 - f2);
          xm0 = (1 - a)*x0 + a*x2;
          ym0 = (1 - a)*y0 + a*y2;
          a = f0/(f0 - f1);
          xm1 = (1 - a)*x0 + a*x1;
          ym1 = (1 - a)*y0 + a*y1;
          break;

        case 4: // oox
          a = f2/(f2 - f0);
          xm0 = (1 - a)*x2 + a*x0;
          ym0 = (1 - a)*y2 + a*y0;
          a = f2/(f2 - f1);
          xm1 = (1 - a)*x2 + a*x1;
          ym1 = (1 - a)*y2 + a*y1;
          break;

        case 3: // xxo
          a = f0/(f0 - f2);
          xm0 = (1 - a)*x0 + a*x2;
          ym0 = (1 - a)*y0 + a*y2;
          a = f1/(f1 - f2);
          xm1 = (1 - a)*x1 + a*x2;
          ym1 = (1 - a)*y1 + a*y2;
          break;

        case 6: // oxx
          a = f2/(f2 - f0);
          xm0 = (1 - a)*x2 + a*x0;
          ym0 = (1 - a)*y2 + a*y0;
          a = f1/(f1 - f0);
          xm1 = (1 - a)*x1 + a*x0;
          ym1 = (1 - a)*y1 + a*y0;
          break;
      }

      if (Math.abs(xm1 - xm0) > xtolerance || Math.abs(ym1 - ym0) > ytolerance) {
        if (depth >= 0) {
          return true; // At recursion bottom, just draw the line.
        } else {
          accumulator.exhaust();
        }
      }
      intersections.push(xm1, ym1);
      return false;
    };

    // Interpolate each of the 4 edges, and descend if the interpolate routine
    // indicates further precision is necessary.
    if (interpolate(xtl, ytl, ftl, xtm, ytm, ftm, xtr, ytr, ftr)) {
      return descend();
    }
    if (interpolate(xtr, ytr, ftr, xmr, ymr, fmr, xbr, ybr, fbr)) {
      return descend();
    }
    if (interpolate(xbr, ybr, fbr, xbm, ybm, fbm, xbl, ybl, fbl)) {
      return descend();
    }
    if (interpolate(xbl, ybl, fbl, xml, yml, fml, xtl, ytl, ftl)) {
      return descend();
    }

    // Check for differing signs on either side of intersection midpoint
    var x1 = intersections[0];
    var y1 = intersections[1];
    var x2 = intersections[2];
    var y2 = intersections[3];

    var xm = Distance.mean(x1, x2);
    var ym = Distance.mean(y1, y2);

    var dx = x2 - x1;
    var dy = y2 - y1;

    var length = Distance.hypot(dx, dy);

    var fm = fn(xm, ym);
    var f1 = fn(xm + dy/length*ytolerance, ym - dx/length*xtolerance);
    var f2 = fn(xm - dy/length*ytolerance, ym + dx/length*xtolerance);

    if (f1 > fm === f2 > fm) return descend(); // Looks like an asymptote, not a 0 crossing.
    if (f1 > 0 === f2 > 0) {
      if (depth >= 0) {
        return descend();
      } else {
        accumulator.exhaust();
      }
    }

    accumulator.push(intersections);
  }

  function validateViewState (viewState) {
    if (!viewState) return false;
    var xmin = viewState.viewport.xmin;
    var xmax = viewState.viewport.xmax;
    var ymin = viewState.viewport.ymin;
    var ymax = viewState.viewport.ymax;
    if (!isFinite(xmin) || !isFinite(xmax) || xmax <= xmin) return false;
    if (!isFinite(ymin) || !isFinite(ymax) || ymax <= ymin) return false;
    if (!isFinite(viewState.screen.width) || viewState.screen.width <= 0) return false;
    if (!isFinite(viewState.screen.height) || viewState.screen.height <= 0) return false;
    return true;
  }

  // May return false to indicate either an unrecoginzed GRAPHMODE,
  // or function with a domain that doesn't overlap the viewport.
  function computeDomain (viewState, graphInfo, fn) {
    var xmin = viewState.viewport.xmin;
    var xmax = viewState.viewport.xmax;
    var ymin = viewState.viewport.ymin;
    var ymax = viewState.viewport.ymax;
    var trigAngleMultiplier = viewState.trigAngleMultiplier || 1.0;

    var oversample = viewState.oversample || 4;
    var xtolerance = 1/oversample*(xmax - xmin)/viewState.screen.width;
    var ytolerance = 1/oversample*(ymax - ymin)/viewState.screen.height;
    var domainBound = graphInfo.domainBound;

    var domain;
    switch(graphInfo.graphMode) {
      case GRAPHMODE.X:
        ymin = Math.max(ymin, domainBound[0]);
        ymax = Math.min(ymax, domainBound[1]);
        if (!isFinite(ymax) || !isFinite(ymin) || ymax <= ymin) return false;
        domain = {
          min: ymin,
          max: ymax,
          xtolerance: ytolerance, // Note, switched
          ytolerance: xtolerance,
          step: ytolerance
        };
        break;
      case GRAPHMODE.Y:
        xmin = Math.max(xmin, domainBound[0]);
        xmax = Math.min(xmax, domainBound[1]);
        if (!isFinite(xmax) || !isFinite(xmin) || xmax <= xmin) return false;
        domain = {
         min: xmin,
         max: xmax,
         xtolerance: xtolerance,
         ytolerance: ytolerance,
         step: xtolerance
        };
        break;
      case GRAPHMODE.POLAR:
        domain = {
          min :0,
          max: 2*Math.PI/trigAngleMultiplier*6,
          step: (2*Math.PI/trigAngleMultiplier)/1000,
          tolerance: Math.min(xtolerance, ytolerance)
        };
        var period = findPiPeriod(fn, domain, trigAngleMultiplier, graphInfo.operator === '=');
        if (period) domain.max = domain.min + period;
        break;
      case GRAPHMODE.PARAMETRIC:
        //this catch fixes a bug where center coordinate of image
        //with free variables of t would crash
        if (graphInfo.domain) domain = {
          min: graphInfo.domain.min,
          max: graphInfo.domain.max,
          step: graphInfo.domain.step,
          xtolerance: xtolerance,
          ytolerance: ytolerance
        };
        break;
      case GRAPHMODE.IMPLICIT:
        domain = {
          xmin: xmin,
          xmax: xmax,
          ymin: ymin,
          ymax: ymax,
          xtolerance: xtolerance,
          ytolerance: ytolerance
        };
        break;
      default:
        return false;
    }
    return domain;
  }

  function classifyBranchConic (segments) {
    var conic, segmentConic;
    if (segments.length === 1 && segments[0].length === 4) return 'line';
    for (var i = 0; i < segments.length; i++) {
      var segment = segments[i];
      var len = segment.length;
      if (len < 12) return 'unknown';
      try {
        segmentConic = Distance.classifyConic(
          segment[0], segment[1],
          segment[2*Math.floor(1*len/12)], segment[2*Math.floor(1*len/12) + 1],
          segment[2*Math.floor(2*len/12)], segment[2*Math.floor(2*len/12) + 1],
          segment[2*Math.floor(3*len/12)], segment[2*Math.floor(3*len/12) + 1],
          segment[2*Math.floor(4*len/12)], segment[2*Math.floor(4*len/12) + 1],
          segment[len - 2], segment[len - 1]
        );
      } catch (e) {
        // numeric.js's SVD routine can fail to converge and throw an error.
        return 'unknown';
      }

      if (segmentConic === 'none') return 'none';
      if (conic && segmentConic !== conic) return 'none';
      conic = segmentConic;
    }
    return conic;
  }

  //Computes domain, decides what function to use, and returns answer
  function computeGraphData (viewState, graphInfo, fn, derivative) {
    /* jshint maxcomplexity:13 */
    var domain = computeDomain(viewState, graphInfo, fn);
    var segmentData;
    var segments;
    var tmp;
    if (!domain) {
      segments = [];
      segmentData = {resolved: true};
    } else {
      switch(graphInfo.graphMode) {
        case GRAPHMODE.X:
        case GRAPHMODE.Y:
          segmentData = graphInfo.isLinear ? sampleLinear(graphInfo.linearCoefficients, domain) : sampleXY(fn, domain);
        break;
        case GRAPHMODE.POLAR:
        segmentData = samplePolar(fn, domain);
        break;
        case GRAPHMODE.IMPLICIT:
        segmentData = sampleImplicitRecursive(fn, domain);
        break;
        case GRAPHMODE.PARAMETRIC:
        if (!domain.step) domain.step = (domain.max - domain.min) / 1000;
        segmentData = sampleParametricRecursive(fn, domain);
      }

      segments = segmentData.segments;
    }


    var poi;
    if (
      graphInfo.graphMode !== GRAPHMODE.PARAMETRIC &&
      graphInfo.graphMode !== GRAPHMODE.IMPLICIT
    ) {
      poi = POI.findPOIs(segments, fn, derivative);
      segments = interleaveExtrema(segments, poi);
    }

    // Don't allow more than 250 poi. They are slow to draw.
    if (
      !poi ||
      (poi.zeros.x.length + poi.extrema.x.length + poi.intercept.x.length > 250)
    ) {
      poi = {zeros: {x: [], y: []}, extrema: {x: [], y: []}, intercept: {x: [], y: []}};
    }

    // Flip POI representation if necessary
    if (graphInfo.graphMode === GRAPHMODE.X) {
      for (var type in poi) {
        if (!poi.hasOwnProperty(type)) continue;
        tmp = poi[type].y;
        poi[type].y = poi[type].x;
        poi[type].x = tmp;
      }
    }

    var datum = {
      segments: segments,
      resolved: segmentData.resolved,
      graphMode: graphInfo.graphMode,
      color: graphInfo.color,
      style: graphInfo.style,
      operator: graphInfo.operator,
      poi: poi,
      conic: (graphInfo.graphMode === GRAPHMODE.IMPLICIT) ? 'unknown' : classifyBranchConic(segments),
      expr: null //compiled.fn
    };
    return datum;
  }

  function interleaveExtrema (segments, poi) {
    var nsegments = segments.length;
    var segment;
    var newSegments = Array(nsegments);
    var newSegment;
    var slen;
    var extrema = poi.extrema;
    var j=0;
    var elen = extrema.x.length;

    for (var n = 0; n < nsegments; n++) {
      segment = segments[n];
      slen = segment.length;
      newSegment = [];
      for (var i=0; i < slen; i = i+2) {
        // push extrema between last point and current point onto
        // accumulator.
        while (j < elen && extrema.x[j] <= segment[i]) {
          // Don't push the same point twice
          if (extrema.x[j] !== segment[i]) {
            newSegment.push(extrema.x[j], extrema.y[j]);
          }
          j++;
        }
        // push current point onto accumulator.
        newSegment.push(segment[i], segment[i+1]);
      }
      newSegments[n] = newSegment;
    }
    return newSegments;
  }

  function polygonFromSegments (bottom_segments, top_segments, graphMode) {
    //TODO - respect graphMode (by pushing in proper order)
    var i, j, p, segment;
    var polygon = [];
    var map;
    switch (graphMode) {
      case GRAPHMODE.POLAR:
        map = this.mapPolar;
        break;
      case GRAPHMODE.X:
        map = function(p) {return [p[1], p[0]];};
        break;
    }
    for (i = 0; i < bottom_segments.length; i++) {
      segment = bottom_segments[i];
      for (j = 0; j < segment.length; j += 2) {
        p = [segment[j], segment[j+1]];
        if (map) p = map(p);
        polygon.push(p[0], p[1]);
      }
    }
    for (i = top_segments.length - 1; i>=0; i--) {
      segment = top_segments[i];
      for (j = segment.length - 2; j >= 0; j -= 2) {
        p = [segment[j], segment[j+1]];
        if (map) p = map(p);
        polygon.push(p[0], p[1]);
      }
    }
    return polygon;
  }


  function polygonsFromSegments (bottom_segments, top_segments, graphMode) {
    var last_x = function (segments) {
      var last_segment = segments[segments.length - 1];
      return last_segment[last_segment.length - 2];
    };

    var polygons = [];
    // Until we have pulled the last segment:
    //   Continue to pull segments from the top and the bottom until we find two
    //   which end at the same point.
    //
    //   When that happens, close the polygon, and start another one.
    var i_top = 0;
    var i_bottom = 0;
    var current_bottom = [];
    var current_top = [];
    var top_x = -Infinity;
    var bottom_x = -Infinity;

    while (true) {

      if (top_x <= bottom_x) {
        if (i_top >= top_segments.length) break;
        current_top.push(top_segments[i_top++]);
      }
      if (bottom_x <= top_x) {
        if (i_bottom >= bottom_segments.length) break;
        current_bottom.push(bottom_segments[i_bottom++]);
      }
      top_x = last_x(current_top);
      bottom_x = last_x(current_bottom);

      if (Distance.approx(top_x, bottom_x, 4)) {
        polygons.push(polygonFromSegments(current_bottom, current_top, graphMode));
        current_top = [];
        current_bottom = [];
        // Satisfy assumption that top_x === bottom_x when current_bottom and
        // current_top are empty.
        var new_x = Math.max(top_x, bottom_x);
        top_x = new_x;
        bottom_x = new_x;
      }
    }
    return polygons;
  }

  return {
    Accumulator: Accumulator,
    sampleParametricNaive: sampleParametricNaive,
    sampleXYNaive: sampleXYNaive,
    sampleLinear: sampleLinear,
    sampleXY: sampleXY,
    findPiPeriod: findPiPeriod,
    samplePolar: samplePolar,
    sampleParametricRecursive: sampleParametricRecursive,
    subsampleParametricRecursive: subsampleParametricRecursive,
    sampleImplicitRecursive: sampleImplicitRecursive,
    subsampleImplicitRecursive: subsampleImplicitRecursive,
    validateViewState: validateViewState,
    computeDomain: computeDomain,
    computeGraphData: computeGraphData,
    polygonsFromSegments: polygonsFromSegments
  };
});

define('jison',[], function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"sentence":3,"expr":4,"EOF":5,"assignment":6,"equation":7,"function_declaration":8,"regression":9,"ordered_pair_list":10,"double_inequality":11,"boolean":12,"identifier":13,"=":14,"FUNCTION_PROTOTYPE":15,",":16,"~":17,"comparator":18,"IDENTIFIER_BASE":19,"ordered_pair_list_elements":20,"ordered_pair":21,"(":22,")":23,"list":24,"[":25,"list_elements":26,"]":27,"range":28,"optional_commas_ellipsis":29,"...":30,"list_element_access_impmul":31,"expr_atom_impmul":32,"list_element_access":33,"expr_atom":34,"expr_sum":35,"<":36,">":37,">=":38,"<=":39,"+":40,"expr_product":41,"-":42,"*":43,"/":44,"exponent":45,"^N":46,"^I":47,"^":48,"{":49,"}":50,"function_call":51,"function_call_unary":52,"trig_function_call":53,"log_function_call":54,"ln_function_call":55,"left|":56,"right|":57,"FRAC":58,"SQRT":59,"!":60,"repeated_operator":61,"DERIVATIVE":62,"expr_piecewise":63,"constant":64,"NUMBER":65,"repeated_operator_symbol":66,"SUM":67,"PROD":68,"_":69,"{_visible":70,"piecewise_list":71,"}_visible":72,"incomplete_piecewise_list":73,"piecewise_element":74,":":75,"trig_function":76,"TRIG_FUNCTION":77,"log_prefix":78,"LOG":79,"LOG_BASE_N":80,"LN":81,"function_argument_list":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"=",15:"FUNCTION_PROTOTYPE",16:",",17:"~",19:"IDENTIFIER_BASE",22:"(",23:")",25:"[",27:"]",30:"...",36:"<",37:">",38:">=",39:"<=",40:"+",42:"-",43:"*",44:"/",46:"^N",47:"^I",48:"^",49:"{",50:"}",56:"left|",57:"right|",58:"FRAC",59:"SQRT",60:"!",62:"DERIVATIVE",65:"NUMBER",67:"SUM",68:"PROD",69:"_",70:"{_visible",72:"}_visible",75:":",77:"TRIG_FUNCTION",79:"LOG",80:"LOG_BASE_N",81:"LN"},
productions_: [0,[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,3],[3,2],[3,4],[3,1],[6,3],[9,3],[7,3],[11,5],[13,1],[10,1],[20,1],[20,3],[21,5],[24,3],[28,5],[29,1],[29,2],[29,2],[29,3],[26,1],[26,3],[31,4],[33,4],[4,1],[18,1],[18,1],[18,1],[18,1],[12,3],[12,3],[12,5],[35,3],[35,3],[35,1],[41,2],[41,3],[41,3],[41,1],[45,1],[45,1],[45,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,2],[32,7],[32,4],[32,7],[32,2],[32,1],[32,2],[32,1],[34,1],[34,3],[34,2],[34,2],[34,2],[34,1],[34,1],[34,1],[34,1],[66,1],[66,1],[61,9],[63,3],[63,2],[71,3],[71,1],[73,3],[73,1],[74,3],[74,1],[64,1],[64,2],[52,5],[52,4],[76,1],[53,4],[53,2],[53,7],[53,9],[53,3],[53,5],[78,1],[78,1],[78,3],[78,5],[54,4],[54,2],[54,5],[54,3],[55,4],[55,2],[55,5],[55,3],[51,4],[82,3],[82,3],[8,2]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: return $$[$0-1]; 
break;
case 3: return $$[$0-1]; 
break;
case 4: return $$[$0-1]; 
break;
case 5: return $$[$0-1]; 
break;
case 6: return $$[$0-1]; 
break;
case 7: return $$[$0-1]; 
break;
case 8: return $$[$0-1]; 
break;
case 9: return yy.ErrorMsg.missingRHS($$[$0-2]._symbol); 
break;
case 10: var symbol = yy.parseFunctionDeclaration($$[$0-1]).identifier._symbol;
          return yy.ErrorMsg.missingRHS(symbol);
        
break;
case 11: return yy.ErrorMsg.malformedPoint(); 
break;
case 12: return yy.ErrorMsg.blankExpression(); 
break;
case 13:this.$ = yy.Assignment($$[$0-2], $$[$0]);
          yy.setInput(this.$, this._$);
        
break;
case 14:this.$ = yy.Regression($$[$0-2], $$[$0]);
        yy.setInput(this.$, this._$);
      
break;
case 15:this.$ = yy.Equation($$[$0-2], $$[$0]);
          yy.setInput(this.$, this._$);
        
break;
case 16:this.$ = yy.DoubleInequality([$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]);
        yy.setInput(this.$, this._$);
      
break;
case 17:this.$ = yy.Identifier(yytext);
        yy.setInput(this.$, this._$);
      
break;
case 18:this.$ = yy.OrderedPair.fromList($$[$0]);
      yy.setInput(this.$, this._$);
    
break;
case 19: this.$ = [($$[$0])]; 
break;
case 20: $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 21: this.$ = yy.OrderedPair([$$[$0-3], $$[$0-1]]); 
break;
case 22:this.$ = yy.List($$[$0-1]);
      yy.setInput(this.$, this._$);
    
break;
case 23: this.$ = yy.Range([yy.List($$[$0-3]), yy.List($$[$0-1])]); 
break;
case 28: this.$ = [$$[$0]] 
break;
case 29: $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 30: this.$ = yy.ListAccess([$$[$0-3], $$[$0-1]]) 
break;
case 31: this.$ = yy.ListAccess([$$[$0-3], $$[$0-1]]) 
break;
case 32:this.$ = $$[$0];
      yy.setInput(this.$, this._$);
    
break;
case 33:this.$ = '<'
break;
case 34:this.$ = '>'
break;
case 35:this.$ = '>='
break;
case 36:this.$ = '<='
break;
case 37:this.$ = yy.Comparator[$$[$0-1]]([$$[$0-2], $$[$0]]);
        yy.setInput(this.$, this._$);
      
break;
case 38:this.$ = yy.Comparator['=']([$$[$0-2], $$[$0]]);
        yy.setInput(this.$, this._$);
      
break;
case 39:
        var c1 = yy.Comparator[$$[$0-3]]([$$[$0-4], $$[$0-2]]);
        var c2 = yy.Comparator[$$[$0-1]]([$$[$0-2], $$[$0]]);
        this.$ = yy.And([c1, c2]);
        yy.setInput(this.$, this._$);
      
break;
case 40:this.$ = yy.Add([$$[$0-2], $$[$0]]);
break;
case 41:this.$ = yy.Subtract([$$[$0-2], $$[$0]]);
break;
case 42:this.$ = $$[$0]
break;
case 43:this.$ = yy.Multiply([$$[$0-1], $$[$0]]);
break;
case 44:this.$ = yy.Multiply([$$[$0-2], $$[$0]]);
break;
case 45:this.$ = yy.Divide([$$[$0-2], $$[$0]]);
break;
case 46:this.$ = $$[$0];
break;
case 47:this.$ = yy.Constant(Number($$[$0]));
break;
case 48:this.$ = yy.Identifier($$[$0]);
break;
case 49:this.$ = $$[$0-1];
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0];
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = $$[$0];
break;
case 54:this.$ = $$[$0];
break;
case 55:this.$ = $$[$0];
break;
case 56:this.$ = $$[$0];
break;
case 57:this.$ = $$[$0-1];
break;
case 58:this.$ = $$[$0-1];
break;
case 59:this.$ = yy.FunctionCall('\\abs', [$$[$0-1]]);
break;
case 60:this.$ = yy.Exponent([$$[$0-1], $$[$0]]);
break;
case 61:this.$ = yy.Divide([$$[$0-4], $$[$0-1]]);
break;
case 62:this.$ = yy.FunctionCall('\\sqrt', [$$[$0-1]]);
break;
case 63:this.$ = yy.FunctionCall('\\nthroot', [$$[$0-1], $$[$0-4]]);
break;
case 64:this.$ = yy.FunctionCall('\\factorial', [$$[$0-1]])
break;
case 65:this.$ = $$[$0];
break;
case 66:this.$ = yy.Derivative($$[$0-1], [$$[$0]]);
break;
case 67:this.$ = $$[$0]
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = yy.Negative([yy.Exponent([yy.Constant(Number($$[$0-1])), $$[$0]])]);
break;
case 70:this.$ = yy.Exponent([$$[$0-1], $$[$0]]);
break;
case 71:this.$ = yy.FunctionCall('\\factorial', [$$[$0-1]])
break;
case 72:this.$ = yy.Negative([$$[$0]])
break;
case 73:this.$ = $$[$0]
break;
case 74:this.$ = $$[$0]
break;
case 75:this.$ = $$[$0];
break;
case 76:this.$ = $$[$0]
break;
case 77:this.$ = yy.Sum;
break;
case 78:this.$ =  yy.Product;
break;
case 79:this.$ = $$[$0-8]([$$[$0-5], $$[$0-3], $$[$0-1], $$[$0]]);
break;
case 80:this.$ = yy.Piecewise.chain($$[$0-1]);
break;
case 81:this.$ = yy.Piecewise.empty();
break;
case 82:$$[$0-2].push({condition:yy.Constant(true), if_expr:$$[$0]}); this.$=$$[$0-2];
break;
case 83:this.$=$$[$0]
break;
case 84:$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 85:this.$=[$$[$0]];
break;
case 86:this.$={condition: $$[$0-2], if_expr: $$[$0]};
break;
case 87:this.$={condition: $$[$0], if_expr: yy.Constant(1)};
break;
case 88:this.$ = yy.Constant(Number(yytext));
break;
case 89:this.$ = yy.Constant(-$$[$0])
break;
case 90:this.$ = yy.FunctionExponent([$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 91:this.$ = yy.FunctionCall($$[$0-3], [$$[$0-1]]);
break;
case 92:this.$ = yy.Identifier(yytext);
break;
case 93:this.$ = yy.FunctionCall($$[$0-3], [$$[$0-1]]);
break;
case 94:
          if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply($$[$0-1]._symbol);};
          this.$ = yy.FunctionCall($$[$0-1], [$$[$0]]);
        
break;
case 95:
          if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply($$[$0-6]._symbol);};
          if($$[$0-2].constantValue != 1) {throw yy.ErrorMsg.badTrigExponent($$[$0-6]._symbol);};
          this.$ = yy.FunctionCall(yy.Identifier(yy.inverses[$$[$0-6]._symbol]), [$$[$0]]);
        
break;
case 96:
          if($$[$0-4].constantValue != 1) {throw yy.ErrorMsg.badTrigExponent($$[$0-8]._symbol);};
          this.$ = yy.FunctionCall(yy.Identifier(yy.inverses[$$[$0-8]._symbol]), [$$[$0-1]]);
        
break;
case 97:
          if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply($$[$0-2]._symbol);};
          if($$[$0-1] != "2") {throw yy.ErrorMsg.badTrigExponent($$[$0-2]._symbol);};
          this.$ = yy.Exponent([yy.FunctionCall($$[$0-2], [$$[$0]]), yy.Constant(2)]);
        
break;
case 98:
          if($$[$0-3] != "2") {throw yy.ErrorMsg.badTrigExponent($$[$0-4]._symbol);};
          this.$ = yy.Exponent([yy.FunctionCall($$[$0-4], [$$[$0-1]]), yy.Constant(2)]);
        
break;
case 99: this.$ = yy.Constant(10) 
break;
case 100: this.$ = yy.Constant(Number(yytext)); 
break;
case 101: this.$ = $$[$0]
break;
case 102: this.$ = $$[$0-1]
break;
case 103:this.$ = yy.FunctionCall(yy.Identifier('log'), [$$[$0-1], $$[$0-3]])
break;
case 104:
      if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply('log');};
      this.$ = yy.FunctionCall(yy.Identifier('log'), [$$[$0], $$[$0-1]])
    
break;
case 105:
      if($$[$0-3] != "2") {throw yy.ErrorMsg.badLogExponent('log');}
      this.$ = yy.Exponent([yy.FunctionCall(yy.Identifier('log'), [$$[$0-1], $$[$0-4]]), yy.Constant(2)])
    
break;
case 106:
      if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply('log');};
      if($$[$0-1] != "2") {throw yy.ErrorMsg.badLogExponent('log');}
      this.$ = yy.Exponent([yy.FunctionCall(yy.Identifier('log'), [$$[$0], $$[$0-2]]), yy.Constant(2)])
    
break;
case 107:this.$ = yy.FunctionCall(yy.Identifier('ln'), [$$[$0-1]])
break;
case 108:
      if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply('ln');};
      this.$ = yy.FunctionCall(yy.Identifier('ln'), [$$[$0]])
    
break;
case 109:
      if($$[$0-3] != "2") {throw yy.ErrorMsg.badLogExponent('ln');}
      this.$ = yy.Exponent([yy.FunctionCall(yy.Identifier('ln'), [$$[$0-1]]), yy.Constant(2)])
    
break;
case 110:
      if(!$$[$0].okForImplicitFunction()) {throw yy.ErrorMsg.badImplicitMultiply('ln');};
      if($$[$0-1] != "2") {throw yy.ErrorMsg.badLogExponent('ln');}
      this.$ = yy.Exponent([yy.FunctionCall(yy.Identifier('ln'), [$$[$0]]), yy.Constant(2)])
    
break;
case 111:this.$ = yy.FunctionCall($$[$0-3], $$[$0-1]);
break;
case 112:this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 113:this.$ = [$$[$0-2], $$[$0]];
break;
case 114:var val = yy.parseFunctionDeclaration($$[$0-1]); this.$ = yy.FunctionDefinition(val.identifier, val.args, $$[$0]);
        yy.setInput(this.$, this._$);
      
break;
}
},
table: [{3:1,4:2,5:[1,12],6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:[1,11],19:[1,15],20:14,21:17,22:[1,19],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{1:[3]},{5:[1,51],14:[1,53],16:[1,52],17:[1,54],18:55,36:[1,56],37:[1,57],38:[1,58],39:[1,59]},{5:[1,60]},{5:[1,61]},{5:[1,62]},{5:[1,63]},{5:[1,64]},{5:[1,65]},{5:[1,66]},{5:[2,50],14:[1,67],16:[2,50],17:[2,50],19:[2,50],22:[1,68],25:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],56:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50],70:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50]},{4:70,5:[1,69],13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{1:[2,12]},{5:[2,32],14:[2,32],16:[2,32],17:[2,32],19:[2,32],22:[2,32],23:[2,32],25:[2,32],27:[2,32],30:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[1,73],42:[1,74],43:[2,32],44:[2,32],46:[2,32],47:[2,32],48:[2,32],49:[2,32],50:[2,32],56:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],62:[2,32],67:[2,32],68:[2,32],70:[2,32],72:[2,32],75:[2,32],77:[2,32],79:[2,32],80:[2,32],81:[2,32]},{5:[2,18],16:[1,75]},{5:[2,17],14:[2,17],16:[2,17],17:[2,17],19:[2,17],22:[2,17],23:[2,17],25:[2,17],27:[2,17],30:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],42:[2,17],43:[2,17],44:[2,17],46:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],62:[2,17],65:[2,17],67:[2,17],68:[2,17],70:[2,17],72:[2,17],75:[2,17],77:[2,17],79:[2,17],80:[2,17],81:[2,17]},{5:[2,42],13:71,14:[2,42],16:[2,42],17:[2,42],19:[1,15],22:[1,72],23:[2,42],25:[2,42],27:[2,42],30:[2,42],31:33,32:76,36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],42:[2,42],43:[1,77],44:[1,78],46:[2,42],47:[2,42],48:[2,42],49:[1,34],50:[2,42],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,42],58:[1,36],59:[1,37],60:[2,42],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,42],75:[2,42],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,19],16:[2,19]},{5:[2,46],14:[2,46],16:[2,46],17:[2,46],19:[2,46],22:[2,46],23:[2,46],25:[1,81],27:[2,46],30:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],42:[2,46],43:[2,46],44:[2,46],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,46],50:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[1,80],62:[2,46],67:[2,46],68:[2,46],70:[2,46],72:[2,46],75:[2,46],77:[2,46],79:[2,46],80:[2,46],81:[2,46]},{4:85,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,68],14:[2,68],16:[2,68],17:[2,68],19:[2,68],22:[2,68],23:[2,68],25:[2,68],27:[2,68],30:[2,68],36:[2,68],37:[2,68],38:[2,68],39:[2,68],40:[2,68],42:[2,68],43:[2,68],44:[2,68],46:[2,68],47:[2,68],48:[2,68],49:[2,68],50:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],62:[2,68],67:[2,68],68:[2,68],70:[2,68],72:[2,68],75:[2,68],77:[2,68],79:[2,68],80:[2,68],81:[2,68]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:87,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,86],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,73],14:[2,73],16:[2,73],17:[2,73],19:[2,73],22:[2,73],23:[2,73],25:[2,73],27:[2,73],30:[2,73],36:[2,73],37:[2,73],38:[2,73],39:[2,73],40:[2,73],42:[2,73],43:[2,73],44:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],62:[2,73],67:[2,73],68:[2,73],70:[2,73],72:[2,73],75:[2,73],77:[2,73],79:[2,73],80:[2,73],81:[2,73]},{5:[2,74],14:[2,74],16:[2,74],17:[2,74],19:[2,74],22:[2,74],23:[2,74],25:[2,74],27:[2,74],30:[2,74],36:[2,74],37:[2,74],38:[2,74],39:[2,74],40:[2,74],42:[2,74],43:[2,74],44:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],62:[2,74],67:[2,74],68:[2,74],70:[2,74],72:[2,74],75:[2,74],77:[2,74],79:[2,74],80:[2,74],81:[2,74]},{5:[2,75],14:[2,75],16:[2,75],17:[2,75],19:[2,75],22:[2,75],23:[2,75],25:[2,75],27:[2,75],30:[2,75],36:[2,75],37:[2,75],38:[2,75],39:[2,75],40:[2,75],42:[2,75],43:[2,75],44:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],62:[2,75],67:[2,75],68:[2,75],70:[2,75],72:[2,75],75:[2,75],77:[2,75],79:[2,75],80:[2,75],81:[2,75]},{5:[2,76],14:[2,76],16:[2,76],17:[2,76],19:[2,76],22:[2,76],23:[2,76],25:[1,90],27:[2,76],30:[2,76],36:[2,76],37:[2,76],38:[2,76],39:[2,76],40:[2,76],42:[2,76],43:[2,76],44:[2,76],45:88,46:[1,82],47:[1,83],48:[1,84],49:[2,76],50:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[1,89],62:[2,76],67:[2,76],68:[2,76],70:[2,76],72:[2,76],75:[2,76],77:[2,76],79:[2,76],80:[2,76],81:[2,76]},{5:[2,88],14:[2,88],16:[2,88],17:[2,88],19:[2,88],22:[2,88],23:[2,88],25:[2,88],27:[2,88],30:[2,88],36:[2,88],37:[2,88],38:[2,88],39:[2,88],40:[2,88],42:[2,88],43:[2,88],44:[2,88],46:[2,88],47:[2,88],48:[2,88],49:[2,88],50:[2,88],56:[2,88],57:[2,88],58:[2,88],59:[2,88],60:[2,88],62:[2,88],67:[2,88],68:[2,88],70:[2,88],72:[2,88],75:[2,88],77:[2,88],79:[2,88],80:[2,88],81:[2,88]},{4:92,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],26:91,28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,51],14:[2,51],16:[2,51],17:[2,51],19:[2,51],22:[2,51],23:[2,51],25:[2,51],27:[2,51],30:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],42:[2,51],43:[2,51],44:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],62:[2,51],67:[2,51],68:[2,51],70:[2,51],72:[2,51],75:[2,51],77:[2,51],79:[2,51],80:[2,51],81:[2,51]},{5:[2,52],14:[2,52],16:[2,52],17:[2,52],19:[2,52],22:[2,52],23:[2,52],25:[2,52],27:[2,52],30:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],42:[2,52],43:[2,52],44:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],62:[2,52],67:[2,52],68:[2,52],70:[2,52],72:[2,52],75:[2,52],77:[2,52],79:[2,52],80:[2,52],81:[2,52]},{5:[2,53],14:[2,53],16:[2,53],17:[2,53],19:[2,53],22:[2,53],23:[2,53],25:[2,53],27:[2,53],30:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],42:[2,53],43:[2,53],44:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],62:[2,53],67:[2,53],68:[2,53],70:[2,53],72:[2,53],75:[2,53],77:[2,53],79:[2,53],80:[2,53],81:[2,53]},{5:[2,54],14:[2,54],16:[2,54],17:[2,54],19:[2,54],22:[2,54],23:[2,54],25:[2,54],27:[2,54],30:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],42:[2,54],43:[2,54],44:[2,54],46:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],62:[2,54],67:[2,54],68:[2,54],70:[2,54],72:[2,54],75:[2,54],77:[2,54],79:[2,54],80:[2,54],81:[2,54]},{5:[2,55],14:[2,55],16:[2,55],17:[2,55],19:[2,55],22:[2,55],23:[2,55],25:[2,55],27:[2,55],30:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],42:[2,55],43:[2,55],44:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],62:[2,55],67:[2,55],68:[2,55],70:[2,55],72:[2,55],75:[2,55],77:[2,55],79:[2,55],80:[2,55],81:[2,55]},{5:[2,56],14:[2,56],16:[2,56],17:[2,56],19:[2,56],22:[2,56],23:[2,56],25:[2,56],27:[2,56],30:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],42:[2,56],43:[2,56],44:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],62:[2,56],67:[2,56],68:[2,56],70:[2,56],72:[2,56],75:[2,56],77:[2,56],79:[2,56],80:[2,56],81:[2,56]},{4:93,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:94,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{49:[1,95]},{25:[1,97],49:[1,96]},{5:[2,65],14:[2,65],16:[2,65],17:[2,65],19:[2,65],22:[2,65],23:[2,65],25:[2,65],27:[2,65],30:[2,65],36:[2,65],37:[2,65],38:[2,65],39:[2,65],40:[2,65],42:[2,65],43:[2,65],44:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],62:[2,65],67:[2,65],68:[2,65],70:[2,65],72:[2,65],75:[2,65],77:[2,65],79:[2,65],80:[2,65],81:[2,65]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:98,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,67],14:[2,67],16:[2,67],17:[2,67],19:[2,67],22:[2,67],23:[2,67],25:[2,67],27:[2,67],30:[2,67],36:[2,67],37:[2,67],38:[2,67],39:[2,67],40:[2,67],42:[2,67],43:[2,67],44:[2,67],46:[2,67],47:[2,67],48:[2,67],49:[2,67],50:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],62:[2,67],67:[2,67],68:[2,67],70:[2,67],72:[2,67],75:[2,67],77:[2,67],79:[2,67],80:[2,67],81:[2,67]},{13:71,19:[1,15],22:[1,99],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:100,42:[1,21],46:[1,102],48:[1,101],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,103],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:104,42:[1,21],46:[1,105],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,106],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:107,42:[1,21],46:[1,108],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{69:[1,109]},{4:115,12:114,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],71:110,72:[1,111],73:112,74:113,76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,92],22:[2,92],25:[2,92],42:[2,92],46:[2,92],48:[2,92],49:[2,92],56:[2,92],58:[2,92],59:[2,92],62:[2,92],65:[2,92],67:[2,92],68:[2,92],70:[2,92],77:[2,92],79:[2,92],80:[2,92],81:[2,92]},{19:[2,99],22:[2,99],25:[2,99],42:[2,99],46:[2,99],49:[2,99],56:[2,99],58:[2,99],59:[2,99],62:[2,99],65:[2,99],67:[2,99],68:[2,99],69:[1,116],70:[2,99],77:[2,99],79:[2,99],80:[2,99],81:[2,99]},{19:[2,100],22:[2,100],25:[2,100],42:[2,100],46:[2,100],49:[2,100],56:[2,100],58:[2,100],59:[2,100],62:[2,100],65:[2,100],67:[2,100],68:[2,100],70:[2,100],77:[2,100],79:[2,100],80:[2,100],81:[2,100]},{69:[2,77]},{69:[2,78]},{1:[2,1]},{4:117,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:118,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:119,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:121,13:120,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,33],22:[2,33],25:[2,33],42:[2,33],49:[2,33],56:[2,33],58:[2,33],59:[2,33],62:[2,33],65:[2,33],67:[2,33],68:[2,33],70:[2,33],77:[2,33],79:[2,33],80:[2,33],81:[2,33]},{19:[2,34],22:[2,34],25:[2,34],42:[2,34],49:[2,34],56:[2,34],58:[2,34],59:[2,34],62:[2,34],65:[2,34],67:[2,34],68:[2,34],70:[2,34],77:[2,34],79:[2,34],80:[2,34],81:[2,34]},{19:[2,35],22:[2,35],25:[2,35],42:[2,35],49:[2,35],56:[2,35],58:[2,35],59:[2,35],62:[2,35],65:[2,35],67:[2,35],68:[2,35],70:[2,35],77:[2,35],79:[2,35],80:[2,35],81:[2,35]},{19:[2,36],22:[2,36],25:[2,36],42:[2,36],49:[2,36],56:[2,36],58:[2,36],59:[2,36],62:[2,36],65:[2,36],67:[2,36],68:[2,36],70:[2,36],77:[2,36],79:[2,36],80:[2,36],81:[2,36]},{1:[2,2]},{1:[2,3]},{1:[2,4]},{1:[2,5]},{1:[2,6]},{1:[2,7]},{1:[2,8]},{4:123,5:[1,122],13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:125,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43],82:124},{1:[2,10]},{5:[2,114]},{5:[2,50],14:[2,50],16:[2,50],17:[2,50],19:[2,50],22:[1,68],23:[2,50],25:[2,50],27:[2,50],30:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50],70:[2,50],72:[2,50],75:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50]},{4:126,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:127,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:128,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{21:129,22:[1,130]},{5:[2,43],14:[2,43],16:[2,43],17:[2,43],19:[2,43],22:[2,43],23:[2,43],25:[1,90],27:[2,43],30:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],42:[2,43],43:[2,43],44:[2,43],45:88,46:[1,82],47:[1,83],48:[1,84],49:[2,43],50:[2,43],56:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[1,89],62:[2,43],67:[2,43],68:[2,43],70:[2,43],72:[2,43],75:[2,43],77:[2,43],79:[2,43],80:[2,43],81:[2,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:131,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:132,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,70],14:[2,70],16:[2,70],17:[2,70],19:[2,70],22:[2,70],23:[2,70],25:[2,70],27:[2,70],30:[2,70],36:[2,70],37:[2,70],38:[2,70],39:[2,70],40:[2,70],42:[2,70],43:[2,70],44:[2,70],46:[2,70],47:[2,70],48:[2,70],49:[2,70],50:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],62:[2,70],67:[2,70],68:[2,70],70:[2,70],72:[2,70],75:[2,70],77:[2,70],79:[2,70],80:[2,70],81:[2,70]},{5:[2,71],14:[2,71],16:[2,71],17:[2,71],19:[2,71],22:[2,71],23:[2,71],25:[2,71],27:[2,71],30:[2,71],36:[2,71],37:[2,71],38:[2,71],39:[2,71],40:[2,71],42:[2,71],43:[2,71],44:[2,71],46:[2,71],47:[2,71],48:[2,71],49:[2,71],50:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],62:[2,71],67:[2,71],68:[2,71],70:[2,71],72:[2,71],75:[2,71],77:[2,71],79:[2,71],80:[2,71],81:[2,71]},{4:133,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,47],14:[2,47],16:[2,47],17:[2,47],19:[2,47],22:[2,47],23:[2,47],25:[2,47],27:[2,47],30:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],42:[2,47],43:[2,47],44:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],62:[2,47],65:[2,47],67:[2,47],68:[2,47],70:[2,47],72:[2,47],75:[2,47],77:[2,47],79:[2,47],80:[2,47],81:[2,47]},{5:[2,48],14:[2,48],16:[2,48],17:[2,48],19:[2,48],22:[2,48],23:[2,48],25:[2,48],27:[2,48],30:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],42:[2,48],43:[2,48],44:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],62:[2,48],65:[2,48],67:[2,48],68:[2,48],70:[2,48],72:[2,48],75:[2,48],77:[2,48],79:[2,48],80:[2,48],81:[2,48]},{49:[1,134]},{16:[1,135],23:[1,136]},{5:[2,89],14:[2,89],16:[2,89],17:[2,89],19:[2,89],22:[2,89],23:[2,89],25:[2,89],27:[2,89],30:[2,89],36:[2,89],37:[2,89],38:[2,89],39:[2,89],40:[2,89],42:[2,89],43:[2,89],44:[2,89],45:137,46:[1,82],47:[1,83],48:[1,84],49:[2,89],50:[2,89],56:[2,89],57:[2,89],58:[2,89],59:[2,89],60:[2,89],62:[2,89],67:[2,89],68:[2,89],70:[2,89],72:[2,89],75:[2,89],77:[2,89],79:[2,89],80:[2,89],81:[2,89]},{5:[2,72],14:[2,72],16:[2,72],17:[2,72],19:[2,72],22:[2,72],23:[2,72],25:[1,81],27:[2,72],30:[2,72],36:[2,72],37:[2,72],38:[2,72],39:[2,72],40:[2,72],42:[2,72],43:[2,72],44:[2,72],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,72],50:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[1,80],62:[2,72],67:[2,72],68:[2,72],70:[2,72],72:[2,72],75:[2,72],77:[2,72],79:[2,72],80:[2,72],81:[2,72]},{5:[2,60],14:[2,60],16:[2,60],17:[2,60],19:[2,60],22:[2,60],23:[2,60],25:[2,60],27:[2,60],30:[2,60],36:[2,60],37:[2,60],38:[2,60],39:[2,60],40:[2,60],42:[2,60],43:[2,60],44:[2,60],46:[2,60],47:[2,60],48:[2,60],49:[2,60],50:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],62:[2,60],67:[2,60],68:[2,60],70:[2,60],72:[2,60],75:[2,60],77:[2,60],79:[2,60],80:[2,60],81:[2,60]},{5:[2,64],14:[2,64],16:[2,64],17:[2,64],19:[2,64],22:[2,64],23:[2,64],25:[2,64],27:[2,64],30:[2,64],36:[2,64],37:[2,64],38:[2,64],39:[2,64],40:[2,64],42:[2,64],43:[2,64],44:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],62:[2,64],67:[2,64],68:[2,64],70:[2,64],72:[2,64],75:[2,64],77:[2,64],79:[2,64],80:[2,64],81:[2,64]},{4:138,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{16:[1,141],27:[1,139],29:140,30:[1,142]},{16:[2,28],27:[2,28],30:[2,28]},{50:[1,143]},{57:[1,144]},{4:145,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:146,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:147,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,66],13:71,14:[2,66],16:[2,66],17:[2,66],19:[1,15],22:[1,72],23:[2,66],25:[2,66],27:[2,66],30:[2,66],31:33,32:76,36:[2,66],37:[2,66],38:[2,66],39:[2,66],40:[2,66],42:[2,66],43:[1,77],44:[1,78],46:[2,66],47:[2,66],48:[2,66],49:[1,34],50:[2,66],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,66],58:[1,36],59:[1,37],60:[2,66],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,66],75:[2,66],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:148,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,94],13:71,14:[2,94],16:[2,94],17:[2,94],19:[1,15],22:[1,72],23:[2,94],25:[2,94],27:[2,94],30:[2,94],31:33,32:76,36:[2,94],37:[2,94],38:[2,94],39:[2,94],40:[2,94],42:[2,94],43:[1,77],44:[1,78],46:[2,94],47:[2,94],48:[2,94],49:[1,34],50:[2,94],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,94],58:[1,36],59:[1,37],60:[2,94],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,94],75:[2,94],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{49:[1,149]},{13:71,19:[1,15],22:[1,151],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:150,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:152,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,104],13:71,14:[2,104],16:[2,104],17:[2,104],19:[1,15],22:[1,72],23:[2,104],25:[2,104],27:[2,104],30:[2,104],31:33,32:76,36:[2,104],37:[2,104],38:[2,104],39:[2,104],40:[2,104],42:[2,104],43:[1,77],44:[1,78],46:[2,104],47:[2,104],48:[2,104],49:[1,34],50:[2,104],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,104],58:[1,36],59:[1,37],60:[2,104],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,104],75:[2,104],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,153],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:154,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:155,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,108],13:71,14:[2,108],16:[2,108],17:[2,108],19:[1,15],22:[1,72],23:[2,108],25:[2,108],27:[2,108],30:[2,108],31:33,32:76,36:[2,108],37:[2,108],38:[2,108],39:[2,108],40:[2,108],42:[2,108],43:[1,77],44:[1,78],46:[2,108],47:[2,108],48:[2,108],49:[1,34],50:[2,108],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,108],58:[1,36],59:[1,37],60:[2,108],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,108],75:[2,108],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:71,19:[1,15],22:[1,156],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:157,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{49:[1,158]},{72:[1,159]},{5:[2,81],14:[2,81],16:[2,81],17:[2,81],19:[2,81],22:[2,81],23:[2,81],25:[2,81],27:[2,81],30:[2,81],36:[2,81],37:[2,81],38:[2,81],39:[2,81],40:[2,81],42:[2,81],43:[2,81],44:[2,81],46:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],62:[2,81],67:[2,81],68:[2,81],70:[2,81],72:[2,81],75:[2,81],77:[2,81],79:[2,81],80:[2,81],81:[2,81]},{16:[1,160],72:[2,83]},{16:[2,85],72:[2,85]},{16:[2,87],72:[2,87],75:[1,161]},{14:[1,163],18:162,36:[1,56],37:[1,57],38:[1,58],39:[1,59]},{13:164,19:[1,15],49:[1,165]},{5:[1,166]},{5:[2,15]},{5:[2,14]},{5:[2,50],18:167,19:[2,50],22:[1,68],25:[2,50],36:[1,56],37:[1,57],38:[1,58],39:[1,59],40:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],56:[2,50],58:[2,50],59:[2,50],60:[2,50],62:[2,50],67:[2,50],68:[2,50],70:[2,50],77:[2,50],79:[2,50],80:[2,50],81:[2,50]},{5:[2,37],16:[2,37],18:168,36:[1,56],37:[1,57],38:[1,58],39:[1,59],72:[2,37],75:[2,37]},{1:[2,9]},{5:[2,13]},{16:[1,170],23:[1,169]},{16:[1,172],23:[1,171]},{23:[1,136]},{5:[2,40],13:71,14:[2,40],16:[2,40],17:[2,40],19:[1,15],22:[1,72],23:[2,40],25:[2,40],27:[2,40],30:[2,40],31:33,32:76,36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],42:[2,40],43:[1,77],44:[1,78],46:[2,40],47:[2,40],48:[2,40],49:[1,34],50:[2,40],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,40],58:[1,36],59:[1,37],60:[2,40],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,40],75:[2,40],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,41],13:71,14:[2,41],16:[2,41],17:[2,41],19:[1,15],22:[1,72],23:[2,41],25:[2,41],27:[2,41],30:[2,41],31:33,32:76,36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],42:[2,41],43:[1,77],44:[1,78],46:[2,41],47:[2,41],48:[2,41],49:[1,34],50:[2,41],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,41],58:[1,36],59:[1,37],60:[2,41],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,41],75:[2,41],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,20],16:[2,20]},{4:173,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,44],14:[2,44],16:[2,44],17:[2,44],19:[2,44],22:[2,44],23:[2,44],25:[1,81],27:[2,44],30:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],42:[2,44],43:[2,44],44:[2,44],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,44],50:[2,44],56:[2,44],57:[2,44],58:[2,44],59:[2,44],60:[1,80],62:[2,44],67:[2,44],68:[2,44],70:[2,44],72:[2,44],75:[2,44],77:[2,44],79:[2,44],80:[2,44],81:[2,44]},{5:[2,45],14:[2,45],16:[2,45],17:[2,45],19:[2,45],22:[2,45],23:[2,45],25:[1,81],27:[2,45],30:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],42:[2,45],43:[2,45],44:[2,45],45:79,46:[1,82],47:[1,83],48:[1,84],49:[2,45],50:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[1,80],62:[2,45],67:[2,45],68:[2,45],70:[2,45],72:[2,45],75:[2,45],77:[2,45],79:[2,45],80:[2,45],81:[2,45]},{27:[1,174]},{4:175,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:176,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,57],14:[2,57],16:[2,57],17:[2,57],19:[2,57],22:[2,57],23:[2,57],25:[2,57],27:[2,57],30:[2,57],36:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],42:[2,57],43:[2,57],44:[2,57],46:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],62:[2,57],67:[2,57],68:[2,57],70:[2,57],72:[2,57],75:[2,57],77:[2,57],79:[2,57],80:[2,57],81:[2,57]},{5:[2,69],14:[2,69],16:[2,69],17:[2,69],19:[2,69],22:[2,69],23:[2,69],25:[2,69],27:[2,69],30:[2,69],36:[2,69],37:[2,69],38:[2,69],39:[2,69],40:[2,69],42:[2,69],43:[2,69],44:[2,69],46:[2,69],47:[2,69],48:[2,69],49:[2,69],50:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],62:[2,69],67:[2,69],68:[2,69],70:[2,69],72:[2,69],75:[2,69],77:[2,69],79:[2,69],80:[2,69],81:[2,69]},{27:[1,177]},{5:[2,22],14:[2,22],16:[2,22],17:[2,22],19:[2,22],22:[2,22],23:[2,22],25:[2,22],27:[2,22],30:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],42:[2,22],43:[2,22],44:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],56:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],62:[2,22],67:[2,22],68:[2,22],70:[2,22],72:[2,22],75:[2,22],77:[2,22],79:[2,22],80:[2,22],81:[2,22]},{4:92,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],26:178,28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:179,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,30:[1,180],31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{16:[1,181],19:[2,24],22:[2,24],25:[2,24],42:[2,24],49:[2,24],56:[2,24],58:[2,24],59:[2,24],62:[2,24],65:[2,24],67:[2,24],68:[2,24],70:[2,24],77:[2,24],79:[2,24],80:[2,24],81:[2,24]},{5:[2,58],14:[2,58],16:[2,58],17:[2,58],19:[2,58],22:[2,58],23:[2,58],25:[2,58],27:[2,58],30:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],42:[2,58],43:[2,58],44:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],56:[2,58],57:[2,58],58:[2,58],59:[2,58],60:[2,58],62:[2,58],67:[2,58],68:[2,58],70:[2,58],72:[2,58],75:[2,58],77:[2,58],79:[2,58],80:[2,58],81:[2,58]},{5:[2,59],14:[2,59],16:[2,59],17:[2,59],19:[2,59],22:[2,59],23:[2,59],25:[2,59],27:[2,59],30:[2,59],36:[2,59],37:[2,59],38:[2,59],39:[2,59],40:[2,59],42:[2,59],43:[2,59],44:[2,59],46:[2,59],47:[2,59],48:[2,59],49:[2,59],50:[2,59],56:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],62:[2,59],67:[2,59],68:[2,59],70:[2,59],72:[2,59],75:[2,59],77:[2,59],79:[2,59],80:[2,59],81:[2,59]},{50:[1,182]},{50:[1,183]},{27:[1,184]},{23:[1,185]},{42:[1,186]},{5:[2,97],13:71,14:[2,97],16:[2,97],17:[2,97],19:[1,15],22:[1,72],23:[2,97],25:[2,97],27:[2,97],30:[2,97],31:33,32:76,36:[2,97],37:[2,97],38:[2,97],39:[2,97],40:[2,97],42:[2,97],43:[1,77],44:[1,78],46:[2,97],47:[2,97],48:[2,97],49:[1,34],50:[2,97],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,97],58:[1,36],59:[1,37],60:[2,97],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,97],75:[2,97],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:187,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{23:[1,188]},{4:189,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,106],13:71,14:[2,106],16:[2,106],17:[2,106],19:[1,15],22:[1,72],23:[2,106],25:[2,106],27:[2,106],30:[2,106],31:33,32:76,36:[2,106],37:[2,106],38:[2,106],39:[2,106],40:[2,106],42:[2,106],43:[1,77],44:[1,78],46:[2,106],47:[2,106],48:[2,106],49:[1,34],50:[2,106],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,106],58:[1,36],59:[1,37],60:[2,106],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,106],75:[2,106],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{23:[1,190]},{4:191,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,110],13:71,14:[2,110],16:[2,110],17:[2,110],19:[1,15],22:[1,72],23:[2,110],25:[2,110],27:[2,110],30:[2,110],31:33,32:76,36:[2,110],37:[2,110],38:[2,110],39:[2,110],40:[2,110],42:[2,110],43:[1,77],44:[1,78],46:[2,110],47:[2,110],48:[2,110],49:[1,34],50:[2,110],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,110],58:[1,36],59:[1,37],60:[2,110],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,110],75:[2,110],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{13:192,19:[1,15]},{5:[2,80],14:[2,80],16:[2,80],17:[2,80],19:[2,80],22:[2,80],23:[2,80],25:[2,80],27:[2,80],30:[2,80],36:[2,80],37:[2,80],38:[2,80],39:[2,80],40:[2,80],42:[2,80],43:[2,80],44:[2,80],46:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],56:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],62:[2,80],67:[2,80],68:[2,80],70:[2,80],72:[2,80],75:[2,80],77:[2,80],79:[2,80],80:[2,80],81:[2,80]},{4:193,12:114,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],74:194,76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:195,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:121,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:196,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,101],22:[2,101],25:[2,101],42:[2,101],46:[2,101],49:[2,101],56:[2,101],58:[2,101],59:[2,101],62:[2,101],65:[2,101],67:[2,101],68:[2,101],70:[2,101],77:[2,101],79:[2,101],80:[2,101],81:[2,101]},{4:197,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{1:[2,11]},{4:198,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:199,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,111],14:[2,111],16:[2,111],17:[2,111],19:[2,111],22:[2,111],23:[2,111],25:[2,111],27:[2,111],30:[2,111],36:[2,111],37:[2,111],38:[2,111],39:[2,111],40:[2,111],42:[2,111],43:[2,111],44:[2,111],46:[2,111],47:[2,111],48:[2,111],49:[2,111],50:[2,111],56:[2,111],57:[2,111],58:[2,111],59:[2,111],60:[2,111],62:[2,111],67:[2,111],68:[2,111],70:[2,111],72:[2,111],75:[2,111],77:[2,111],79:[2,111],80:[2,111],81:[2,111]},{4:200,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,91],14:[2,91],16:[2,91],17:[2,91],19:[2,91],22:[2,91],23:[2,91],25:[2,91],27:[2,91],30:[2,91],36:[2,91],37:[2,91],38:[2,91],39:[2,91],40:[2,91],42:[2,91],43:[2,91],44:[2,91],45:201,46:[1,82],47:[1,83],48:[1,84],49:[2,91],50:[2,91],56:[2,91],57:[2,91],58:[2,91],59:[2,91],60:[2,91],62:[2,91],67:[2,91],68:[2,91],70:[2,91],72:[2,91],75:[2,91],77:[2,91],79:[2,91],80:[2,91],81:[2,91]},{4:202,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{16:[1,135]},{5:[2,31],14:[2,31],16:[2,31],17:[2,31],19:[2,31],22:[2,31],23:[2,31],25:[2,31],27:[2,31],30:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],42:[2,31],43:[2,31],44:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31],56:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],62:[2,31],67:[2,31],68:[2,31],70:[2,31],72:[2,31],75:[2,31],77:[2,31],79:[2,31],80:[2,31],81:[2,31]},{50:[1,203]},{23:[1,204]},{5:[2,30],14:[2,30],16:[2,30],17:[2,30],19:[2,30],22:[2,30],23:[2,30],25:[2,30],27:[2,30],30:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],42:[2,30],43:[2,30],44:[2,30],46:[2,30],47:[2,30],48:[2,30],49:[2,30],50:[2,30],56:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],62:[2,30],67:[2,30],68:[2,30],70:[2,30],72:[2,30],75:[2,30],77:[2,30],79:[2,30],80:[2,30],81:[2,30]},{16:[1,206],27:[1,205]},{16:[2,29],27:[2,29],30:[2,29]},{16:[1,207],19:[2,25],22:[2,25],25:[2,25],42:[2,25],49:[2,25],56:[2,25],58:[2,25],59:[2,25],62:[2,25],65:[2,25],67:[2,25],68:[2,25],70:[2,25],77:[2,25],79:[2,25],80:[2,25],81:[2,25]},{19:[2,26],22:[2,26],25:[2,26],42:[2,26],49:[2,26],56:[2,26],58:[2,26],59:[2,26],62:[2,26],65:[2,26],67:[2,26],68:[2,26],70:[2,26],77:[2,26],79:[2,26],80:[2,26],81:[2,26]},{49:[1,208]},{5:[2,62],14:[2,62],16:[2,62],17:[2,62],19:[2,62],22:[2,62],23:[2,62],25:[2,62],27:[2,62],30:[2,62],36:[2,62],37:[2,62],38:[2,62],39:[2,62],40:[2,62],42:[2,62],43:[2,62],44:[2,62],46:[2,62],47:[2,62],48:[2,62],49:[2,62],50:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],62:[2,62],67:[2,62],68:[2,62],70:[2,62],72:[2,62],75:[2,62],77:[2,62],79:[2,62],80:[2,62],81:[2,62]},{49:[1,209]},{5:[2,93],14:[2,93],16:[2,93],17:[2,93],19:[2,93],22:[2,93],23:[2,93],25:[2,93],27:[2,93],30:[2,93],36:[2,93],37:[2,93],38:[2,93],39:[2,93],40:[2,93],42:[2,93],43:[2,93],44:[2,93],46:[2,93],47:[2,93],48:[2,93],49:[2,93],50:[2,93],56:[2,93],57:[2,93],58:[2,93],59:[2,93],60:[2,93],62:[2,93],67:[2,93],68:[2,93],70:[2,93],72:[2,93],75:[2,93],77:[2,93],79:[2,93],80:[2,93],81:[2,93]},{42:[1,211],64:210,65:[1,26]},{23:[1,212]},{5:[2,103],14:[2,103],16:[2,103],17:[2,103],19:[2,103],22:[2,103],23:[2,103],25:[2,103],27:[2,103],30:[2,103],36:[2,103],37:[2,103],38:[2,103],39:[2,103],40:[2,103],42:[2,103],43:[2,103],44:[2,103],46:[2,103],47:[2,103],48:[2,103],49:[2,103],50:[2,103],56:[2,103],57:[2,103],58:[2,103],59:[2,103],60:[2,103],62:[2,103],67:[2,103],68:[2,103],70:[2,103],72:[2,103],75:[2,103],77:[2,103],79:[2,103],80:[2,103],81:[2,103]},{23:[1,213]},{5:[2,107],14:[2,107],16:[2,107],17:[2,107],19:[2,107],22:[2,107],23:[2,107],25:[2,107],27:[2,107],30:[2,107],36:[2,107],37:[2,107],38:[2,107],39:[2,107],40:[2,107],42:[2,107],43:[2,107],44:[2,107],46:[2,107],47:[2,107],48:[2,107],49:[2,107],50:[2,107],56:[2,107],57:[2,107],58:[2,107],59:[2,107],60:[2,107],62:[2,107],67:[2,107],68:[2,107],70:[2,107],72:[2,107],75:[2,107],77:[2,107],79:[2,107],80:[2,107],81:[2,107]},{23:[1,214]},{14:[1,215]},{14:[1,163],18:162,36:[1,56],37:[1,57],38:[1,58],39:[1,59],72:[2,82]},{16:[2,84],72:[2,84]},{16:[2,86],72:[2,86]},{16:[2,38],72:[2,38],75:[2,38]},{50:[1,216]},{5:[2,16]},{5:[2,39],16:[2,39],72:[2,39],75:[2,39]},{16:[2,112],23:[2,112]},{5:[2,90],14:[2,90],16:[2,90],17:[2,90],19:[2,90],22:[2,90],23:[2,90],25:[2,90],27:[2,90],30:[2,90],36:[2,90],37:[2,90],38:[2,90],39:[2,90],40:[2,90],42:[2,90],43:[2,90],44:[2,90],46:[2,90],47:[2,90],48:[2,90],49:[2,90],50:[2,90],56:[2,90],57:[2,90],58:[2,90],59:[2,90],60:[2,90],62:[2,90],67:[2,90],68:[2,90],70:[2,90],72:[2,90],75:[2,90],77:[2,90],79:[2,90],80:[2,90],81:[2,90]},{16:[2,113],23:[2,113]},{5:[2,49],14:[2,49],16:[2,49],17:[2,49],19:[2,49],22:[2,49],23:[2,49],25:[2,49],27:[2,49],30:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],42:[2,49],43:[2,49],44:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],62:[2,49],65:[2,49],67:[2,49],68:[2,49],70:[2,49],72:[2,49],75:[2,49],77:[2,49],79:[2,49],80:[2,49],81:[2,49]},{5:[2,21],16:[2,21]},{5:[2,23],14:[2,23],16:[2,23],17:[2,23],19:[2,23],22:[2,23],23:[2,23],25:[2,23],27:[2,23],30:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],42:[2,23],43:[2,23],44:[2,23],46:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],62:[2,23],67:[2,23],68:[2,23],70:[2,23],72:[2,23],75:[2,23],77:[2,23],79:[2,23],80:[2,23],81:[2,23]},{4:179,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,27],22:[2,27],25:[2,27],42:[2,27],49:[2,27],56:[2,27],58:[2,27],59:[2,27],62:[2,27],65:[2,27],67:[2,27],68:[2,27],70:[2,27],77:[2,27],79:[2,27],80:[2,27],81:[2,27]},{4:217,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:218,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{50:[1,219]},{65:[1,220]},{5:[2,98],14:[2,98],16:[2,98],17:[2,98],19:[2,98],22:[2,98],23:[2,98],25:[2,98],27:[2,98],30:[2,98],36:[2,98],37:[2,98],38:[2,98],39:[2,98],40:[2,98],42:[2,98],43:[2,98],44:[2,98],46:[2,98],47:[2,98],48:[2,98],49:[2,98],50:[2,98],56:[2,98],57:[2,98],58:[2,98],59:[2,98],60:[2,98],62:[2,98],67:[2,98],68:[2,98],70:[2,98],72:[2,98],75:[2,98],77:[2,98],79:[2,98],80:[2,98],81:[2,98]},{5:[2,105],14:[2,105],16:[2,105],17:[2,105],19:[2,105],22:[2,105],23:[2,105],25:[2,105],27:[2,105],30:[2,105],36:[2,105],37:[2,105],38:[2,105],39:[2,105],40:[2,105],42:[2,105],43:[2,105],44:[2,105],46:[2,105],47:[2,105],48:[2,105],49:[2,105],50:[2,105],56:[2,105],57:[2,105],58:[2,105],59:[2,105],60:[2,105],62:[2,105],67:[2,105],68:[2,105],70:[2,105],72:[2,105],75:[2,105],77:[2,105],79:[2,105],80:[2,105],81:[2,105]},{5:[2,109],14:[2,109],16:[2,109],17:[2,109],19:[2,109],22:[2,109],23:[2,109],25:[2,109],27:[2,109],30:[2,109],36:[2,109],37:[2,109],38:[2,109],39:[2,109],40:[2,109],42:[2,109],43:[2,109],44:[2,109],46:[2,109],47:[2,109],48:[2,109],49:[2,109],50:[2,109],56:[2,109],57:[2,109],58:[2,109],59:[2,109],60:[2,109],62:[2,109],67:[2,109],68:[2,109],70:[2,109],72:[2,109],75:[2,109],77:[2,109],79:[2,109],80:[2,109],81:[2,109]},{4:221,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{19:[2,102],22:[2,102],25:[2,102],42:[2,102],46:[2,102],49:[2,102],56:[2,102],58:[2,102],59:[2,102],62:[2,102],65:[2,102],67:[2,102],68:[2,102],70:[2,102],77:[2,102],79:[2,102],80:[2,102],81:[2,102]},{50:[1,222]},{50:[1,223]},{13:71,19:[1,15],22:[1,225],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,41:224,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{50:[2,89]},{50:[1,226]},{5:[2,61],14:[2,61],16:[2,61],17:[2,61],19:[2,61],22:[2,61],23:[2,61],25:[2,61],27:[2,61],30:[2,61],36:[2,61],37:[2,61],38:[2,61],39:[2,61],40:[2,61],42:[2,61],43:[2,61],44:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],62:[2,61],67:[2,61],68:[2,61],70:[2,61],72:[2,61],75:[2,61],77:[2,61],79:[2,61],80:[2,61],81:[2,61]},{5:[2,63],14:[2,63],16:[2,63],17:[2,63],19:[2,63],22:[2,63],23:[2,63],25:[2,63],27:[2,63],30:[2,63],36:[2,63],37:[2,63],38:[2,63],39:[2,63],40:[2,63],42:[2,63],43:[2,63],44:[2,63],46:[2,63],47:[2,63],48:[2,63],49:[2,63],50:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],62:[2,63],67:[2,63],68:[2,63],70:[2,63],72:[2,63],75:[2,63],77:[2,63],79:[2,63],80:[2,63],81:[2,63]},{5:[2,95],13:71,14:[2,95],16:[2,95],17:[2,95],19:[1,15],22:[1,72],23:[2,95],25:[2,95],27:[2,95],30:[2,95],31:33,32:76,36:[2,95],37:[2,95],38:[2,95],39:[2,95],40:[2,95],42:[2,95],43:[1,77],44:[1,78],46:[2,95],47:[2,95],48:[2,95],49:[1,34],50:[2,95],51:28,52:29,53:30,54:31,55:32,56:[1,35],57:[2,95],58:[1,36],59:[1,37],60:[2,95],61:38,62:[1,39],63:40,66:44,67:[1,49],68:[1,50],70:[1,45],72:[2,95],75:[2,95],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{4:227,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{45:228,46:[1,82],47:[1,83],48:[1,84]},{23:[1,229]},{4:230,13:71,19:[1,15],22:[1,72],24:22,25:[1,27],28:23,31:33,32:25,33:24,34:18,35:13,41:16,42:[1,21],49:[1,34],51:28,52:29,53:30,54:31,55:32,56:[1,35],58:[1,36],59:[1,37],61:38,62:[1,39],63:40,64:20,65:[1,26],66:44,67:[1,49],68:[1,50],70:[1,45],76:41,77:[1,46],78:42,79:[1,47],80:[1,48],81:[1,43]},{5:[2,96],14:[2,96],16:[2,96],17:[2,96],19:[2,96],22:[2,96],23:[2,96],25:[2,96],27:[2,96],30:[2,96],36:[2,96],37:[2,96],38:[2,96],39:[2,96],40:[2,96],42:[2,96],43:[2,96],44:[2,96],46:[2,96],47:[2,96],48:[2,96],49:[2,96],50:[2,96],56:[2,96],57:[2,96],58:[2,96],59:[2,96],60:[2,96],62:[2,96],67:[2,96],68:[2,96],70:[2,96],72:[2,96],75:[2,96],77:[2,96],79:[2,96],80:[2,96],81:[2,96]},{5:[2,79],14:[2,79],16:[2,79],17:[2,79],19:[2,79],22:[2,79],23:[2,79],25:[2,79],27:[2,79],30:[2,79],36:[2,79],37:[2,79],38:[2,79],39:[2,79],40:[2,79],42:[2,79],43:[2,79],44:[2,79],46:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],56:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],62:[2,79],67:[2,79],68:[2,79],70:[2,79],72:[2,79],75:[2,79],77:[2,79],79:[2,79],80:[2,79],81:[2,79]}],
defaultActions: {12:[2,12],49:[2,77],50:[2,78],51:[2,1],60:[2,2],61:[2,3],62:[2,4],63:[2,5],64:[2,6],65:[2,7],66:[2,8],69:[2,10],70:[2,114],118:[2,15],119:[2,14],122:[2,9],123:[2,13],166:[2,11],198:[2,16],220:[2,89]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 49
break;
case 2:return 50
break;
case 3:return 'MATH_SHIFT'
break;
case 4:yy_.yytext = this.matches[this.matches.length - 1]; return 46
break;
case 5:yy_.yytext = this.matches[this.matches.length - 1]; return 47
break;
case 6:return 48
break;
case 7:yy_.yytext=Number(this.matches[2]) + Number(this.matches[5]) / Number(this.matches[6]); return 65
break;
case 8:return 65
break;
case 9:return 43
break;
case 10:return 44
break;
case 11:yy_.yytext = this.matches[3]; return 62
break;
case 12:yy_.yytext = this.matches[this.matches.length - 1]; return 80
break;
case 13:return 81
break;
case 14:return 79
break;
case 15:return 58
break;
case 16:return 59
break;
case 17:return 67
break;
case 18:return 68
break;
case 19:return 19
break;
case 20:return 56  /* rely on mathquill */
break;
case 21:return 57 /* for pairing */
break;
case 22:return 42
break;
case 23:return 40
break;
case 24:return 14
break;
case 25:return 17
break;
case 26:return 17
break;
case 27:return "..."
break;
case 28:return 69
break;
case 29:return 60
break;
case 30:return 5
break;
case 31:return 22
break;
case 32:return 23
break;
case 33:return 25
break;
case 34:return 27
break;
case 35:return 70
break;
case 36:return 72
break;
case 37:return 75
break;
case 38:return 38
break;
case 39:return 39
break;
case 40:return 37
break;
case 41:return 36
break;
case 42:return 16
break;
case 43:return 15 
break;
case 44:return 77        /* sin, cos, sinh, ln*/
break;
case 45:yy_.yytext = '\\sign'; return 19
break;
case 46:yy_.yytext = '\\gcd'; return 19
break;
case 47:yy_.yytext = '\\lcm'; return 19
break;
case 48:yy_.yytext = '\\stdevp'; return 19
break;
case 49:yy_.yytext = '\\stdevp'; return 19
break;
case 50:yy_.yytext = '\\stdev'; return 19
break;
case 51:yy_.yytext = '\\stdev'; return 19
break;
case 52:yy_.yytext = '\\var'; return 19
break;
case 53:yy_.yytext = '\\' + this.matches[3] + this.matches[4]; return 19
break;
case 54:return 19          /* Predefined functions, as well as user-defined variables.  Doesn't include subscripts */
break;
case 55:/* skip LINE_START if it's not needed for something else */
break;
case 56:return 'UNRECOGNIZED'
break;
}
};
lexer.rules = [/^(?:(\\space|\\:|\s|\\ )+)/,/^(?:\{)/,/^(?:\})/,/^(?:\$)/,/^(?:\^([0-9]))/,/^(?:\^([a-zA-Z]))/,/^(?:\^)/,/^(?:(([0-9]+)((?:\s|\\space|\\:|\\ )*)\\frac((?:\s|\\space|\\:|\\ )*)\{([0-9]+)\}\{([0-9]+)\}))/,/^(?:[0-9]+(\.[0-9]+)?|(\.[0-9]+))/,/^(?:\*|(\\cdot))/,/^(?:\/)/,/^(?:(\\frac((?:\s|\\space|\\:|\\ )*)\{d\}\{d(((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?))\}))/,/^(?:(\\log)((?:\s|\\space|\\:|\\ )*)*_([0-9]))/,/^(?:(\\ln))/,/^(?:(\\log))/,/^(?:(\\frac))/,/^(?:(\\sqrt))/,/^(?:(\\sum))/,/^(?:(\\prod))/,/^(?:(\\length))/,/^(?:\\left\|)/,/^(?:\\right\|)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:~)/,/^(?:\\sim\b)/,/^(?:\.\.\.)/,/^(?:[_])/,/^(?:!)/,/^(?:$)/,/^(?:(\()|\\left\()/,/^(?:(\))|\\right\))/,/^(?:(\[)|\\left\[)/,/^(?:(\])|\\right\])/,/^(?:(\\\{)|\\left\\\{)/,/^(?:(\\\})|\\right\\\})/,/^(?::)/,/^(?:(\\ge|>=))/,/^(?:(\\le|<=))/,/^(?:(\\gt|>))/,/^(?:(\\lt|<))/,/^(?:,)/,/^(?:(###)(((?:\s|\\space|\\:|\\ )*)(?:((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)|((\\operatorname\{([a-zA-Z]+)\})((_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)))((?:\s|\\space|\\:|\\ )*)(\\left\(|\()((?:\s|\\space|\\:|\\ )*)((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)(((?:\s|\\space|\\:|\\ )*),((?:\s|\\space|\\:|\\ )*)((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)((?:\s|\\space|\\:|\\ )*))*((?:\s|\\space|\\:|\\ )*)(\\right\)|\))((?:\s|\\space|\\:|\\ )*)=))/,/^(?:(\\(arc)?(sin|cos|tan|cot|sec|csc)h?))/,/^(?:(\\signum))/,/^(?:(\\(gcf|mcd)))/,/^(?:(\\mcm))/,/^(?:(\\stdDevP))/,/^(?:(\\stddevp))/,/^(?:(\\stdDev))/,/^(?:(\\stddev))/,/^(?:(\\variance))/,/^(?:((\\operatorname\{([a-zA-Z]+)\})((_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)))/,/^(?:((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?))/,/^(?:(###))/,/^(?:.)/];
lexer.conditions = {"conditional":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
return parser;
});
define('math/policy',['require','graphing/graphmode'],function(require){
  var GRAPHMODE = require('graphing/graphmode');

  var Policy = {
    assignmentForbidden: function(identifier){
      return (
        identifier === 'x' ||
        identifier === 'y' ||
        identifier === 'theta' ||
        identifier.slice(0, 3) === 'tmp'
      );
    },

    validRegressionParameter: function (identifier) {
      return identifier !== 'x' && identifier !== 'y';
    },

    sliderVariables: function (identifiers) {
      if (identifiers.indexOf('theta') !== -1) {
        identifiers = identifiers.filter(function (s) { return s !== 'r'; });
      }
      var self = this;
      return identifiers.filter(function (s) { return !self.assignmentForbidden(s); });
    },

    validLHS: function (identifier) {
      return identifier !== 'theta';
    },

    unplottablePolarFunction: function (head, args) {
      if (head !== 'theta') return false;
      return args.indexOf('r') !== -1;
    },

    validDoubleInequalitySymbol: function (identifier) {
      return identifier === 'x' || identifier === 'y';
    },

    validDoubleInequalityVariables: function (identifiers) {
      if (identifiers.length > 2) return false;
      return identifiers.every(Policy.validDoubleInequalitySymbol);
    },

    validExpressionVariable: function (identifier) {
      return identifier === 'x';
    },

    validSolvedVariable: function (identifier) {
      return identifier === 'x' || identifier === 'y' || identifier === 'r';
    },

    validImplicitVariables: function (identifiers) {
      if (identifiers.length !== 2) return false;
      return (
        (identifiers[0] === 'x' && identifiers[1] === 'y') ||
        (identifiers[0] === 'y' && identifiers[1] === 'x') ||
        (identifiers[0] === 'r' && identifiers[1] === 'theta') ||
        (identifiers[0] === 'theta' && identifiers[1] === 'r')
      );
    },

    graphableListVariables: function (leftSymbol, rightSymbol) {
      return (
        leftSymbol === 'x' ||
        leftSymbol === 'y' ||
        leftSymbol === 'r' ||
        rightSymbol === 'x' ||
        rightSymbol === 'y'
      );
    },

    validParametricVariable: function (identifier) {
      return identifier === 't';
    },

    validParametricVariables: function (identifiers) {
      return identifiers.length === 1 && Policy.validParametricVariable(identifiers[0]);
    },

    validInequalityVariables: function (identifiers) {
      switch (identifiers.length) {
        case 1:
          return identifiers[0] === 'x' || identifiers[0] === 'y' || identifiers[0] === 'r';
        case 2:
          return Policy.validImplicitVariables(identifiers);
        default:
          return false;
      }
    },

    validFirstColumnVariable: function (symbol) {
      return symbol !== 'y' && symbol !== 'r' && symbol !== 'theta' && !symbol.match(/y_(\d+)/);
    },

    complicatedPolarImplicit: function (identifier, order) {
      return identifier === 'theta' || (identifier === 'r' && order !== 1);
    },

    constantGraphMode: function (symbol) {
      if (symbol === 'x') return GRAPHMODE.X;
      if (symbol === 'r') return GRAPHMODE.POLAR;
      return GRAPHMODE.Y;
    },

    graphMode: function (independent, dependent) {
      if (dependent === 'y') return GRAPHMODE.X;
      if (independent === 'x') return GRAPHMODE.X;
      if (independent === 'r' && dependent === 'theta') return GRAPHMODE.POLAR;
      return GRAPHMODE.Y;
    },

    tableableAsConstant: function (identifier) {
      if (identifier === 'x') return false;
      if (identifier === 'r') return false;
      if (identifier === 'theta') return false;
      return true;
    },

    implicitIndependent: function (identifier) {
      return 'x';
    },

    implicitDependency: function (identifier) {
      if(identifier === 'y') return 'x';
      if(identifier === 'theta') return 'r';
      return 'y';
    },

    graphableAsConstant: function (identifier) {
      return identifier === 'y' || identifier === 'x' || identifier === 'r';
    },

    graphableAsBareIdentifier: function (identifier) {
      return identifier === 'x';
    }
  };

  return Policy;
});

var define_enum_constant;
var enum_strings = {};
var debuggable_enums = true;

if(debuggable_enums){
  define_enum_constant = function(s){
    this[s] = s;
  };
}
else{
  var next_enum = 1000;
  define_enum_constant = function(s){
    enum_strings[next_enum] = s;
    this[s] = next_enum++;
  };
}

//Statement types (determined entirely from the root element of the parse tree)
define_enum_constant("EXPRESSION");              //a+1 or 1+1
define_enum_constant("FUNCTION_DEFINITION");     //f(x)=???
define_enum_constant("VARIABLE_DEFINITION");     //a=???
define_enum_constant("ORDERED_PAIR_LIST");     // (?, ?), (?, ?).  Support lists of points, but only single parametrics
define_enum_constant("DOUBLE_INEQUALITY");       // expr < y < expr, shade-between
define_enum_constant("COMPARATOR");       // expr < expr - unsolved inequality
define_enum_constant("CHAINED_COMPARATOR");       // a < ??? - not a conditional as an expression
define_enum_constant("EQUATION");         // expr = expr
define_enum_constant("CONSTANT");
define_enum_constant("IDENTIFIER");
define_enum_constant("LIST");

define("math/enums", function(){});

define('math/parsenode/base',['require','console','pjs','math/policy','math/functions','../enums'],function(require){
  //Parse-nodes are immutable objects
  //Built by the parse tree
  var console = require('console');
  var P = require('pjs');
  var Policy = require('math/policy');
  var Functions = require('math/functions');
  require('../enums');

  return P(function(node, _super, _class) {
    node.init = function() {
      this._dependencies = [];
      this._inputString = '';
      this._exports = [];
    };

    node.exportPenalty = 0;

    //Utility function for generating temporary variables
    var tmpVarCounter = 0; //Singleton used for generating tmp variables in compilation
    node.tmpVar = function () {
      return 'tmp' + tmpVarCounter++;
    };

    /* START OF ADAPTATION CODE */
    node.statementType = EXPRESSION; //TODO - remove this
    node.dependencies = function(){return this.getDependencies()};
    node.evaluateOnce = function(frame){
      if(frame === undefined) frame = {};
      var concreteTree = this.getConcreteTree(frame);
      var evaluationInfo = concreteTree.getEvaluationInfo();
      if(evaluationInfo) return evaluationInfo[0].val;
      return NaN;
    };
    /*END OF ADAPTATION CODE */

    //Track input string (for error messages, etc.)
    node.setInputString = function(s){
      this._inputString = s;
    };

    node.getInputString = function(){
      return this._inputString;
    };

    //Track dependencies and referenced variables
    //Anything that we need to be evaluated after
    //is a dependency (even things like "a" for "f(a) = a"
    //Don't track type of dependencies.  That will be checked dynamically
    //as the parse tree is rolled up
    node.addDependency = function(identifier){
      if(this.dependsOn(identifier)) return;
      this._dependencies.push(identifier);
    };

    node.addDependencies = function(identifiers){
      for(var i = 0; i < identifiers.length; i++){
        this.addDependency(identifiers[i]);
      }
    };

    node.getDependencies = function(){
      return (this._dependencies);
    };

    node.removeDependency = function(identifier){
      this._dependencies.splice(this._dependencies.indexOf(identifier), 1);
    };

    node.dependsOn = function(identifier) {
      return (this._dependencies.indexOf(identifier) > -1);
    };

    //Track which symbols we export definitions for
    node.getExports = function(){
      return this._exports;
    };

    node.exportsSymbol = function (symbol) {
      return this._exports.indexOf(symbol) > -1;
    };

    node.exportTo = function (concrete, frame) {
      var exports = this.getExports();
      if (exports.length === 0) return;
      if (exports.length > 1) {
        throw new Error("exportsTo unimplemented for nodes that define multiple symbols.");
      }

      var symbol = exports[0];
      if (Policy.assignmentForbidden(symbol)) return;
      if (frame[symbol]) return;

      // The concrete tree might be an error that blocks exporting the symbol.
      // In this case, export the error instead.
      frame[symbol] = concrete.blocksExport ? concrete : this;
    };

    node.getOperator = function () {
      return this.operator || '=';
    };

    node.isInequality = function () { return false; };

    node.isShadeBetween = function () {
      return false;
    };

    node.getAllIds = function () {
      return this.userData ? [this.userData.id] : [];
    };

    //Default to falsy evaluationInfo
    node.getEvaluationInfo = function(){
      return false;
    };

    //Default to falsy sliderInfo
    node.getSliderInfo = function(){
      return false;
    };

    node.getSliderVariables = function (concrete) {
      return Policy.sliderVariables(concrete.getDependencies());
    };

    //Default to not accepting in implicit function calls (e.g. "sin x")
    node.okForImplicitFunction = function(){
      return false;
    };

    node.getConcreteTree = function(frame){
      console.log("Warning - default empty version of getConcreteTree being called");
      return this;
    };

    node.tryGetConcreteTree = function () {
      var concrete;
      try {
        concrete = this.getConcreteTree.apply(this, arguments);
      } catch (e) {
        if (e instanceof _class) { //only catch ErrorNodes
          concrete = e;
        } else {
          throw e; //Re-throw
        }
      }
      return concrete;
    };

    //Function compilation helpers
    //TODO - put this compilation functionality somewhere more general
    node.getCompiledFunctions = function (args) {
      var strings = this.getEvalStrings();
      var source = strings.statements.join(';') + ';return ' + strings.expression;

      if (args === undefined) {
        args = this.getDependencies();

        // By convention, 'x' always comes first in the argument list
        var i = args.indexOf('x');
        if (i !== -1) {
          var tmp = args[0];
          args[0] = args[i];
          args[i] = tmp;
        }
      }

      return [{
        args: args,
        source: source,
        fn: Functions.closureFunctionWithBuiltIn(args, source)
      }];
    };

    node.getCompiledDerivatives = function () {
      var dependencies = this.getDependencies();
      var derivative = this.takeDerivative(dependencies[0] || 'x');
      return derivative.getCompiledFunctions();
    };
  });
});

define('lib/worker-i18n',['require','underscore'],function (require) {
  var _ = require('underscore');
  //in the worker, we don't want the real i18n. But we do want:
  // * a familiar API
  // * for the i18n parser to be able to go through and find strings to push to crowdin
  //
  // this function only has the 't' method, and it just turns the whole ordeal into
  // a single JSON.stringified string that can be unpacked and translated outside of the worker.

  var packString = function (message, variables) {
    if (!variables || _.size(variables) === 0) return message;
    return JSON.stringify({
      msg: message,
      vars: variables
    });
  };

  return {
    t: packString
  };
});

define('math/parsenode/error',['require','pjs','./base'],function(require){
  var P = require('pjs');
  var ParseNode = require('./base');
  return P(ParseNode, function(node, _super){
    node.init = function(msg) {
      _super.init.call(this);
      this._msg = msg;
      this._sliderVariables = [];
      this.blocksExport = true;
    };

    node.evaluateOnce = function(frame){
      return this._msg;
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this;
    };

    node.isError = true;

    node.getError = function(){
      return this._msg;
    };

    node.setDependencies = function (symbols) {
      this._dependencies = symbols;
      return this;
    };

    node.allowExport = function () {
      this.blocksExport = false;
      return this;
    };
  });
});

define('graphing/label',['math/builtin', 'math/distance'], function (BuiltIn, Distance) {
// Returns a label for a point with an appropriate number of decimals for the
// given scale. Scale is typically chosen to be the range of numbers displayed
// in the current viewport. Rounds to pi fractions when the denominator is 24
// or less, according to a tolerance that depends on x and scale.
//
// Label is returned as on object with the string representation given by
// label.string, and represented value label.value, which is equal to x when
// the string is a decimal representation, and equal to n*Math.PI/d for pi
// fractions. This is used for checking if a labeled value is actually a hole
// in the function.
function value(x, scale) {

  if (isNaN(x)) return { string: 'undefined', value: x };

  if (x === 0) return { string: '0', value: x };

  if (!scale) scale = x;

  var piFraction = BuiltIn.toFraction(x/Math.PI, 24);
  var nString;
  var dString;

  if (
    fewDigits(scale) &&
    Distance.approx(piFraction.n/piFraction.d*Math.PI, x, 3)
  ) {
    if (piFraction.n === 0) {
      nString = "0";
    } else if (piFraction.n === 1) {
      nString = "π";
    } else if (piFraction.n === -1) {
      nString = "-π";
    } else {
      nString = piFraction.n.toString() + "π";
    }

    if (piFraction.d === 1) {
      dString = "";
    } else {
      dString = "/" + piFraction.d.toString();
    }

    return {
      string: nString + dString,
      value: piFraction.n/piFraction.d*Math.PI
    };
  }

  var mantissa, superscript, string;
  if (fewDigits(scale)) {
    string = nukeNegativeZero(stripZeros(x.toFixed(decimalsFromScale(scale))));
    superscript = null;
    mantissa = null;
  } else {
    var parts = stripExponentialZeros(x.toExponential(decimalsFromScale(scale/x))).split('e');
    mantissa = parts[0] + '\u00d7' + '10';
    superscript = parts[1].replace('+', '');
    string = stripExponentialZeros(x.toExponential(decimalsFromScale(scale/x))).replace('+', '');
  }

  return { string: string, mantissa: mantissa, superscript: superscript, value: parseFloat(string) };
}

// x and f(value(x).value), returning the results as two strings. Useful
// because the function may have a hole at value(x).value.
function point(x, xscale, yscale, fn) {
  var xlabel = value(x, xscale);
  var ylabel = value(fn(xlabel.value), yscale);
  return [xlabel, ylabel];
}

// Strip trailing zeros from a string representation of a decimal.
var trailingZerosRegex = /\.?0+$/;
function stripZeros(string) {
  if (string.indexOf('.') === -1) return string;
  return string.replace(trailingZerosRegex, '');
}

var exponentialTrailingZerosRegex = /\.?0+e/;
function stripExponentialZeros(string) {
  return string.replace(exponentialTrailingZerosRegex, 'e');
}

function nukeNegativeZero(string) {
  return string === '-0' ? '0' : string;
}

function fewDigits(x) {
  x = Math.abs(x);
  return 1e-4 < x && x < 1e7;
}

// Returns integer number of decimals to show given scale of numbers to be
// represented.
function decimalsFromScale(scale) {
  scale = Math.abs(scale);
  scale = Math.max(scale, 1e-16);
  return Math.max(0, Math.floor(4.5 - Math.log(scale)/Math.LN10));
}

function htmlSciNote(string) {
  string = stripExponentialZeros(string);
  return string.replace(/([\d\.\-]+)e\+?([\d\-]+)/, "$1<span class='dcg-cross'>×</span>10<sup>$2</sup>");
}

function latexSciNote(string) {
  string = stripExponentialZeros(string);
  return string.replace(/([\d\.\-]+)e\+?([\d\-]+)/, "$1\\times10^{$2}");
}

var symbolTable = {
  'pi': 'π',
  'tau': 'τ',
  'theta': 'θ',
  'phi': 'ϕ'
};

function formatSymbol(symbol) {
  return symbolTable.hasOwnProperty(symbol) ? symbolTable[symbol] : symbol;
}

function identifierToLatex (symbol) {
  var pieces = symbol.split('_');
  var out = '';
  if (pieces[0].length > 1) out += '\\';
  out += pieces[0];
  if (pieces[1]) {
    if (pieces[1].length === 1) {
      out += '_' + pieces[1];
    } else {
      out += '_{' + pieces[1] + '}';
    }
  }
  return out;
}

function identifierToHTML (symbol) {
  var pieces = symbol.split('_').map(formatSymbol);
  var out = pieces[0];
  if (pieces[1]) out += '<sub>' + pieces[1] + '</sub>';
  return out;
}

function latexToIdentifier (symbol) {
  return symbol.replace(/[{}\\]/g, '');
}

return {
  stripZeros: stripZeros,
  htmlSciNote: htmlSciNote,
  latexSciNote: latexSciNote,
  value: value,
  point: point,
  formatSymbol: formatSymbol,
  identifierToLatex: identifierToLatex,
  latexToIdentifier: latexToIdentifier,
  identifierToHTML: identifierToHTML
};

});

// NOTE, this file is an exception to our usual style guide.
//
// It uses double quoted strings to avoid escaping a lot of single quotes, and it uses long lines
// because our i18n parser requires translation strings to be literals that appear on the same line
// as the `i18n.t(` function invocation.
define('math/errormsg',['require','lib/worker-i18n','math/parsenode/error','graphing/label','math/policy'],function(require){
  /*jshint maxlen:200*/

  var i18n = require('lib/worker-i18n');
  var ErrorNode = require('math/parsenode/error');
  var Label = require('graphing/label');
  var Policy = require('math/policy');

  return {
    parseError: function () {
      return ErrorNode(i18n.t("Sorry, I don't understand this."));
    },

    deeplyNested: function () {
      return ErrorNode(i18n.t("Definitions are nested too deeply."));
    },

    wrongArity: function(symbol, arity, providedArity){
      symbol = Label.formatSymbol(symbol);
      var msg, supplement;
      if(arity === 1){

        supplement = i18n.t("For example, try typing: __dependency__(x).", {
          dependency: symbol
        });

        if(providedArity > 1){ //requires 1 vs require an
          msg = i18n.t("Function '__dependency__' requires only 1 argument. __supplement__", {
            dependency: symbol,
            supplement: supplement
          });
        } else {
          msg = i18n.t("Function '__dependency__' requires an argument. __supplement__", {
            dependency: symbol,
            supplement: supplement
          });
        }
      } else {
        var args = [];
        //construct an example of using the function
        for (var j = 0 ; j < arity ; j++) {args[j] = j+1; }
        var recommendation = Label.formatSymbol(symbol) + "(" + args.join(", ") + ")";

        supplement = i18n.t("For example, try typing: __recommendation__.", {
          recommendation: recommendation
        });

        msg = i18n.t("Function '__dependency__' requires __assignment_arity__ arguments. __supplement__", {
          dependency: symbol,
          assignment_arity: arity,
          supplement: supplement
        });
      }
      return ErrorNode(msg);
    },

    wrongParametrizedReducerArity: function (symbol) {
      return ErrorNode(i18n.t("Function '__symbol__' requires 2 arguments. For example, try typing: __recommendation__.", {
        symbol: Label.formatSymbol(symbol),
        recommendation: Label.formatSymbol(symbol) + "([1,2,3], 1)"
      }));
    },

    wrongDoubleReducerArity: function (symbol) {
      return ErrorNode(i18n.t("Function '__symbol__' requires 2 arguments. For example, try typing: __recommendation__.", {
        symbol: Label.formatSymbol(symbol),
        recommendation: Label.formatSymbol(symbol) + "([1,2,3], [3,2,1])"
      }));
    },

    zeroArgReducer: function(symbol){
      return ErrorNode(i18n.t("Function '__symbol__' requires at least one argument. For example, try typing: __symbol__(1, 2).", {
        symbol: Label.formatSymbol(symbol)
      }));
    },

    missingRHS: function (symbol) {
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("What do you want '__symbol__' to equal?", {
        symbol: symbol
      }));
    },

    malformedPoint: function () {
      return ErrorNode(i18n.t("Points are written like this: (1, 2)."));
    },

    badImplicitMultiply: function (symbol) {
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("Use parentheses around the argument of '__symbol__'.", {
        symbol: symbol
      }));
    },

    badTrigExponent: function (prefix) {
      var form1 = prefix + '^2';
      var form2 = prefix + '^-1';
      return ErrorNode(i18n.t("Only __form1__ and __form2__ are supported. Otherwise, use parens.", {
        form1: form1,
        form2: form2
      }));
    },

    badLogExponent: function (prefix) {
      var form = prefix + '^2';
      return ErrorNode(i18n.t("Only __form__ is supported. Otherwise, use parens.", {
        form: form
      }));
    },

    blankExpression: function () {
      return ErrorNode(i18n.t("You haven't written anything yet."));
    },

    functionNotDefined: function(symbol){
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("Function '__dependency__' is not defined.", {
        dependency: symbol
      }));
    },

    parameterAlreadyDefined: function(symbol){
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("You can't use '__dependency__' as a parameter of this function because '__dependency__' is already defined.", {
        dependency: symbol
      }));
    },

    cannotRedefine: function(symbol){
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("You can't redefine '__symbol__' because it's already defined.", {
        symbol: symbol
      }));
    },

    multiplyDefined: function (symbol) {
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("You've defined '__dependency__' in more than one place. Try picking a different variable, or deleting some of the definitions of '__dependency__'.", {
        dependency: symbol
      }));
    },

    shadowedIndex: function (symbol) {
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("You can't use '__symbol__' as an index because it's already defined.", {
        symbol: symbol
      }));
    },

    cycle: function (symbols) {
      symbols = symbols.map(Label.formatSymbol);

      var lastSymbol = symbols.pop();

      return ErrorNode(i18n.t("'__symbols__' and '__lastSymbol__' can't be defined in terms of each other.", {
        symbols: symbols.join("', '"), lastSymbol: lastSymbol
      }));
    },

    tooManyVariables: function (symbols) {
      symbols = symbols.map(Label.formatSymbol);

      if (symbols.length === 0) {
        return ErrorNode(i18n.t("Too many variables, I don't know what to do with this."));
      }

      var lastSymbol = symbols.pop();

      return ErrorNode(i18n.t("Too many variables. Try defining '__variables__'.", {
        variables: (symbols.length ? symbols.join("', '") + "' or '" : "") + lastSymbol
      }));
    },

    addArgumentsToDefinition: function (symbols, head, args) {
      symbols = symbols.map(Label.formatSymbol);
      head = Label.formatSymbol(head);
      args = args.map(Label.formatSymbol);

      var newSignature = head + '(' + args.join(',') + ',' + symbols.join(',') + ')';
      var lastSymbol = symbols.pop();

      var interpolants = {
        symbols: symbols.join("', '"),
        lastSymbol: lastSymbol,
        newSignature: newSignature
      };

      if (symbols.length) {
        return ErrorNode(i18n.t("Try including '__symbols__' and '__lastSymbol__' as arguments by defining the function as '__newSignature__'.",
          interpolants
        ));
      } else {
        return ErrorNode(i18n.t("Try including '__lastSymbol__' as an argument by defining the function as '__newSignature__'.",
          interpolants
        ));
      }
    },

    invalidLHS: function (symbol) {
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("Sorry, you can't graph __symbol__ as a function of anything yet.", {
        symbol: symbol
      }));
    },

    unplottablePolarFunction: function () {
      return ErrorNode(i18n.t("We can't plot θ as a function of r. Try plotting r(θ) instead."));
    },

    invalidInequalityVariables: function () {
      return ErrorNode(i18n.t('We only plot inequalities of x and y, or r and θ.'));
    },

    invalidImplicitVariables: function () {
      return ErrorNode(i18n.t("We only support implicit equations of x and y."));
    },

    unsolvable: function () {
      return ErrorNode(i18n.t("We don't solve complicated single-variable equations yet."));
    },

    singleVariableListSolve: function () {
      return ErrorNode(i18n.t("We don't solve single-variable equations involving lists yet."));
    },

    complicatedImplicitInequality: function () {
      return ErrorNode(i18n.t("We can only plot inequalities when one variable is quadratic or linear."));
    },

    complicatedPolarImplicit: function () {
      return ErrorNode(i18n.t("Polar equations must be linear in r."));
    },

    invalidDoubleInequalityVariables: function () {
      return ErrorNode(i18n.t('We only plot double inequalities of x and y.'));
    },

    mismatchedDoubleInequality: function () {
      return ErrorNode(i18n.t("Double inequalities must both go the same way, e.g. 1 < y < 2."));
    },

    complicatedDoubleInequality: function () {
      return ErrorNode(i18n.t("We only support solved double inequalities. Try deleting one side of the inequality."));
    },

    equationRequired: function (symbol) {
      if (symbol) {
        return ErrorNode(i18n.t("Try adding '__lhs__' to the beginning of this equation.", {
          lhs: Policy.implicitDependency(symbol) + "="
        }));
      } else {
        return ErrorNode(i18n.t("Try adding an equals sign to turn this into an equation."));
      }
    },

    variableAsFunction: function(symbol){
      symbol = Label.formatSymbol(symbol);
      return ErrorNode(i18n.t("Variable '__dependency__' can't be used as a function.", {
        dependency: symbol
      }));
    },

    nestedList: function () {
      return ErrorNode(i18n.t("Nested lists are not allowed."));
    },

    invalidTableHeader: function (supplement) {
      return ErrorNode(i18n.t("Table headers must be simple expressions. __supplement__", {
        supplement: supplement
      }));
    },

    invalidTableEntry: function (supplement) {
      return ErrorNode(i18n.t("Table entries must be simple expressions. __supplement__", {
        supplement: supplement
      }));
    },

    invalidFirstTableColumn: function () {
      return ErrorNode(i18n.t("First column may not be __most__ or __last__.", {
        most: "'y', 'r',",
        last: "'θ'"
      }));
    },

    invalidDependentFirstTableColumn: function () {
      return ErrorNode(i18n.t("This column header can't be defined elsewhere in the calculator."));
    },

    invalidRegressionParameter: function (symbol) {
      return ErrorNode(i18n.t("'__symbol__' may not be used as a regression parameter.", {
        symbol: Label.formatSymbol(symbol)
      }));
    },

    optimizationError: function () {
      return ErrorNode(i18n.t("Failed to find regression coefficients."));
    },

    nonListRegression: function () {
      return ErrorNode(i18n.t("Regressions must contain at least one list of data."));
    },

    badListInReducer: function (symbol) {
      return ErrorNode(i18n.t("When __symbol__ is called with more than two arguments, no argument can be a list.", {
        symbol: Label.formatSymbol(symbol)
      }));
    },

    nonListDoubleReducer: function (symbol) {
      return ErrorNode(i18n.t("Both arguments of '__symbol__' must be lists. For example, try typing: __recommendation__.", {
        symbol: Label.formatSymbol(symbol),
        recommendation: Label.formatSymbol(symbol) + "([1,2,3], [3,2,1])"
      }));
    },

    nonListParametrizedReducer: function (symbol) {
      return ErrorNode(i18n.t("The first argument of '__symbol__' must be a list. For example, try typing: __recommendation__.", {
        symbol: Label.formatSymbol(symbol),
        recommendation: Label.formatSymbol(symbol) + "([1,2,3], 1)"
      }));
    },

    indexIntoNonList: function () {
      return ErrorNode(i18n.t("Cannot index into something that is not a list."));
    },

    listAsIndex: function () {
      return ErrorNode(i18n.t("List index must not be a list."));
    },

    variableRange: function (symbols) {
      return ErrorNode(i18n.t("Range cannot depend on free variable '__symbol__'.", {
        symbol: Label.formatSymbol(symbols[0])
      }));
    },

    nonArithmeticRange: function (symbols) {
      return ErrorNode(i18n.t("Ranges must be arithmetic sequences."));
    }
  };
});

define('math/parsenode/expression',['require','pjs','./base','math/errormsg'],function(require){
  //Expression parse-nodes have an output value
  //And can exist within an expression tree
  //This includes constants, variables, math operators, and functions
  //This does not include function calls, inequalities,
  //or variable definitions
  var P = require('pjs');
  var ParseNode = require('./base');
  var ErrorMsg = require('math/errormsg');

  return P(ParseNode, function(node, _super) {
    node.init = function(args) {
      if (!Array.isArray(args)) {
        throw new TypeError('Argument to expression constructor must be an Array.');
      }

      _super.init.call(this);
      this.args = args;
      this.registerDependencies();
      this.computeTreeSize();
    };

    //By default, we depend on all of our args
    node.registerDependencies = function(){
      for(var i = 0; i < this.args.length; i++){
        this.addDependencies(this.args[i].getDependencies());
      }
    };

    node.computeTreeSize = function () {
      var treeSize = 0;
      for (var i = 0; i < this.args.length; i++) {
        if (this.args[i].treeSize) treeSize += this.args[i].treeSize;
      }
      this.treeSize = treeSize + 1;
      if (treeSize > 1e4) throw ErrorMsg.deeplyNested();
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var concreteArgs = [];
      for(var i = 0; i < this.args.length; i++){
        concreteArgs.push(this.args[i].getConcreteTree(frame, overrides));
      }
      return this.copyWithArgs(concreteArgs);
    };

    //Default behavior.
    //Some nodes need to over-ride, since they have additional configuration beyond args
    node.copyWithArgs = function(args){
      return new this.constructor(args);
    };

  });
});

define('math/parsenode/constant',['require','pjs','./base'],function(require){
  var P = require('pjs');
  var ParseNode = require('./base');

  return P(ParseNode, function(node, _super) {
    node.init = function(value){
      _super.init.call(this, []);
      this.constantValue = value;
    };

    node.isConstant = true;

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this;
    };

    node.getEvalStrings = function(){
      return {
        statements: [],
        expression: this.scalarExprString()
      };
    };

    node.scalarExprString = function(){
      if(this.constantValue > 0) return String(this.constantValue);
      return '(' + String(this.constantValue) + ')';
    };

    node.getEvaluationInfo = function(){
      return [{val: this.constantValue, operator: '='}];
    };

    node.okForImplicitFunction = function(){
      return true;
    };
  });
});

define('math/parsenode/list',['require','pjs','./expression','./constant','math/errormsg'],function(require){
  var P = require('pjs');
  var Expression = require('./expression');
  var Constant = require('./constant');
  var ErrorMsg = require('math/errormsg');

  return P(Expression, function(node, _super, _class) {
    node.init = function(elements){
      _super.init.call(this, elements);
      this.length = elements.length;
    };

    node.isList = true;

    node.elementAt = function(i){
      i = Math.floor(i);
      if (i >= 0 && i < this.args.length) return this.args[i];
      return Constant(NaN);
    };

    node.getEvalStrings = function(){
      var retVal = [];
      for(var i = 0; i < this.args.length; i++){
        retVal.push(this.args[i].getEvalStrings());
      }
      return retVal;
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var concreteElements = [];
      for(var i = 0; i < this.args.length; i++){
        var concreteElement = this.args[i].getConcreteTree(frame, overrides);
        if (concreteElement.isList) throw ErrorMsg.nestedList();
        concreteElements.push(concreteElement);
      }
      return new this.constructor(concreteElements);
    };

    node.getEvaluationInfo = function(){
      /*If we're a list of constants, we're evaluable*/
      if(this.args.every(function(a){return a.isConstant})){
        return [{val: this.args.map(function(a){return a.constantValue}), operator: '='}];
      }
    };

    node.getCompiledFunctions = function (args) {
      return this.args.map(function (a) { return a.getCompiledFunctions(args)[0]; });
    };

    // Length of longest list in args. Returns Infinity if there are no lists
    // in args.
    function _listLength (args) {
      var length = Infinity;
      for (var i = 0; i < args.length; i++) {
        if (args[i].isList) length = Math.min(length, args[i].length);
      }
      return length;
    }

    _class.eachArgs = function (args, fn) {
      var length = _listLength(args);

      if (!isFinite(length)) {
        fn(args);
        return;
      }

      for (var i = 0; i < length; i++) {
        var elts = [];
        for (var j = 0; j < args.length; j++) {
          elts.push(args[j].isList ? args[j].elementAt(i) : args[j]);
        }
        fn(elts);
      }
    };

    _class.mapArgs = function (args, fn) {
      var length = _listLength(args);

      if (!isFinite(length)) return [fn(args)];

      var accum = [];
      for (var i = 0; i < length; i++) {
        var elts = [];
        for (var j = 0; j < args.length; j++) {
          elts.push(args[j].isList ? args[j].elementAt(i) : args[j]);
        }
        accum.push(fn(elts));
      }
      return accum;
    };
  });
});

define('math/parsenode/scalarexpression',['require','pjs','./expression','./constant','./list'],function(require){
  var P = require('pjs');
  var ExpressionNode = require('./expression');
  var Constant = require('./constant');
  var List = require('./list');

  //This represents expressions which follow the standard broadcast pattern
  //for all of their arguments (scalar if all arguments are scalar, otherwise
  //a list with length equal to the minimum length of their list arguments).
  //
  //On getConcreteTree, this will bubble any list arguments up above itself,
  //to convert an operation on lists to a list of operations on scalars

  return P(ExpressionNode, function(node, _super) {
    node.init = function(args) {
      _super.init.call(this, args);
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      //Return a tree which supports frame-based operations like
      //computing polynomialOrder, compiling, type checks, etc.
      //
      //This operation will descend into function calls,
      //substitute variables, and collapse constants
      //
      //This operation will also perform the broadcast logic
      //to map an operation over lists into a list of scalar
      //operation trees.
      //
      //Default operation is to ignore the frame, and generate
      //an identical node but with concrete children
      var i;

      var concreteArgs = [];
      var anyIsList = false;
      for (i = 0; i < this.args.length; i++) {
        var concreteArg = this.args[i].getConcreteTree(frame, overrides);
        if (concreteArg.isList) anyIsList = true;
        concreteArgs.push(concreteArg);
      }

      if (!anyIsList) return this._constantCollapsedCopy(concreteArgs, frame);

      var self = this;
      var elements = List.mapArgs(concreteArgs, function (args) {
        return self._constantCollapsedCopy(args, frame);
      });
      return List(elements);
    };

    node._constantCollapsedCopy = function(args){
      var constantArgs = [];
      for(var i = 0; i < args.length; i++){
        if(!args[i].isConstant) //Not constant - just copy
          return this.copyWithArgs(args);
        constantArgs.push(args[i].constantValue);
      }
      return Constant(this.evaluate(constantArgs)); //Everything was a constant.  Evaluate and return
    };

    node.getEvalStrings = function(){
      //Only works when frame has been baked into the tree, so
      //that lists are guaranteed to be above us or below
      //reducers, and we don't have to deal with them
      //Default implementation:
      //Calls getEvalStrings on each argument
      //Prepends statements, and replaces expression
      //using scalarEvalExpression()
      var statements = [];
      var argExpressions = [];
      for(var i = 0; i < this.args.length; i++){
        var evalStrings = this.args[i].getEvalStrings();
        statements = statements.concat(evalStrings.statements);
        argExpressions.push(evalStrings.expression);
      }
      return {statements: statements, expression: this.scalarEvalExpression(argExpressions)};
    };

  });
});

define('math/parsenode/expressionTypes',['require','pjs','./scalarexpression'],function(require){
  var P = require('pjs');
  var ScalarExpression = require('./scalarexpression');

  return {
    Add: P(ScalarExpression, {}),
    Subtract: P(ScalarExpression, {}),
    Multiply: P(ScalarExpression, {}),
    Divide: P(ScalarExpression, {}),
    Exponent: P(ScalarExpression, {}),
    Negative: P(ScalarExpression, {}),
    And: P(ScalarExpression, {
      isInequality: function () { return this.args[0].isInequality() && this.args[1].isInequality(); }
    })
  };
});

define('math/parsenode/freevariable',['require','pjs','./scalarexpression'],function(require){
  var P = require('pjs');
  var Parent = require('./scalarexpression');

  //Only meant to exist after a call to getConcreteTree
  //This is what an identifier that is not defined in the frame becomes

  return P(Parent, function(node, _super){
    node.init = function(symbol){
      _super.init.call(this, []);
      this.addDependency(symbol);
      this._symbol = symbol;
    };

    node.isFreeVariable = true;

    node.scalarEvalExpression = function(argExpressions) {
      return this._symbol;
    };

    node.copyWithArgs = function(args){
      return this;
    };

    node._constantCollapsedCopy = function(args){
      return this;
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this;
    };

  });
});

define('math/parsenode/identifier',['require','pjs','./expression','./freevariable','graphing/label'],function(require){
  var P = require('pjs');
  var Parent = require('./expression');
  var FreeVariable = require('./freevariable');
  var Label = require('graphing/label');

  return P(Parent, function(node, _super, _class) {
    node.init = function(symbol){
      _super.init.call(this, []);
      this._symbol = Label.latexToIdentifier(symbol);
      this.addDependency(this._symbol);
    };

    node.evaluate = function(){throw ("Cannot evaluate undefined variable " + this._symbol)};

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      //If tree is defined in frame, return concrete version of that
      var tree = frame[this._symbol];
      if (tree) {
        if (tree.isError) throw tree;
        if (tree.isFunction) return tree.getConcreteInvocationTree(frame, [], overrides);
        return tree.getConcreteTree(frame, overrides);
      }
      //Otherwise, we're a free variable
      return FreeVariable(this._symbol);
    };

    node.okForImplicitFunction = function(){
      return true;
    };
  });
});

define('math/parsenode/dummyindex',['require','pjs','./freevariable'],function(require){
  var P = require('pjs');
  var Parent = require('./freevariable');

  // Only meant to exist after a call to getConcreteTree
  // This is what the index symbol of a repeated operator becomes. It's main purpose
  // is to express the fact that the concrete tree no longer depends on external
  // values of that variable.

  return P(Parent, function (node, _super) {
    node.init = function () {
      _super.init.apply(this, arguments);
    };
  });
});

define('math/parsenode/range',['require','pjs','./expression','math/errormsg','./list','./constant','math/distance'],function(require){
  var P = require('pjs');
  var Parent = require('./expression');
  var ErrorMsg = require('math/errormsg');
  var List = require('./list');
  var Constant = require('./constant');
  var Distance = require('math/distance');

  return P(Parent, function(node, _super, _class) {
    node.init = function (args) {
      _super.init.call(this, args);
      this.beginning = args[0];
      this.end = args[1];
    };

    function _checkVal (concreteBeginning, concreteEnd, i, nsteps, val) {
      if (i < concreteBeginning.length) {
        if (!Distance.approx(val, concreteBeginning.elementAt(i).constantValue, 10)) {
          throw ErrorMsg.nonArithmeticRange();
        }
      }
      // Note, puprosely don't check actual end value
      if (nsteps - i <= concreteEnd.length && nsteps - i > 1) {
        if (!Distance.approx(val, concreteEnd.elementAt(concreteEnd.length - nsteps + i).constantValue, 10)) {
          throw ErrorMsg.nonArithmeticRange();
        }
      }
    }

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var concreteBeginning = this.beginning.getConcreteTree(frame, overrides);
      var concreteEnd = this.end.getConcreteTree(frame, overrides);

      if (concreteBeginning.getDependencies().length) {
        throw ErrorMsg.variableRange(concreteBeginning.getDependencies());
      }
      if (concreteEnd.getDependencies().length) {
        throw ErrorMsg.variableRange(concreteEnd.getDependencies());
      }
      if (!concreteBeginning.isList || !concreteEnd.isList) {
        throw new Error("Programming Error: range bounds must be List nodes.");
      }

      var start = concreteBeginning.elementAt(0).constantValue;
      var end = concreteEnd.elementAt(concreteEnd.length - 1).constantValue;
      var diff = end - start;
      var step;
      if (concreteBeginning.length === 1) {
        step = diff >= 0 ? 1 : -1;
      } else {
        step = concreteBeginning.elementAt(1).constantValue - start;
      }
      var nsteps = Math.round(diff/step) + 1;
      if (!isFinite(nsteps) || nsteps < concreteBeginning.length || nsteps < concreteEnd.length) {
        throw ErrorMsg.nonArithmeticRange();
      }

      var accum = [Constant(start)];

      for (var i = 1; i < nsteps; i++) {
        // Barrycentric interpolation is the best way to
        // hit start and end exactly, and get good values
        // in the middle
        var val = start + i*step;
        _checkVal(concreteBeginning, concreteEnd, i, nsteps, val);
        accum.push(Constant(val));
      }

      return List(accum);
    };
  });
});

define('math/parsenode/listaccess',['require','pjs','./expression','math/errormsg'],function(require){
  var P = require('pjs');
  var Super = require('./expression');
  var ErrorMsg = require('math/errormsg');

  return P(Super, function(node, _super) {
    node.init = function(args){
      _super.init.call(this, args);
      this.list = args[0];
      this.index = args[1];
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var concreteIndex = this.index.getConcreteTree(frame, overrides);
      if (concreteIndex.isList) throw ErrorMsg.listAsIndex();
      if (concreteIndex.isConstant) {
        //Convert from 1-index user-visible math to 0-indexed internal math
        //TODO - could be more efficient, and only make that list element concrete
        //but this is hard for examples where the list has to be evaluated or looked up
        var concreteList = this.list.getConcreteTree(frame, overrides);
        if (!concreteList.isList) throw ErrorMsg.indexIntoNonList();
        return concreteList.getConcreteTree(frame, overrides).elementAt(concreteIndex.constantValue - 1);
      }
      return new this.constructor([this.list.getConcreteTree(frame, overrides), concreteIndex]);
    };

    node.getEvalStrings = function(){
      var indexStrings = this.index.getEvalStrings();
      var listStrings = this.list.getEvalStrings();
      var statements = indexStrings.statements.slice(); //Statements required to compute index

      var tmp = this.tmpVar();
      statements.push('var '+tmp);

      var caseStrings = [];
      for(var i = 0; i < listStrings.length; i++){
        caseStrings.push('case '+i+':'+
                        listStrings[i].statements.join(';')+';'+
                        tmp+'='+listStrings[i].expression);
      }
      caseStrings.push('default:'+tmp+'=NaN');
      //Convert from 1-index user-visible math to 0-indexed internal math
      var switchStatement = 'switch(Math.floor('+(indexStrings.expression)+')-1){\n' +
                            caseStrings.join(';break\n') +
                            '\n}';

      statements.push(switchStatement);
      return {statements: statements, expression: tmp};
    };
  });
});

define('math/parsenode/orderedpair',['require','pjs','./expression','./list','math/policy'],function(require){
  var P = require('pjs');
  var Expression = require('./expression');
  var List = require('./list');
  var Policy = require('math/policy');

  return P(Expression, function(node, _super, _class) {
    node.getCompiledFunctions = function (args) {
      return [
        this.args[0].getCompiledFunctions(args)[0],
        this.args[1].getCompiledFunctions(args)[0]
      ];
    };

    node.getSliderVariables = function (concrete) {
      return Policy.sliderVariables(concrete.getDependencies()).filter(function (symbol) {
        return !Policy.validParametricVariable(symbol);
      });
    };

    node.getConcreteTree = function (frame, overrides) {
      var concreteArgs = [];
      for (var i = 0; i < this.args.length; i++) {
        concreteArgs.push(this.args[i].getConcreteTree(frame, overrides));
      }

      return this.copyWithArgs(concreteArgs);
    };

    // nonstandard constructor used by parser to desugar an ordered pair list
    // into a single ordered pair with lists of coordinates, i.e. to desugar
    // (1, 2), (3, 4) into ([1,3], [2,4])
    _class.fromList = function (list) {
      if (list.length === 1) return list[0];
      var xargs = [];
      var yargs = [];
      for (var i = 0; i < list.length; i++) {
        xargs.push(list[i].args[0]);
        yargs.push(list[i].args[1]);
      }
      return _class([List(xargs), List(yargs)]);
    };
  });
});

define('math/parsenode/movablepoint',['require','pjs','./orderedpair'],function(require){
  var P = require('pjs');
  var Parent = require('./orderedpair');

  return P(Parent, function(node, _super) {
    node.init = function (args, moveIds, moveMatrix) {
      _super.init.call(this, args);
      this._moveIds = moveIds;
      this._moveMatrix = moveMatrix;
    };

    node.isMovablePoint = true;
  });
});

//Use this table to get rid of all the string comparisons used to interpret comparators
define('math/comparators',['require'],function(require){

var ComparatorTable = {
   '<': {inclusive: false, direction: -1},
  '!=': {inclusive: false, direction:  0},
   '>': {inclusive: false, direction:  1},
  '<=': {inclusive: true,  direction: -1},
  '=': {inclusive: true,  direction:  0},
  '>=': {inclusive: true,  direction:  1}
};

var getComparator = function(inclusive, direction){
  switch(direction){
    case -1:
      return (inclusive ? '<=' : '<');
    case 0:
      return (inclusive ? '=' : '!=');
    case 1:
      return (inclusive ? '>=' : '>');
    default:
      throw "Programming error.  Comparators must have a direction of -1, 0, or 1";
  }
};

return {
  table: ComparatorTable,
  get: getComparator,
};

});

define('math/parsenode/basecomparator',['require','pjs','./scalarexpression','./expressionTypes','math/comparators','math/functions'],function(require){
  var P = require('pjs');
  var ScalarExpression = require('./scalarexpression');
  var Subtract = require('./expressionTypes').Subtract;
  var comparatorTable = require('math/comparators').table;
  var Functions = require('math/functions');

  return P(ScalarExpression, function (node, _super, _class) {
    // Create concrete Comparator classes by calling BaseComparator.create(operator).
    // This happens in parsenode/comparator.js
    _class.create = function (operator, compiledOperator) {
      compiledOperator = compiledOperator || operator;
      return P(_class, function(node, _super){
        node.operator = operator;
        node.isInequality = function () { return comparatorTable[operator].direction !== 0; };
        node.compiledOperator = compiledOperator;
        node.scalarEvalExpression = function (args) { return args.join(compiledOperator); };

        node.evaluate = Functions.createEvaluateFunction(node.scalarEvalExpression, 2);
      });
    };

    node.init = function (args) {
      _super.init.call(this, args);

      this._difference = comparatorTable[this.operator].direction === -1 ?
        Subtract([args[1], args[0]]) :
        Subtract([args[0], args[1]])
      ;
    };
  });
});

define('math/parsenode/comparator',['require','math/parsenode/basecomparator'],function (require) {
  var BaseComparator = require('math/parsenode/basecomparator');

  return {
    '<': BaseComparator.create('<'),
    '>': BaseComparator.create('>'),
    '<=': BaseComparator.create('<='),
    '>=': BaseComparator.create('>='),
    '=': BaseComparator.create('=', '===')
  };
});

define('math/parsenode/piecewise',['require','pjs','./scalarexpression','./constant'],function (require) {
  var P = require('pjs');
  var Parent = require('./scalarexpression');
  var Constant = require('./constant');

  var Piecewise = P(Parent, {});

  Piecewise.chain = function (args) {
    var next;
    var head = Constant(NaN); //Default if nothing matches
    while (args.length) {
      next = args.pop();
      head = Piecewise([next.condition, next.if_expr, head]);
    }
    return head;
  };

  Piecewise.empty = function () {
    return Piecewise([Constant(true), Constant(1), Constant(NaN)]);
  };

  return Piecewise;
});

define('math/parsenode/doubleinequality',['require','pjs','./base','./identifier','./constant','./piecewise','math/comparators','./comparator'],function(require){
  var P = require('pjs');
  var Parent = require('./base');
  var Identifier = require('./identifier');
  var Constant = require('./constant');
  var Piecewise = require('./piecewise');
  var Comparators = require('math/comparators');
  var Comparator = require('./comparator');

  return P(Parent, function (node, _super) {
    node.init = function (args) {
      _super.init.call(this);
      this._symbol = args[2]._symbol;
      this._operators = [args[1], args[3]];
      this._expressions = [args[0], args[4]];

      var indicatorComparator = Comparators.get(
        Comparators.table[args[1]].inclusive && Comparators.table[args[3]].inclusive,
        Comparators.table[args[1]].direction
      );

      this._indicator = Comparator[indicatorComparator]([args[0], args[4]]);
      this.addDependency(this._symbol);
      this.addDependencies(this._expressions[0].getDependencies());
      this.addDependencies(this._expressions[1].getDependencies());
    };

    node.isInequality = function () { return true; };

    node.isShadeBetween = function () { return true; };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this.constructor.call(this, [
        Piecewise([this._indicator, this._expressions[0], Constant(NaN)]).getConcreteTree(frame, overrides),
        this._operators[0],
        Identifier(this._symbol), // TODO what if _symbol is in the frame?
        this._operators[1],
        Piecewise([this._indicator, this._expressions[1], Constant(NaN)]).getConcreteTree(frame, overrides)
      ]);
    };

    node.getCompiledFunctions = function (args) {
      return [
        this._expressions[0].getCompiledFunctions(args)[0], // TODO handle list expressions
        this._expressions[1].getCompiledFunctions(args)[0]
      ];
    };

    node.getCompiledDerivatives = function () {
      return [
        this._expressions[0].getCompiledDerivatives()[0],
        this._expressions[1].getCompiledDerivatives()[0]
      ];
    };
  });

});

define('math/parsenode/repeatedoperator',['require','pjs','./scalarexpression','./dummyindex','./constant','math/errormsg'],function(require){
  var P = require('pjs');
  var Parent = require('./scalarexpression');
  var DummyIndex = require('./dummyindex');
  var Constant = require('./constant');
  var ErrorMsg = require('math/errormsg');

  return P(Parent, function(node, _super) {
    node.init = function (args) {
      _super.init.call(this, args);
      this._index = args[0];
      // In the raw tree, the index is an Identifier. In the concrete tree, the
      // index is a DummyIndex. Operationally, we need the raw tree to depend
      // on its index so that we know to update the analysis if another
      // expression assigns to that symbol, but we need the concrete tree to
      // not depend on its index so that we correctly calculate whether the
      // the expression is graphable or constant foldable.
      if (this._index instanceof DummyIndex) this.removeDependency(this._index._symbol);
    };

    //Must define starting_value (e.g. 0)
    //Must define in_place_operator (e.g. "+=")
    //Must define evaluateConstant function

    //Always runs in a scalar environment, thanks to inheriting
    //from scalarexpression
    node.getEvalStrings = function(){
      var statements = [];

      var sum = this.tmpVar();
      var index = this._index._symbol;
      var lower_bound = this.tmpVar();
      var upper_bound = this.tmpVar();

      var lower_bound_strings = this.args[1].getEvalStrings();
      var upper_bound_strings = this.args[2].getEvalStrings();
      var summand_strings = this.args[3].getEvalStrings();

      Array.prototype.push.apply(statements, lower_bound_strings.statements);
      statements.push('var '+lower_bound+' = Math.round(' + lower_bound_strings.expression + ')');
      Array.prototype.push.apply(statements, upper_bound_strings.statements);
      statements.push('var '+upper_bound+' = Math.round(' + upper_bound_strings.expression + ')');
      statements.push('var '+sum+'='+this.starting_value);

      var loop = 'for (var '+index+'='+lower_bound+';'+index+'<='+upper_bound+';'+index+'++) {'+
          summand_strings.statements.join(';')+';'+sum+this.in_place_operator+summand_strings.expression+'};';

      var protected_loop = 'if(!isFinite('+upper_bound+'-'+lower_bound+')) {'+
          sum+'=('+upper_bound+'<'+lower_bound+'?'+this.starting_value+':NaN);}else{'+loop+'}';

      statements.push(protected_loop);

      return {statements: statements, expression: sum};
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      if (frame[this._index._symbol]) throw ErrorMsg.shadowedIndex(this._index._symbol);
      var localFrame = Object.create(frame);
      localFrame[this._index._symbol] = DummyIndex(this._index._symbol);
      var concreteTree = _super.getConcreteTree.call(this, localFrame, overrides);
      return concreteTree;
    };

    node.evaluate = function(lowerBound, upperBound, summandExpression){
      //Compile summand as function of loopVariable.
      //TODO - assert that it's not a list by this point
      var fn = summandExpression.getCompiledFunctions([this._index._symbol])[0].fn;
      //We know bounds are constant, otherwise we can't evaluate to a constant
      upperBound = Math.round(upperBound);
      lowerBound = Math.round(lowerBound);

      //Protect against NaNs and Infinities
      if(!isFinite(upperBound - lowerBound)) return (upperBound < lowerBound ? this.starting_value : NaN);

      //Run the loop
      var sum = this.starting_value;
      for(var index = lowerBound; index <= upperBound; index++){
        sum = this.update(sum, fn(index));
      }
      return sum;
    };

    node._constantCollapsedCopy = function(args){
      //Should collapse to constant if summand only depends on index variable
      if(args[1].isConstant && args[2].isConstant){
        var lowerBound = args[1].constantValue;
        var upperBound = args[2].constantValue;
        var summand = args[3];
        if(summand.isConstant){
          //Constant loop can just be multiplied
          return Constant(this.evaluateConstant([lowerBound, upperBound, summand.constantValue]));
        }
        var dependencies = summand.getDependencies();
        if (
          dependencies.length === 0 ||
          (dependencies.length === 1 && dependencies[0] === args[0]._symbol)
        ) {
          //Compute, since we only depend on the loop variable
          return Constant(this.evaluate(lowerBound, upperBound, summand));
        }
      }
      return this.copyWithArgs(args);
    };
  });
});

define('math/parsenode/sum',['require','pjs','./repeatedoperator'],function(require){
  var P = require('pjs');
  var Parent = require('./repeatedoperator');

  return P(Parent, function(node, _super) {
    node.in_place_operator = '+=';
    node.starting_value = 0;

    node.evaluateConstant = function(args){
      var num_loops = 1 + Math.round(args[1]) - Math.round(args[0]);
      if(num_loops <= 0) return this.starting_value;
      return num_loops * args[2];
    };

    node.update = function(sum, value){
      return sum + value;
    };
  });
});

define('math/parsenode/product',['require','pjs','./repeatedoperator'],function(require){
  var P = require('pjs');
  var Parent = require('./repeatedoperator');

  return P(Parent, function(node, _super) {
    node.in_place_operator = '*=';
    node.starting_value = 1;

    node.evaluateConstant = function(args){
      var num_loops = 1 + Math.round(args[1]) - Math.round(args[0]);
      if(num_loops <= 0) return this.starting_value;
      return Math.pow(args[2], num_loops);
    };

    node.update = function(sum, value){
      return sum * value;
    };
  });
});

define('math/parsenode/functioncall',['require','pjs','./expression','math/errormsg','./identifier','./expressionTypes'],function(require){
  var P = require('pjs');
  var Parent = require('./expression');
  var ErrorMsg = require('math/errormsg');
  var Identifier = require('./identifier');
  var Multiply = require('./expressionTypes').Multiply;

  return P(Parent, function(node, _super) {
    node.init = function(identifier, args){
      if(typeof(identifier) === 'string') identifier = Identifier(identifier);
      this._symbol = identifier._symbol; //Relying on symbol rewrite logic in Identifier
      _super.init.call(this, args);
      this.addDependency(this._symbol);
    };

    node.copyWithArgs = function (args) {
      return new this.constructor(Identifier(this._symbol), args);
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var fn = frame[this._symbol];
      if(fn && fn.isError) throw fn;
      if(!fn || !fn.isFunction){
        if(this.args.length == 1) {
          var multiplyArgs = [Identifier(this._symbol), this.args[0]];
          return Multiply(multiplyArgs).getConcreteTree(frame, overrides);
        }
        if(fn){
          throw ErrorMsg.variableAsFunction(this._symbol);
        }
        throw ErrorMsg.functionNotDefined(this._symbol);
      }

      // TODO, why do we do this here? Don't functions turn their arguments into concrete
      // trees inside the getConcreteInvocationTree call?
      var concreteArgs = [];
      for (var i = 0; i < this.args.length; i++) {
        var concreteArg = this.args[i].getConcreteTree(frame, overrides);
        concreteArgs.push(concreteArg);
      }

      return fn.getConcreteInvocationTree(frame, concreteArgs, overrides);
    };
  });
});

define('math/parsenode/functionexponent',['require','pjs','./expression','./expressionTypes','./functioncall'],function(require){
  var P = require('pjs');
  var Parent = require('./expression');
  var expressionTypes = require('./expressionTypes');
  var Multiply = expressionTypes.Multiply;
  var Exponent = expressionTypes.Exponent;
  var FunctionCall = require('./functioncall');
  //Ambiguous function call / exponent node
  //e.g. a(b)^c
  //could be function a(b) raised to the c,
  //or could be a * (b)^c

  return P(Parent, function(node, _super){
    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var fn = this.args[0]._symbol;
      if(frame[fn] && frame[fn].isFunction){
        return Exponent([FunctionCall(fn, [this.args[1]]), this.args[2]]).getConcreteTree(frame, overrides);
      } else {
        return Multiply([this.args[0], Exponent([this.args[1], this.args[2]])]).getConcreteTree(frame, overrides);
      }
    };
  });
});

define('math/parsenode/nativefunction',['require','pjs','./scalarexpression','math/errormsg','math/functions'],function(require){
  //This is the default definition of a built-in function, which can be expressed
  //as a string (e.g. "Math.sin")
  //This can be expanded to cover functions with unique signatures (like reducers),
  //Functions on BuiltIn instead of on Math, etc.
  var P = require('pjs');
  var ScalarExpression = require('./scalarexpression');
  var ErrorMsg = require('math/errormsg');
  var Functions = require('math/functions');

  return P(ScalarExpression, function (node, _super, _class) {
    node.init = function (args) {
      if (args.length !== this._arity) {
        throw ErrorMsg.wrongArity(this._symbol, this._arity, args.length);
      }
      _super.init.call(this, args);
    };

    node.scalarEvalExpression = function (argExpressions) {
      return this.head + '(' + argExpressions.join(',') + ')';
    };

    _class.create = function (symbol, head, arity) {
      // Create a new anonymous class for each built in function to hold its
      // evaluate and scalarEvalExpression functions
      return P(_class, function (node, _super, _class) {
        _class.isFunction = true;

        node._symbol = symbol;
        node.head = head;
        node._arity = arity;


        node.evaluate = Functions.createEvaluateFunction(
          node.scalarEvalExpression.bind(node),
          node._arity
        );

        _class.getConcreteInvocationTree = function (frame, args, overrides) {
          return _class(args).getConcreteTree(frame, overrides);
        };

      });
    };
  });
});

define('math/parsenode/trigfunction',['require','pjs','./nativefunction','./expressionTypes','./identifier'],function(require){
  //For functions like sin(x) which depend on the angleMultiplier
  //to switch between radians and degrees

  var P = require('pjs');
  var NativeFunction = require('./nativefunction');
  var Multiply = require('./expressionTypes').Multiply;
  var Identifier = require('./identifier');

  return P(NativeFunction, function (node, _super, _class, _superclass) {

    _class.create = function (symbol, head) {
      var arity = 1;

      var childClass = _superclass.create(symbol, head, arity);

      childClass.getConcreteInvocationTree = function (frame, args, overrides) {
        var scaledArgs = frame.trigAngleMultiplier ?
          [Multiply([args[0], Identifier('trigAngleMultiplier')])] :
          args
        ;

        return childClass(scaledArgs).getConcreteTree(frame, overrides);
      };

      return childClass;
    };
  });
});

define('math/parsenode/inversetrigfunction',['require','pjs','./nativefunction','./expressionTypes','./identifier'],function(require){
  //For functions like arcsin(x) which depend on the angleMultiplier
  //to switch between radians and degrees

  var P = require('pjs');
  var NativeFunction = require('./nativefunction');
  var Divide = require('./expressionTypes').Divide;
  var Identifier = require('./identifier');

  return P(NativeFunction, function(node, _super, _class, _superclass) {

    _class.create = function (symbol, head) {
      var arity = 1;

      var childClass = _superclass.create(symbol, head, arity);

      childClass.getConcreteInvocationTree = function (frame, args, overrides) {
        var tree = childClass(args);

        var scaledTree = frame.trigAngleMultiplier ?
          Divide([tree, Identifier('trigAngleMultiplier')]) :
          tree
        ;

        return scaledTree.getConcreteTree(frame, overrides);
      };

      return childClass;
    };
  });
});

define('math/parsenode/reducerfunction',['require','pjs','./expression','./list','./constant','math/functions','math/errormsg'],function(require){
  //This is the definition of a built-in function which maps a single
  //list to a single scalar

  var P = require('pjs');
  var Expression = require('./expression');
  var List = require('./list');
  var Constant = require('./constant');
  var Functions = require('math/functions');
  var ErrorMsg = require('math/errormsg');

  return P(Expression, function (node, _super, _class) {
    node.evalExpression = function (argExpressions) {
      return this.head + '(' + argExpressions.join(',') + ')';
    };

    node.getEvalStrings = function () {
      var list = this.args[0];
      var statements = [];
      var elementExpressions = [];
      for (var i = 0; i < list.length; i++) {
        var elementStrings = list.elementAt(i).getEvalStrings();
        statements = statements.concat(elementStrings.statements);
        elementExpressions.push(elementStrings.expression);
      }
      var argExpressions = ['[' + elementExpressions.join(',') + ']'];
      return {statements: statements, expression: this.evalExpression(argExpressions)};
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) {
        return overrides[this.type].call(this, frame, overrides);
      }

      var args = this.args;

      var list;
      var collect;
      if (args.length === 0) throw ErrorMsg.zeroArgReducer(this._symbol);

      if (args.length === 1) {
        list = args[0].getConcreteTree(frame, overrides);
        collect = !list.isList;
      } else if (args.length === 2 && (args[0].isList || args[1].isList)) {
        var self = this;
        return List(List.mapArgs(this.args, function (args) {
          return self.copyWithArgs(args).getConcreteTree(frame, overrides);
        }));
      } else {
        collect = true;
      }

      var concreteArgs = [];
      if (collect) {
        for (var i = 0; i < args.length; i++) {
          if (args[i].isList) throw ErrorMsg.badListInReducer(this._symbol);
          concreteArgs.push(args[i].getConcreteTree(frame, overrides));
        }
        list = List(concreteArgs);
      }

      return this._constantCollapsedCopy([list]);
    };

    node._constantCollapsedCopy = function (args) {
      var list = args[0];

      //If list elements are all constant, we can constant collapse
      var constantElements = [];
      for (var i = 0; i < list.length; i++) {
        var element = list.elementAt(i);
        if (!element.isConstant) return this.copyWithArgs(args);
        constantElements.push(element.constantValue);
      }
      return Constant(this.evaluate([constantElements]));
    };

    _class.create = function (symbol, head) {
      // Create a new anonymous class for each built in function to hold its
      // evaluate and scalarEvalExpression functions
      return P(_class, function (node, _super, _class) {
        node._symbol = symbol;
        node.head = head;
        node._arity = 1;
        _class.isFunction = true;

        node.evaluate = Functions.createEvaluateFunction(
          node.evalExpression.bind(node),
          node._arity
        );

        _class.getConcreteInvocationTree = function (frame, args, overrides) {
          return _class(args).getConcreteTree(frame, overrides);
        };

      });
    };
  });
});

define('math/parsenode/doublereducerfunction',['require','pjs','./expression','./constant','math/parsenode/list','math/functions','math/errormsg'],function(require){
  //This is the definition of a built-in function which maps two lists to a
  //single scalar. Examples are corr(x, y) and cov(x, y).

  var P = require('pjs');
  var Expression = require('./expression');
  var Constant = require('./constant');
  var List = require('math/parsenode/list');
  var Functions = require('math/functions');
  var ErrorMsg = require('math/errormsg');

  return P(Expression, function (node, _super, _class) {
    node.init = function () {
      _super.init.apply(this, arguments);

      if (this.args.length !== 2) {
        throw ErrorMsg.wrongDoubleReducerArity(this._symbol);
      }
    };

    node.evalExpression = function (argExpressions) {
      return this.head + '(' + argExpressions.join(',') + ')';
    };

    node.getEvalStrings = function () {
      var statements = [];
      var argExpressions = [];
      for (var j = 0; j < this.args.length; j++) {
        var list = this.args[j];
        var elementExpressions = [];
        for (var i = 0; i < list.length; i++) {
          var elementStrings = list.elementAt(i).getEvalStrings();
          Array.prototype.push.apply(statements, elementStrings.statements);
          elementExpressions.push(elementStrings.expression);
        }
        argExpressions.push('[' + elementExpressions.join(',') + ']');
      }

      return {statements: statements, expression: this.evalExpression(argExpressions)};
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) {
        return overrides[this.type].call(this, frame, overrides);
      }

      var concreteArgs = this.args.map(function (arg) {
        return arg.getConcreteTree(frame, overrides);
      });


      if (!concreteArgs[0].isList || !concreteArgs[1].isList) {
        throw ErrorMsg.nonListDoubleReducer(this._symbol);
      }

      // If one argument list is longer than the other, drop extraneous elements
      if (concreteArgs[0].length > concreteArgs[1].length) {
        concreteArgs[0] = List(concreteArgs[0].args.slice(0, concreteArgs[1].length));
      }
      if (concreteArgs[1].length > concreteArgs[0].length) {
        concreteArgs[1] = List(concreteArgs[1].args.slice(0, concreteArgs[0].length));
      }

      return this._constantCollapsedCopy(concreteArgs);
    };

    node._constantCollapsedCopy = function (args) {
      //If list elements are all constant, we can constant collapse
      var constantArgs = [];
      for (var j = 0; j < args.length; j++) {
        var constantElements = [];
        var list = args[j];
        for (var i = 0; i < list.length; i++) {
          var element = list.elementAt(i);
          if (!element.isConstant) return this.copyWithArgs(args);
          constantElements.push(element.constantValue);
        }
        constantArgs.push(constantElements);
      }

      return Constant(this.evaluate(constantArgs));
    };

    _class.create = function (symbol, head) {
      // Create a new anonymous class for each built in function to hold its
      // evaluate and scalarEvalExpression functions
      return P(_class, function (node, _super, _class) {
        node._symbol = symbol;
        node.head = head;
        node._arity = 2;
        _class.isFunction = true;

        node.evaluate = Functions.createEvaluateFunction(
          node.evalExpression.bind(node),
          node._arity
        );

        _class.getConcreteInvocationTree = function (frame, args, overrides) {
          return _class(args).getConcreteTree(frame, overrides);
        };

      });
    };
  });
});

define('math/parsenode/parametrizedreducerfunction',['require','pjs','./expression','./list','./constant','math/functions','math/errormsg'],function(require){
  //This is the definition of a built-in function which maps a list and a
  //scalar parameter to a scalar, or if passed two lists, broadcasts over the
  //second list. Examlpe is quantile([1,2,3], 0.7).

  var P = require('pjs');
  var Expression = require('./expression');
  var List = require('./list');
  var Constant = require('./constant');
  var Functions = require('math/functions');
  var ErrorMsg = require('math/errormsg');

  return P(Expression, function (node, _super, _class) {
    node.init = function () {
      _super.init.apply(this, arguments);

      if (this.args.length !== 2) {
        throw ErrorMsg.wrongParametrizedReducerArity(this._symbol);
      }
    };

    node.evalExpression = function (argExpressions) {
      return this.head + '(' + argExpressions.join(',') + ')';
    };

    node.getEvalStrings = function () {
      var list = this.args[0];
      var parameter = this.args[1];
      var statements = [];
      var elementExpressions = [];
      for (var i = 0; i < list.length; i++) {
        var elementStrings = list.elementAt(i).getEvalStrings();
        Array.prototype.push.apply(statements, elementStrings.statements);
        elementExpressions.push(elementStrings.expression);
      }
      var parameterStrings = parameter.getEvalStrings();
      Array.prototype.push.apply(statements, parameterStrings.statements);

      var argExpressions = [
        '[' + elementExpressions.join(',') + ']',
        parameterStrings.expression
      ];

      return {statements: statements, expression: this.evalExpression(argExpressions)};
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) {
        return overrides[this.type].call(this, frame, overrides);
      }

      var concreteArgs = this.args.map(function (arg) {
        return arg.getConcreteTree(frame, overrides);
      });

      if (!concreteArgs[0].isList) {
        throw ErrorMsg.nonListParametrizedReducer(this._symbol);
      }

      if (!concreteArgs[1].isList) {
        return this._constantCollapsedCopy(concreteArgs);
      }

      return List(concreteArgs[1].args.map(function (param) {
        return this._constantCollapsedCopy([concreteArgs[0], param]);
      }.bind(this)));
    };

    node._constantCollapsedCopy = function (args) {
      var list = args[0];
      var param = args[1];
      if (!param.isConstant) return this.copyWithArgs(args);

      //If list elements are all constant, we can constant collapse
      var constantElements = [];
      for (var i = 0; i < list.length; i++) {
        var element = list.elementAt(i);
        if (!element.isConstant) return this.copyWithArgs(args);
        constantElements.push(element.constantValue);
      }

      return Constant(this.evaluate([constantElements, param.constantValue]));
    };

    _class.create = function (symbol, head) {
      // Create a new anonymous class for each built in function to hold its
      // evaluate and scalarEvalExpression functions
      return P(_class, function (node, _super, _class) {
        node._symbol = symbol;
        node.head = head;
        node._arity = 2;
        _class.isFunction = true;

        node.evaluate = Functions.createEvaluateFunction(
          node.evalExpression.bind(node),
          node._arity
        );

        _class.getConcreteInvocationTree = function (frame, args, overrides) {
          return _class(args).getConcreteTree(frame, overrides);
        };

      });
    };
  });
});

define('math/parsenode/builtinfunction',['require','math/parsenode/nativefunction','math/parsenode/trigfunction','math/parsenode/inversetrigfunction','math/parsenode/reducerfunction','math/parsenode/doublereducerfunction','math/parsenode/parametrizedreducerfunction'],function (require) {

  var F = require('math/parsenode/nativefunction');
  var Trig = require('math/parsenode/trigfunction');
  var ITrig = require('math/parsenode/inversetrigfunction');
  var Reducer = require('math/parsenode/reducerfunction');
  var DoubleReducer = require('math/parsenode/doublereducerfunction');
  var ParametrizedReducer = require('math/parsenode/parametrizedreducerfunction');

  return {
    //Trig functions
    sin: Trig.create('sin', 'BuiltIn.sin'),
    cos: Trig.create('cos', 'BuiltIn.cos'),
    tan: Trig.create('tan', 'BuiltIn.tan'),
    cot: Trig.create('cot', 'BuiltIn.cot'),
    sec: Trig.create('sec', 'BuiltIn.sec'),
    csc: Trig.create('csc', 'BuiltIn.csc'),
    //Inverse trig function
    arcsin: ITrig.create('arcsin', 'Math.asin'),
    arccos: ITrig.create('arccos', 'Math.acos'),
    arctan: ITrig.create('arctan', 'Math.atan'),
    arccot: ITrig.create('arccot', 'BuiltIn.acot'),
    arcsec: ITrig.create('arcsec', 'BuiltIn.asec'),
    arccsc: ITrig.create('arccsc', 'BuiltIn.acsc'),

    //Hyperbolic trig functions
    sinh: F.create('sinh', 'BuiltIn.sinh', 1),
    cosh: F.create('cosh', 'BuiltIn.cosh', 1),
    tanh: F.create('tanh', 'BuiltIn.tanh', 1),
    coth: F.create('coth', 'BuiltIn.coth', 1),
    sech: F.create('sech', 'BuiltIn.sech', 1),
    csch: F.create('csch', 'BuiltIn.csch', 1),
    arcsinh: F.create('arcsinh', 'BuiltIn.asinh', 1),
    arccosh: F.create('arccosh', 'BuiltIn.acosh', 1),
    arctanh: F.create('arctanh', 'BuiltIn.atanh', 1),
    arccoth: F.create('arccoth', 'BuiltIn.acoth', 1),
    arcsech: F.create('arcsech', 'BuiltIn.asech', 1),
    arccsch: F.create('arccsch', 'BuiltIn.acsch', 1),

    //Power functions
    pow: F.create('pow', 'BuiltIn.pow', 2),
    sqrt: F.create('sqrt', 'Math.sqrt', 1),
    nthroot: F.create('nthroot', 'BuiltIn.nthroot', 2),
    log: F.create('log', 'BuiltIn.log_base', 2),
    ln: F.create('ln', 'BuiltIn.log', 1),
    exp: F.create('exp', 'Math.exp', 1),

    //Integer functions
    floor: F.create('floor', 'Math.floor', 1),
    ceil: F.create('ceil', 'Math.ceil', 1),
    round: F.create('round', 'Math.round', 1),
    abs: F.create('abs', 'Math.abs', 1),
    sign: F.create('sign', 'BuiltIn.sign', 1),
    mod: F.create('mod', 'BuiltIn.mod', 2),
    lcm: F.create('lcm', 'BuiltIn.lcm', 2),
    gcd: F.create('gcd', 'BuiltIn.gcd', 2),
    nCr: F.create('nCr', 'BuiltIn.nCr', 2),
    nPr: F.create('nPr', 'BuiltIn.nPr', 2),
    factorial: F.create('factorial', 'BuiltIn.factorial', 1),
    polyGamma: F.create('polyGamma', 'BuiltIn.polyGamma', 2),

    //Stats
    mean: Reducer.create('mean', 'BuiltIn.mean'),
    total: Reducer.create('total', 'BuiltIn.total'),
    stdev: Reducer.create('stdev', 'BuiltIn.stdev'),
    stdevp: Reducer.create('stdevp', 'BuiltIn.stdevp'),
    mad: Reducer.create('mad', 'BuiltIn.mad'),
    length: Reducer.create('length', 'BuiltIn.length'),
    min: Reducer.create('min', 'BuiltIn.listMin'),
    max: Reducer.create('max', 'BuiltIn.listMax'),
    argmin: Reducer.create('argmin', 'BuiltIn.argMin'),
    argmax: Reducer.create('argmax', 'BuiltIn.argMax'),
    median: Reducer.create('median', 'BuiltIn.median'),
    'var': Reducer.create('var', 'BuiltIn.var'),

    cov: DoubleReducer.create('cov', 'BuiltIn.cov'),
    covp: DoubleReducer.create('covp', 'BuiltIn.covp'),
    corr: DoubleReducer.create('corr', 'BuiltIn.corr'),

    quantile: ParametrizedReducer.create('quantile', 'BuiltIn.quantile'),
    upperQuantileIndex: ParametrizedReducer.create('upperQuantileIndex', 'BuiltIn.upperQuantileIndex'),
    lowerQuantileIndex: ParametrizedReducer.create('lowerQuantileIndex', 'BuiltIn.lowerQuantileIndex')
  };
});

//Definition of built-in functions and variables

define('math/builtinframe',['require','math/parsenode/constant','math/parsenode/builtinfunction'],function(require){
  //Defining with short names
  var Constant = require('math/parsenode/constant');
  var BuiltInFunction = require('math/parsenode/builtinfunction');

  var out = {
    pi: Constant(Math.PI),
    tau: Constant(2 * Math.PI),
    e: Constant(Math.E),
    trigAngleMultiplier: Constant(1)
  };

  // Import everything from BuiltInFunction into the BuiltInFrame;
  for (var key in BuiltInFunction) {
    if (!BuiltInFunction.hasOwnProperty(key)) continue;
    out[key] = BuiltInFunction[key];
  }

  return out;
});

define('math/parsenode/derivative',['require','pjs','./scalarexpression','./freevariable','./identifier','math/builtinframe'],function(require){
  var P = require('pjs');
  var Parent = require('./scalarexpression');
  var FreeVariable = require('./freevariable');
  var Identifier = require('./identifier');
  var BuiltInFrame = require('math/builtinframe');

  return P(Parent, function(node, _super){
    node.init = function (symbol, args) {
      this._symbol = Identifier(symbol)._symbol; // Use identifier normalization for symbol
      _super.init.call(this, args);
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      if (frame[this._symbol]) {
        var childFrame = Object.create(frame);
        childFrame[this._symbol] = FreeVariable(this._symbol);
        var substitution = {};
        substitution[this._symbol] = frame[this._symbol];
        return _super.getConcreteTree.call(this, childFrame, overrides)
          .substitute(substitution)
          .getConcreteTree(frame, overrides)
        ;
      }
      return _super.getConcreteTree.call(this, frame, overrides);
    };

    //Not really a great name for derivatives, since they think about constants differently
    //More like getScalarConcreteTree...
    node._constantCollapsedCopy = function (concreteArgs) {
      return concreteArgs[0].takeDerivative(this._symbol).getConcreteTree(BuiltInFrame);
    };
  });
});

define('math/parsenode/equation',['require','./base','pjs','./expressionTypes','math/parsenode/comparator'],function(require){
  var Parent = require('./base');
  var P = require('pjs');
  var Subtract = require('./expressionTypes').Subtract;
  var Comparator = require('math/parsenode/comparator');

  return P(Parent, function(node, _super){
    node.init = function(lhs, rhs){
      _super.init.call(this);
      this.addDependencies(lhs.getDependencies());
      this.addDependencies(rhs.getDependencies());
      this._lhs = lhs;
      this._rhs = rhs;
      this._difference = Subtract([this._lhs, this._rhs]);
    };

    node.asComparator = function () {
      return Comparator['=']([this._lhs, this._rhs]);
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this.asComparator().getConcreteTree(frame, overrides);
    };
  });
});

define('math/parsenode/assignment',['require','./base','math/policy','./equation','./identifier','pjs'],function(require){
  var Parent = require('./base');
  var Policy = require('math/policy');
  var Equation = require('./equation');
  var Identifier = require('./identifier');
  var P = require('pjs');

  return P(Parent, function(node, _super){
    node.init = function(symbol, expression){
      _super.init.call(this);
      symbol = symbol._symbol; //TODO - normalize symbol processing.
      //Would like to always pass around strings, but sometimes we pass around Identifiers instead
      //due to the way the parser works.
      this.addDependencies(expression.getDependencies());
      this._expression = expression;
      this._symbol = symbol;
      this._exports = this.computeExports();
    };

    node.computeExports = function () {
      var symbol = this._symbol;
      if (Policy.assignmentForbidden(symbol)) return [];
      var dependencies = this.getDependencies();
      for (var i = 0; i < dependencies.length; i++) {
        if (dependencies[i] === symbol) return [];
      }
      return [symbol];
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this._expression.getConcreteTree(frame, overrides);
    };

    node.asEquation = function () {
      var eqn = Equation(Identifier(this._symbol), this._expression);
      // TODO was hard to predict by reading that this would be necessary. API smell.
      eqn.userData = this.userData;
      return eqn;
    };

    node.getSliderInfo = function () {
      if (!this._expression.isConstant) return;
      if (typeof this._expression.constantValue !== 'number') return;
      if (!isFinite(this._expression.constantValue)) return;
      return {value: this._expression.constantValue};
    };

  });
});

define('math/parsenode/functiondefinition',['require','pjs','./base','math/errormsg','math/policy'],function(require){
  var P = require('pjs');
  var ParseNode = require('./base');
  var ErrorMsg = require('math/errormsg');
  var Policy = require('math/policy');

  return P(ParseNode, function(node, _super) {

    node.init = function(symbol, args, expression) {
      _super.init.call(this);

      symbol = symbol._symbol; //TODO - normalize symbol processing.
      // Currently using Identifer constructor to normalize symbols

      this._argSymbols = args.map(function (identifier) { return identifier._symbol; });
      this._symbol = symbol;
      this._exports = Policy.assignmentForbidden(symbol) ? [] : [symbol];
      this._expression = expression;
      this.addDependencies(this._argSymbols);
      this.addDependencies(this._expression.getDependencies()); //Will depend on formal arguments
    };

    node.isFunction = true;

    node.getConcreteInvocationTree = function(frame, args, overrides) {
      if (args.length !== this._argSymbols.length) {
        throw ErrorMsg.wrongArity(this._symbol, this._argSymbols.length, args.length);
      }
      var localFrame = Object.create(frame);

      for (var i = 0; i < this._argSymbols.length; i++) {
        localFrame[this._argSymbols[i]] = args[i];
      }

      return this._expression.getConcreteTree(localFrame, overrides);
    };

    node.getConcreteTree = function(frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      for(var i = 0; i < this._argSymbols.length; i++){
        if(frame[this._argSymbols[i]]) throw ErrorMsg.parameterAlreadyDefined(this._argSymbols[i]);
        if(this._argSymbols[i] === this._symbol) throw ErrorMsg.parameterAlreadyDefined(this._argSymbols[i]);
      }
      return this._expression.getConcreteTree(frame, overrides);
    };

    node.getArgs = function(){
      return this._args;
    };

    node.getSliderVariables = function (concrete) {
      var argSymbols = this._argSymbols;
      return Policy.sliderVariables(concrete.getDependencies()).filter(function (symbol) {
        return argSymbols.indexOf(symbol) === -1;
      });
    };
  });
});

define('math/parsenode/optimizedregression',['require','pjs','./base'],function (require) {
  var P = require('pjs');
  var Parent = require('./base');

  return P(Parent, function (node, _super) {
    node.init = function (parameters, residuals, statistics, model, opts) {
      _super.init.call(this);
      this.parameters = parameters;
      this.residuals = residuals;
      this.statistics = statistics;
      this.model = model;

      this.isModelValid = opts.isModelValid;
      this.residualVariable = opts.residualVariable;
      this.residualSuggestionId = opts.residualSuggestionId;
      this.shouldSuggestLogMode = opts.shouldSuggestLogMode;

      // An optimized regression exports its residual variable and all of its
      // parameters
      this._exports = [this.residualVariable];
      for (var p in parameters) {
        if (parameters.hasOwnProperty(p)) this._exports.push(p);
      }
      // TODO this is a little sketchy, since these dependencies are just a bunch
      // of tmpVars used for plotting.
      this.addDependencies(model.getDependencies());
    };

    // Forward getCompiledFunctions calls to model
    node.getCompiledFunctions = function () {
      return this.model.getCompiledFunctions.apply(this.model, arguments);
    };
    node.evaluate = function () {
      return this.model.evaluate.apply(this.model, arguments);
    };
  });
});

define('math/parsenode/regression',['require','pjs','./base','numeric','math/distance','math/builtin','math/policy','graphing/label','math/errormsg','./error','./optimizedregression','./list','./functioncall','./identifier','./constant','./freevariable','./expressionTypes'],function (require) {
  var P = require('pjs');
  var Parent = require('./base');
  var Numeric = require('numeric');
  var Distance = require('math/distance');
  var BuiltIn = require('math/builtin');
  var Policy = require('math/policy');
  var Label = require('graphing/label');
  var ErrorMsg = require('math/errormsg');
  var ErrorNode = require('./error');
  var OptimizedRegression = require('./optimizedregression');
  var List = require('./list');
  var FunctionCall = require('./functioncall');
  var Identifier = require('./identifier');
  var Constant = require('./constant');
  var FreeVariable = require('./freevariable');
  var expressionTypes = require('./expressionTypes');

  var Subtract = expressionTypes.Subtract;

  return P(Parent, function(node, _super, _class){
    node.init = function(lhs, rhs){
      _super.init.call(this);
      this._lhs = lhs;
      this.isLhsSimple = (lhs instanceof Identifier) || (lhs instanceof List);
      this._logLhs = FunctionCall('ln', [lhs]);
      this._rhs = rhs;
      this._difference = Subtract([lhs, rhs]);
      this._logDifference = Subtract([FunctionCall('ln', [lhs]), FunctionCall('ln', [rhs])]);
      this.addDependencies(lhs.getDependencies());
      this.addDependencies(rhs.getDependencies());
    };

    node.isRegression = true;

    node.chooseResidualVariable = function (exportFrame) {
      if (this.userData && this.userData.residualVariable) {
        var stripped = Label.latexToIdentifier(this.userData.residualVariable);
        if (!exportFrame[stripped]) return stripped;
      }
      var dependencies = this.getDependencies();
      var candidate;
      for (var i = 0; i < dependencies.length; i++) {
        var match = dependencies[i].match(/_(.*)/);
        if (!match) continue;
        candidate = 'e_' + match[1];
        if (!exportFrame[candidate]) return candidate;
      }
      var n = 1;
      while (true) {
        candidate = 'e_' + n;
        if (!exportFrame[candidate]) return candidate;
        n++;
      }
    };

    node.getRHSModel = function (frame, parameters) {
      // Store a map of lists that have been replaced by temporary variables.
      // Have to linear search on this because JS doesn't have object hashes.
      var replacedNodes = [];
      var isValid = true;
      function _replaceWithFreeVariable (frame, overrides) {
        for (var i = 0; i < replacedNodes.length; i++) {
          if (replacedNodes[i].node === this) return replacedNodes[i].tmpVar;
        }
        var tmpVar = FreeVariable(this.tmpVar());
        var concrete = this.getConcreteTree(frame);
        if (concrete.getDependencies().length) isValid = false;
        replacedNodes.push({
          node: this,
          tmpVar: tmpVar,
          symbol: tmpVar._symbol,
          concrete: concrete
        });
        return tmpVar;
      }

      var overrides = {
        List: _replaceWithFreeVariable,
        TableColumn: _replaceWithFreeVariable,
        Range: _replaceWithFreeVariable
      };

      var node = this._rhs.tryGetConcreteTree(frame, overrides); // Actual work happens here

      return {
        node: node,
        substituted: node.isError ? node : node.substitute(parameters),
        replacedNodes: replacedNodes,
        isValid: isValid
      };

    };

    function _mse (compiledDifference, solution) {
      var sse = 0;
      for (var j = 0; j < compiledDifference.length; j++) {
        var d = compiledDifference[j].fn.apply(undefined, solution);
        sse += d*d;
      }
      return sse/compiledDifference.length;
    }

    function _evaluateDifference (compiledDifference, solution) {
      var dy = [];
      for (var j = 0; j < compiledDifference.length; j++) {
        dy.push(compiledDifference[j].fn.apply(undefined, solution));
      }
      return dy;
    }

    function _evaluateJacobian (compiledJacobian, solution) {
      var JT = [];
      for (var i = 0; i < compiledJacobian.length; i++) {
        var Jj = [];
        for (var j = 0; j < compiledJacobian[i].length; j++) {
          Jj.push(compiledJacobian[i][j].fn.apply(undefined, solution));
        }
        JT.push(Jj);
      }
      return JT;
    }

    // Gauss-Newton iteration: steps parameters by solving JT*J*dx=-JT*dy
    // where dy is vector that we're minimizing the squares of, evaluated at the current
    // parameters, dx is the update to the parameters on the next step, and J and JT are
    // the Jacobian and its transpose.
    //
    // It would be better to solve the linear system using a QR decomposition instead of
    // an LUP decomposition, but Numeric.js doesn't support QR solves (yet...).
    function optimizeLinear (compiledDifference, compiledJacobian, args, userParams, lastExportFrame) {
      var solution = [];

      for (var i = 0; i < compiledJacobian.length; i++) { solution.push(0); }

      var JT = _evaluateJacobian(compiledJacobian, solution);

      var LUJTJ = Numeric.LU(Numeric.dot(JT, Numeric.transpose(JT)), true);

      // In principle, only need one iteration in linear cases, but additional steps help us
      // clean up rounding errors. Don't need to update jacobian because in a linear problem,
      // it is independent of the parameters.
      var lastSolution = solution;
      var converged = false;
      for (var m = 0; m < 5; m++) {
        var dy = _evaluateDifference(compiledDifference, solution);
        var dx = Numeric.neg(Numeric.LUsolve(LUJTJ, Numeric.dot(JT, dy)));
        if (!Numeric.all(Numeric.isFinite(dx))) {
          // Solve can return NaN's in the case that not all parameters are linearly independent.
          // In that case, just bail out to non-linear solver, which uses regularization to handle
          // this issue better.
          return optimizeNonLinear(compiledDifference, compiledJacobian,
            args, userParams, lastExportFrame
          );
        }
        solution = Numeric.add(lastSolution, dx);
        converged = Numeric.all(Numeric.eq(lastSolution, solution));
        if (converged) break;
        lastSolution = solution;
      }

      return {
        solution: solution,
        MSE: _mse(compiledDifference, solution),
      };
    }

    // Modified Levenberg-Marquardt algorithm, based on
    //
    // Transtrum, Machta, and Sethna, Phys. Rev. E 83, 036701 (2011)
    // http://dx.doi.org/10.1103/PhysRevE.83.036701
    // http://link.aps.org/accepted/10.1103/PhysRevE.83.036701 [PDF]
    //
    // This is currently their "delayed gratification algorithm," but I intend to add
    // the geodesic acceleration term to implement the full "Algorithm 2" from appendix
    // B.
    //
    // The full algorithm iterates by solving
    //
    // (JT*J + lambda*I)*v=JT*dy
    // JT*J*a=JT*(dvdvdy)
    //
    // for v and a, where J and JT are the jacobian and its transpose, I is an identity
    // matrix, dy is the vector of differences that is being minimized, dvdvdy is the
    // directional second derivative of the difference vector, evaluated in the v direction,
    // and lambda is a dynamically adjusted parameter that controls step size
    //
    // The parameters are then updated according to
    // solution = solution + v + 1/2*a
    //
    // If the new solution is worse than the old solution, lambda is increased, producing
    // a smaller step. If the new solution is better, it is accepted, and lambda is decreased.
    function _optimizeNonLinear (compiledDifference, compiledJacobian, p0, maxIterations) {
      var solution = p0;
      var f = _mse(compiledDifference, solution);

      var lambda = 0.001;
      var lambdaUp = 2;
      var lambdaDown = 0.1;

      var ones = [];
      for (var j = 0; j < compiledJacobian.length; j++) { ones.push(1); }

      var it = 0;

      var converged = false;
      var JT = _evaluateJacobian(compiledJacobian, solution);
      var lastSolution = solution;
      var lastF = f;
      while (it < maxIterations && !converged) {
        var dy = _evaluateDifference(compiledDifference, solution);
        var J = Numeric.transpose(JT);
        var JTJ = Numeric.dot(JT, J);

        if (!Numeric.all(Numeric.isFinite(dy))) break;
        if (!Numeric.all(Numeric.isFinite(JTJ))) break;

        var decreased = false;

        while (it < maxIterations && !converged && !decreased) {
          it += 1;

          // metric = JT*J + lambda*I
          var LUmetric = Numeric.LU(
            Numeric.add(JTJ, Numeric.diag(Numeric.mul(lambda, ones))),
          true);

          var v = Numeric.neg(Numeric.LUsolve(LUmetric, Numeric.dot(JT, dy)));

          //TODO calculate geodesic acceleration here and add it to v.
          var dx = v;

          solution = Numeric.add(lastSolution, dx);
          f = _mse(compiledDifference, solution);

          converged = Numeric.all(Numeric.eq(solution, lastSolution));

          if (converged) {
            lastSolution = solution;
            lastF = f;
            break;
          }

          var tmpJT;
          if (isFinite(f) && f <= lastF) {
            tmpJT = _evaluateJacobian(compiledJacobian, solution);
            decreased = Numeric.all(Numeric.isFinite(tmpJT));
          }

          if (decreased) {
            JT = tmpJT;
            lastSolution = solution;
            lastF = f;
            lambda *= lambdaDown;
            // Don't let lambda underflow
            lambda = Math.max(1e-64, lambda);
            break;
          } else {
            lambda *= lambdaUp;
          }
        }
      }

      return {
        solution: lastSolution,
        MSE: _mse(compiledDifference, lastSolution),
      };
    }

    //goal of these:
    // 1/4 are negative (8), 3/4 (24) are positive
    // approximately log-normal, w/ variance of 3
    // generated on: https://www.desmos.com/calculator/1xxlt84tvo
    //plus some from Eli thrown in (1, -1, 120, 1500, -.3)
    var pseudoRandoms = [
      18.9, 0.105, 0.0113, 0.089,
      4.414, 34.32, 8.61, 0.373,
      0.06, 0.149, 1.84, 9.26,
      5, 0.7, 0.2, 1.13,
      2.61, 1.89, 1, 0.007, 30,
      120, 1500, 0.0004, 7.23,
      -1, -0.0081, -0.03, -28.6,
      -1.71, -0.4, -6.94, -0.777
    ];


    var pseudoRandom = function (seed) {
      //503 is prime. That's all it's got going for it
      var index = (seed * 503) % (pseudoRandoms.length);
      return pseudoRandoms[index];
    };

    var generateStartingValues = function (numVals, args) {
      var startingVals = [], newStartingVals, nargs = args.length;
      for (var i = 0 ; i < numVals ; i++) {
        newStartingVals = [];
        for (var j = 0 ; j < nargs ; j++) {
          //prepopulate with a few stock starting values:
          //  * all 0, which helps with y1 ~ e^(a*x1+b)
          //  * all 1, which helps with y1 ~ a*b^x1
          //then use pseudo-randomly generated parameters for the rest
          if (i === 0) {
            newStartingVals[j] = 0;
          } else if (i === 1) {
            newStartingVals[j] = 1;
          } else {
            newStartingVals[j] = pseudoRandom(i*nargs+j);
          }
        }
        startingVals.push(newStartingVals);
      }
      return startingVals;
    };

    //
    // goal of this is to try a bunch of random starting values, and only explore the ones that are closest
    // niterations is the depth to search each option
    // nreturn is the number to return
    //
    var filterStartingValues = function (compiledDifference, compiledJacobian, startingVals, niterations, nreturn) {
      var scores = [];

      for (var j = 0; j < startingVals.length; j++) {
        scores.push({
          soln: _optimizeNonLinear(compiledDifference, compiledJacobian, startingVals[j], niterations),
          startingVals: startingVals[j]
        });
      }

      scores.sort(function(el1, el2) {
        if (isNaN(el1.soln.MSE)) return 1;
        if (isNaN(el2.soln.MSE)) return -1;
        return el1.soln.MSE - el2.soln.MSE;
      });

      var toReturn = [];
      for (var i = 0 ; i < nreturn ; i++) {
        toReturn.push(scores[i].startingVals);
      }
      return toReturn;
    };

    function optimizeNonLinear (compiledDifference, compiledJacobian, args, userParams, lastExportFrame) {
      /* jshint maxcomplexity: 11 */
      var i;
      var xlast = [];
      if (!userParams) userParams = {};
      if (!lastExportFrame) lastExportFrame = {};
      for (i = 0; i < args.length; i++) {
        var symbol = args[i];
        if (lastExportFrame[symbol] && isFinite(lastExportFrame[symbol].constantValue)) {
          xlast.push(+lastExportFrame[symbol].constantValue);
        } else if (userParams.hasOwnProperty(symbol) && isFinite(userParams[symbol])) {
          xlast.push(+userParams[symbol]);
        } else {
          xlast.push(1);
        }
      }

      //generate some random starting points
      var startingVals = generateStartingValues(30, args);
      //filter these down, first by finding 5 promising starting points, and then filtering down to 1 deeply
      var firstPass = filterStartingValues(compiledDifference, compiledJacobian, startingVals, 3, 5);
      var secondPass = filterStartingValues(compiledDifference, compiledJacobian, firstPass, 60, 1);

      var solnrestart = _optimizeNonLinear(compiledDifference, compiledJacobian, secondPass[0], 250);
      var solnlast = _optimizeNonLinear(compiledDifference, compiledJacobian, xlast, 100);

      if (!isFinite(solnlast.MSE)) return solnrestart;
      if (solnlast.MSE < solnrestart.MSE) return solnlast;
      return Distance.approx(solnlast.MSE, solnrestart.MSE, 8) ? solnlast : solnrestart;
    }

    function findParameters (concreteDifference, userParams, lastExportFrame) {
      var args = concreteDifference.getDependencies();
      var soln, i;

      for (i = 0; i < args.length; i++) {
        if (!Policy.validRegressionParameter(args[i])) {
          throw ErrorMsg.invalidRegressionParameter(args[i]);
        }
      }

      var compiledDifference = concreteDifference.getCompiledFunctions(args);
      if (!args.length) {
        soln = {
          solution: [],
          MSE: _mse(compiledDifference, [])
        };
      } else {
        // Since this is a multivariate function in general, we have to be careful with our
        // isLinear check. Can't check each arg separately, because (1+x)*(1+y) is linear in
        // x and y separately, but is not linear overall (where by linear, we actually mean
        // affine, here and in many places).
        var argmap = {};
        for (i = 1; i < args.length; i++) {
          argmap[args[i]] = FreeVariable(args[0]);
        }

        var isLinear = concreteDifference.substitute(argmap).isLinear(args[0]);
        // This block can fail because takeDerivative can produce too many nodes, or possibly
        // inside calls to Numeric
        var compiledJacobian = [];
        for (i = 0; i < args.length; i++) {
          compiledJacobian.push(concreteDifference.takeDerivative(args[i]).getCompiledFunctions(args));
        }
        if (isLinear) {
          soln = optimizeLinear(compiledDifference, compiledJacobian,
            args, userParams, lastExportFrame
          );
        } else {
          soln = optimizeNonLinear(compiledDifference, compiledJacobian,
            args, userParams, lastExportFrame
          );
        }
      }

      var parameters = {};
      for (i = 0; i < args.length; i++) {
        parameters[args[i]] = Constant(soln.solution[i]);
      }

      return parameters;
    }

    node.computeStatistics = function (concreteLHS, model, residuals, isLogModeRegression, transformation) {
      var sse = 0;
      for (var i = 0; i < residuals.length; i++) {
        var elt = residuals.args[i].constantValue;
        sse += elt*elt;
      }
      var meanSquareError = sse/residuals.length;

      var lhsVariance = concreteLHS.isList ?
        BuiltIn.varp(concreteLHS.args.map(function (c) {return +c.constantValue})) :
        0
      ;

      if (
        concreteLHS.getDependencies().length ||
        !isFinite(lhsVariance) ||
        lhsVariance <= 0 ||
        !this.isLhsSimple
      ) {
        return {
          'RMSE': Math.sqrt(meanSquareError)
        };
      } else {
        var Rsquared = 1 - meanSquareError/lhsVariance;
        if (model.isValid && model.replacedNodes.length === 1) {

          var l1 = [];
          var l2 = [];

          var logTransformX = (
            isLogModeRegression &&
            (transformation === TRANSFORMATIONS.LINLOG || transformation === TRANSFORMATIONS.LOGLOG)
          );

          List.eachArgs([model.replacedNodes[0].concrete, concreteLHS], function (elts) {
            l1.push(logTransformX ? Math.log(elts[0].constantValue) : +elts[0].constantValue);
            l2.push(+elts[1].constantValue);
          });

          var r = BuiltIn.corr(l1, l2);

          // Only return r when r^2 === R^2, i.e. when model explains data exactly as well
          // as a linear model could.
          if (Distance.approx(r*r, Rsquared, 8)) {
            return {
              'r': r,
              'rsquared': r*r
            };
          }
        }
        return { 'Rsquared': Rsquared };
      }
    };

    node.getResidualSuggestionId = function (residualVariable, priorAnalysis) {
      // Search for a table who's first column is in the regressions rhs.
      // If any table that the regression depends on already has a column
      // that depends on the regression's residual variable, return undefined.
      var rhsDependencies = this._rhs.getDependencies();
      var candidateId;
      for (var id in priorAnalysis) {
        if (!priorAnalysis.hasOwnProperty(id)) continue;
        if (!priorAnalysis[id].concreteTree.isTable) continue;
        if (!priorAnalysis[id].concreteTree.columns[0]) continue;
        var rawColumns = priorAnalysis[id].rawTree.columns;
        if (!rawColumns || !rawColumns.length) continue;
        var exports = rawColumns[0].getExports();
        if (exports.length !== 1) continue;
        if (rhsDependencies.indexOf(exports[0]) === -1) continue;

        for (var i = 1; i < rawColumns.length; i++) {
          if (rawColumns[i].getDependencies().indexOf(residualVariable) !== - 1) return undefined;
        }
        candidateId = candidateId ? candidateId : id;
      }

      return candidateId ? candidateId : undefined;
    };

    function _isNonConstantLinear(xs, ys) {
      // Assumes sorted xs
      var len = xs.length;
      var x0 = xs[0];
      var y0 = ys[0];
      var x1 = xs[len - 1];
      var y1 = ys[len - 1];

      if (!isFinite(x0) || !isFinite(x1) || !isFinite(y0) || !isFinite(y1)) return false;
      if (y1 - y0 === 0) return false;

      var dx = x1 - x0;
      if (dx === 0) return false;

      for (var i = 1; i < len - 1; i++) {
        var xi = xs[i];
        var yi = ys[i];
        var yInterpolated = (y1*(xi-x0) + y0*(x1-xi))/dx;
        if (!Distance.approx(yi, yInterpolated, 5)) return false;
      }

      return true;
    }

    var TRANSFORMATIONS = {
      NONE: 0,
      LOGLIN: 1,
      LOGLOG: 2,
      LINLOG: 3
    };

    node.linearizingTransformation = function (concreteLHS, model) {
      /* jshint maxcomplexity: 11 */
      if (!this.isLhsSimple) return TRANSFORMATIONS.NONE;
      var substitutedModel = model.substituted;
      if (substitutedModel.isError) return TRANSFORMATIONS.NONE;
      var dependencies = substitutedModel.getDependencies();
      if (dependencies.length !== 1) return TRANSFORMATIONS.NONE;
      // No need to log-transform polynomial models
      //
      // Note, using the unsubstituted model here because we *do* want to allow
      // log mode for ax^b, even if the regressed value of b happens to be
      // exactly an integer.
      if (isFinite(model.node.polynomialOrder(dependencies[0]))) return TRANSFORMATIONS.NONE;

      // Sample ln(f(x)) at x where we have data, and check if it is linear in
      // either x or ln(x).
      var compiled = substitutedModel.getCompiledFunctions(dependencies);
      if (compiled.length !== 1) return TRANSFORMATIONS.NONE;

      var fn = compiled[0].fn;

      var concreteDependent = model.replacedNodes[0].concrete;
      if (!concreteDependent.isList) return TRANSFORMATIONS.NONE;

      var xs = concreteDependent.args.map(function (elt) { return +elt.constantValue; });
      if (xs.length < 3) return TRANSFORMATIONS.NONE;

      xs.sort(function (a, b) { return a - b; });

      var ys = xs.map(fn);
      var logys = ys.map(Math.log);
      var logxs = xs.map(Math.log);

      var canLogTransformY = concreteLHS.args.every(function (elt) {
        return isFinite(Math.log(+elt.constantValue));
      });

      if (_isNonConstantLinear(xs, logys) && canLogTransformY) return TRANSFORMATIONS.LOGLIN;
      if (_isNonConstantLinear(logxs, logys) && canLogTransformY) return TRANSFORMATIONS.LOGLOG;
      if (_isNonConstantLinear(logxs, ys)) return TRANSFORMATIONS.LINLOG;
      return TRANSFORMATIONS.NONE;
    };

    function evaluateResiduals (differenceTree, frame, parameters) {
      var localFrame = Object.create(frame);
      for (var p in parameters) {
        if (!parameters.hasOwnProperty(p)) continue;
        localFrame[p] = parameters[p];
      }
      return differenceTree.getConcreteTree(localFrame);
    }

    // Note, may throw an error node, similar to getConcreteTree. Use tryOptimize to
    // wrap in a try/catch, similiar to tryGetConcreteTree
    node.optimize = function (frame, exportFrame, lastExportFrame, priorAnalysis) {
      var concreteLHS = this._lhs.getConcreteTree(frame);

      var concreteDifference = this._difference.getConcreteTree(frame);
      if (!concreteDifference.isList) throw ErrorMsg.nonListRegression();

      // Note, these may be overwritten if we switch into log mode
      var parameters = findParameters(concreteDifference, this.userData.regressionParameters, lastExportFrame);
      var model = this.getRHSModel(frame, parameters);
      var residuals = evaluateResiduals(this._difference, frame, parameters);

      var transformation = this.linearizingTransformation(concreteLHS, model);
      var statistics;
      if (
        this.userData.isLogModeRegression &&
        (transformation === TRANSFORMATIONS.LOGLIN || transformation === TRANSFORMATIONS.LOGLOG)
      ) {
        // If the user requested log mode and we can compute in log mode, replace
        // parameters with log mode parameters
        var concreteLogDifference = this._logDifference.getConcreteTree(frame);
        var concreteLogLhs = this._logLhs.getConcreteTree(frame);

        parameters = findParameters(concreteLogDifference, this.userData.regressionParamters, lastExportFrame);
        model = this.getRHSModel(frame, parameters);
        residuals = evaluateResiduals(this._difference, frame, parameters);

        var logResiduals = evaluateResiduals(this._logDifference, frame, parameters);
        statistics = this.computeStatistics(
          concreteLogLhs,
          model,
          logResiduals,
          this.userData.isLogModeRegression,
          transformation
        );
      } else {
        statistics = this.computeStatistics(
          concreteLHS,
          model,
          residuals,
          this.userData.isLogModeRegression,
          transformation
        );
      }

      var residualVariable = this.chooseResidualVariable(exportFrame);
      var residualSuggestionId = this.getResidualSuggestionId(residualVariable, priorAnalysis);
      // Update userData here because there is no guarantee that the new value has to
      // to come back from the frontend.
      this.userData.residualVariable = Label.identifierToLatex(residualVariable);

      return OptimizedRegression(parameters, residuals, statistics, model.substituted, {
        isModelValid: model.isValid,
        residualVariable: residualVariable,
        residualSuggestionId: residualSuggestionId,
        shouldSuggestLogMode: transformation !== TRANSFORMATIONS.NONE
      });
    };

    node.tryOptimize = function () {
      try {
        return this.optimize.apply(this, arguments);
      } catch (e) {
        if (e instanceof ErrorNode) return e;
        throw e;
      }
    };

    node.exportTo = function (concrete, frame) {
      if (concrete.isError) return;
      for (var symbol in concrete.parameters) {
        if (!concrete.parameters.hasOwnProperty(symbol)) continue;
        if (Policy.assignmentForbidden(symbol)) continue;
        frame[symbol] = frame[symbol] ? ErrorMsg.multiplyDefined(symbol) : concrete.parameters[symbol];
      }

      // Never expect this to happen, but just to be safe...
      if (Policy.assignmentForbidden(concrete.residualVariable)) return;
      // Shouldn't have to worry about residualVariable being in the frame, since we chose it not to be.
      frame[concrete.residualVariable] = concrete.residuals;
    };

    // Regressions should never suggest sliders
    node.getSliderVariables = function () { return []; };
  });
});

define ('math/parsenode/table',['require','pjs','./base','math/policy','./constant','./list'],function (require) {
  var P = require('pjs');
  var Parent = require('./base');
  var Policy = require('math/policy');
  var Constant = require('./constant');
  var List = require('./list');

  return P(Parent, function (node, _super) {
    node.init = function (columns) {
      _super.init.call(this);
      this.columns = columns;
      this._exports = [];
      for (var i = 0; i < columns.length; i++) {
        this.addDependencies(columns[i].getDependencies());
        Array.prototype.push.apply(this._exports, columns[i].getExports());
      }
    };

    node.exportPenalty = 1;

    node.isTable = true;

    node.canAutoRegress = function (concrete) {
      /* jshint maxcomplexity: 11 */
      if (concrete.isError) return false;
      if (this.columns.length > 2) return false;

      for (var i = 0; i < this.columns.length; i++) {
        var symbols = this.columns[i].getExports();
        if (symbols.length !== 1) return false;
        if (Policy.assignmentForbidden(symbols[0])) return false;
        if (concrete.columns[i].isError) return false;
        if (!concrete.columns[i].isIndependent) return false;
        var columnLength = concrete.columns[i].values.args.length;
        if (columnLength < 2) return false;
        for (var j = 0; j < columnLength; j++) {
          if (isNaN(+concrete.columns[i].values.args[j].constantValue)) return false;
        }
      }

      return true;
    };

    function _replaceErrorWithNaN (arg) {
      return (arg.isError) ? Constant(NaN) : arg;
    }

    // Note, only exports table column values. Will need to modify this if we allow,
    // e.g., assignments in headers.
    node.exportTo = function (concrete, frame) {
      for (var i = 0; i < this.columns.length; i++) {
        var symbols = this.columns[i].getExports();
        if (!symbols.length) continue;
        var symbol = symbols[0];
        if (Policy.assignmentForbidden(symbol)) continue;
        if (frame[symbol]) continue;
        // Replace errors with NaN's for export
        if (concrete.isError) {
          frame[symbol] = concrete;
        } else if (concrete.columns[i].isError) {
          frame[symbol] = concrete.columns[i];
        } else {
          frame[symbol] = List(concrete.columns[i].values.args.map(_replaceErrorWithNaN));
        }
      }
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      var concreteColumns = [];
      var localFrame = Object.create(frame);
      for (var i = 0; i < this.columns.length; i++) {
        var concreteColumn = this.columns[i].getConcreteTree(localFrame, frame, overrides);
        if (concreteColumn.isIndependent) {
          localFrame[concreteColumn.header._symbol] = concreteColumn.values;
        }
        concreteColumns.push(concreteColumn);
      }
      return this.constructor(concreteColumns);
    };

    // TODO shim
    node.getAllIds = function () {
      return this.columns.map(function (c) { return c.header.userData.id; });
    };
  });
});
define ('math/parsenode/tablecolumn',['require','pjs','./base','./list','./identifier','math/policy'],function (require) {
  var P = require('pjs');
  var Parent = require('./base');
  var List = require('./list');
  var Identifier = require('./identifier');
  var Policy = require('math/policy');

  return P(Parent, function (node, _super) {
    node.init = function (header, length, values) {
      _super.init.call(this);
      this.header = header;
      this.length = length;
      this.values = values;
      this.isIndependent = false; // May be changed to true in a concrete tree
      this.addDependencies(header.getDependencies());
      this.addDependencies(values.getDependencies());
      this._exports = this._computeExports();
    };

    node._computeExports = function () {
      if (!(this.header instanceof Identifier)) return [];
      var symbol = this.header._symbol;
      return Policy.assignmentForbidden(symbol) ? [] : [symbol];
    };

    // Override getConcreteTree to allow storing errors in individual elements
    // instead of propagating errors to the top of the column.
    node.getConcreteTree = function (frame, parentFrame) {
      var concreteHeader = this.header.getConcreteTree(frame);
      var concreteElements;
      var concrete;
      if (concreteHeader.isFreeVariable) {
        concreteElements = [];
        for (var i = 0; i < this.values.args.length; i++) {
          var concreteElement = this.values.args[i].tryGetConcreteTree(frame);
          concreteElements.push(concreteElement);
        }
        concrete = this.constructor(concreteHeader, this.length, List(concreteElements));
        concrete.isIndependent = true;
        return concrete;
      } else {
        if (concreteHeader.isConstant) {
          var values = [];
          for (var n = 0; n < this.length; n++) values.push(concreteHeader);
          concreteElements = List(values);
        } else {
          concreteElements = concreteHeader;
        }
        concreteHeader = this.header.getConcreteTree(parentFrame);
        concrete = this.constructor(concreteHeader, this.length, concreteElements);
        return concrete;
      }
    };

    // Determines whether this column should be plotted as a smooth line, or
    // a discrete line
    node.isDiscrete = function (firstColumn) {
      return (
        this.header.getDependencies().length !== 1 ||
        firstColumn.header.getDependencies().length !== 1 ||
        this.header.getDependencies()[0] !== firstColumn.header.getDependencies()[0]
      );
    };
  });
});

define('math/parsenode/solvedequation',['require','pjs','./base'],function (require) {

  var P = require('pjs');
  var ParseNode = require('./base');

  return P(ParseNode, function(node, _super) {
    node.init = function (symbol, expression) {
      _super.init.call(this);
      this._symbol = symbol; // The symbol that was solved for.
      this._expression = expression;
      this.addDependencies(expression.getDependencies());
    };

    node.getConcreteTree = function (frame, overrides) {
      if (overrides && overrides[this.type]) return overrides[this.type].call(this, frame, overrides);
      return this.constructor(this._symbol, this._expression.getConcreteTree(frame, overrides));
    };

    node.getEvaluationInfo = function () {
      if (this._expression.isList) {
        return this._expression.args.map(function (a) {
          return {val: a.constantValue, operator: '='};
        });
      }
      return this._expression.getEvaluationInfo();
    };

    // Delegate to _expression
    node.getCompiledFunctions = function () {
      return this._expression.getCompiledFunctions.apply(this._expression, arguments);
    };
    node.evaluate = function () {
      return this._expression.evaluate.apply(this._expression, arguments);
    };
  });
});

define('parsenodes',['require','math/parsenode/expressionTypes','math/parsenode/base','math/parsenode/expression','math/parsenode/scalarexpression','math/parsenode/error','math/parsenode/constant','math/parsenode/identifier','math/parsenode/freevariable','math/parsenode/dummyindex','math/parsenode/list','math/parsenode/range','math/parsenode/listaccess','math/parsenode/orderedpair','math/parsenode/movablepoint','math/parsenode/basecomparator','math/parsenode/comparator','math/parsenode/doubleinequality','math/parsenode/repeatedoperator','math/parsenode/sum','math/parsenode/product','math/parsenode/functioncall','math/parsenode/functionexponent','math/parsenode/piecewise','math/parsenode/derivative','math/parsenode/builtinfunction','math/parsenode/assignment','math/parsenode/functiondefinition','math/parsenode/equation','math/parsenode/regression','math/parsenode/table','math/parsenode/tablecolumn','math/parsenode/solvedequation','math/parsenode/optimizedregression'],function(require){
  var expressionParseNodes = require('math/parsenode/expressionTypes'); //Require expressionsTypes

  var nodes = {
    //Base Types
    Base:         require('math/parsenode/base'),
    Expression:   require('math/parsenode/expression'),
    ScalarExpression: require('math/parsenode/scalarexpression'),

    //Primitive Types
    Error:        require('math/parsenode/error'),
    Constant:     require('math/parsenode/constant'),
    Identifier:   require('math/parsenode/identifier'),
    FreeVariable: require('math/parsenode/freevariable'),
    DummyIndex:   require('math/parsenode/dummyindex'),

    //List types
    List:         require('math/parsenode/list'),
    Range:        require('math/parsenode/range'),
    ListAccess:   require('math/parsenode/listaccess'),

    //Points and point lists
    OrderedPair:        require('math/parsenode/orderedpair'),
    MovablePoint:       require('math/parsenode/movablepoint'),

    //Expressions and operators
    BaseComparator:   require('math/parsenode/basecomparator'),
    Comparator:       require('math/parsenode/comparator'),
    DoubleInequality: require('math/parsenode/doubleinequality'),
    RepeatedOperator:  require('math/parsenode/repeatedoperator'),
    Sum:              require('math/parsenode/sum'),
    Product:          require('math/parsenode/product'),
    FunctionCall:     require('math/parsenode/functioncall'),
    FunctionExponent: require('math/parsenode/functionexponent'),
    Piecewise:        require('math/parsenode/piecewise'),
    Derivative:       require('math/parsenode/derivative'),

    //Built in functions
    BuiltInFunction:  require('math/parsenode/builtinfunction'),

    //Exports and definitions
    Assignment:         require('math/parsenode/assignment'),
    FunctionDefinition: require('math/parsenode/functiondefinition'),
    Equation:           require('math/parsenode/equation'),
    Regression:         require('math/parsenode/regression'),

    // Tables
    Table:            require('math/parsenode/table'),
    TableColumn:      require('math/parsenode/tablecolumn'),

    // Concrete solved equation
    SolvedEquation:   require('math/parsenode/solvedequation'),
    OptimizedRegression: require('math/parsenode/optimizedregression')
  };

  //Each of the simple expression types
  for (var nodeType in expressionParseNodes) {
    nodes[nodeType] = expressionParseNodes[nodeType];
  }

  for (var t in nodes) {
    if (!nodes.hasOwnProperty(t)) continue;
    if (t === 'Comparator' || t === 'BuiltInFunction') continue;
    nodes[t].prototype.type = t;
  }

  for (var op in nodes.Comparator) {
    if (!nodes.Comparator.hasOwnProperty(op)) continue;
    nodes.Comparator[op].prototype.type = 'Comparator[\'' + op + '\']';
  }

  for (var symbol in nodes.BuiltInFunction) {
    if (!nodes.BuiltInFunction.hasOwnProperty(symbol)) continue;
    nodes.BuiltInFunction[symbol].prototype.type = 'BuiltInFunction[\'' + symbol + '\']';
  }

  return nodes;
});

define('math/inverses',[],function () {
  var inverses = {};

  // Functions with an inverse spelled arcname
  var arcNames = [
    'sin',
    'cos',
    'tan',
    'cot',
    'sec',
    'csc',
    'sinh',
    'cosh',
    'tanh',
    'coth',
    'sech',
    'csch'
  ];

  arcNames.forEach(function (name) {
    inverses[name] = 'arc' + name;
    inverses['arc' + name] = name;
  });

  return inverses;
});
/*
* baseparser is separated from parser so that it can be used inside
* features without creating a circular dependency. Outside users
* should include parser, which adds features to the baseparse.
*/
define('math/baseparser',['require','jison','parsenodes','math/inverses','math/errormsg'],function(require){
  var jison = require('jison');
  var yy = jison.yy;
  var ParseNodes = require('parsenodes');
  var inverses = require('math/inverses');
  var ErrorMsg = require('math/errormsg');

  var exports = {};

  //Public parsing API
  exports.parse = function(input) {
    try {
      return jison.parse('###'+input);
    } catch (e) {
      if (e instanceof ParseNodes.Error) return e;
      return ErrorMsg.parseError();
    }
  };

  yy.ErrorMsg = ErrorMsg;

  yy.setInput = function (node, range) {
    //Don't ever show the '###' mark we insert to mark the start of the string
    node.setInputString(yy.lexer.matched.slice(Math.max(3, range.first_column), range.last_column));
  };

  //Make all ParseNodes available on yy object for jison
  for(var nodeType in ParseNodes){
    yy[nodeType] = ParseNodes[nodeType];
  }

  //Register known inverses
  yy.inverses = inverses;

  // Helper for transforming \operatorname{abs} to \abs
  function stripOperatorName (str) {
    var prefix = '\\operatorname';
    if (str.slice(0, prefix.length) === prefix) {
      return '\\' + str.slice(prefix.length + 1, str.length - 1);
    } else {
      return str;
    }
  }

  /* This function takes the entire function declaration as a single lexed token and parses with a regexp,
   * to keep the overall grammar context-free and LALR(1)-parseable.
   * TODO - generate this once, not every time we parse a function declaration */
  yy.parseFunctionDeclaration = function (declaration_string) {
    declaration_string = declaration_string.replace('###', '');  //Strip off start-of-line marker
    var whitespace_pattern =  //Non-capturing latex whitespace pattern
       "(?:\\s|\\\\space|\\\\ |\\\\\\:)*";
       //   \s   \\space  \\ \ :
    var id_body_pattern = //Non-capturing latex identifier pattern
       "(?:\\\\operatorname\\{[a-zA-Z]+\\}|[a-zA-Z]|\\\\[a-zA-Z]+)";
    var id_subscript_pattern = //Non-capturing latex subscript pattern
       "(?:_[a-zA-Z0-9]|_{[a-zA-Z0-9]+})?";
    var id_pattern = id_body_pattern+id_subscript_pattern;

    var arglist_pattern = //Non-capturing comma-separated list of identifiers in whitespace-free string
      "(?:" + id_pattern + "(?:\\," + id_pattern + ")*)";

    var declaration_pattern = //Captures function name as first group, and arglist as second group
      "(" + id_pattern + ")" + "(?:\\\\left)?\\((" + arglist_pattern + ")(?:\\\\right)?\\)=";

    var declaration_regexp = new RegExp(declaration_pattern);
    var whitespace_regexp = new RegExp(whitespace_pattern, "g");
    //Want "g" flag to ensure global capturing of whitespace
    declaration_string = declaration_string.replace(whitespace_regexp, '');
    var match = declaration_regexp.exec(declaration_string);

    return {
      identifier: ParseNodes.Identifier(stripOperatorName(match[1])),      //match[1] is the function symbol.
      //match[2] is the argument list.  Split it on commas.
      args: match[2].split(',').map(function (symbol) { return ParseNodes.Identifier(symbol); }),
    };
  };

  return exports;
});

// String representation of parse nodes that should return the same parse tree when executed.
// Intended to be used for debugging and experiments, not for implementing other features.
define('math/features/repr',['require','parsenodes'],function (require) {
  var nodes = require('parsenodes');

  var reprArgs = function (args, prefix, level) {
    level = level || 0;
    var lastIndent = Array(level + 1).join('  ');
    var indent = lastIndent + '  ';
    return '[' + '\n' +
      indent + args.map(function (arg) {
        return arg.repr(prefix, level + 1);
      }).join(',\n' + indent) + '\n' +
    lastIndent + ']';
  };

  var reprHead = function (head, prefix) {
    prefix = prefix || '';
    return '' + prefix + '' + head;
  };

  nodes.DoubleInequality.prototype.repr =
  nodes.Expression.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' + reprArgs(this.args, prefix, level) + ')';
  };

  nodes.Identifier.prototype.repr =
  nodes.FreeVariable.prototype.repr = function (prefix) {
    return reprHead(this.type, prefix) + '(\'' + this._symbol + '\')';
  };

  nodes.Constant.prototype.repr = function (prefix) {
    return reprHead(this.type, prefix) + '(' + this.constantValue + ')';
  };

  nodes.FunctionCall.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      '\'' + this._symbol + '\'' + ', ' + reprArgs(this.args, prefix, level) +
    ')';
  };

  nodes.Assignment.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      nodes.Identifier(this._symbol).repr(prefix, level) + ', ' +
      this._expression.repr(prefix, level) +
    ')';
  };

  nodes.Regression.prototype.repr =
  nodes.Equation.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      this._lhs.repr(prefix, level) + ', ' +
      this._rhs.repr(prefix, level) +
    ')';
  };

  nodes.FunctionDefinition.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      nodes.Identifier(this._symbol).repr(prefix, level) + ', ' +
      reprArgs(this._argSymbols.map(function (s) { return nodes.Identifier(s); }), prefix, level) + ', ' +
      this._expression.repr(prefix, level) +
    ')';
  };

  nodes.Error.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(\'' + this._msg + '\')';
  };

  nodes.Derivative.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      '\'' + this._symbol + '\'' + ', ' + reprArgs(this.args, prefix, level) +
    ')';
  };

  nodes.SolvedEquation.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      '\'' + this._symbol + '\'' + ', ' + this._expression.repr(prefix, level) +
    ')';
  };

  nodes.OptimizedRegression.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      JSON.stringify(this.parameters) + ', ' +
      JSON.stringify(this.residuals) + ', ' +
      JSON.stringify(this.statistics) + ', ' +
      this.model.repr(prefix, level + 1) + ', ' +
      JSON.stringify({
        isModelValid: this.isModelValid,
        residualVariable: this.residualVariable,
        residualSuggestionId: this.residualSuggestionId,
        shouldSuggestLogMode: this.shouldSuggestLogMode
      }) +
    ')';
  };

  // TODO, Table could be an expression
  nodes.Table.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' + reprArgs(this.columns, prefix, level) + ')';
  };

  nodes.TableColumn.prototype.repr = function (prefix, level) {
    return reprHead(this.type, prefix) + '(' +
      this.header.repr(prefix, level) + ', ' + this.length + ', ' +
      reprArgs(this.values, prefix, level) +
    ')';
  };


});

define('math/features/scalarEvalExpression',['require','parsenodes','math/functions'],function(require){
  var nodes = require('parsenodes');
  var Functions = require('math/functions');

  var expressions = {
    Add: function(args){
      return '(' + args.join('+') + ')';
    },
    Multiply: function(args){
      return '(' + args.join('*') + ')';
    },
    Divide: function(args){
      return '(' + args.join('/') + ')';
    },
    Subtract: function(args){
      return '(' + args.join('-') + ')';
    },
    Exponent: function(args){
      return 'BuiltIn.pow('+args.join(',')+')';
    },
    Negative: function(args){
      return '(-' + args[0] + ')';
    },
    And: function(args){
      //Used for Chained Comparators (a<b<c becomes a<b && b<c)
      //TODO - this naively re-evaluates middle terms
      //TODO - this doesn't check that directions agree
      return args.join('&&');
    },
    Piecewise: function(args){
      //TODO - this will naively evaluate statements
      //for all branches.
      //This will produce correct output, but performance
      //will be better if we only evaluate needed statements
      return '('+args[0]+'?'+args[1]+':'+args[2]+')';
    }
  };

  var arities = {
    Add: 2,
    Multiply: 2,
    Divide: 2,
    Subtract: 2,
    Exponent: 2,
    Negative: 1,
    And: 2,
    Piecewise: 3
  };

  for (var nodeType in expressions) {
    var p = nodes[nodeType].prototype;
    p.scalarEvalExpression = expressions[nodeType];
    p.evaluate = Functions.createEvaluateFunction(p.scalarEvalExpression, arities[nodeType]);
  }

});

define('math/features/okForImplicitFunction',['require','parsenodes'],function(require){
  var nodes = require('parsenodes');

  nodes.Add.prototype.okForImplicitFunction =
  nodes.Subtract.prototype.okForImplicitFunction =
  nodes.Add.prototype.okForImplicitFunction =
  nodes.Multiply.prototype.okForImplicitFunction =
  nodes.Divide.prototype.okForImplicitFunction =
  nodes.Exponent.prototype.okForImplicitFunction = function(){
    for(var i = 0; i < this.args.length; i++){
      if(!this.args[i].okForImplicitFunction()) return false;
    }
    return true;
  };
  nodes.Piecewise.prototype.okForImplicitFunction = function () {
    // Domain restrictions may be used with implicit function multiplications,
    // but general piecewise expressions may not.
    return (
      this.args[1].isConstant && this.args[1].constantValue === 1 &&
      this.args[2].isConstant && isNaN(this.args[2].constantValue)
    );
  };
});

define('math/features/constantcollapsedcopy',['require','parsenodes'],function(require) {
  var nodes = require('parsenodes');
  var Constant = nodes.Constant;

  var defs = {
    Add: function (args) {
      if (args[0].isConstant && args[1].isConstant) {
        return Constant(this.evaluate([args[0].constantValue, args[1].constantValue]));
      }
      if (args[0].constantValue === 0) return args[1];
      if (args[1].constantValue === 0) return args[0];
      return this.copyWithArgs(args);
    },
    Multiply: function (args) {
      if (args[0].isConstant && args[1].isConstant) {
        return Constant(this.evaluate([args[0].constantValue, args[1].constantValue]));
      }
      if (args[0].constantValue === 1) return args[1];
      if (args[1].constantValue === 1) return args[0];
      return this.copyWithArgs(args);
    },
    Subtract: function (args) {
      if (args[0].isConstant && args[1].isConstant) {
        return Constant(this.evaluate([args[0].constantValue, args[1].constantValue]));
      }
      if (args[0].constantValue === 0) return nodes.Negative([args[1]]);
      if (args[1].constantValue === 0) return args[0];
      return this.copyWithArgs(args);
    },
    Divide: function (args) {
      if (args[0].isConstant && args[1].isConstant) {
        return Constant(this.evaluate([args[0].constantValue, args[1].constantValue]));
      }
      if (args[1].constantValue === 1) return args[0];
      return this.copyWithArgs(args);
    },
    Exponent: function (args) {
      if (args[0].isConstant && args[1].isConstant) {
        return Constant(this.evaluate([args[0].constantValue, args[1].constantValue]));
      }
      if (args[1].constantValue === 1) return args[0];
      return this.copyWithArgs(args);
    },
    Negative: function (args) {
      if (args[0].isConstant) return Constant(-args[0].constantValue);
      if (args[0] instanceof nodes.Negative) return args[0].args[0];
      return this.copyWithArgs(args);
    },
    And: function (args) {
      if (args[0].isConstant && args[1].isConstant) {
        return Constant(args[0].constantValue && args[1].constantValue);
      }
      if (args[0].isConstant && args[0] === true) return args[1];
      if (args[0].isConstant && args[0] === false) return Constant(false);
      if (args[1].isConstant && args[1] === true) return args[0];
      if (args[1].isConstant && args[1] === false) return Constant(false);
      return this.copyWithArgs(args);
    },
    Piecewise: function (args) {
      if (args[0].isConstant && args[0].constantValue === true) return args[1];
      if (args[0].isConstant && args[0].constantValue === false) return args[2];
      return this.copyWithArgs(args);
    }
  };

  for (var k in defs) {
    nodes[k].prototype._constantCollapsedCopy = defs[k];
  }

});
define('math/features/polynomialorder',['require','parsenodes'],function (require) {
  var nodes = require('parsenodes');

  var polynomialOrders = {
    Expression:     "this.dependsOn(symbol) ? Infinity : 0",
    FreeVariable:   "(symbol === this._symbol ? 1 : 0)",
    Constant:       "0",
    Add:            "Math.max(order0, order1)",
    Subtract:       "Math.max(order0, order1)",
    Multiply:       "order0 + order1",
    Negative:       "order0",
    Divide:         "order1 > 0 ? Infinity : order0"
  };

  //Convert data above into proper member functions
  var wrap = function (expr) {
    /*jshint evil: true */
    expr = expr.replace("order0", "this.args[0].polynomialOrder(symbol)");
    expr = expr.replace("order1", "this.args[1].polynomialOrder(symbol)");
    return new Function(['symbol'], 'return ' + expr);
  };

  for (var nodeType in polynomialOrders) {
    var order = polynomialOrders[nodeType];
    nodes[nodeType].prototype.polynomialOrder = wrap(order);
  }

  nodes.Exponent.prototype.polynomialOrder = function (symbol) {
    var baseOrder = this.args[0].polynomialOrder(symbol);
    var exponentOrder = this.args[1].polynomialOrder(symbol);
    if (baseOrder === 0 && exponentOrder === 0) return 0;
      var exponent = this.args[1];
      if (exponent.isConstant &&
         exponent.constantValue === Math.round(exponent.constantValue) &&
         exponent.constantValue > 0) {
        return baseOrder * exponent.constantValue;
      }
    return Infinity;
  };

  // Allow piecewise expressions of the form {f(x):5} where f(x) is a boolean
  // expression in symbol
  nodes.Piecewise.prototype.polynomialOrder = function (symbol) {
    if (!this.dependsOn(symbol)) return 0;
    if (!this.args[2].isConstant || !isNaN(this.args[2].constantValue)) return Infinity;
    if (this.args[1].dependsOn(symbol)) return Infinity;
    return 0;
  };

  nodes.List.prototype.polynomialOrder = function (symbol) {
    return Infinity;
  };
});

define('math/features/polynomialcoefficients',['require','parsenodes'],function (require) {
  var nodes = require('parsenodes');
  var zero = nodes.Constant(0);
  var one = nodes.Constant(1);

  nodes.FreeVariable.prototype.getPolynomialCoefficients = function (symbol) {
    if (symbol === this._symbol) return [zero, one];
    return [this];
  };

  nodes.Constant.prototype.getPolynomialCoefficients = function (symbol) {
    return [this];
  };

  nodes.Add.prototype.getPolynomialCoefficients = function (symbol) {
    var coeffs0 = this.args[0].getPolynomialCoefficients(symbol);
    var coeffs1 = this.args[1].getPolynomialCoefficients(symbol);
    var order0 = coeffs0.length - 1;
    var order1 = coeffs1.length - 1;
    var coeffs = [];
    for (var i = 0; i <= Math.max(order0, order1); i++) {
      if (order0 >= i && order1 >= i) {
        coeffs.push(nodes.Add([coeffs0[i], coeffs1[i]]));
      } else {
        coeffs.push(order0 > order1 ? coeffs0[i] : coeffs1[i]);
      }
    }
    return coeffs;
  };

  nodes.Subtract.prototype.getPolynomialCoefficients = function (symbol) {
    var coeffs0 = this.args[0].getPolynomialCoefficients(symbol);
    var coeffs1 = this.args[1].getPolynomialCoefficients(symbol);
    var order0 = coeffs0.length - 1;
    var order1 = coeffs1.length - 1;
    var coeffs = [];
    for (var i = 0; i <= Math.max(order0, order1); i++) {
      if (order0 >= i && order1 >= i) {
        coeffs.push(nodes.Subtract([coeffs0[i], coeffs1[i]]));
      } else {
        coeffs.push(order0 > order1 ? coeffs0[i] : nodes.Negative([coeffs1[i]]));
      }
    }
    return coeffs;
  };

  nodes.Negative.prototype.getPolynomialCoefficients = function (symbol) {
    var coeffs0 = this.args[0].getPolynomialCoefficients(symbol);
    var coeffs = [];
    for (var i = 0; i < coeffs0.length; i++) {
      coeffs.push(nodes.Negative([coeffs0[i]]));
    }
    return coeffs;
  };

  nodes.Exponent.prototype.getPolynomialCoefficients = function (symbol) {
    var coeffs0 = this.args[0].getPolynomialCoefficients(symbol);
    var coeffs1 = this.args[1].getPolynomialCoefficients(symbol);
    var order0 = coeffs0.length - 1;
    var order1 = coeffs1.length - 1;
    if (order1 > 0) throw "can't solve for variable in exponent";
    if (order0 === 0) return [nodes.Exponent([coeffs0[0], coeffs1[0]])];
    if (this.args[1].isConstant) {
      var exponent = this.args[1].constantValue;
      switch(exponent) {
        case 0:
          return [zero];
        case 1:
          return coeffs0;
        case 2:
          return nodes.Multiply([this.args[0], this.args[0]]).getPolynomialCoefficients(symbol);
      }
    }
    throw "Unable to compile polynomial representation";
  };

  nodes.Multiply.prototype.getPolynomialCoefficients = function (symbol) {
    var coeffs0 = this.args[0].getPolynomialCoefficients(symbol);
    var coeffs1 = this.args[1].getPolynomialCoefficients(symbol);
    var order0 = coeffs0.length - 1;
    var order1 = coeffs1.length - 1;
    var coeffs = [];
    for (var i = 0; i <= order0; i++) {
      for (var j = 0; j <= order1; j++) {
        var newTerm = nodes.Multiply([coeffs0[i], coeffs1[j]]);
        var currentTerm = coeffs[i+j];
        if (currentTerm === undefined) {
          coeffs[i+j] = newTerm;
        } else {
          coeffs[i+j] = nodes.Add([currentTerm, newTerm]);
        }
      }
    }
    return coeffs;
  };

  nodes.Divide.prototype.getPolynomialCoefficients = function (symbol) {
    var coeffs0 = this.args[0].getPolynomialCoefficients(symbol);
    var coeffs1 = this.args[1].getPolynomialCoefficients(symbol);
    var order1 = coeffs1.length - 1;
    var coeffs = [];
    if (order1 > 0) throw "Can't solve for variable in denominator";
    for (var i = 0; i < coeffs0.length; i++) {
      coeffs.push(nodes.Divide([coeffs0[i], coeffs1[0]]));
    }
    return coeffs;
  };

  nodes.Expression.prototype.getPolynomialCoefficients = function (symbol) {
    if (this.dependsOn(symbol)) throw "Unimplemented polynomialCoefficient call";
    return [this];
  };

  // Only treating special case of expressions like {f(x):2} where f(x) is a boolean
  // expression in symbol. Everything else is screened out by polynomialOrder.
  //
  // In this case, behave as if condition is satisfied. Later, we use node.extractConditions
  // to reapply the original conditions to the solution.
  nodes.Piecewise.prototype.getPolynomialCoefficients = function (symbol) {
    if (!this.dependsOn(symbol)) return [this];
    var ifExprCoeffs = this.args[1].getPolynomialCoefficients(symbol);
    if (this.args[0].dependsOn(symbol)) return ifExprCoeffs;
    return [nodes.Piecewise(this.args[0], ifExprCoeffs[0], this.args[2])];
  };

});

// node.extractConditions(symbol, replacement) applies conditions in
// expression given by node to expression given by replacement, replacing
// instances of symbol in the conditions with replacement.
//
// The rationale for this is to allow solving expressions like
// y=sin(x){0<y<2}. Our solver first solves this to y=sin(x),
// and then extractConditions wraps the solution to be y={0<sin(x)<2:sin(x)}
define('math/features/extractconditions',['require','parsenodes'],function (require) {
  var nodes = require('parsenodes');

  nodes.Expression.prototype.extractConditions = function (symbol, replacement) {
    for (var i = 0; i < this.args.length; i++) {
      var arg = this.args[i];
      replacement = arg.extractConditions(symbol, replacement);
    }
    return replacement;
  };

  nodes.Constant.prototype.extractConditions = function (symbol, replacement) {
    return replacement;
  };

  nodes.Piecewise.prototype.extractConditions = function (symbol, replacement) {
    if (!this.dependsOn(symbol)) return replacement;
    if (!this.args[0].dependsOn(symbol)) {
      replacement = this.args[1].extractConditions(symbol, replacement);
      replacement = this.args[2].extractConditions(symbol, replacement);
      return replacement;
    }
    var substitution = {};
    substitution[symbol] = replacement;
    return nodes.Piecewise([
      this.args[0].substitute(substitution),
      replacement,
      nodes.Constant(NaN)
    ]);
  };
});

// node.boundDomain(symbol) returns an upper bound on the domain of symbol for
// which the expression given by node is defined.
//
//
// Returns false if we cannot bound the domain, or a domain in the form
// [xmin, xmax], in which case it should be valid for the plotter to plot the
// function only from xmin to xmax,.
//
// Ignores the distinction between strict and non-strict inequalities. This is
// important because the function may return NaN when evaluated exactly at the
// domain bounds, so the plotter needs to know how to deal with that.
// Otherwise, the domain bound should be "nearly tight" in the sense that it is
// tight up to floating point rounding.
//
// May return false when we don't know how to supply a "nearly tight" domain.
define('math/features/bounddomain',['require','parsenodes','math/builtinframe'],function (require) {
  var nodes = require('parsenodes');
  var BuiltInFrame = require('math/builtinframe');

  var zero = nodes.Constant(0);

  nodes.Base.prototype.boundDomain = function (symbol) {
    return false;
  };

  // Bail on lists for now. Cound bound each term separately, but
  // can't just take intersection of term bounds.
  nodes.List.prototype.boundDomain = function (symbol) {
    return false;
  };

  // The domain of an expression is the intersection of the domains of
  // its arguments.
  nodes.Expression.prototype.boundDomain = function (symbol) {
    var out = [-Infinity, Infinity];
    for (var i = 0; i < this.args.length; i++) {
      var arg = this.args[i];
      var domain = arg.boundDomain(symbol);
      if (!domain) return false;
      out = [Math.max(out[0], domain[0]), Math.min(out[1], domain[1])];
    }
    return out;
  };

  nodes.Constant.prototype.boundDomain = function (symbol) {
    return [-Infinity, Infinity];
  };

  // Tighten domain for piecewise functions with a linear inequality condition
  // and a NaN else_expr.
  nodes.Piecewise.prototype.boundDomain = function (symbol) {
    if (!this.args[2].isConstant || !isNaN(this.args[2].constantValue)) return false;
    var condDomain = this.args[0].boundDomain(symbol);
    var ifExprDomain = this.args[1].boundDomain(symbol);
    if (!condDomain || !ifExprDomain) return false;
    return [Math.max(condDomain[0], ifExprDomain[0]), Math.min(condDomain[1], ifExprDomain[1])];
  };

  nodes.BaseComparator.prototype.boundDomain = function (symbol) {
    if (this.operator === '=') return false; // Just bail on equality case
    var differenceTree = this._difference;
    var polynomialOrder = differenceTree.polynomialOrder(symbol);
    if (polynomialOrder > 1) return false;
    // Should strictly check sign of 0 order term, and return either complete or empty
    // set accordingly, but for plotting, this isn't relevant.
    if (polynomialOrder < 1) return [-Infinity, Infinity];

    var coeffTrees = differenceTree.getPolynomialCoefficients(symbol);
    var b = coeffTrees[1] ? coeffTrees[1].getConcreteTree(BuiltInFrame) : zero;
    var c = coeffTrees[0] ? coeffTrees[0].getConcreteTree(BuiltInFrame) : zero;

    // Only handle cases that constant collapse to finite constants.
    if (!b.isConstant || !c.isConstant) return false;
    if (!isFinite(b.constantValue) || !isFinite(c.constantValue)) return false;

    // Same note as polynomialOrder < 1 above.
    if (b.constantValue === 0) return [-Infinity, Infinity];

    var soln = -c.constantValue/b.constantValue;
    return (b.constantValue < 0) ? [-Infinity, soln] : [soln, Infinity];
  };
});
define('math/features/derivative',['require','parsenodes','math/baseparser','math/builtinframe','math/parsenode/builtinfunction'],function (require) {
  var Nodes = require('parsenodes');
  var Parser = require('math/baseparser');
  var BuiltInFrame = require('math/builtinframe');
  var BuiltInFunction = require('math/parsenode/builtinfunction');

  var zero = Nodes.Constant(0);
  var one = Nodes.Constant(1);
  var two = Nodes.Constant(2);

  var derivatives = {
    FreeVariable:   function (symbol) {return symbol === this._symbol ? one : zero},
    Constant:       function (symbol) {
      return isFinite(this.constantValue) ? zero : Nodes.Constant(this.constantValue);
    },
    Negative:       function (symbol) {return Nodes.Negative([this.args[0].takeDerivative(symbol)])},
    // ['x_1', 'y_1']
    Add: function (symbol) {
      return Nodes.Add([
        this.args[0].takeDerivative(symbol),
        this.args[1].takeDerivative(symbol)
      ]);
    },
    // Subtract: ['x_1', '-y_1'],
    Subtract: function (symbol) {
      return Nodes.Subtract([
        this.args[0].takeDerivative(symbol),
        this.args[1].takeDerivative(symbol)
      ]);
    },
    // Multiply: ['x*y_1', 'x_1*y'],
    Multiply: function(symbol){
      return Nodes.Add([
        checkDependence(symbol, this.args[0], Nodes.Multiply([this.args[0].takeDerivative(symbol), this.args[1]])),
        checkDependence(symbol, this.args[1], Nodes.Multiply([this.args[0], this.args[1].takeDerivative(symbol)])),
      ]);
    },
    // ['x_1/y, -(x*y_1)/y^2']
    Divide: function (symbol) {
      return Nodes.Subtract([
        checkDependence(symbol, this.args[0], Nodes.Divide([this.args[0].takeDerivative(symbol), this.args[1]])),
        checkDependence(symbol, this.args[1], Nodes.Divide([
          Nodes.Multiply([this.args[0], this.args[1].takeDerivative(symbol)]),
          Nodes.Exponent([this.args[1], two])
        ]))
      ]);
    },
    // ['y*x^y*x_1', '\\ln(x)*x^y*y_1']
    // subsidiary condition: derivative w.r.t y is 0 if x===0 and y>0
    Exponent: function (symbol) {
      return Nodes.Add([
        checkDependence(symbol, this.args[0], Nodes.Multiply([
          Nodes.Multiply([
            this.args[1],
            Nodes.Exponent([this.args[0], Nodes.Subtract([this.args[1], one])])
          ]),
          this.args[0].takeDerivative(symbol)
        ])),
        checkDependence(symbol, this.args[1], Nodes.Multiply([
          Nodes.Piecewise([
            Nodes.Comparator['=']([this.args[0], zero]),
            Nodes.Piecewise([
              Nodes.Comparator['>']([this.args[1], zero]),
              zero,
              Nodes.Constant(NaN)
            ]),
            Nodes.Multiply([
              Nodes.FunctionCall('\\ln', [this.args[0]]),
              Nodes.Exponent([this.args[0], this.args[1]])
            ]),
          ]),
          this.args[1].takeDerivative(symbol)
        ]))
      ]).getConcreteTree(BuiltInFrame);
    },
    Sum: function (symbol) {
      return this.copyWithArgs([
        this.args[0],
        this.args[1],
        this.args[2],
        this.args[3].takeDerivative(symbol)
      ]);
    },
    Product: function (symbol) {
      // If product has no zero terms, use (sum_i fi'/fi)(product_i fi)
      // If product has exactly 1 zero at ith term, use f1*f2*...*fi'*...*fn
      // If product has more than 1 non-zero term, then its derivative is 0.

      var nzeros = Nodes.Sum([
        this.args[0],
        this.args[1],
        this.args[2],
        Nodes.Piecewise([
          Nodes.Comparator['=']([zero, this.args[3]]),
          one,
          zero
        ])
      ]);

      var noZeros = Nodes.Multiply([
        Nodes.Sum([
          this.args[0],
          this.args[1],
          this.args[2],
          Nodes.Divide([
            this.args[3].takeDerivative(symbol),
            this.args[3]
          ])
        ]),
        Nodes.Product(this.args)
      ]);

      var oneZero = Nodes.Product([
        this.args[0],
        this.args[1],
        this.args[2],
        Nodes.Piecewise([
          Nodes.Comparator['=']([zero, this.args[3]]),
          this.args[3].takeDerivative(symbol),
          this.args[3]
        ])
      ]);

      return Nodes.Piecewise([
        Nodes.Comparator['=']([zero, nzeros]),
        noZeros,
        Nodes.Piecewise([
          Nodes.Comparator['=']([one, nzeros]),
          oneZero,
          zero
        ])
      ]);
    },
    Piecewise: function (symbol) {
      // TODO incorrect at condition boundaries
      if (this.args.length === 2) {
        return Nodes.Piecewise([
          this.args[0],
          this.args[1].takeDerivative(symbol)
        ]);
      } else if (this.args.length === 3) {
        return Nodes.Piecewise([
          this.args[0],
          this.args[1].takeDerivative(symbol),
          this.args[2].takeDerivative(symbol)
        ]);
      }
    },
    List: function (symbol) {
      return Nodes.List(this.args.map(function (arg) {
        return arg.takeDerivative(symbol);
      }));
    },
    ListAccess: function (symbol) {
      return this.constructor([this.args[0].takeDerivative(symbol), this.args[1]]);
    },
    SolvedEquation: function (symbol) {
      return this._expression.takeDerivative(symbol);
    },
    OptimizedRegression: function (symbol) {
      return this.model.takeDerivative(symbol);
    }
  };

  // TODO restrict domain on derivatives of inverse functions
  var oneArgFunctionDerivatives = {
    exp: '\\exp(x)*x_1',
    ln: '\\{x >= 0: x_1/x \\}',
    sqrt: 'x_1/(2*\\sqrt{x})',
    sin: '\\cos(x)*x_1',
    cos: '-\\sin(x)*x_1',
    tan: '\\sec(x)^2*x_1',
    arcsin: 'x_1/\\sqrt{1 - x^2}',
    arccos: '-x_1/\\sqrt{1 - x^2}',
    arctan: 'x_1/(1+x^2)',
    sinh: '\\cosh(x)*x_1',
    cosh: '\\sinh(x)*x_1',
    tanh: '(\\sech(x))^2*x_1',
    arcsinh: 'x_1/\\sqrt{x^2 + 1}',
    arccosh: '\\{ x > 0: x_1/\\sqrt{x^2 - 1} \\}',
    arctanh: '\\{ \\abs(x) < 1: x_1/(1 - x^2) \\}',
    csc: '-\\cot(x)*\\csc(x)*x_1',
    sec: '\\tan(x)*\\sec(x)*x_1',
    cot: '-\\csc(x)^2*x_1',
    arccsc: '-x_1/(\\abs(x)*\\sqrt{x^2 - 1})',
    arcsec: 'x_1/(\\abs(x)\\sqrt{x^2 - 1})',
    arccot: '-x_1/(1+x^2)',
    csch: '-\\coth(x)*\\csch(x)*x_1',
    sech: '-\\tanh(x)*\\sech(x)*x_1',
    coth: '-(\\csch(x))^2*x_1',
    arccsch: '-x_1/(\\abs(x)*\\sqrt{1 + x^2})',
    arcsech: '\\{ x >= 0: -x_1/(x*\\sqrt{1 - x^2}) \\}',
    arccoth: '\\{ \\abs(x) > 1 : x_1/(1 - x^2) \\}',
    factorial: '(x)!*\\polyGamma(0, x + 1)*x_1',
    floor: '\\{ \\mod(x, 1) > 0: 0*x_1 \\}',
    ceil: '\\{ \\mod(x, 1) > 0: 0*x_1 \\}',
    round: '\\{ \\abs(\\mod(x, 1) - 0.5) > 0: 0*x_1 \\}',
    abs: '\\{ \\abs(x) > 0: \\sign(x)*x_1 \\}',
    sign: '\\{ \\abs(x) > 0: 0*x_1 \\}',
    mean: '\\mean(x_1)',
    total: '\\total(x_1)',
    length: '0',
    'var': '2*\\cov(x, x_1)',
    stdev: '\\cov(x, x_1)/\\stdev(x)',
    stdevp: '\\covp(x, x_1)/\\stdevp(x)',
    mad: '\\mean(\\sign(x-\\mean(x))*(x_1 - \\mean(x_1)))',
    // TODO: ignores the case that the supremum/infimum of x contains more than 1 element.
    // In that case, the result should be NaN unless the derivative of all of the elements
    // of the supremum/infimum are equal.
    min: 'x_1[\\argmin(x)]',
    max: 'x_1[\\argmax(x)]',
    median: '0.5*(x_1[\\lowerQuantileIndex(x, 0.5)] + x_1[\\upperQuantileIndex(x, 0.5)])',
    // zero would be an okay answer here too, but this usually isn't relevant
    argmin: '0/0',
    argmax: '0/0',
  };

  var twoArgFunctionDerivatives = {
    log: [
      // d/dx ln(x) is actually real for negative x, too, but showing the
      // derivative in places where we don't show the function is confusing,
      // so restrict to x > 0.
      '\\{x > 0: \\frac{x_1}{x*\\ln(y)}\\}',
      '\\frac{-\\log_{y}(x)*y_1}{y*\\ln(y)}'
    ],
    pow: [
      'y*x^{y - 1}*x_1',
      'x^{y}*\\ln(x)*y_1'
    ],
    nthroot: [
      'x^{1/y - 1}/y*x_1',
      '-\\frac{x^{1/y}*\\ln(x)*y_1}{y^2}'
    ],
    polyGamma: [
      '0/0',
      '\\polyGamma(1 + x, y)*y_1'
    ],
    mod: [
      '\\{ \\abs(\\mod(x, y)) > 0: x_1 \\}',
      // Check whether division results in an integer directly instead
      // of computing mod of the args because division sometimes results
      // in an integer when modulus does not result in 0, e.g.
      //
      // 3.8 % -0.7599999999999999 -> 3.3306690738754696e-16, but
      // 3.8 / -0.7599999999999999 -> -5
      //
      // This can confuse the jump detector, resulting in spurious
      // connections.
      //
      //TODO still have some spurious connections near 0 in d/dx mod(3,x).
      // Why?
      '\\{ \\mod(x/y, 1) > 0: -\\floor(x/y)*y_1 \\}'
    ],
    cov: [
      '\\cov(x_1, y)',
      '\\cov(x, y_1)'
    ],
    covp: [
      '\\covp(x_1, y)',
      '\\covp(x, y_1)'
    ],
    corr: [
      '(\\cov(x_1, y) - (\\cov(x, y)*\\cov(x, x_1)/\\var(x)))/(\\stdevp(x)\\stdevp(y))',
      '(\\cov(x, y_1) - (\\cov(x, y)*\\cov(y, y_1)/\\var(y)))/(\\stdevp(x)\\stdevp(y))'
    ],
    quantile: [
      '\\{ \\floor(y*(\\length(x)-1)) = y*(\\length(x)-1) : ' +
      '  x_1[\\upperQuantileIndex(x, y)],' +
      '  (\\ceil(y*(\\length(x)-1)) - y*(\\length(x)-1))*x_1[\\lowerQuantileIndex(x, y)] + ' +
      '  (y*(\\length(x)-1) - \\floor(y*(\\length(x)-1)))*x_1[\\upperQuantileIndex(x, y)]' +
      '\\}',
      '\\{ \\floor(y*(\\length(x)-1)) < y*(\\length(x)-1) : ' +
      '  (x[\\upperQuantileIndex(x, y)] - x[\\lowerQuantileIndex(x, y)])*y_1'+
      '\\}'
    ],
    upperQuantileIndex: ['0/0', '0/0'],
    lowerQuantileIndex: ['0/0', '0/0'],
    // We actually round arguments for these functions, so to be consistent,
    // these could be defined as 0 except at integers where they're undefined,
    // but that is not a standard definition.
    //
    // Can also define continuous nCr and nPr using gamma function.
    lcm: ['0/0', '0/0'],
    gcd: ['0/0', '0/0'],
    nCr: ['0/0', '0/0'],
    nPr: ['0/0', '0/0']
  };

  var oneArgDerivativeFunction = function (derivativeTree) {
    return function (symbol) {
      var args = this.args;
      var substitutions = {
        x: args[0],
        x_1: args[0].takeDerivative(symbol)
      };
      return checkDependence(symbol, args[0], derivativeTree.substitute(substitutions)).getConcreteTree(BuiltInFrame);
    };
  };

  var twoArgDerivativeFunction = function (derivativeTree1, derivativeTree2) {
    return function (symbol) {
      var args = this.args;
      var substitutions = {
        x: args[0],
        x_1: args[0].takeDerivative(symbol),
        y: args[1],
        y_1: args[1].takeDerivative(symbol)
      };

      return Nodes.Add([
        checkDependence(symbol, args[0], derivativeTree1.substitute(substitutions)),
        checkDependence(symbol, args[1], derivativeTree2.substitute(substitutions))
      ]).getConcreteTree(BuiltInFrame);
    };
  };

  for (var k in oneArgFunctionDerivatives) {
    BuiltInFunction[k].prototype.takeDerivative = oneArgDerivativeFunction(
      Parser.parse(oneArgFunctionDerivatives[k])
    );
  }

  for (k in twoArgFunctionDerivatives) {
    BuiltInFunction[k].prototype.takeDerivative = twoArgDerivativeFunction(
      Parser.parse(twoArgFunctionDerivatives[k][0]),
      Parser.parse(twoArgFunctionDerivatives[k][1])
    );
  }

  var checkDependence = function (symbol, arg, tree) {
    return arg.dependsOn(symbol) ? tree : zero;
  };

  for(var nodeType in derivatives){
    var derivative = derivatives[nodeType];
    Nodes[nodeType].prototype.takeDerivative = derivative;
  }
});

// substitute does non-recursive replacement of identifiers specified in a frame.
// It differs from getConcreteTree by being non-recursive. Currently, this feature
// is used only in the derivative system to substitute arguments into derivative
// definitions.
define('math/features/substitute',['require','parsenodes'],function (require) {
  var Nodes = require('parsenodes');

  var substitutions = {
    Identifier: function (frame) { return frame[this._symbol] ? frame[this._symbol] : this; },
    FreeVariable: function (frame) { return frame[this._symbol] ? frame[this._symbol] : this; },
    Constant: function (frame) { return this; },
    Expression: function (frame) {
      return this.copyWithArgs(this.args.map(function (arg) {
        return arg.substitute(frame);
      }));
    },
    List: function (frame) {
      return Nodes.List(this.args.map(function (arg) {
        return arg.substitute(frame);
      }));
    },
    SolvedEquation: function (symbol) {
      return this.constructor(this._symbol, this._expression.substitute(symbol));
    },
    OptimizedRegression: function (symbol) {
      return this.constructor(
        this.model.substitute(symbol),
        this.parameters,
        this.residualVariables,
        this.residuals,
        this.statistics
      );
    }
  };

  for (var key in substitutions) {
    Nodes[key].prototype.substitute = substitutions[key];
  }
});

// Only defines a function on basecomparator, but making this a feature because
// it needs to use baseparser.
define('math/features/solve',['require','math/baseparser','math/parsenode/constant','math/parsenode/equation','math/parsenode/solvedequation','math/parsenode/basecomparator','math/parsenode/list','math/errormsg','math/builtinframe','math/policy'],function (require) {
  var Parser = require('math/baseparser');
  var Constant = require('math/parsenode/constant');
  var Equation = require('math/parsenode/equation');
  var SolvedEquation = require('math/parsenode/solvedequation');
  var BaseComparator = require('math/parsenode/basecomparator');
  var List = require('math/parsenode/list');
  var ErrorMsg = require('math/errormsg');
  var BuiltInFrame = require('math/builtinframe');
  var Policy = require('math/policy');

  var zero = Constant(0);

  // Can't easily write this as a single calculator expression because the length
  // of the result depends on values.
  var linearSolutionTree = Parser.parse('[-c/b]');
  var degenerateSolutionTree = Parser.parse('[-b/(2*a)]');
  var generalSolutionTree = Parser.parse('[\\{a>0:q,p\\},\\{a>0:p,q\\}]');
  function _solveSingleVariableEquation (localFrame) {
    _populateFrame(localFrame);
    if (localFrame.a.constantValue === 0) {
      if (localFrame.b.constantValue === 0) {
        return Constant(localFrame.c.constantValue === 0);
      }
      return linearSolutionTree.getConcreteTree(localFrame);
    }
    // f - g is the discriminant. If it's negative, there are no solutions
    // If it's 0, there is only one solution (with multiplicity 2)
    if (localFrame.f.constantValue - localFrame.g.constantValue < 0) {
      return List([Constant(false)]);
    }
    if (localFrame.f.constantValue - localFrame.g.constantValue === 0) {
      return degenerateSolutionTree.getConcreteTree(localFrame);
    }
    return generalSolutionTree.getConcreteTree(localFrame);
  }


  function _populateABC (coeffTrees) {
    var localFrame = Object.create(BuiltInFrame);
    // Set up a frame with variables relevant to the solution of a quadratic inequality
    // or equation: ax^2+bx+c=0
    localFrame.a = coeffTrees[2] ? coeffTrees[2].tryGetConcreteTree(BuiltInFrame) : zero;
    localFrame.b = coeffTrees[1] ? coeffTrees[1].tryGetConcreteTree(BuiltInFrame) : zero;
    localFrame.c = coeffTrees[0] ? coeffTrees[0].tryGetConcreteTree(BuiltInFrame) : zero;
    return localFrame;
  }

  var fTree = Parser.parse('b*b');
  var gTree = Parser.parse('4*a*c');
  // p and q are the two solutions to the quadratic equation.
  var pTree = Parser.parse('(-b+\\sqrt{b*b-4*a*c})/(2*a)');
  var qTree = Parser.parse('(-b-\\sqrt{b*b-4*a*c})/(2*a)');
  var eqnSolutionTree = Parser.parse('[' +
    '\\{a=0:\\{b<0:-c/b\\},q\\},' +
    '\\{a=0:\\{b>=0:-c/b\\},p\\}' +
  ']');
  var inequalitySolutionTree = Parser.parse('[' +
    '\\{a=0:\\{b<0:-c/b\\},a>0:q\\},' +
    '\\{a=0:\\{b=0:\\{c>0:-m\\}\\},a>0:\\{f<g:-m\\},p\\},' +
    '\\{a=0:\\{b=0:\\{c>0:m\\}\\},a>0:\\{f<g:m\\},q\\},' +
    '\\{a=0:\\{b>0:-c/b\\},a>0:p\\}' +
  ']');

  function _effectiveOrder (localFrame) {
    if (localFrame.a.constantValue === 0) {
      if (localFrame.b.constantValue === 0) return 0;
      return 1;
    }
    return 2;
  }

  function _chooseVariable (concreteDifference, dependencies, isInequality) {
    /* jshint loopfunc: true */

    //ask for trees to represent the coefficients
    var variableOfInterest;
    var effectiveOrders = [];
    var localFrames = [];
    var localFrame;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      var order = 0;
      List.eachArgs([concreteDifference], function (args) {
        var arg = args[0];
        order = Math.max(order, arg.polynomialOrder(dependency));
      });

      var orderTooHigh = order > 2;
      var invalidVariable = dependencies.length > 1 && !Policy.validSolvedVariable(dependency);
      // piecewiseIneqality check is a little bit subtle. Relies on the fact that extractConditions
      // returns the original expression iff it finds no piecewise expressions that depend on
      // dependency.
      var piecewiseInequality = isInequality && concreteDifference.extractConditions(dependency, zero) !== zero;

      if (orderTooHigh || invalidVariable || piecewiseInequality) {
        localFrames[i] = {};
        effectiveOrders[i] = Infinity;
        continue;
      }

      localFrames[i] = [];
      effectiveOrders[i] = 0;
      List.eachArgs([concreteDifference], function (args) {
        var arg = args[0];
        localFrame = _populateABC(arg.getPolynomialCoefficients(dependency));
        localFrames[i].push(localFrame);
        effectiveOrders[i] = Math.max(effectiveOrders[i], _effectiveOrder(localFrame));
      });
    }

    var effectiveOrder;
    if (dependencies.length === 1) {
      localFrame = localFrames[0];
      variableOfInterest = dependencies[0];
      effectiveOrder = effectiveOrders[0];
    } else { // dependencies.length === 2
      var index;
      if (effectiveOrders[0] === 0) {
        index = 1;
      } else if (effectiveOrders[1] === 0) {
        index = 0;
      } else {
        index = effectiveOrders[0] < effectiveOrders[1] ? 0 : 1;
      }
      localFrame = localFrames[index];
      variableOfInterest = dependencies[index];
      effectiveOrder = effectiveOrders[index];
    }

    return {
      localFrame: localFrame,
      variableOfInterest: variableOfInterest,
      effectiveOrder: effectiveOrder
    };
  }

  var solvers = {
    singleVariable: _solveSingleVariableEquation,
    inequality: function (localFrame) {
      _populateFrame(localFrame);
      return inequalitySolutionTree.getConcreteTree(localFrame);
    },
    generalEquation: function (localFrame) {
      _populateFrame(localFrame);
      return eqnSolutionTree.getConcreteTree(localFrame);
    }
  };

  function _chooseSolver (dependencies, isInequality) {
    if (isInequality) return solvers.inequality;
    if (dependencies.length === 1) return solvers.singleVariable;
    return solvers.generalEquation;
  }

  function _populateFrame (localFrame) {
    // f - g is the discriminant
    localFrame.f = fTree.getConcreteTree(localFrame);
    localFrame.g = gTree.getConcreteTree(localFrame);
    // p and q are the two solutions to the quadratic equation.
    localFrame.p = pTree.getConcreteTree(localFrame);
    localFrame.q = qTree.getConcreteTree(localFrame);
    // m is a standin for Infinity. This is kind of a hack to help us shade from a
    // solution to "infinity," working around the fact that the rest of the pipeline
    // doesn't always handle infinity well.
    localFrame.m = Constant(1e305);
  }

  Equation.prototype.solve = function (frame) {
    return this.asComparator().solve(frame);
  };

  BaseComparator.prototype.solve = function (frame) {
    /* jshint maxcomplexity:18 */
    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return concrete;
    if (concrete.isConstant) return concrete;

    var isInequality = this.getOperator() !== '=';

    //get concrete tree for the difference
    var concreteDifference = this._difference.tryGetConcreteTree(frame);

    var dependencies = concreteDifference.getDependencies();

    if (dependencies.length === 0) {
      if (concreteDifference.isList) return List(concreteDifference.args.map(function (arg) {
        return Constant(arg.constantValue === 0);
      }));
      return Constant(concreteDifference.constantValue === 0);
    }

    if (dependencies.length === 1 && concreteDifference.isList && !isInequality) {
      return ErrorMsg.singleVariableListSolve();
    }

    // After this point, it's easier if we can just assume everything is a list.
    var concreteDifferences = concreteDifference.isList ? concreteDifference : List([concreteDifference]);

    if (dependencies.length > 2) {
      return ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).setDependencies(dependencies);
    }

    if (isInequality && !Policy.validInequalityVariables(dependencies)) {
      return ErrorMsg.invalidInequalityVariables().setDependencies(dependencies);
    }

    if (dependencies.length === 2 && !Policy.validImplicitVariables(dependencies)) {
      return ErrorMsg.invalidImplicitVariables().setDependencies(dependencies);
    }

    var result = _chooseVariable(concreteDifferences, dependencies, isInequality);
    var localFrame = result.localFrame;
    var effectiveOrder = result.effectiveOrder;
    var variableOfInterest = result.variableOfInterest;

    if (Policy.complicatedPolarImplicit(variableOfInterest, effectiveOrder)) {
      if (isInequality || dependencies.length > 1) {
        return ErrorMsg.complicatedPolarImplicit().setDependencies(dependencies);
      }
    }

    if (effectiveOrder > 2) {
      if (dependencies.length === 1) return ErrorMsg.unsolvable().setDependencies(dependencies);
      if (isInequality) return ErrorMsg.complicatedImplicitInequality().setDependencies(dependencies);
      return concreteDifference;
    }

    var solveScalar = _chooseSolver(dependencies, isInequality);

    var allBranches = [];
    for (var i = 0; i < localFrame.length; i++) {
      var branches = solveScalar(localFrame[i]);
      if (branches.isError) return branches;
      if (branches.isConstant) {
        allBranches.push(branches);
        continue;
      }
      for (var j = 0; j < branches.args.length; j++) {
        var branch = branches.args[j];
        var restricted = concreteDifferences.args[i]
          .extractConditions(variableOfInterest, branch)
          .getConcreteTree(frame)
        ;
        allBranches.push(restricted);
      }
    }

    return SolvedEquation(variableOfInterest, List(allBranches));
  };
});
define('worker/workerconfig',[],function () {
  // Warning--this is shared mutable configuration state for the worker.
  // If anything here changes, it is the job of the context to invalidate
  // itself and reprocess all statements.
  return {
    singlevarsolutions: true
  };
});
// Basically temporary shim to support the API of the current formula object and allow integration into the rest of the
// system. API here is just a direct copy, funny naming and all.

define('math/evaluationstate',['require','graphing/graphmode','parsenodes','graphing/label','worker/workerconfig'],function(require){
  var GRAPHMODE = require('graphing/graphmode');
  var nodes = require('parsenodes');
  var Label = require('graphing/label');
  var workerConfig = require('worker/workerconfig');

  function _tableCellValue (concrete) {
    if (concrete.isError) return concrete.getError();
    if (concrete.constantValue === undefined) return '';
    return +concrete.constantValue;
  }

  function _tableState (raw, concrete) {
    var columnData = [];
    for (var i = 0; i < raw.columns.length; i++) {
      var column = concrete.columns[i];
      var state = {
        dependent: !column.isIndependent,
        discrete: column.isIndependent
      };
      if (column.isError) {
        state.error = column.getError();
        state.values = [];
      } else {
        state.values = column.values.args.map(_tableCellValue);
      }
      columnData.push(state);
    }
    return {
      can_auto_regress: raw.canAutoRegress(concrete),
      column_data: columnData
    };
  }

  var _defaultEvaluationState = function () {
    return {
     operator: '=',
     variables: []
    };
  };

  var EvaluationState = function (raw, concrete) {
    /* jshint maxcomplexity:20 */
    //Compute serializable evaluation state from raw and concrete parseTrees

    // Tables follow a completely different format for their
    // evaluation state.
    if (raw.isTable) return _tableState(raw, concrete);

    //Reasonable defaults
    var state = _defaultEvaluationState();

    //What errors should it return? (if any)
    if (concrete.isError) {
      state.error = concrete.getError();
      state.variables = raw.getSliderVariables(concrete);
      return state;
    }

    if (concrete.isMovablePoint) {
      state.move_ids = concrete._moveIds;
      state.move_matrix = concrete._moveMatrix;
    }

    if (raw.isInequality()) state.is_inequality = true;
    state.operator = raw.getOperator();

    //Does it assign anything
    if (concrete instanceof nodes.SolvedEquation) {
      // Set assignment for things like x=3, but not for equations
      // that are satisfied everywhere or nowhere
      if (
        concrete._expression.constantValue !== true &&
        concrete._expression.constantValue !== false
      ) {
        state.assignment = concrete._symbol;
      }
    } else if (raw instanceof nodes.Assignment) {
      // Cover assignments that don't need to be solved, like b=1+2
      state.assignment = raw._symbol;
    }

    //How should it be graphed? (if at all)
    var graphMode = raw.getGraphMode(concrete);
    if (graphMode !== GRAPHMODE.NONE) {
      state.is_graphable = true;

      if (graphMode === GRAPHMODE.XYPOINT)         state.is_point_list = true;
      if (graphMode === GRAPHMODE.XYPOINT_MOVABLE) state.is_point_list = true;
      if (graphMode === GRAPHMODE.PARAMETRIC)      state.is_parametric = true;
      if (concrete.isShadeBetween())               state.is_shade_between = true;

      var table_info = raw.tableInfo(concrete);
      if (table_info) {
        state.is_tableable = true;
        state.table_info = table_info;
      }
    }

    //What sliders should it prompt for? (none if graphable)
    state.variables = state.is_graphable ? [] : raw.getSliderVariables(concrete);

    var sliderInfo = raw.getSliderInfo();
    if (sliderInfo) {
      state.is_slidable = true;
      state.is_animatable = !state.is_graphable; //Don't animate graphed sliders
      state.constant_value = sliderInfo.value;
    } else if (concrete.isConstant) {
      state.constant_value = concrete.constantValue;
    }

    //How should it be evaluated? (if at all)
    var values = concrete.getEvaluationInfo();
    if (
      values &&
      !raw.isConstant &&
      !raw.isFunction &&
      !state.is_graphable &&
      !state.is_slidable &&
      !(
        (!workerConfig.singlevarsolutions) &&
        (concrete instanceof nodes.SolvedEquation)
      )
    ) {
      state.is_evaluable = true;
      state.zero_values = values;
    }

    if (concrete instanceof nodes.OptimizedRegression) {
      var parameterValues = {};
      for (var p in concrete.parameters) {
        if (!concrete.parameters.hasOwnProperty(p)) continue;
        parameterValues[Label.identifierToLatex(p)] = +concrete.parameters[p].constantValue;
      }

      state.is_regression = true;
      state.regression = {
        parameters: parameterValues,
        residualVariable: Label.identifierToLatex(concrete.residualVariable),
        residualSuggestionId: concrete.residualSuggestionId,
        shouldSuggestLogMode: concrete.shouldSuggestLogMode,
        statistics: concrete.statistics
      };
    }

    return state;
  };

  EvaluationState.default = _defaultEvaluationState;

  return EvaluationState;
});

define('math/statementanalysis',['require','math/evaluationstate','pjs','graphing/graphmode'],function(require){
  var getEvaluationState = require('math/evaluationstate');
  var P = require('pjs');
  var GRAPHMODE = require('graphing/graphmode');

  return P(function(analysis){
    analysis.init = function (raw, concrete) {
      this.rawTree = raw;
      this.concreteTree = concrete;
      this.evaluationState = getEvaluationState(raw, concrete);
    };

    analysis.exportTo = function (frame) {
      this.rawTree.exportTo(this.concreteTree, frame);
    };

    analysis.graph = function (viewState) {
      return this.rawTree.graph(this.concreteTree, viewState);
    };

    analysis.getGraphMode = function () {
      return this.rawTree.getGraphMode(this.concreteTree);
    };

    analysis.getGraphInfo = function () {
      return this.rawTree.getGraphInfo(this.concreteTree);
    };

    analysis.shouldIntersect = function () {
      if (!this.evaluationState.is_graphable) return false;
      if (!this.rawTree.userData.shouldGraph) return false;
      var graphMode = this.getGraphMode();
      return graphMode === GRAPHMODE.X || graphMode === GRAPHMODE.Y;
    };
  });
});

define('math/features/analyze',['require','parsenodes','math/statementanalysis','math/builtinframe','math/policy','math/errormsg','math/comparators'],function (require) {
  var nodes = require('parsenodes');
  var StatementAnalysis = require('math/statementanalysis');
  var BuiltInFrame = require('math/builtinframe');
  var Policy = require('math/policy');
  var Constant = nodes.Constant;
  var ErrorMsg = require('math/errormsg');
  var Comparators = require('math/comparators');
  var FreeVariable = nodes.FreeVariable;

  var zero = Constant(0);

  nodes.Base.prototype.analyze = function (frame) {
    return StatementAnalysis(this, this.tryGetConcreteTree(frame));
  };

  nodes.Expression.prototype.analyze = function (frame) {
    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return StatementAnalysis(this, concrete);
    var dependencies = concrete.getDependencies();
    if (dependencies.length > 1) {
      if (Policy.validImplicitVariables(dependencies)) {
        return StatementAnalysis(this, ErrorMsg.equationRequired().setDependencies(dependencies));
      } else {
        return StatementAnalysis(
          this,
          ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).setDependencies(dependencies)
        );
      }
    } else if (dependencies.length === 1 && !Policy.validExpressionVariable(dependencies[0])) {
      return StatementAnalysis(
        this,
        ErrorMsg.equationRequired(dependencies[0]).setDependencies(dependencies)
      );
    } else {
      return StatementAnalysis(this, concrete);
    }
  };

  nodes.Identifier.prototype.analyze = function (frame) {
    return StatementAnalysis(this, this.tryGetConcreteTree(frame));
  };

  nodes.FunctionDefinition.prototype.analyze = function (frame) {
    if (BuiltInFrame[this._symbol]) {
      return StatementAnalysis(this, ErrorMsg.cannotRedefine(this._symbol));
    }

    //Make sure free variables are all arguments
    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return StatementAnalysis(this, concrete);
    var argSymbols = this._argSymbols;

    var dependencies = concrete.getDependencies();

    var freeVariables = dependencies.filter(function (symbol) {
      return argSymbols.indexOf(symbol) === -1;
    });

    if (Policy.unplottablePolarFunction(this._symbol, dependencies)) {
      return StatementAnalysis(this, ErrorMsg.unplottablePolarFunction());
    }

    if (freeVariables.some(Policy.assignmentForbidden)) {
      return StatementAnalysis(
        this,
        ErrorMsg.addArgumentsToDefinition(freeVariables, this._symbol, argSymbols).setDependencies(dependencies)
      );
    } else if (freeVariables.length) {
      return StatementAnalysis(
        this,
        ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).setDependencies(dependencies)
      );
    } else {
      return StatementAnalysis(this, concrete);
    }
  };

  nodes.Assignment.prototype.analyze = function (frame) {
    var lhs = this._symbol;
    if (!Policy.validLHS(lhs)) return StatementAnalysis(this, ErrorMsg.invalidLHS(lhs));
    if (BuiltInFrame[lhs]) return StatementAnalysis(this, ErrorMsg.cannotRedefine(lhs));

    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return StatementAnalysis(this, concrete);
    var dependencies = concrete.getDependencies();

    // If the assigned symbol appears on the RHS, analyze as an equation
    if (dependencies.indexOf(this._symbol) !== -1) {
      var eqnAnalysis = this.asEquation().analyze(frame);
      return StatementAnalysis(this, eqnAnalysis.concreteTree);
    }

    if (dependencies.length > 1) {
      return StatementAnalysis(
        this,
        ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).allowExport().setDependencies(dependencies)
      );
    }

    return StatementAnalysis(this, concrete);
  };

  nodes.Regression.prototype.analyze = function (frame, exportFrame, lastExportFrame, priorAnalysis) {
    return StatementAnalysis(this, this.tryOptimize(frame, exportFrame, lastExportFrame, priorAnalysis));
  };

  nodes.Equation.prototype.analyze =
  nodes.BaseComparator.prototype.analyze = function (frame) {
    // solve may throw an error because it constructs new parse trees, and these
    // may overflow our complexity limit
    var solution;
    try {
      solution = this.solve(frame);
    } catch (e) {
      if (e instanceof nodes.Error) {
        solution = e;
      } else {
        throw e;
      }
    }

    return StatementAnalysis(this, solution);
  };

  nodes.DoubleInequality.prototype.analyze = function (frame) {
    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return StatementAnalysis(this, concrete);

    var dependencies = concrete.getDependencies();

    if (Comparators.table[this._operators[0]].direction !== Comparators.table[this._operators[1]].direction) {
      return StatementAnalysis(this, ErrorMsg.mismatchedDoubleInequality());
    }

    if (!Policy.validDoubleInequalitySymbol(concrete._symbol)) {
      return StatementAnalysis(
        this,
        ErrorMsg.invalidDoubleInequalityVariables().setDependencies(dependencies)
      );
    }

    if (!Policy.validDoubleInequalityVariables(dependencies)) {
      return StatementAnalysis(
        this,
        ErrorMsg.invalidDoubleInequalityVariables().setDependencies(dependencies)
      );
    }

    if (dependencies.length > 2) {
      return StatementAnalysis(
        this,
        ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).setDependencies(dependencies)
      );
    }

    if (
      concrete._expressions[0].getDependencies().indexOf(concrete._symbol) !== -1 ||
      concrete._expressions[1].getDependencies().indexOf(concrete._symbol) !== -1
    ) {
      return StatementAnalysis(this, ErrorMsg.complicatedDoubleInequality().setDependencies(dependencies));
    }

    return StatementAnalysis(this, concrete);
  };

  // Complicated double inequalities like x < y^2 < z compile to And comparators.
  nodes.And.prototype.analyze = function (frame) {
    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return StatementAnalysis(this, concrete);

    var dependencies = concrete.getDependencies();
    if (dependencies.length) {
      if (Policy.validDoubleInequalityVariables(dependencies)) {
        return StatementAnalysis(
          this,
          ErrorMsg.complicatedDoubleInequality().setDependencies(dependencies)
        );
      }
      return StatementAnalysis(
        this,
        ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).setDependencies(dependencies)
      );
    }

    return StatementAnalysis(this, concrete);
  };

  nodes.OrderedPair.prototype.analyze = function (frame, priorAnalysis) {
    //movable points rely on prior analysis to find moveIds
    var concrete = this.tryGetConcreteTree(frame);
    if (concrete.isError) return StatementAnalysis(this, concrete);
    var analysis = StatementAnalysis(this, concrete);

    //Check for free variables that aren't t
    var dependencies = concrete.getDependencies();

    if (dependencies.length) {
      if (Policy.validParametricVariables(dependencies)) return analysis;
      return StatementAnalysis(
        this,
        ErrorMsg.tooManyVariables(this.getSliderVariables(concrete)).setDependencies(dependencies)
      );
    }

    //Check preconditions for being a movable point
    if (!analysis.evaluationState.is_graphable) return analysis;
    if (analysis.evaluationState.variables.length !== 0) return analysis;
    if (this.args[0].isList || this.args[1].isList) return analysis; //We only move single points

    var movable;
    var coupled;
    var moveIds = [undefined, undefined];
    var moveMatrix = [
      [1, 0, 0],
      [0, 1, 0]
    ];

    var coordTrees = this.args; //Each coordinate of the point
    coordTrees.forEach(function (tree, index) {
      /* jshint maxcomplexity:14 */
      if (coupled) return;
      var symbols = tree.getDependencies();
      var otherTree = coordTrees[index === 0 ? 1 : 0];
      var definitionId;

      // Symbols are stored in order of lexical first appearance in _referencedSymbols.
      // Traversing the array in reverse order means we will move the slider variable that
      // has the last first occurance.
      for (var i = symbols.length - 1; i >= 0; i--) {
        definitionId = undefined;
        var symbol = symbols[i];
        //Make sure the variable is defined by a slider
        //TODO - find statement ID from symbol var definitionId = frame.getDefinitionId(symbol);
        for (var id in priorAnalysis) {
          //Find id of slider defining symbol if there is one
          if (priorAnalysis[id].evaluationState.assignment === symbol &&
             priorAnalysis[id].evaluationState.is_slidable) {
              definitionId = id;
              break;
          }
        }
        //Make sure we found a slider
        if (definitionId === undefined) continue;

        //Make sure we are linear in the variable

        //Create a frame that shadows the definition of our symbol of interest
        //So that we can ask for the polynomialOrder, etc.
        var localFrame = Object.create(frame);
        localFrame[symbol] = FreeVariable(symbol);
        var concreteTree = tree.tryGetConcreteTree(localFrame);
        if (concreteTree.isError) continue;
        var order = concreteTree.polynomialOrder(symbol);
        if (order !== 1) continue;

        //Find the parameters
        var coeffs = concreteTree.getPolynomialCoefficients(symbol);
        var b = coeffs[1] ? coeffs[1].getConcreteTree(localFrame) : zero;
        var c = coeffs[0] ? coeffs[0].getConcreteTree(localFrame) : zero;
        if (!c.isConstant || !b.isConstant) continue;
        if (b.constantValue === 0) continue;

        // Don't handle coupled variables (yet...)
        //var otherOrder = otherTree.polynomialOrder(frame, symbol);
        var otherConcreteTree = otherTree.tryGetConcreteTree(localFrame);
        if (otherConcreteTree.isError) continue;
        var otherOrder = otherConcreteTree.polynomialOrder(symbol);
        if (otherOrder > 0) {
          //if other moveID exists, continue
          if (moveIds[0]) continue;
          //set coupled = true to prevent future links
          if (otherOrder !== 0) coupled = true;
        }

        moveMatrix[index][index] = 1 / b.constantValue;  //Linear term
        moveMatrix[index][2] = -c.constantValue / b.constantValue;      //Constant term

        movable = true;
        moveIds[index] = definitionId;

        break;
      }

    });

    if (movable) {
      // Avoid double updating in case of [ 'a = 1', '(a, a)' ]
      // TODO - may be able to avoid this check with coupling check above
      if (moveIds[1] === moveIds[0]) moveIds[1] = undefined;
      return StatementAnalysis(this, nodes.MovablePoint(concrete.args, moveIds, moveMatrix));
    } else {
      return analysis;
    }
  };

  function _removeLocals (symbols, localFrame) {
    return symbols.filter(function (symbol) { return !localFrame[symbol]; });
  }

  nodes.Table.prototype.analyze = function (frame) {
    var localFrame = Object.create(frame);

    // Note, currently process column definitions left to right.
    // Could switch to running dependency ordering first.
    var concreteColumns = [];
    var firstColumnSymbol;
    for (var i = 0; i < this.columns.length; i++) {
      var columnAnalysis = this.columns[i].analyze(localFrame, frame);
      if (i === 0) {
        // First column must be an independent variable. Check with Policy
        // that that variable is valid.
        if (!columnAnalysis.concreteTree.isIndependent) {
          columnAnalysis = StatementAnalysis(this.columns[i], ErrorMsg.invalidDependentFirstTableColumn());
        } else if (!Policy.validFirstColumnVariable(columnAnalysis.concreteTree.header._symbol)) {
          columnAnalysis = StatementAnalysis(this.columns[i], ErrorMsg.invalidFirstTableColumn());
        } else {
          firstColumnSymbol = columnAnalysis.concreteTree.header._symbol;
        }
      }
      if (columnAnalysis.concreteTree.isIndependent) {
        localFrame[columnAnalysis.concreteTree.header._symbol] = columnAnalysis.concreteTree.values;
      } else if (!columnAnalysis.concreteTree.isError) {
        // Dependent columns must have no dependencies, or depend only on the
        // first column variable
        var dependencies = columnAnalysis.concreteTree.header.getDependencies();
        var freeDependencies = _removeLocals(dependencies, localFrame);
        if (freeDependencies.length) {
          columnAnalysis = StatementAnalysis(
            this.columns[i],
            ErrorMsg.tooManyVariables(freeDependencies).setDependencies(freeDependencies)
          );
        }
      }
      concreteColumns.push(columnAnalysis.concreteTree);
    }
    var concreteTable = nodes.Table(concreteColumns);
    var analysis = StatementAnalysis(this, concreteTable);
    analysis.evaluationState.is_graphable = true; // TODO wrong place for this
    return analysis;
  };

  nodes.TableColumn.prototype.analyze = function (frame, parentFrame) {
    var headerError = this.header.tableError();
    if (headerError) return StatementAnalysis(this, ErrorMsg.invalidTableHeader(headerError));

    var concrete = this.tryGetConcreteTree(frame, parentFrame);
    if (concrete.isError) return StatementAnalysis(this, concrete);
    // TODO following error checking lines should not be necessary, because an error in
    // the header should throw
    if (concrete.header.isError) return StatementAnalysis(this, concrete.header);
    if (concrete.values.isError) return StatementAnalysis(this, concrete.values);
    for (var i = 0; i < concrete.values.args.length; i++) {
      if (concrete.values.args[i].isError) continue;
      var entryError = this.values.args[i] && this.values.args[i].tableError();
      if (entryError) {
        concrete.values.args[i] = ErrorMsg.invalidTableEntry(entryError);
        continue;
      }
      var dependencies = concrete.values.args[i].getDependencies();
      if (dependencies.length) {
        concrete.values.args[i] = ErrorMsg.tooManyVariables(dependencies).setDependencies(dependencies);
      }
    }

    return StatementAnalysis(this, concrete);
  };
});

define('math/features/getgraphmode',['require','parsenodes','math/policy','graphing/graphmode'],function (require) {
  var nodes = require('parsenodes');
  var Policy = require('math/policy');
  var GRAPHMODE = require('graphing/graphmode');

  // Default to graphing nothing.
  nodes.Base.prototype.getGraphMode = function (concrete) {
    return GRAPHMODE.NONE;
  };

  nodes.Identifier.prototype.getGraphMode = function (concrete) {
    if (Policy.graphableAsBareIdentifier(this._symbol)) return GRAPHMODE.Y;
    return GRAPHMODE.NONE;
  };

  nodes.Expression.prototype.getGraphMode = function (concrete) {
    var dependencies = concrete.getDependencies();
    if (dependencies.length !== 1) return GRAPHMODE.NONE;
    return GRAPHMODE.Y;
  };

  // Helper for solved assignments and equations
  function _solvedEquationGraphInfo (concrete) {
    var dependencies = concrete._expression.getDependencies();
    if (dependencies.length !== 1) return GRAPHMODE.NONE;
    var independent = concrete._symbol;
    var dependent = dependencies[0];
    return Policy.graphMode(independent, dependent);
  }

  nodes.BaseComparator.prototype.getGraphMode = function (concrete) {
    // concrete is either
    // 1. a constant Boolean
    // 2. a SolvedEquation
    // 3. an Expression representing a multivariate implicit inequality
    var dependencies = concrete.getDependencies();
    if (concrete.isConstant) return GRAPHMODE.NONE;
    if (concrete instanceof nodes.SolvedEquation) {
      if (dependencies.length === 0) {
        if (Policy.graphableAsConstant(concrete._symbol)) return Policy.constantGraphMode(concrete._symbol);
        return GRAPHMODE.NONE;
      }
      return _solvedEquationGraphInfo(concrete);
    }
    return GRAPHMODE.NONE;
  };

  nodes.DoubleInequality.prototype.getGraphMode = function (concrete) {
    return Policy.constantGraphMode(concrete._symbol);
  };

  nodes.Equation.prototype.getGraphMode = function (concrete) {
    // concrete is either
    // 1. a constant Boolean
    // 2. a SolvedEquation
    // 3. an Expression representing a multivariate implicit function
    if (concrete.isConstant) return GRAPHMODE.NONE;
    if (concrete instanceof nodes.SolvedEquation) return _solvedEquationGraphInfo(concrete);

    if (concrete.getDependencies().length !== 2) return GRAPHMODE.NONE;
    return GRAPHMODE.IMPLICIT;
  };

  nodes.Assignment.prototype.getGraphMode = function (concrete) {
    // concrete is either a SolvedEquation or an Expression.
    if (concrete instanceof nodes.SolvedEquation) return _solvedEquationGraphInfo(concrete);

    var dependencies = concrete.getDependencies();

    switch (dependencies.length) {
      case 0:
        if (!Policy.graphableAsConstant(this._symbol)) return GRAPHMODE.NONE;
        return Policy.constantGraphMode(this._symbol);
      case 1:
        if (concrete.isList && !Policy.graphableListVariables(this._symbol, dependencies[0])) {
          return GRAPHMODE.NONE;
        }
        return Policy.graphMode(this._symbol, dependencies[0]);
      case 2:
        return GRAPHMODE.IMPLICIT;
      default:
        return GRAPHMODE.NONE;
    }
  };

  nodes.FunctionDefinition.prototype.getGraphMode = function (concrete) {
    if (this._argSymbols.length !== 1) return GRAPHMODE.NONE;

    var graphMode = Policy.graphMode(this._symbol, this._argSymbols[0]);
    var dependencies = concrete.getDependencies();
    switch (dependencies.length) {
      case 0:
        return graphMode;
      case 1:
        if (dependencies[0] !== this._argSymbols[0]) return GRAPHMODE.NONE;
        return graphMode;
      default:
        return GRAPHMODE.NONE;
    }
  };

  nodes.OrderedPair.prototype.getGraphMode = function (concrete) {
    if (concrete.isMovablePoint) return GRAPHMODE.XYPOINT_MOVABLE;
    var dependencies = concrete.getDependencies();
    if (dependencies.length === 0) return GRAPHMODE.XYPOINT;
    return Policy.validParametricVariables(dependencies) ? GRAPHMODE.PARAMETRIC : GRAPHMODE.NONE;
  };

  nodes.List.prototype.getGraphMode = function (concrete) {
    /*If we have one free variable, we're graphable*/
    if (concrete.getDependencies().length !== 1) return GRAPHMODE.NONE;
    return GRAPHMODE.Y;
  };

  nodes.Regression.prototype.getGraphMode = function (concrete) {
    if (!this.isLhsSimple) return GRAPHMODE.NONE;
    if (!concrete.isModelValid) return GRAPHMODE.NONE;
    if (concrete.model.getDependencies().length !== 1) return GRAPHMODE.NONE;
    return GRAPHMODE.Y;
  };

});
define('math/features/getgraphinfo',['require','parsenodes','math/builtinframe'],function (require) {
  var nodes = require('parsenodes');
  var BuiltInFrame = require('math/builtinframe');

  // Needs to be a feature because it relies on BuiltInFrame.

  nodes.Base.prototype.getGraphInfo = function (concrete) {
    var dependencies = concrete.getDependencies();

    var isLinear, domainBound;
    var linearCoefficients = [NaN, NaN];

    switch (dependencies.length) {
      case 0:
        isLinear = true;
        linearCoefficients = [+concrete.constantValue, 0];
        domainBound = [-Infinity, Infinity];
        break;
      case 1:
        domainBound = concrete.boundDomain(dependencies[0]);
        if (!domainBound) {
          domainBound = [-Infinity, Infinity];
          isLinear = false;
        } else {
          isLinear = concrete.isLinear(dependencies[0]);
        }
        if (isLinear) {
          var cs = concrete.getPolynomialCoefficients(dependencies[0]);
          linearCoefficients[0] = cs[0] ? +cs[0].getConcreteTree(BuiltInFrame).constantValue : 0;
          linearCoefficients[1] = cs[1] ? +cs[1].getConcreteTree(BuiltInFrame).constantValue : 0;
        }
        break;
      case 2: isLinear = false; domainBound = [-Infinity, Infinity]; break;
    }

    return {
      graphMode: this.getGraphMode(concrete),
      color: this.userData.color,
      style: this.userData.style,
      operator: this.getOperator(),
      isLinear: isLinear,
      linearCoefficients: linearCoefficients,
      domainBound: domainBound
    };
  };
});

// node.tableInfo returns either
// 1. false if the node cannot be converted to a table
// 2 {
//     independent_variable: 'symbol',
//     dependent_column: 'latex',
//     values: [[x1, y1], [x2, y2], ...], // (optional),
//     by_reference: t/f // Whether the table should replace or reference the statement
//   }
define('math/features/tableinfo',['require','parsenodes','math/policy'],function (require) {
  var nodes = require('parsenodes');
  var Policy = require('math/policy');

  var latexTrim = function (str) {
    return str.replace(/^( |\\space)+/, '').replace(/( |\\space)+$/, '');
  };

  // Default to graphing nothing.
  nodes.Base.prototype.tableInfo = function (concrete) {
    return false;
  };

  nodes.Identifier.prototype.tableInfo = function (concrete) {
    if (!Policy.graphableAsBareIdentifier(this._symbol)) return false;
    if (!Policy.validFirstColumnVariable(this._symbol)) return false;
    return {
      independent_variable: this._symbol,
      dependent_column: this._inputString,
      by_reference: false
    };
  };

  nodes.Expression.prototype.tableInfo = function (concrete) {
    var dependencies = concrete.getDependencies();

    if (dependencies.length !== 1) return false;
    var independent = dependencies[0];
    if (!Policy.validFirstColumnVariable(independent)) return false;

    return {
      independent_variable: independent,
      dependent_column: this._inputString,
      by_reference: false
    };
  };

  nodes.Assignment.prototype.tableInfo = function (concrete) {
    // concrete is either a SolvedEquation or an Expression.
    if (concrete instanceof nodes.SolvedEquation) return false;
    // Comes up in the case of generated expressions. We won't need to table those anyway.
    if (!this._inputString.length) return false;

    var dependencies = concrete.getDependencies();

    if (dependencies.length > 1) return false;
    var independent;
    if (dependencies.length === 0) {
      if (!Policy.tableableAsConstant(this._symbol)) return false;
      independent = Policy.implicitIndependent(this._symbol);
    } else {
      independent = dependencies[0];
    }

    if (!Policy.validFirstColumnVariable(independent)) return false;

    var dependent = Policy.assignmentForbidden(this._symbol) ?
      latexTrim(this._inputString.replace(/[^=]*=/,'')) :
      latexTrim(this._inputString.split('=')[0])
    ;

    return {
      independent_variable: independent,
      dependent_column: dependent,
      by_reference: !Policy.assignmentForbidden(this._symbol)
    };
  };

  nodes.FunctionDefinition.prototype.tableInfo = function (concrete) {
    if (this._argSymbols.length !== 1) return false;
    // Comes up in the case of generated expressions. We won't need to table those anyway.
    if (!this._inputString.length) return false;

    var dependencies = concrete.getDependencies();

    if (dependencies.length > 1) return false;
    var independent = this._argSymbols[0];
    if (!Policy.validFirstColumnVariable(independent)) return false;

    var assignmentForbidden = Policy.assignmentForbidden(this._symbol);
    var dependent = assignmentForbidden ?
      latexTrim(this._inputString.replace(/[^=]*=/,'')) :
      latexTrim(this._inputString.split('=')[0])
    ;

    return {
      independent_variable: independent,
      // Close to this._symbol, but we want to preserve, e.g., curly brackets in
      // a_{ro}.
      dependent_column: dependent,
      by_reference: !assignmentForbidden
    };
  };

  nodes.BaseComparator.prototype.tableInfo = function (concrete) {
    return false;
  };

  nodes.DoubleInequality.prototype.tableInfo = function (concrete) {
    return false;
  };

  nodes.Equation.prototype.tableInfo = function (concrete) {
    return false;
  };

  nodes.OrderedPair.prototype.tableInfo = function (concrete) {
    var dependencies = concrete.getDependencies();
    if (dependencies.length !== 0) return false;
    if (concrete.isMovablePoint) return false;
    return {
      independent_variable: 'x',
      dependent_column: 'y',
      by_reference: false,
      // TODO, would like to be able to pass full expressions to tables,
      // not just numbers
      values: nodes.List.mapArgs(concrete.args, function (pair) {
        return [+pair[0].constantValue, +pair[1].constantValue];
      })
    };
  };

  nodes.List.prototype.tableInfo = function (concrete) {
    return false;
  };
});
define('math/features/tableerror',['require','parsenodes','lib/worker-i18n'],function (require) {
  var nodes = require('parsenodes');
  var i18n = require('lib/worker-i18n');

  nodes.Base.prototype.tableError = function () {
    if (this.isInequality()) return i18n.t("Inequalities are not allowed.");
    return false;
  };
  nodes.List.prototype.tableError = function () {
    return i18n.t("Lists are not allowed.");
  };
  nodes.OrderedPair.prototype.tableError = function () {
    return i18n.t("Points are not allowed.");
  };
  nodes.Equation.prototype.tableError =
  nodes.Assignment.prototype.tableError = function () {
    return i18n.t("Equations are not allowed.");
  };
  nodes.FunctionDefinition.prototype.tableError = function () {
    return i18n.t("Function definitions are not allowed.");
  };
});
define('math/features/islinear',['require','parsenodes'],function (require) {
  var nodes = require('parsenodes');

  nodes.Base.prototype.isLinear = function (symbol) {
    return false;
  };

  nodes.Expression.prototype.isLinear = function (symbol) {
    return this.polynomialOrder(symbol) <= 1;
  };

  nodes.SolvedEquation.prototype.isLinear = function (symbol) {
    return this._expression.isLinear(symbol);
  };

  nodes.OptimizedRegression.prototype.isLinear = function (symbol) {
    return this.model.isLinear(symbol);
  };

});
define('graphing/columnmode',{
  POINTS: 'POINTS',
  LINES: 'LINES',
  POINTS_AND_LINES: 'POINTS_AND_LINES'
});
define('graphing/dragmode',{
  NONE: 'NONE',
  X: 'X',
  Y: 'Y',
  XY: 'XY'
});

define('math/features/graph',['require','parsenodes','math/plotter','graphing/graphmode','math/comparators','graphing/columnmode','graphing/dragmode'],function (require) {
  var nodes = require('parsenodes');
  var Plotter = require('math/plotter');
  var GRAPHMODE = require('graphing/graphmode');
  var Comparators = require('math/comparators');
  var COLUMNMODE = require('graphing/columnmode');
  var DRAGMODE = require('graphing/dragmode');
  var List = nodes.List;

  function copyDefinedPOIs (points) {
    var xs = [];
    var ys = [];

    var len = points.length;
    for (var i=0; i<len; i++) {
      xs.push(points[i][0]);
      ys.push(points[i][1]);
    }

    return {
      defined: {x: xs, y: ys}
    };
  }

  nodes.Base.prototype._graph = function (concrete, viewState, graphInfo) {
    if (graphInfo.graphMode === GRAPHMODE.NONE) return false;

    //Compile, pass to plotter, and return
    var fns = concrete.getCompiledFunctions();
    var derivatives;

    // TODO, taking derivatives can throw an error if the nodecount of the
    // tree gets to large. Can just plot without derivatives if we can't
    // compute them. Would be nice to clean this up.
    try {
      derivatives = concrete.getCompiledDerivatives();
    } catch (e) {
      // do nothing
    }

    var branches = [];
    for (var i = 0; i < fns.length; i++) {
      var localGraphInfo;
      if (concrete.isList) {
        localGraphInfo = this.getGraphInfo(concrete.args[i]);
        localGraphInfo.graphMode = graphInfo.graphMode;
      } else {
        localGraphInfo = graphInfo;
      }

      var branch = derivatives ?
        Plotter.computeGraphData(viewState, localGraphInfo, fns[i].fn, derivatives[i].fn) :
        Plotter.computeGraphData(viewState, localGraphInfo, fns[i].fn)
      ;
      branch.compiled = fns[i];
      branches.push(branch);
    }

    return branches;
  };

  nodes.Base.prototype.graph = function (concrete, viewState) {
    var graphInfo = this.getGraphInfo(concrete);
    return this._graph(concrete, viewState, graphInfo);
  };

  nodes.BaseComparator.prototype.graph = function (concrete, viewState) {
    var graphMode = this.getGraphInfo(concrete).graphMode;
    if (graphMode === GRAPHMODE.NONE) return false;
    if (!concrete instanceof nodes.SolvedEquation) return false;

    var operator = this.getOperator();
    //Compile, pass to plotter, and return
    var fns = concrete.getCompiledFunctions();

    var derivatives;
    try {
      derivatives = concrete.getCompiledDerivatives();
    } catch (e) {
      // do nothing
    }

    var branch, i;
    var branches = [];
    var polarities = [ -1, 0, 0, 1 ];

    var nbranches = fns.length;
    for (i = 0; i < nbranches; i++) {
      var graphInfo = this.getGraphInfo(concrete._expression.args[i]);
      graphInfo.graphMode = graphMode;
      branch = derivatives ?
        Plotter.computeGraphData(viewState, graphInfo, fns[i].fn, derivatives[i].fn) :
        Plotter.computeGraphData(viewState, graphInfo, fns[i].fn)
      ;
      branch.compiled = fns[i];
      branch.operator = Comparators.get(
        Comparators.table[operator].inclusive,
        polarities[i % 4]
      );
      branches.push(branch);
    }

    for (i = 0; i < nbranches; i += 4) {
      var polygons = Plotter.polygonsFromSegments(
        branches[i + 1].segments,
        branches[i + 2].segments,
        graphMode
      );
      branches.push({
        graphMode: GRAPHMODE.POLYGONFILL,
        segments: polygons,
        poi:{}
      });
    }

    return branches;
  };

  nodes.DoubleInequality.prototype.graph = function (concrete, viewState) {
    var graphInfo = this.getGraphInfo(concrete);
    if (graphInfo.graphMode === GRAPHMODE.NONE) return false;

    var branches = [];
    var op0 = Comparators.get(Comparators.table[this._operators[0]].inclusive, 0);
    var op1 = Comparators.get(Comparators.table[this._operators[1]].inclusive, 0);

    var userData = this.userData;

    var self = this;
    List.eachArgs(concrete._expressions, function (args) {
      var branch0, branch1;
      args[0].userData = args[1].userData = userData; // TODO ick, prefer nodes to be immutable
      branch0 = self._graph(args[0], viewState, graphInfo)[0];
      branch0.operator = op0;
      branches.push(branch0);
      branch1 = self._graph(args[1], viewState, graphInfo)[0];
      branch1.operator = op1;
      branches.push(branch1);

      var polygons = Plotter.polygonsFromSegments(branch0.segments, branch1.segments, branch0.graphMode);
      branches.push({
        graphMode: GRAPHMODE.POLYGONFILL,
        segments: polygons,
        poi:{}
      });
    });

    return branches;
  };

  nodes.OrderedPair.prototype.graph = function (concrete, viewState) {
    var graphInfo = this.getGraphInfo(concrete);
    var points;
    switch (graphInfo.graphMode) {
      case GRAPHMODE.XYPOINT_MOVABLE:
        points = [[concrete.args[0].constantValue, concrete.args[1].constantValue]];

        return [{
          segments: [points],
          graphMode: graphInfo.graphMode,
          color: this.userData.color,
          style: this.userData.style,
          poi: copyDefinedPOIs(points)
        }];
      case GRAPHMODE.XYPOINT:
        points = [];
        List.eachArgs(concrete.args, function (args) {
          if (isFinite(args[0].constantValue) && isFinite(args[1].constantValue)) {
            points.push([args[0].constantValue, args[1].constantValue]);
          }
        });

        return[{
          segments: [points],
          graphMode: graphInfo.graphMode,
          color: this.userData.color,
          style: this.userData.style,
          poi: copyDefinedPOIs(points)
        }];
      case GRAPHMODE.PARAMETRIC:
        var userData = this.userData;
        var branches = List.mapArgs(concrete.args, function (args) {
          // Handle case that args don't actually depend on t. This can
          // happen for some elements in a parametric with list coordinates,
          // e.g. (1, [t, 2]) has one curve and one point.
          if (args[0].isConstant && args[1].isConstant) {
            var points = [[args[0].constantValue, args[1].constantValue]];
            return {
              segments: [points],
              graphMode: GRAPHMODE.XYPOINT,
              color: userData.color,
              style: userData.style,
              poi: copyDefinedPOIs(points)
            };
          } else {
            var fn1 = args[0].getCompiledFunctions()[0].fn;
            var fn2 = args[1].getCompiledFunctions()[0].fn;
            // TODO modify parametric plotter to work with array of fns instead
            // of an fn that returns an array
            var fn = function (t) {return [fn1(t), fn2(t)];};
            graphInfo.domain = userData.domain;
            return Plotter.computeGraphData(viewState, graphInfo, fn);
          }
        });

        return branches;
      default:
        return false;
    }
  };

  nodes.Regression.prototype.graph = function (concrete, viewState) {
    var graphInfo = this.getGraphInfo(concrete);
    return this._graph(concrete.model, viewState, graphInfo);
  };

  function _flatten (arr) { return Array.prototype.concat.apply([], arr); }

  nodes.Table.prototype.isValueDraggable = function (concrete, col, row) {
    if (!concrete.columns[col].isIndependent) return false;

    var column = this.columns[col];
    var values = column.values;
    var arg = values && values.args && values.args[row];
    if (arg && isFinite(arg.constantValue) && arg._dependencies.length === 0) {
      return true;
    } else {
      return false;
    }
  };

  nodes.Table.prototype.graph = function (concrete, viewState) {
    /* jshint maxcomplexity:16 */
    var graphs = [];

    if (concrete.columns[0].isError) return graphs;
    var firstColumn = concrete.columns[0];
    var firstColumnValues = firstColumn.values;

    for (var i = 1; i < this.columns.length; i++) {
      var column = concrete.columns[i];
      if (column.isError) continue;
      var userData = this.columns[i].header.userData;
      if (userData.hidden) continue;
      var columnMode = userData.columnMode;
      var dragMode = userData.dragMode;
      var dragX = dragMode === DRAGMODE.X || dragMode === DRAGMODE.XY;
      var dragY = dragMode === DRAGMODE.Y || dragMode === DRAGMODE.XY;
      var showPoints = columnMode === COLUMNMODE.POINTS || columnMode === COLUMNMODE.POINTS_AND_LINES;
      var showLine = columnMode === COLUMNMODE.LINES || columnMode === COLUMNMODE.POINTS_AND_LINES;
      var isDiscrete = column.isDiscrete(firstColumn);
      //Connect the dots if we're independent numbers, or an externally defined list
      //Draw a smooth line if it's a defined function
      var showDiscreteLine = showLine && isDiscrete;
      var showContinuousLine = showLine && !isDiscrete;

      var branches = [];

      // find all static and movable points in one go.
      if (showPoints) {
        var staticPoints = [];
        var movablePoints = [];
        var movablePointInfo = [];
        for (var j=0; j<firstColumnValues.args.length; j++) {
          var arg0 = firstColumnValues.args[j];
          var arg1 = column.values.args[j];
          if (!arg0 || !arg1 || !isFinite(arg0.constantValue) || !isFinite(arg1.constantValue)) continue;

          var canDragX = dragX && this.isValueDraggable(concrete, 0, j);
          var canDragY = dragY && this.isValueDraggable(concrete, i, j);
          if (canDragX || canDragY) {
            movablePoints.push([arg0.constantValue, arg1.constantValue]);
            movablePointInfo.push({index: j, dragX: canDragX, dragY: canDragY});
          } else {
            staticPoints.push([arg0.constantValue, arg1.constantValue]);
          }
        }

        if (movablePoints.length) {
          branches.push({
            graphMode: GRAPHMODE.XYPOINT_MOVABLE,
            segments: [movablePoints],
            color: userData.color,
            tableId: userData.tableId,
            poi: copyDefinedPOIs(movablePoints),
            movablePointInfo: movablePointInfo
          });
        }

        if (staticPoints.length) {
          branches.push({
            segments: [staticPoints],
            graphMode: GRAPHMODE.XYPOINT,
            poi: copyDefinedPOIs(staticPoints),
            color: userData.color,
            style: userData.style
          });
        }
      }

      if (showDiscreteLine) {
        var segments = [];
        var thisSegment = [];
        var columnValues = column.values;
        /* jshint loopfunc: true */
        List.eachArgs([firstColumnValues, columnValues], function (args) {
          if (isFinite(args[0].constantValue) && isFinite(args[1].constantValue)) {
            thisSegment.push([args[0].constantValue, args[1].constantValue]);
          } else {
            segments.push(thisSegment);
            thisSegment = [];
          }
        });
        segments.push(thisSegment);
        branches.push({
          // flatten segments into format expected by line plotter
          segments: segments.map(_flatten),
          // Using PARAMETRIC instead of Y here is a bit of a hack
          // to keep graph controller from trying to trace, etc.
          graphMode: GRAPHMODE.PARAMETRIC,
          poi: [],
          color: userData.color,
          style: userData.style
        });
      }
      if (showContinuousLine) {
        var continuousBranches = this.columns[i].header.graph(concrete.columns[i].header, viewState);
        if (continuousBranches.length) Array.prototype.push.apply(branches, continuousBranches);
      }

      if (branches.length) graphs[userData.id] = branches;
    }
    return graphs;
  };
});

define('parser',['require','math/baseparser','math/features/repr','math/features/scalarEvalExpression','math/features/okForImplicitFunction','math/features/constantcollapsedcopy','math/features/polynomialorder','math/features/polynomialcoefficients','math/features/extractconditions','math/features/bounddomain','math/features/derivative','math/features/substitute','math/features/solve','math/features/analyze','math/features/getgraphmode','math/features/getgraphinfo','math/features/tableinfo','math/features/tableerror','math/features/islinear','math/features/graph'],function (require) {
  var Parser = require('math/baseparser');

  //Append each types of node with additional features
  require('math/features/repr');
  require('math/features/scalarEvalExpression');
  require('math/features/okForImplicitFunction');
  require('math/features/constantcollapsedcopy');
  require('math/features/polynomialorder');
  require('math/features/polynomialcoefficients');
  require('math/features/extractconditions');
  require('math/features/bounddomain');
  require('math/features/derivative');
  require('math/features/substitute');
  require('math/features/solve');
  require('math/features/analyze');
  require('math/features/getgraphmode');
  require('math/features/getgraphinfo');
  require('math/features/tableinfo');
  require('math/features/tableerror');
  require('math/features/islinear');
  require('math/features/graph');

  return Parser;
});

define('math/finddependencyorder',['require','math/builtinframe','underscore'],function (require) {
  var BuiltInFrame = require('math/builtinframe');
  var _ = require('underscore');
  // Order statements according to their dependencies.
  //
  // Optional 2nd arguments is a list of ids giving the roots to start searching
  // for dependencies from. This is used by the regression pass to only traverse
  // statements that regressions depend on, and to preserve order in case of ties
  // for the purpose of picking good residual variables.
  //
  // Implements Tarjan's algorithm
  //
  // https://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm
  //
  // to topologically sort DAG of strongly connected components of dependency graph.
  // A strongly connected component is a subgraph for which every node can be
  // reached by following directed edges from every other node. Any time we find a
  // strongly connected component with more than one statement in it, that's a
  // cyclic dependency error.
  function findDependencyOrder (statements, roots) {
    /* jshint maxcomplexity:16 */
    var exportLevels = [];
    var assignments = {}; // symbol => [id] of assigners
    var multiplyDefined = {}; // symbol => sentinal
    var cyclicallyDefined = {}; // symbol => [symbols]
    var nodes = {}; // id => { id: #, index: #, lowval: #, error: {}, instack: t/f }
    var index = 0; // Number of nodes reached so far in DFS
    var stack = []; // [node]
    var resolved = []; // [id]
    var id, i, j, symbol, penalty;

    if (!roots) {
      roots = [];
      for (id in statements) {
        if (statements.hasOwnProperty(id)) roots.push(id);
      }
    }

    // Separate statements by export penalty
    for (id in statements) {
      if (!statements.hasOwnProperty(id)) continue;
      penalty = statements[id].exportPenalty || 0;
      while (exportLevels.length < penalty + 1) exportLevels.push([]);
      exportLevels[penalty].push(id);
    }

    for (penalty = 0; penalty < exportLevels.length; penalty++) {
      var levelAssignments = {};
      for (i = 0; i < exportLevels[penalty].length; i++) {
        id = exportLevels[penalty][i];
        var exports = statements[id].getExports();

        // Fill in dictionary of assignments at the current level, skipping
        // symbols that have already been assigned at a lower penalty
        for (j = 0; j < exports.length; j++) {
          symbol = exports[j];
          if (BuiltInFrame[symbol]) continue;
          if (assignments[symbol]) continue;
          levelAssignments[symbol] = levelAssignments[symbol] || [];
          levelAssignments[symbol].push(id);
          if (levelAssignments[symbol].length > 1) multiplyDefined[symbol] = true;
        }
      }
      // Commit assignments from this level to the accumulated assignments
      // dictionary
      for (symbol in levelAssignments) {
        assignments[symbol] = levelAssignments[symbol];
      }
    }

    // Traverse all nodes, finding their strongly connected components.
    // Note that strongConnect calls itself recursively.
    for (i = 0; i < roots.length; i++) {
      if (!nodes.hasOwnProperty(roots[i])) strongConnect(roots[i]);
    }

    function strongConnect(id) {
      nodes[id] = nodes[id] || {};
      var v = nodes[id];
      var w;
      v.id = id;
      v.index = index;
      v.lowlink = index;
      stack.push(v);
      v.instack = true;
      index++;

      var dependencies = statements[id].getDependencies();
      for (var i = 0; i < dependencies.length; i++) {
        var symbol = dependencies[i];
        if (!assignments.hasOwnProperty(symbol)) continue;
        var assigners = assignments[symbol];

        // Visit the dependencies w of v
        for (var j = 0; j < assigners.length; j++) {
          var assigner = assigners[j];
          if (!nodes.hasOwnProperty(assigner)) {
            // assigner has not yet been visited; recurse on it
            strongConnect(assigner);
            w = nodes[assigner];
            v.lowlink = Math.min(v.lowlink, w.lowlink);
          } else {
            w = nodes[assigner];
            // If w is already in the stack, it is part of the SCC of v
            if (w.instack) v.lowlink = Math.min(v.lowlink, w.index);
          }
        }
      }

      // If v is a root node, the current stack is a strongly connected component
      if (v.lowlink === v.index) {
        w = stack.pop();
        w.instack = false;

        if (w === v) {
          markSingle(v);
        } else {
          var scc = [w];
          while (true) {
            w = stack.pop();
            w.instack = false;
            scc.push(w);
            if (w === v) break;
          }
          markCycle(scc);
        }
      }
    }

    function markSingle (v) {
      resolved.push(v.id);
    }

    function markCycle (scc) {
      var cycleSymbols = [];
      var v;
      var i;

      for (i = scc.length - 1; i >= 0; i--) {
        v = scc[i];
        var exports = statements[v.id].getExports();

        // TODO for expressions with multiple exports, does not distinguish between
        // symbols that are and are not involved in the cycle.
        Array.prototype.push.apply(cycleSymbols, exports);

        cycleSymbols.push(exports[0]);
        resolved.push(v.id);
      }

      cycleSymbols = _.unique(cycleSymbols);
      cycleSymbols.sort();

      for (i = 0; i < cycleSymbols.length; i++) {
        cyclicallyDefined[cycleSymbols[i]] = cycleSymbols;
      }
    }

    return {
      resolved: resolved,
      multiplyDefined: multiplyDefined,
      cyclicallyDefined: cyclicallyDefined
    };
  }

  return findDependencyOrder;
});
define('math/context',['require','console','pjs','underscore','./plotter','./poi','parser','math/builtinframe','math/parsenode/constant','math/parsenode/table','math/parsenode/tablecolumn','math/parsenode/freevariable','math/parsenode/list','math/finddependencyorder','math/errormsg','graphing/graphmode','worker/workerconfig'],function(require){
  var console = require('console');
  var P = require('pjs');
  var _ = require('underscore');
  var Plotter = require('./plotter');
  var POI = require('./poi');
  var Parser = require('parser');
  var BuiltInFrame = require('math/builtinframe');
  var Constant = require('math/parsenode/constant');
  var Table = require('math/parsenode/table');
  var TableColumn = require('math/parsenode/tablecolumn');
  var FreeVariable = require('math/parsenode/freevariable');
  var List = require('math/parsenode/list');
  var findDependencyOrder = require('math/finddependencyorder');
  var ErrorMsg = require('math/errormsg');
  var GRAPHMODE = require('graphing/graphmode');
  var workerConfig = require('worker/workerconfig');

  return P(function(context){

    // callback noop
    context.triggerGraphComputed = function(){};
    context.triggerStatusChange = function(){};
    context.triggerRemoveGraph = function(){};
    context.triggerRender = function(){};
    context.triggerRenderSlowly = function(){};
    context.triggerDidAddStatement = function(){};
    context.triggerDidRemoveStatement = function(){};
    context.triggerDidSetCompleteState = function(){};
    context.triggerDidUpdateIntersections = function () {};

    context.init = function(frame){
      if(!frame) frame = BuiltInFrame;
      // Only trigAngleMultiplier is ever updated in parent_frame
      this.parent_frame = Object.create(frame);
      // statements export definitions to this.frame
      this.frame = Object.create(this.parent_frame);
      this.lastFrame = Object.create(this.parent_frame);
      this.regressionFrame = Object.create(this.parent_frame);
      this.statements = {};    //Each statement should be immutable
      this.analysis = {};    //This can be cleaned out at re-derived each round
      this.currentStatus = {}; //Remember last sent message, so that we only update when necessary
      this.unanalyzedIds = {};
      this.unpublishedIds = {};
      this.intersectIds = {};
    };

    context.processChangeSet = function (changeSet) {
      /* jshint maxcomplexity:44 */
      var ids, triggerRender;

      if (changeSet.isCompleteState) {
        this.invalidate();
        this.statements = {};
      }

      // update the viewport
      if (changeSet.viewState) {
        this.setViewState(changeSet.viewState);
      }

      // update degree mode
      if (changeSet.hasOwnProperty('degreeMode')) {
        this.setDegreeMode(changeSet.degreeMode);
      }

      if (changeSet.hasOwnProperty('singlevarsolutions')) {
        this.setSingleVarSolutions(changeSet.singlevarsolutions);
      }

      // change which expressions 'intersectId' attempts to intersect with
      if (changeSet.hasOwnProperty('intersectIds')) {
        this.intersectIds = changeSet.intersectIds;
      }

      if (changeSet.statements) {
        for (var id in changeSet.statements) {
          var statement = changeSet.statements[id];

          // remove the statement if it is null
          if (statement === null) {
            if (!changeSet.isCompleteState && this.statements.hasOwnProperty(id)) {
              ids = this.statements[id].getAllIds();
            }

            this.removeStatement(id);

            if (!changeSet.isCompleteState && ids) {
              for (var i = 0; i < ids.length; i++) {
                this.triggerRemoveGraph(ids[i]);
              }
              this.triggerDidRemoveStatement(id);
            }
          } else {
            this.addStatement(statement);

            if (!changeSet.isCompleteState) {
              this.triggerDidAddStatement(statement);
            }
          }
        }
      }

      if (changeSet.isCompleteState) {
        this.triggerDidSetCompleteState(changeSet.statements);

        //Temporarily use slow rendering callback
        //TODO - handle renderSlowly via some other mechanism.
        triggerRender = this.triggerRender;
        this.triggerRender = this.triggerRenderSlowly;
      }

      this.updateAnalysis();

      if (changeSet.hasOwnProperty('intersectId')) this._updateIntersections(changeSet.intersectId);

      this.publishChanges();

      if (changeSet.isCompleteState) {
        this.triggerRender = triggerRender;
      }
    };

    context.setViewState = function (viewState) {
      if (_.isEqual(viewState, this.viewState)) return;
      this.viewState = viewState;
      for (var id in this.statements) {
        if (!this.statements.hasOwnProperty(id)) continue;
        this.unpublishedIds[id] = true;
      }
    };

    context.getViewState = function () {
      if (!this.viewState) return;
      // Hack to smuggle trigAngleMultiplier into viewState while allowing these to be
      // set separately by external calls.
      var localViewState = Object.create(this.viewState);
      if (this.parent_frame && this.parent_frame.trigAngleMultiplier) {
        localViewState.trigAngleMultiplier = this.parent_frame.trigAngleMultiplier.constantValue;
      } else {
        localViewState.trigAngleMultiplier = 1.0;
      }
      return localViewState;
    };

    context.setDegreeMode = function(use_degrees) {
      this.parent_frame.trigAngleMultiplier = Constant(use_degrees ? Math.PI / 180 : 1);
      this.invalidate();
    };

    context.setSingleVarSolutions = function (singlevarsolutions) {
      if (singlevarsolutions === workerConfig.singlevarsolutions) return;
      workerConfig.singlevarsolutions = singlevarsolutions;
      this.invalidate();
    };

    context.publishChanges = function(){
      this.updateAnalysis();
      this._publishAllStatuses();
      this._graphAllChanged();
      this.unpublishedIds = {};
    };

    // `_publishAllStatuses`, `_graphAllChanged`, and `_updateIntersections`
    // use `this.analysis`, and so expect it to be up to date, i.e. no statements
    // should have been added or removed since `this.updateAnalysis()` was called.
    //
    context._publishAllStatuses = function(){
      //Compute new states, but only send them out if they're different from what we sent last time
      var changes = {};
      var lastStatus = this.currentStatus;
      this.currentStatus = {};

      for (var id in this.unpublishedIds) {
        if (!this.analysis.hasOwnProperty(id)) continue;
        var newState = this.analysis[id].evaluationState;
        if (JSON.stringify(newState) !== JSON.stringify(lastStatus[id])) {
          changes[id] = newState;
        }
        this.currentStatus[id] = newState;
      }

      this.triggerStatusChange(changes);
    };

    context._graphAllChanged = function(){
      /* jshint maxcomplexity:13 */
      var viewState = this.getViewState();
      if (!Plotter.validateViewState(viewState)) return;

      for (var id in this.unpublishedIds) {
        if (!this.analysis.hasOwnProperty(id)) continue;
        var analysis = this.analysis[id];
        if (analysis.rawTree.isTable) {
          var graphs = analysis.graph(viewState);
          var columnIds = analysis.rawTree.getAllIds();
          for (var i = 0; i < columnIds.length; i++) {
            if (graphs[columnIds[i]]) {
              this.triggerGraphComputed(columnIds[i], graphs[columnIds[i]]);
            } else {
              this.triggerRemoveGraph(columnIds[i]);
            }
          }
        } else if (analysis.evaluationState.is_graphable && analysis.rawTree.userData.shouldGraph) {
          this.triggerGraphComputed(id, analysis.graph(viewState));
          if (this.intersectIds.hasOwnProperty(id)) this._updateIntersections(id);
        } else {
          this.triggerRemoveGraph(id); //TODO - removing evaluable things every cycle
        }
      }

      // Recompute all visible intersections for curves that weren't regraphed.
      // Curves that were regraphed already had their intersections updated in
      // the graph routine. Need to do this because we're only keeping track of
      // one partner in an intersection, and the other partner might have
      // changed.
      if (_.keys(this.unpublishedIds).length) {
        for (var intersectId in this.intersectIds) {
          if (this.unpublishedIds.hasOwnProperty(intersectId)) continue;
          if (this.intersectIds.hasOwnProperty(intersectId)) this._updateIntersections(intersectId);
        }
      }

      this.triggerRender();
    };

    // Find all intersections between a curve with the given id and other
    // curves.
    context._updateIntersections = function (id) {
      if (!this.viewState) return;
      var analysis = this.analysis[id];

      if (!analysis || !analysis.shouldIntersect()) {
        this.triggerDidUpdateIntersections(id, []);
        return;
      }

      this.findSomeIntersectionsWith(id).streamRest();
    };

    // context.findSomeIntersectionsWith computes as many intersections with the
    // curve with given id as it can in 20 ms and then returns an object:
    // {
    //   intersections: // Intersections found so far
    //   streamRest: // Function that will stream the rest of the intersections
    //               // back to the grapher.
    // }
    //
    // We run a different timeout for every curve id that is having
    // having intersections computed on it so that we can start computing
    // intersections with a few curves at once without having them cancel
    // eachother. This will happen if you open intersections on a few different
    // curves and then change something that triggers a graphAll.
    //
    // Note that we typically only stick the intersection POI on one of the two
    // curves that is involved in an intersection (the one that was selected
    // when the intersection was computed).
    var streamIntersectionsTimeouts = {};
    context.findSomeIntersectionsWith = function (id1) {
      this.cancelIntersectionStreaming(id1);
      var runFor = 20; // ms
      var waitFor = 60; // ms
      var self = this;
      var push = Array.prototype.push;
      var viewState = this.getViewState();
      var analysis1 = self.analysis[id1];
      var graphInfo = analysis1.getGraphInfo();
      var graphMode = graphInfo.graphMode;
      var compiled1 = analysis1.concreteTree.getCompiledFunctions();

      var otherAnalyses = [];
      for (var id2 in self.analysis) {
        if (!self.analysis.hasOwnProperty(id2)) continue;
        if (String(id2) === String(id1)) continue;
        if (!self.analysis[id2].shouldIntersect()) continue;
        otherAnalyses.push(self.analysis[id2]);
      }

      // intersections accumulator and iterator i are modified during successive
      // calls to computeSome()
      var intersections = [];
      for (var branch = 0; branch < compiled1.length; branch++) {
        intersections[branch] = { x: [], y: [], intersects: [] };
      }
      var i = otherAnalyses.length - 1;
      var stream = false;
      var computeSome = function () {
        /* jshint maxcomplexity:14 */
        /* jshint loopfunc: true */
        var now = new Date();
        var updated = false;
        var fn1;
        var fn2;
        var newIntersections;
        var analysis2, graphMode2, compiled2;
        var swap;
        var indicatorSamples;
        var domain;
        for (i; i >= 0; i--) {
          if (new Date() - now > runFor) {
            if (!stream) return;
            streamIntersectionsTimeouts[id1] = setTimeout(computeSome, waitFor);
            if (!updated) return;
            self.triggerDidUpdateIntersections(id1, intersections);
            return;
          }
          analysis2 = otherAnalyses[i];
          graphMode2 = analysis2.getGraphInfo().graphMode;

          var modesxx = graphMode === GRAPHMODE.X && graphMode2 === GRAPHMODE.X;
          var modesyy = graphMode === GRAPHMODE.Y && graphMode2 === GRAPHMODE.Y;
          var modesxy = graphMode === GRAPHMODE.X && graphMode2 === GRAPHMODE.Y;
          var modesyx = graphMode === GRAPHMODE.Y && graphMode2 === GRAPHMODE.X;
          // Currently only intersect x and y graphs
          if (!(modesxx || modesyy || modesxy || modesyx)) continue;

          compiled2 = analysis2.concreteTree.getCompiledFunctions();

          for (var branch1=0; branch1 < compiled1.length; branch1++) {
            fn1 = compiled1[branch1].fn;
            domain = Plotter.computeDomain(viewState, graphInfo, fn1);
            for (var branch2 = 0; branch2 < compiled2.length; branch2++) {
              fn2 = compiled2[branch2].fn;

              var indicatorFn;
              if (modesxx || modesyy) {
                indicatorFn = function (x) { return fn2(x) - fn1(x); };
              } else if (modesxy || modesyx) {
                indicatorFn = function (x) { return x - fn2(fn1(x)); };
              } else {
                continue;
              }
              indicatorSamples = Plotter.sampleXY(indicatorFn, domain).segments;
              newIntersections = POI.findIntersections(
                indicatorSamples,
                fn1,
                indicatorFn
              );
              if (newIntersections.x.length) updated = true;
              newIntersections.intersects = Array(newIntersections.x.length);
              for (var j = 0, jlen = newIntersections.x.length; j < jlen; j++) {
                newIntersections.intersects[j] = analysis2.id;
              }
              // Need to swap x and y if graphmode is GRAPHMODE.X
              if (graphMode === GRAPHMODE.X) {
                swap = newIntersections.y;
                newIntersections.y = newIntersections.x;
                newIntersections.x = swap;
              }
              push.apply(intersections[branch1].x, newIntersections.x);
              push.apply(intersections[branch1].y, newIntersections.y);
              push.apply(intersections[branch1].intersects, newIntersections.intersects);
            }
          }
        }

        if (!stream || !updated) return;
        self.triggerDidUpdateIntersections(id1, intersections);
        self.cancelIntersectionStreaming(id1);
      };

      computeSome();

      return {
        intersections: intersections,
        streamRest: function () {
          // Slightly wasteful, but handy for clearing old intersections early.
          self.triggerDidUpdateIntersections(id1, intersections);
          stream = true;
          computeSome();
        }
      };
    };

    context.cancelIntersectionStreaming = function (id) {
      clearTimeout(streamIntersectionsTimeouts[id]);
      delete streamIntersectionsTimeouts[id];
    };

    //Takes a object representing a statement
    //Expects statement to have properties:
    // * id (integer)
    // * latex (string)
    // * shouldGraph (boolean)
    // * color (string)
    context.addStatement = function(statement){
      if(!statement) return;
      var id = statement.id;
      this.markDirty(id); // Mark existing dependencies as dirty

      if (statement.type === 'table') {
        var previousIds = [];  //Used to tell tables to ungraph old columns

        if (this.statements.hasOwnProperty(id)) previousIds = this.statements[id].getAllIds();

        statement.shouldGraph = true; // TODO hack

        var columns = statement.columns;
        var parsedColumns = [];
        var header, values, parsedColumn;

        var maxLength = 0;
        for (var n = 0; n < columns.length; n++) {
          maxLength = Math.max(columns[n].values.length, maxLength);
        }

        for (var i = 0; i < columns.length; i++) {
          header = Parser.parse(columns[i].latex);
          values = [];
          var lastNonEmptyIndex = 0;
          for (var j = 0; j < columns[i].values.length; j++) {
            if (columns[i].values[j].replace(/\\space/g, '').match(/\S/)) {
              values.push(Parser.parse(columns[i].values[j]));
              lastNonEmptyIndex = j;
            } else {
              // Parse blank entries as NaN
              values.push(Constant(NaN));
            }
          }
          values.splice(lastNonEmptyIndex + 1);
          parsedColumn = TableColumn(header, maxLength, List(values));
          parsedColumn.id = columns[i].id;
          // Hang onto things like color, style, and columnMode
          if (parsedColumn.header) parsedColumn.header.userData = columns[i];
          parsedColumns.push(parsedColumn);
        }

        this.statements[id] = Table(parsedColumns);

        // NOTE: quadratic algorithm; assuming you can't have that many table columns
        var self = this;
        var currentIds = this.statements[id].getAllIds();
        previousIds.forEach(function (id) {
          if (currentIds.indexOf(id) === -1) self.triggerRemoveGraph(id);
        });
      } else {
        this.statements[id] = Parser.parse(statement.latex);
      }

      this.statements[id].userData = statement; //Hold on to domain, color, etc.

      // Need to mark clean before marking dirty again because otherwise we'll
      // hit an early return and fail to mark new dependencies dirty.
      this.markClean(statement.id);
      this.markDirty(statement.id); // Mark any new dependencies as dirty
    };

    context.removeStatement = function(id){
      if(!this.statements.hasOwnProperty(id)) return;
      // Looks like it was already deleted.
      // This happens when a table is deleted, and then each column is deleted.
      var statement = this.statements[id];

      this.markDirty(id); //Mark dirty before deletion
      if (statement.isTable) {
        var self = this;
        statement.getAllIds().forEach(function (id) { self.triggerRemoveGraph(id); });
      } else {
        this.triggerRemoveGraph(id); //TODO - removes even if it wasn't graphed
      }

      delete this.statements[id];
    };

    context.invalidate = function(){
      for (var id in this.statements) {
        if (this.statements.hasOwnProperty(id)) this.markDirty(id);
      }
      this.currentStatus = {};
      // TODO too conservative.
      this.frame = Object.create(this.parent_frame);
      this.regressionFrame = Object.create(this.parent_frame);
    };

    context.markDirty = function(id){
      if (!this.statements[id]) return;
      if (this.unanalyzedIds[id]) return;

      this.unanalyzedIds[id] = true;
      this.unpublishedIds[id] = true;
      delete this.analysis[id];

      var statement = this.statements[id];

      var symbols = statement.getExports();
      for (var i = 0; i < symbols.length; i++) {
        this.markSymbolDirty(symbols[i]);
      }

      if (statement.isRegression) {
        // TODO too conservative. Problem with regressions is that we need to
        // mark their (recursive) dependencies dirty as well as their exports,
        // since they might export any of their recursive dependencies.
        //
        // Note, when this is fixed, don't forget to mark residualVariable dirty
        // too.
        this.invalidate();
      }

      this.cancelIntersectionStreaming(id);
    };

    context.markSymbolDirty = function (symbol) {
      delete this.frame[symbol];
      delete this.regressionFrame[symbol];
      for (var id in this.statements) {
        if (!this.statements.hasOwnProperty(id)) continue;
        if (this.statements[id].dependsOn(symbol)) this.markDirty(id);
        if (this.statements[id].exportsSymbol(symbol)) this.markDirty(id);
      }
    };

    context.markClean = function(id){
      delete this.unanalyzedIds[id];
    };

    context.getFrame = function(){
      this.updateAnalysis();
      return this.frame;
    };

    context.getAnalysis = function(){
      this.updateAnalysis();
      return this.analysis;
    };

    context.getStatus = function(id){
      this.updateAnalysis();
      if (!this.analysis[id]) return undefined;
      return this.analysis[id].status;
    };

    //Returns an object that mirrors the API of Formula
    context.getEvaluationState = function(id){
      this.updateAnalysis();
      if (!this.analysis[id]) return undefined;
      return this.analysis[id].evaluationState;
    };

    function exportErrors(dependencyOrder, frame) {
      var multiplyDefined = dependencyOrder.multiplyDefined;
      var cyclicallyDefined = dependencyOrder.cyclicallyDefined;

      var symbol;
      for (symbol in multiplyDefined) {
        if (!multiplyDefined.hasOwnProperty(symbol)) continue;
        frame[symbol] = ErrorMsg.multiplyDefined(symbol);
      }
      for (symbol in cyclicallyDefined) {
        if (!cyclicallyDefined.hasOwnProperty(symbol)) continue;
        frame[symbol] = ErrorMsg.cycle(cyclicallyDefined[symbol]);
      }
    }

    context._updateRegressions = function (dirtyStatements) {
      var frame = this.frame;
      var lastFrame = this.lastFrame;
      var regressionFrame = this.regressionFrame;

      var id;

      // In this pass, we are only interested in statements that dirty regressions
      // depend on.
      var roots = [];
      for (id in dirtyStatements) {
        if (!dirtyStatements.hasOwnProperty(id)) continue;
        if (dirtyStatements[id].isRegression) roots.push(id);
      }

      // Prefer to process regressions that already have a residualVariable first.
      var self = this;
      roots.sort(function (a, b) {
        var aHasResidual = self.statements[a].userData && self.statements[a].userData.residualVariable;
        var bHasResidual = self.statements[b].userData && self.statements[b].userData.residualVariable;

        if (aHasResidual && !bHasResidual) return -1;
        if (bHasResidual && !aHasResidual) return 1;
        return 0;
      });

      // Walk through statements in dependencyOrder populating the regression frame, and then
      // run the regressions.
      var dependencyOrder = findDependencyOrder(dirtyStatements, roots);
      exportErrors(dependencyOrder, regressionFrame);
      var resolved = dependencyOrder.resolved;
      // TODO this is needed for determining whether we can add a regression plot suggestion,
      // but it isn't a full "analysis" because its members don't have evaluation states.
      var regressionAnalysis = {};

      for (var i = 0; i < resolved.length; i++) {
        id = resolved[i];

        if (this.statements[id].isRegression) {
          // Also pass frame to allow regression to pick a residual variable
          this.analysis[id] = dirtyStatements[id].analyze(
            regressionFrame,
            frame,
            lastFrame,
            regressionAnalysis
          );
          this.analysis[id].exportTo(frame);
          delete dirtyStatements[id];
        } else {
          // TODO not clear if it is sound to just call getConcreteTree here, or if
          // we need to run more of analyze. Only expect to run into assignments,
          // function definitions, and tables/table columns here. Don't want to throw
          // tooManyVariable errors here like we normally would in analyze.
          //
          //  Definitely not working on tables right now because they don't implement
          //  getConcreteTree yet. They probably should.
          var concrete = dirtyStatements[id].tryGetConcreteTree(regressionFrame);
          dirtyStatements[id].exportTo(concrete, regressionFrame);
          regressionAnalysis[id] = {rawTree: dirtyStatements[id], concreteTree: concrete};
        }
      }
    };

    context.updateAnalysis = function(){
      var id;
      var dirtyStatements = {};
      for (id in this.unanalyzedIds) {
        if (this.unanalyzedIds.hasOwnProperty(id) && this.statements[id]) {
          dirtyStatements[id] = this.statements[id];
        }
      }

      // Note: mutates dirtyStatements to remove regressions
      this._updateRegressions(dirtyStatements);

      var analysis = this.analysis;
      var frame = this.frame;

      // _updateRegressions has already taken care of analyzing regressions and
      // exporting regressed parameters to the frame. Now analyze all other
      // statements.
      var dependencyOrder = findDependencyOrder(dirtyStatements);
      exportErrors(dependencyOrder, frame);
      var resolved = dependencyOrder.resolved;

      for (var i = 0; i < resolved.length; i++) {
        id = resolved[i];

        // Special handling when 'r' is in the frame. First, check if the statement
        // is graphable as a polar equation with r removed from the frame. If not,
        // use the full frame.
        if (frame.r) {
          var localFrame = Object.create(frame, {r: FreeVariable('r')});
          analysis[id] = this.statements[id].analyze(localFrame, analysis);
          if (analysis[id].getGraphMode() === GRAPHMODE.POLAR) {
            analysis[id].exportTo(frame);
            continue;
          }
        }

        //Pass in previous analysis to allow populating movable points
        analysis[id] = this.statements[id].analyze(frame, analysis);
        analysis[id].exportTo(frame, dependencyOrder);
      }

      this.unanalyzedIds = {};
      this.lastFrame = Object.create(this.parent_frame);
      for (var symbol in frame) {
        if (frame.hasOwnProperty(symbol)) this.lastFrame[symbol] = frame[symbol];
      }
    };

    //Below this point, these are shims for compatibility with existing tests
    //TODO - remove these and re-factor tests
    context.evaluateOnce = function(id){
      console.log("Deprecated console.evaluateOnce - this should not run in production code");
      return this.analysis[id].concreteTree.constantValue;
    };

    context.compile = function(id){
      console.log("Deprecated console.compile - this should not run in production code");
      var compiled = this.analysis[id].concreteTree.getCompiledFunctions();
      if(compiled.length === 1) return compiled[0];
      return compiled;
    };

    context.evalStrings = function(id){
      console.log("Deprecated console.evalStrings - this should not run in production code");
      return this.analysis[id].concreteTree.getEvalStrings();
    };
  });
});

define('worker/workercore',['require','math/context','math/functions'],function(require){
  var EvaluatorContext = require('math/context');
  var Functions = require('math/functions');

  return function(sendMessage){

    //Initialize environment
    var context = EvaluatorContext(); //TODO - pass in frame

    //Functions to send data back to main thread
    context.triggerGraphComputed = function(id, data) {
      Functions.dehydrateGraphData(data);
      sendMessage('graphComputed', {id:id, graphData:data});
    };

    context.triggerDidUpdateIntersections = function(id, intersections) {
      sendMessage('updateIntersections', {id:id, intersections:intersections});
    };

    context.triggerRender = function(){
      sendMessage('render');
    };

    context.triggerRenderSlowly = function(){
      sendMessage('renderSlowly');
    };

    context.triggerRemoveGraph = function(id){
      sendMessage('removeGraph', id);
    };

    context.triggerStatusChange = function(data){
      sendMessage('statusChange', data);
    };

    return {
      processChangeSet: function (changeSet) {
        context.processChangeSet(changeSet);

        sendMessage('processChangeSet', changeSet);
      }
    };

  };

});

define('worker/fakeworker',['require','worker/workercore'],function(require){
  var WorkerCore = require('worker/workercore');

  return function(messageListener){
    var fakeWorker = {};
    var workerCore = WorkerCore(sendMessage);
    
    //Handle message from worker to UI thread
    function sendMessage(type, payload){
      messageListener({type:type, payload:payload});
    }

    //Handle messages from UI thread to worker
    fakeWorker.postMessage = function(e){
      setTimeout(function(){
        workerCore.processChangeSet(e);
      }, 0);
    };

    return fakeWorker;
  };
});

define('worker/workerpool',['require','console','./create_worker_url','pjs','underscore_model','./fakeworker','underscore'],function(require){
  var console = require('console');
  var CreateWorkerURL = require('./create_worker_url');
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  var FakeWorker = require('./fakeworker');
  var _ = require('underscore');

  var WorkerPool = P(UnderscoreModel, function (pool, _super) {
    pool.init = function (maxWorkers) {
      _super.init.call(this);

      this.workers = [];
      this.maxWorkers = maxWorkers;

      this.workerURL = CreateWorkerURL();

      if (this.allowedToSpawnWorker()) {
        console.log('WorkerPool: allowed to use ' + this.maxWorkers + ' workers.');
      } else {
        console.log('WorkerPool: will not try to use workers');
      }
    };

    pool.allowedToSpawnWorker = function () {
      return this.workerURL && this.workers.length < this.maxWorkers;
    };

    pool.killWorker = function (worker) {
      var workerIndex = _.indexOf(this.workers, worker);
      if ( workerIndex !== -1) {
        console.log("terminated worker " + (workerIndex + 1) + " of " + this.workers.length);
        worker.terminate();
        this.workers = _.without(this.workers, worker);

        // the evaluators respond to onWorkerKilled() by resending the last unfinished job
        // back into the worker pool. Sending the jobs back in the same order
        // will starve any jobs after the long-running one. We randomize the order we
        // tell the evaluators to prevent starvation.
        _.shuffle(_.values(worker.__connections)).forEach(function (connection) {
          if (connection && connection.onWorkerKilled) {
            connection.onWorkerKilled();
          }
        });
      }
    };

    pool.spawnWorker = function () {
      try {
        var worker = new Worker(this.workerURL);
        worker.__connections = {};
        worker.__isFake = false;
        worker.onerror = function (evt) {console.log(evt)};
        worker.addEventListener('message', function (e) {
          var data = e.data;
          if (data && data.log) {
          console.log('worker log: ', JSON.parse(data.log));
            return;
          }
          if (data && data.connectionId) {
            var connection = worker.__connections[data.connectionId];
            if (connection) {
              connection.onResponse(data.originalMessage);
            }
          }
        });

        this.workers.push(worker);
        console.log('spawned worker ' + this.workers.length + " of " + this.workers.length);
        return worker;
      } catch (e) {
        // Fallback when we can't support real workers. Can happen if
        // 1. window.Worker does not exist (IE < 10)
        // 2. We're working cross domain and the browser can't build Blobs.
        //    (for the API; all versions of IE I've been able to test)
        console.log(e.message);
        console.log('failed to spawn worker ' + (this.workers.length + 1) + " of " + (this.workers.length + 1));
        return null;
      }
    };

    pool.spawnFakeWorker = function () {
      console.log("spawning fake worker");
      var worker = FakeWorker(function (data) {
        // a FakeWorker will only have a single connection. Send the message there.
        _.values(worker.__connections)[0].onResponse(data);
      });
      worker.__isFake = true;
      worker.__connections = {};
      return worker;
    };

    pool.findLeastUsedWorker = function () {
      var countConnectionsToWorker = function (worker) {
        return _.size(worker.__connections);
      };

      var worker = _.sortBy(this.workers, countConnectionsToWorker)[0];
      if (worker) {
        console.log('reusing worker ' + (_.indexOf(this.workers, worker) + 1) + ' of ' + this.workers.length);
      }
      return worker;
    };

    // pick the worker with the fewest connections.
    pool.allocateWorker = function () {
      var worker = null;

      // try to spawn a worker if we're allowed to. The spawn may fail, but we'll
      // recover by either reusing an existing worker or by resorting to a fake worker.
      if (this.allowedToSpawnWorker()) {
        worker = this.spawnWorker();
      }

      // we didn't create a worker last step. So let's find the least used worker.
      if (!worker) {
        worker = this.findLeastUsedWorker();
      }

      // we can't re-use an already created worker. Let's spawn a fake worker.
      if (!worker) {
        worker = this.spawnFakeWorker();
      }
      return worker;
    };

  });

  return WorkerPool;
});

define('worker/workerpoolconnection',['require','pjs','underscore_model'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');

  var WorkerPoolConnection = P(UnderscoreModel, function (connection, _super) {
    connection.init = function (workerPool) {
      _super.init.call(this);
    
      this.workerPool = workerPool;
      
      // get a worker and allow the worker to lookup this connection
      this.worker = workerPool.allocateWorker();
      this.worker.__connections[this.guid] = this;
    };
    
    connection.killWorker = function () {
      if (!this.worker.__isFake) {
        this.workerPool.killWorker(this.worker);
      }
    };
    
    // to be overriden by the owner of the connection
    connection.onWorkerKilled = function () {};
  
    // to be overriden by the owner of the connection
    connection.onResponse = function (data) {};
  
    connection.sendMessage = function (data) {
      if (this.worker.__isFake) {
        this.worker.postMessage(data);
      } else {
        this.worker.postMessage({connectionId: this.guid, originalMessage: data});
      }
    };
  });
  
  return WorkerPoolConnection;
});
define('main/evaluator',['require','math/functions','worker/workerpool','worker/workerpoolconnection','pjs','underscore_model'],function (require) {
  var Functions = require('math/functions');
  var WorkerPool = require('worker/workerpool');
  var WorkerPoolConnection = require('worker/workerpoolconnection');
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');

  var cloneJSON = function (json) {
    if (json === undefined) return undefined;
    return JSON.parse(JSON.stringify(json));
  };

  var KILL_WORKER_TIME = 4000;

var Evaluator = P(UnderscoreModel, function (evaluator, _super) {

  // Overwritten in calc.js
  evaluator.triggerStatusChange = function (changes) {};
  evaluator.triggerRemove = function (id) {};
  evaluator.triggerGraphComputed = function (id, graphData) {};
  evaluator.triggerUpdateIntersections = function (id, intersections) {};
  evaluator.triggerRender = function () {};
  evaluator.triggerRenderSlowly = function () {};

  evaluator.init = function (workerPool) {
    _super.init.call(this);
    this.__state = {};
    this.changeSet = null;
    this.cumulativeChangeSet = {};
    this.clearJobTimer();
    this.syncId = 1;
    this.processingDisabled = false;

    if (!workerPool) {
      workerPool = WorkerPool();
    }

    this.workerPool = workerPool;
    this.createWorkerPoolConnection();

    this.syncRequests = [];

    //Support legacy trigger events.
    //TODO - switch all triggerXXX methods and external usages over to
    //UnderscoreModel trigger() and observeEvent() calls
    var self = this;

    this.observeEvent('graphComputed', function(event, payload){
      self.triggerGraphComputed(payload.id, payload.graphData);
    });
  };

  evaluator.createWorkerPoolConnection = function () {
    if (this.workerPoolConnection) {
      this.workerPoolConnection.onResponse = function () {};
      this.workerPoolConnection.onWorkerKilled = function () {};
    }

    this.workerPoolConnection = WorkerPoolConnection(this.workerPool);

    var self = this;
    this.workerPoolConnection.onResponse = function (data) {
      self.listeners[data.type].call(self, data.payload);
    };

    this.workerPoolConnection.onWorkerKilled = function () {
      // create another connection
      self.createWorkerPoolConnection();

      // we were trying to do a job and the worker was killed.
      // Send the job back in.
      if (self.hasJobInWorker()) {
        self.changeSet = cloneJSON(self.cumulativeChangeSet);
        self.__state.changed = true;
        self.__state.droppedMessage = true;
        self.clearJobTimer(); // we had a job in there, but it's wiped out
      }

      // we did not have a job in the worker, but the worker has lost all
      // of our state. We must send our entire state back in the next time
      // that we add a change to the changeSet. Wait for a change.
      else {
        self.changeSet = cloneJSON(self.cumulativeChangeSet);
        self.__state.changed = false;
      }

      self.processChangeSet();
    };
  };

  evaluator.listeners = {};

  evaluator.listeners.processChangeSet = function (changeSet) {
    var syncId = changeSet.syncId;

    // find all waiting sync ids <= syncId and call callback
    while (this.syncRequests.length && this.syncRequests[0].id <= syncId) {
      var syncRequest = this.syncRequests.shift();
      syncRequest.callback();
    }

    this.__state.droppedMessage = false;

    // try to send another job in
    this.clearJobTimer();
    this.processChangeSet();
  };

  evaluator.listeners.removeGraph = function (id) {
    this.triggerRemove(id);
  };

  evaluator.listeners.graphComputed = function (payload) {
    Functions.rehydrateGraphData(payload.graphData);
    this.triggerEvent('graphComputed', payload);
  };

  evaluator.listeners.updateIntersections = function (payload) {
    this.triggerUpdateIntersections(payload.id, payload.intersections);
  };

  evaluator.listeners.statusChange = function (changes) {
    //Updates to status of expression-list items
    this.triggerStatusChange(changes);
  };

  evaluator.listeners.render = function () {
    this.triggerRender();
  };

  evaluator.listeners.renderSlowly = function () {
    this.triggerRenderSlowly();
  };

  evaluator._disableProcessing = function () {
    this.processingDisabled = true;
  };

  evaluator._enableProcessing = function () {
    this.processingDisabled = false;
    this.processChangeSet();
  };

  // Allows multiple messages to be pushed onto a changeset without
  // intermediate processing.
  evaluator.batch = function (fn) {
    var alreadyDisabled = this.processingDisabled;
    this._disableProcessing();
    try{
      fn();
    }
    finally{
      // Want to make sure that if calls to evaluator.batch are nested, only the
      // outermost call reenables processing.
      if (!alreadyDisabled) this._enableProcessing();
    }
  };

  evaluator.clearJobTimer = function () {
    this.__jobStartTime = -1;
  };

  evaluator.startJobTimer = function () {
    this.__jobStartTime = new Date().getTime();
  };

  evaluator.hasJobInWorker = function () {
    return this.__jobStartTime !== -1;
  };

  evaluator.getJobElapsedTime = function () {
    if (this.hasJobInWorker()) {
      return new Date().getTime() - this.__jobStartTime;
    } else {
      return NaN;
    }
  };

  //Set up outgoing communication to worker
  evaluator.processChangeSet = function(){
    if (this.processingDisabled) return;
    var previousJobIsLongRunning = this.getJobElapsedTime() >= KILL_WORKER_TIME;

    // after dropping a message don't wait forever for your job to finish. Kill the
    // worker again to get the job attempted again.
    if (this.__state.droppedMessage && previousJobIsLongRunning) {
      this.workerPoolConnection.killWorker();
      return;
    }

    if (this.__state.changed && this.changeSet) {
      if (this.changeSet.isCompleteState && previousJobIsLongRunning) {
        this.workerPoolConnection.killWorker();
      } else if (!this.hasJobInWorker()) {
        var changeSet = this.changeSet;
        this.changeSet = null;
        this.__state.changed = false;
        this.startJobTimer();
        this.workerPoolConnection.sendMessage(changeSet);
      } else {
        // there is a job in the worker. Don't send another job in.
      }
    }

  };

  // Utility for applying changes to both the current change set and the cumulative
  // change set.
  //
  // Calls the passed function with this.changeSet, then this.cumulativeChangeSet, then
  // calls processChangeSet.
  evaluator.applyToChangeSets = function (fn) {
    this.__state.changed = true;
    if (!this.changeSet) this.changeSet = {};
    if (!this.cumulativeChangeSet) this.cumulativeChangeSet = {};
    var self = this;
    this.batch(function () {
      fn(self.changeSet);
      fn(self.cumulativeChangeSet);
      self.processChangeSet();
    });
  };

  evaluator.setViewState = function (viewState) {
    this.applyToChangeSets(function (changeSet) {
      changeSet.viewState = cloneJSON(viewState);
    });
  };

  // the evaluator has no way of telling the difference between a completely new
  // state and a state where a bunch of stuff was both deleted and added. We explicitly
  // tell it here. The only reason it matters is that if we're doing a completely new state
  // we're free to kill the worker and start fresh. That can get us out of a long running computation
  // or an errored worker that stops responding.
  evaluator.markAsCompleteState = function () {
    this.applyToChangeSets(function (changeSet) {
      changeSet.isCompleteState = true;
    });
  };

  //Takes a object representing an "expression" (TODO - rename this concept)
  //Expects expr to have properties:
  // * id (integer)
  // * latex (string)
  // * shouldGraph (boolean)
  // * color (string)
  evaluator.addStatement = function (statement) {
    this.applyToChangeSets(function (changeSet) {
      if (!changeSet.statements) changeSet.statements = {};
      changeSet.statements[statement.id] = cloneJSON(statement);
    });
  };

  evaluator.addStatements = function (statements) {
    var self = this;
    this.batch(function () {
      for (var i=0; i < statements.length; i++) {
        self.addStatement(statements[i]);
      }
    });
  };

  evaluator.removeStatement = function (id) {
    this.applyToChangeSets(function (changeSet) {
      if (!changeSet.statements) changeSet.statements = {};
      // Use _ = null instead of delete _ because we need to communicate
      // to the worker that if the statement was present before, it
      // should be removed.
      changeSet.statements[id] = null;
    });
  };

  evaluator.removeStatements = function (ids) {
    var self = this;
    this.batch(function () {
      for (var i = 0; i < ids.length; i++) {
        self.removeStatement(ids[i]);
      }
    });
  };

  // TODO - rename setIntersectIds and updateIntersections. They trip
  // me up every time.
  evaluator.setIntersectIds = function (intersectIds) {
    this.applyToChangeSets(function (changeSet) {
      changeSet.intersectIds = cloneJSON(intersectIds);
    });
  };

  evaluator.updateIntersections = function (id) {
    this.applyToChangeSets(function (changeSet) {
      changeSet.intersectId = id;
    });
  };

  evaluator.setDegreeMode = function (use_degrees) {
    this.applyToChangeSets(function (changeSet) {
      changeSet.degreeMode = use_degrees;
    });
  };

  evaluator.setSingleVarSolutions = function (singlevarsolutions) {
    this.applyToChangeSets(function (changeSet) {
      changeSet.singlevarsolutions = singlevarsolutions;
    });
  };

  evaluator.notifyWhenSynced = function (callback) {
    this.syncId++;

    //Put the request in a list
    this.syncRequests.push({id: this.syncId, callback: callback});

    // send sync request to worker. when it comes back, we'll call the
    // callback
    var self = this;
    this.applyToChangeSets(function (changeSet) {
      changeSet.syncId = self.syncId;
    });
  };

});

return Evaluator;
});

define('lib/rounding',['require','math/distance'],function(require){
  var Distance = require('math/distance');

  var Rounding = {
    // Returns the shortest decimal between two numbers according to the following rules
    //
    // 1. 0 is the shortest decimal in any range that contains it.
    // 2. Decimals with a larger exponent are shorter than decimals with a smaller exponent
    // 3. Of decimals with the same exponent, 1 is the shortest
    // 4. When there are multiple decimals in the range that are equally sort, the closest to
    //    the mean of x1 and x2 is chosen.
    shortestDecimalBetween: function (x1, x2) {
      var mean = Distance.mean(x1, x2);

      if (x1 > 0 !== x2 > 0) return 0;
      if (x1 === 0 || x2 === 0) return 0;

      // Already know x1 and x2 have the same sign, so make them positive
      // to avoid complication of leading '-' sign.
      var sign = x1 > 0 ? 1 : -1;
      var u1 = (Math.abs(x1)).toExponential().split('e');
      var u2 = (Math.abs(x2)).toExponential().split('e');

      var m1 = u1[0];
      var m2 = u2[0];

      var e1 = u1[1];
      var e2 = u2[1];

      if (e2 !== e1) {
        return sign*Math.pow(10, Math.max(parseFloat(e1), parseFloat(e2)));
      }

      if (m1[0] !== m2[0]) return parseFloat(mean.toPrecision(1));

      var precision = 1;

      // Start at 2 to skip the decimal point. We've already examined
      // the leading digit.
      for (var i = 2; i < Math.min(m1.length, m2.length); i++) {
        precision++;
        if (m1[i] !== m2[i]) break;
      }

      return parseFloat(mean.toPrecision(precision));

    }
  };

  return Rounding;
});

define('graphing/viewport',['require','lib/rounding'],function (require) {
  var Rounding = require('lib/rounding');

  function Viewport (xmin, xmax, ymin, ymax) {
    this.xmin = xmin !== undefined ? xmin : -10;
    this.xmax = xmax !== undefined ? xmax :  10;
    this.ymin = ymin !== undefined ? ymin : -10;
    this.ymax = ymax !== undefined ? ymax :  10;
  }

  Viewport.prototype.toObject = function () {
    return {
      xmin: this.xmin,
      ymin: this.ymin,
      xmax: this.xmax,
      ymax: this.ymax
    };
  };

  Viewport.fromObject = function (obj) {
    return new Viewport(obj.xmin, obj.xmax, obj.ymin, obj.ymax);
  };

  Viewport.prototype.equals = function (viewport) {
    if (this.xmin !== viewport.xmin) return false;
    if (this.ymin !== viewport.ymin) return false;
    if (this.xmax !== viewport.xmax) return false;
    if (this.ymax !== viewport.ymax) return false;

    return true;
  };

  Viewport.prototype.isXValid = function() {
    return (this.xmax - this.xmin > 0);
  };

  Viewport.prototype.isYValid = function() {
    return (this.ymax - this.ymin > 0);
  };

  Viewport.prototype.isValid = function () {
    return this.isXValid() && this.isYValid();
  };

  Viewport.prototype.isSquare = function (screen) {
    return Math.abs(screen.height - screen.width*this.aspectRatio()) < 1;
  };

  Viewport.prototype.aspectRatio = function () {
    return (this.ymax-this.ymin)/(this.xmax-this.xmin);
  };

  Viewport.prototype.squareXAxis = function (screen) {
    var xrange = this.xmax - this.xmin;
    var yrange = this.ymax - this.ymin;
    var xcenter = this.xmin + xrange/2;
    var new_xrange = yrange/screen.height * screen.width;

    this.xmin = xcenter - new_xrange/2;
    this.xmax = xcenter + new_xrange/2;
  };

  Viewport.prototype.squareYAxis = function (screen) {
    if (screen.width === 0 || screen.height === 0) return;
    var xrange = this.xmax - this.xmin;
    var yrange = this.ymax - this.ymin;
    var ycenter = this.ymin + yrange/2;
    var new_yrange = xrange/screen.width * screen.height;

    this.ymin = ycenter - new_yrange/2;
    this.ymax = ycenter + new_yrange/2;
  };

  Viewport.prototype.squareCrop = function (screen) {
    // Square axes in a way that is guaranteed to reduce the viewport
    if (this.aspectRatio() > screen.height/screen.width) {
      this.squareYAxis(screen);
    } else {
      this.squareXAxis(screen);
    }
  };

  // rounds the viewport so that it's not more precise than a pixel
  Viewport.prototype.round = function (screen) {
    if (screen.height === 0 || screen.width === 0) return;
    var xrange = this.xmax - this.xmin;
    var yrange = this.ymax - this.ymin;

    var x_pixel_units = xrange/screen.width;
    var y_pixel_units = yrange/screen.height;

    // Do things this way to try to maintain xrange and yrange when panning.
    this.xmin = Rounding.shortestDecimalBetween(
      this.xmin - x_pixel_units/10,
      this.xmin + x_pixel_units/10
    );
    this.xmax = Rounding.shortestDecimalBetween(
      this.xmin + xrange - x_pixel_units/10,
      this.xmin + xrange + x_pixel_units/10
    );
    this.ymin = Rounding.shortestDecimalBetween(
      this.ymin + y_pixel_units/10,
      this.ymin - y_pixel_units/10
    );
    this.ymax = Rounding.shortestDecimalBetween(
      this.ymin + yrange + y_pixel_units/10,
      this.ymin + yrange - y_pixel_units/10
    );
  };

  Viewport.prototype.clone = function() {
    return new Viewport(this.xmin, this.xmax, this.ymin, this.ymax);
  };

  // calculates a distance from the origin that is guaranteed to reach out past
  // the edge of the viewport for all values of theta. The actual value doesn't
  // matter much. This is used for clipping and the value will get truncated
  // during the clipping routine. In theory could use a really big number but
  // it's possible that we won't pick a big enough number.
  Viewport.prototype.polarDiameter = function() {
     var d1 = Math.abs(this.xmax), d2 = Math.abs(this.xmin);
     var d3 = Math.abs(this.ymax), d4 = Math.abs(this.ymin);

     // Distance can be at most sqrt(2)*magnitude of largest limit.
     // the 1.5 gives a little padding
     return 1.5 * Math.max(d1, d2, d3, d4);
  };

  //the largest visible radius. Note: this should always be strictly smaller than polarDiameter
  Viewport.prototype.largestR = function() {
    //if xmin is positive, then xmax is bigger than abs(xmin)
    //if xmax is negative, then -xmin is bigger than abs(xmax)
    return Math.sqrt(
      Math.pow(Math.max(-this.xmin, this.xmax), 2) +
      Math.pow(Math.max(-this.ymin, this.ymax), 2)
    );
  };

  //the smallest visible radius on the screen
  Viewport.prototype.smallestR = function() {
    //origin is visible
    if (this.xmin <= 0 && this.xmax >= 0 && this.ymin <= 0 && this.ymax >= 0) return 0;
    //y-axis is visible: return wherever on that's smallest
    if (this.xmin <= 0 && this.xmax >= 0) return Math.min(Math.abs(this.ymin), Math.abs(this.ymax));
    //x-axis is visible: return wherever on that's smallest
    if (this.ymin <= 0 && this.ymax >= 0) return Math.min(Math.abs(this.xmin), Math.abs(this.xmax));

    // both x & y axes are offscreen. one of the corners is the min.
    // If both negative, then -xmax is positive and smaller.
    // If both positive, then xmin positive and smaller
    return Math.sqrt(
      Math.pow(Math.max(this.xmin, -this.xmax), 2) +
      Math.pow(Math.max(this.ymin, -this.ymax), 2)
    );
  };

  return Viewport;
});

define('graphing/projection',['require','./viewport'],function (require) {
  var Viewport = require('./viewport');

  // A single object that contains all the information to map from
  // the theoretical space to the canvas space.
  var Projection = function (screen, viewport, settings) {
    this.screen = screen;
    this.viewport = viewport;
    this.settings = settings;
  };
  
  Projection.prototype.calculateViewportForScreen = function (newScreen) {
    var vp = this.viewport;
    var dw = (newScreen.width / this.screen.width - 1) * (vp.xmax - vp.xmin);
    var dh = (newScreen.height / this.screen.height - 1) * (vp.ymax - vp.ymin);
        
    var newViewport = new Viewport(vp.xmin-dw/2, vp.xmax+dw/2, vp.ymin-dh/2, vp.ymax+dh/2);
    newViewport.round(newScreen);
    
    return newViewport;
  };

  Projection.prototype.mapx = function(x) {
      return (x - this.viewport.xmin)*this.screen.width/(this.viewport.xmax - this.viewport.xmin);
  };
  
  Projection.prototype.mapy = function(y) {
      return this.screen.height - (y - this.viewport.ymin)*this.screen.height/(this.viewport.ymax - this.viewport.ymin);
  };

  Projection.prototype.map_pt = function(pt) {
      return {x: this.mapx(pt.x), y: this.mapy(pt.y)};
  };

  Projection.prototype.reverse_mapx = function (mapped_x) {
    return mapped_x * (this.viewport.xmax - this.viewport.xmin)/this.screen.width + this.viewport.xmin;
  };

  Projection.prototype.reverse_mapy = function (mapped_y) {
    return (
      -(mapped_y - this.screen.height)*(this.viewport.ymax - this.viewport.ymin)/this.screen.height + this.viewport.ymin
    );
  };

  Projection.prototype.reverse_map_pt = function (mapped_pt) {
    return {x: this.reverse_mapx(mapped_pt.x), y: this.reverse_mapy(mapped_pt.y)};
  };

  // Check whether a pair of screen coordinates is currently onscreen
  // This condition is used in a couple of methods that (re)draw stuff
  // on DOMLayer instances (movablepointslayer, poilabelslayer, tracelayer)
  Projection.prototype.coordsAreOnscreen = function(screenX, screenY, margin) {
    margin = margin === undefined ? 0 : margin;
    return (
      screenX > -margin && screenY > -margin &&
      screenX < this.screen.width+margin && screenY < this.screen.height+margin
    );
  };

  return Projection;
});

define('graphing/viewporttransformation',['require','pjs','./viewport','./projection'],function(require){
  var P = require('pjs');
  var Viewport = require('./viewport');
  var Projection = require('./projection');

  var ViewportTransformation = P(function (proto) {
    // Constructor can take 2 arguments for a translation only, 3 arguments
    // for a uniform scaling, or 4 arguments for different scalings along x
    // and y.
    proto.init = function (xOffset, yOffset, xScale, yScale) {
      this.xOffset = xOffset !== undefined ? xOffset : 0;
      this.yOffset = yOffset !== undefined ? yOffset : 0;
      this.xScale = xScale !== undefined ? xScale : 1;
      this.yScale = yScale !== undefined ? yScale : this.xScale;
    };

    proto.compose = function (transformation) {
      return new ViewportTransformation(
        transformation.xScale*this.xOffset + transformation.xOffset,
        transformation.yScale*this.yOffset + transformation.yOffset,
        transformation.xScale*this.xScale,
        transformation.yScale*this.yScale
      );
    };

    proto.lerp = function (transformation, ratio) {
      return new ViewportTransformation(
        (1 - ratio)*this.xOffset + ratio*transformation.xOffset,
        (1 - ratio)*this.yOffset + ratio*transformation.yOffset,
        (1 - ratio)*this.xScale + ratio*transformation.xScale,
        (1 - ratio)*this.yScale + ratio*transformation.yScale
      );
    };

    proto.transformProjection = function (projection) {
      var viewport = projection.viewport;
      var screen = projection.screen;

      var vmidx = (viewport.xmin + viewport.xmax)/2;
      var vmidy = (viewport.ymin + viewport.ymax)/2;
      var vminx = vmidx + (viewport.xmin - vmidx)/this.xScale;
      var vmaxx = vmidx + (viewport.xmax - vmidx)/this.xScale;
      var vminy = vmidy + (viewport.ymin - vmidy)/this.yScale;
      var vmaxy = vmidy + (viewport.ymax - vmidy)/this.yScale;

      // Pixel coord vs cartesian coord flip means that voffset_y needs to be flipped.
      var vox = this.xOffset * (vmaxx-vminx) / screen.width;
      var voy = -this.yOffset * (vmaxy-vminy) / screen.height;

      return new Projection(
        projection.screen,
        new Viewport(vminx-vox, vmaxx-vox, vminy-voy, vmaxy-voy),
        projection.settings
      );
    };
  });

  return ViewportTransformation;
});

define('graphing/screen',['require'],function(require) {
  function Screen(width, height) {
      this.width = width;
      this.height = height;

      return this;
  }

  return Screen;
});

define('loadcss!css/poi', function(){});
// Disable text selection

/* global jQuery */
;(function($){

  $.fn.disableTextSelection = function( removeFocus ) {

    if (removeFocus) {
      this.each(function(){
        $(this).bind("mousedown touchstart", function(){
          $(document.activeElement).focusout();
        });
      });
    }

    return this.each(function() {
    $(this).attr('unselectable', 'on').css({
                   '-moz-user-select':'none',
                   '-webkit-user-select':'none',
                   'user-select':'none'
               })
               .each(function() {
                   this.onselectstart = function() { return false; };
               });
    });
  };

})(jQuery);


define("jquery.disabletextselection", function(){});

define('graphing/canvaslayer',['require','jquery','pjs','browser','jquery.disabletextselection'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var Browser = require('browser');
  require('jquery.disabletextselection');

  var CanvasLayer = P(function (layer) {

    layer.init = function () {
      this.$ = $("<div class='dcg-graph-outer'></div>")
      .css('position', 'absolute')
      .css('overflow', 'hidden')
      .disableTextSelection(Browser.IS_IE);

      this.canvas_node = $("<canvas class='dcg-graph-inner'></canvas>")
      .css('position', 'relative')
      .css('display', 'block')
      .disableTextSelection(Browser.IS_IE);

      this.devicePixelRatio = (window.devicePixelRatio || 1);
      this.ctx = this.canvas_node[0].getContext('2d');

      // Canvas used to hold an image of the graph when we're panning/scaling.
      this.unscaledCanvas = document.createElement('canvas');

      // Flag for whether we're in the middle of a pan/scale
      this.transforming = false;

      this.$.append(this.canvas_node);
    };

    layer.resize = function (width, height) {
      // concession to retina iPads, where there is a horrendous performance
      // drop between 1023 pixels, and its full width, 1024 pixels. This
      // problem also occurs on desktop Safari as of version 6, so full screen
      // safari on a retina laptop will still be a bad experience.
      //
      // see minimal examlpe at http://jsbin.com/ulobuh/4
      if (width === 1024 && this.devicePixelRatio === 2) width = 1023;

      // early trap if not changing size
      if (width === this.width && height === this.height) return;

      this.width = width;
      this.height = height;

      this.$.css('width', width + "px")
      .css('height', height + "px");

      this.canvas_node.css('width', width + "px")
      .css('height', height + "px")
      .attr('width', width*this.devicePixelRatio)
      .attr('height', height*this.devicePixelRatio);

      if (this.unscaledCanvas) {
        this.unscaledCanvas.width = width;
        this.unscaledCanvas.height = height;
      }

      this.ctx.scale(this.devicePixelRatio, this.devicePixelRatio);
    };

    // should get overridden by subclass
    layer.redraw = function () {};

    layer.saveUnscaledCanvas = function (projection) {

      // if we've already saved it, don't want to overwrite it. You must release
      // it if you want to resave it.
      if (this.transforming) return;
      this.transforming = true;

      var ctx = this.unscaledCanvas.getContext('2d');
      var width = this.unscaledCanvas.width;
      var height = this.unscaledCanvas.height;
      ctx.clearRect(0, 0, width, height);
      ctx.drawImage(this.canvas_node[0], 0, 0, width, height);
    };

    layer.releaseUnscaledCanvas = function () {
      this.transforming = false;
    };

    layer.paintScaledCanvas = function (transformation) {
      // can't do this if we don't have an unscaledCanvas to scale
      if (!this.unscaledCanvas) return;

      var t = transformation;

      var width = this.ctx.canvas.width;
      var height = this.ctx.canvas.height;

      this.ctx.save();
      this.ctx.clearRect(0, 0, width, height);

      this.ctx.setTransform(
        t.xScale, 0,
        0, t.yScale,
        t.xOffset*this.devicePixelRatio - 0.5*(t.xScale - 1)*width,
        t.yOffset*this.devicePixelRatio - 0.5*(t.yScale - 1)*height
      );
      this.ctx.drawImage(this.unscaledCanvas, 0, 0, width, height);
      this.ctx.restore();
    };
  });

  return CanvasLayer;
});

define('graphing/clipping',[], function(){

// clamp is used to avoid NaN's when interpolating viewport intersections
// caused by infinite inputs.
//
// x is expected to be measured in pixels when this function is called,
// so it's safe to choose a large number on an absolute scale.
function clamp (x) {
  return Math.max(-1e40, Math.min(1e40, x));
}

var Clipping = {

  TOP: 1,
  BOTTOM: 2,
  LEFT: 4,
  RIGHT: 8,
  ALL: 15,
  X: 12,
  Y: 3,

  POLAR_RADIAN_EQUALITY: 1,
  POLAR_RADIAN_INEQUALITY: 2,
  POLAR_DEGREE_EQUALITY: 3,
  POLAR_DEGREE_INEQUALITY: 4,
  Y_EQUALS: 5,
  X_EQUALS: 6,

  mapSegmentToCanvas: function (segment, viewport, screen, graphType) {
    /* jshint maxcomplexity:15 */
    var output = [];
    var xmin = viewport.xmin;
    var ymin = viewport.ymin;
    var xrange = viewport.xmax-viewport.xmin;
    var yrange = viewport.ymax-viewport.ymin;
    var width = screen.width;
    var height = screen.height;
    var xscale = width/xrange;
    var yscale = -height/yrange;
    var len = segment.length;
    var i,x,y,theta,r;

    if (graphType === Clipping.Y_EQUALS) {

      for (i=0; i < len; i+=2) {
        x = (segment[i]-xmin)*xscale - 0.5;
        y = (segment[i+1]-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    } else if (graphType === Clipping.X_EQUALS) {

      for (i=0; i < len; i+=2) {
        x = (segment[i+1]-xmin)*xscale - 0.5;
        y = (segment[i]-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    } else if (graphType === Clipping.POLAR_RADIAN_EQUALITY) {

      for (i=0; i<segment.length; i+=2) {
        theta = segment[i];
        r = segment[i+1];
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    } else if (graphType === Clipping.POLAR_RADIAN_INEQUALITY) {

      for (i=0; i<segment.length; i+=2) {
        theta = segment[i];
        r = segment[i+1];
        if (r < 0) r = 0;
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    } else if (graphType === Clipping.POLAR_DEGREE_EQUALITY) {

      for (i=0; i<segment.length; i+=2) {
        theta = segment[i]*Math.PI/180;
        r = segment[i+1];
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    } else if (graphType === Clipping.POLAR_DEGREE_INEQUALITY) {

      for (i=0; i<segment.length; i+=2) {
        theta = segment[i]*Math.PI/180;
        r = segment[i+1];
        if (r < 0) r = 0;
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    }

    return output;
  },

  clipStrokeEdges: function (segment, viewport) {
    return Clipping.clipFillEdges(segment, viewport, Clipping.ALL, true);
  },

  clipFillEdge: function (input, inside_test, exit_point, is_open) {
    var output = [];
    var push = [].push;
    var start_index;

    if(is_open){  //stroke
      x = input[0];
      y = input[1];
      start_index = 2;
      inside = inside_test(x, y);
      if(inside) output.push(x, y);
    } else {      //fill
      x = input[input.length - 2];
      y = input[input.length - 1];
      start_index = 0;
      inside = inside_test(x, y);
    }

    for (var i = start_index; i < input.length; i+=2) {
      var x_prev = x;
      var y_prev = y;
      var inside_prev = inside;

      var x = input[i];
      var y = input[i+1];
      var inside = inside_test(x, y);

      if(!inside && !inside_prev){
        continue;
      }
      if(inside && inside_prev){
        output.push(x, y);
      }
      if(inside && !inside_prev){
        push.apply(output, exit_point(x, y, x_prev, y_prev));
        output.push(x, y);
      }
      if(!inside && inside_prev){
        push.apply(output, exit_point(x_prev, y_prev, x, y));
      }
    }
    return output;
  },

  clipFillEdges: function (input, viewport, edges, is_open) {
    /* jshint bitwise: false */
    var xmin = viewport.xmin;
    var xmax = viewport.xmax;
    var ymin = viewport.ymin;
    var ymax = viewport.ymax;

    var test_xmin = function (x, y) {
      return x >= xmin;
    };
    var test_xmax = function (x, y) {
      return x <= xmax;
    };
    var test_ymin = function (x, y) {
      return y >= ymin;
    };
    var test_ymax = function (x, y) {
      return y <= ymax;
    };

    var entry_xmin = function (x, y, x2, y2) {
      x = clamp(x); y = clamp(y); x2 = clamp(x2); y2 = clamp(y2);
      var dy = y2-y;
      return [xmin, y+dy*(xmin-x)/(x2-x)];
    };
    var entry_xmax = function (x, y, x2, y2) {
      x = clamp(x); y = clamp(y); x2 = clamp(x2); y2 = clamp(y2);
      var dy = y2-y;
      return [xmax, y+dy*(xmax-x)/(x2-x)];
    };
    var entry_ymin = function (x, y, x2, y2) {
      x = clamp(x); y = clamp(y); x2 = clamp(x2); y2 = clamp(y2);
      var dx = x2-x;
      return [x+dx*(ymin-y)/(y2-y), ymin];
    };
    var entry_ymax = function (x, y, x2, y2) {
      x = clamp(x); y = clamp(y); x2 = clamp(x2); y2 = clamp(y2);
      var dx = x2-x;
      return [x+dx*(ymax-y)/(y2-y), ymax];
    };

    var output = input;

    if (edges & Clipping.LEFT) {
      output = Clipping.clipFillEdge(input, test_xmin, entry_xmin, is_open);
    }

    if (edges & Clipping.BOTTOM) {
      output = Clipping.clipFillEdge(output, test_ymin, entry_ymin, is_open);
    }

    if (edges & Clipping.RIGHT) {
      output = Clipping.clipFillEdge(output, test_xmax, entry_xmax, is_open);
    }

    if (edges & Clipping.TOP) {
      output = Clipping.clipFillEdge(output, test_ymax, entry_ymax, is_open);
    }

    return output;
  },

  clipAllFillEdges: function (input, viewport) {
   return Clipping.clipFillEdges(input, viewport, Clipping.ALL, false);
  },

  computePolarFill: function(segment, fillTowards, polarInterval) {

    var all_segments = [];

    var theta;
    var start_theta = segment[0];
    var end_theta = start_theta+polarInterval;
    var limited_segment = [];
    all_segments.push(limited_segment);

    // detect 2pi intervals and split into separate segments
    for (var i=0; i<segment.length; i+=2) {
      theta = segment[i];
      var r = segment[i+1];
      if (r<0) r = 0;

      if (theta>=end_theta) {

        limited_segment = [];
        all_segments.push(limited_segment);
        start_theta = segment[i-2]; //previous theta
        end_theta = start_theta;
        // Make sure that end_theta always increases. Adding polarInterval
        // only once isn't enough because theta might change by more than
        // polarInterval between two samples.
        while(theta >= end_theta) end_theta += polarInterval;
        i -= 4; //go back 1 theta (for loop will +2)

      } else {
        limited_segment.push(theta,r);
      }

    }

    if (fillTowards === 0) {
      // just fill towards the origin
      for (i=0; i<all_segments.length; i++) {
        all_segments[i].push(0,0);
      }

    } else {

      // shade toward outside. trace around counter clockwise, jump to the
      // outside, and trace around clockwise again at pi/8 intervals. Then
      // go to the starting theta with very large radius.
      var clockwise_step = polarInterval/16;
      var radius = fillTowards;
      for (i=0; i<all_segments.length; i++) {
        var seg = all_segments[i];
        start_theta = seg[0];
        end_theta = seg[seg.length-2];
        for (theta = end_theta; theta > start_theta; theta -= clockwise_step) {
          seg.push( theta, radius);
        }
        seg.push( start_theta, radius);
      }

    }

    return all_segments;
  },

  computeCartesianFill: function(segment, fillTowards) {
    // copy the incoming segment and push it to the list
    segment = segment.slice();

    // add a couple points that decide which direction we fill
    segment.push(segment[segment.length-2], fillTowards);
    segment.push(segment[0], fillTowards);

    return [segment];
  }
};

return Clipping;
});

define('graphing/constants',[],function () {
  return {
    ANIMATE_ZOOM_DURATION: 500,
    DOUBLETAP_ZOOM: 2.0,
    ZOOM_FACTOR: 1.125,

    MAX_DOTTED_SEGMENTS: 1000,
    STROKE_ALPHA: 0.7,
    HIGHLIGHTED_STROKE_ALPHA: 1,
    FILL_ALPHA: 0.4,
    POINT_ALPHA: 0.9,
    HIGHLIGHTED_POINT_ALPHA: 0.6,
    POLAR_ALPHA: 0.2,
    POI_ALPHA: 0.01,

    OFFSCREEN_RENDER_MARGIN: 20
  };
});

//TODO - something is slow about this when zoomed way out.
//       could be subpixel rendering.
define('graphing/dasheddrawer',['require','./constants','math/distance'],function(require){
  var constants = require('./constants');
  var Distance = require('math/distance');

function DashedDrawer(ctx, seglen) {
    this.pattern = [11,7];
    this.replen = this.pattern[0] + this.pattern[1];
     
  if (seglen !== null && seglen/this.replen > constants.MAX_DOTTED_SEGMENTS) {
        this.pattern[0] = seglen*this.pattern[0]/this.replen/constants.MAX_DOTTED_SEGMENTS;
        this.pattern[1] = seglen*this.pattern[1]/this.replen/constants.MAX_DOTTED_SEGMENTS;
    }
     
    this.pstate = 0; // 0 being "draw a line"
    this.dstaccum = 0.0;
    this.px = null;
    this.py = null;
    this.ctx = ctx;
     
    return this;
}
  
DashedDrawer.getTotalSegmentLength = function(segment) {
  if (segment.length < 4) return 0;

  var len = 0;
  var x = segment[0];
  var y = segment[1];
  
  for (var i = 2; i < segment.length; i+=2) {
    var nx = segment[i];
    var ny = segment[i+1];
  
    len += Distance.hypot(nx-x,ny-y);
  
    x = nx;
    y = ny;
  }

  return len;
};

DashedDrawer.prototype.start = function(x,y) {
    if(!this.ctx.desmos_batching) this.ctx.beginPath();
    this.px = x;
    this.py = y;
};
  
DashedDrawer.prototype.next = function(x,y) {
    var dstlimit = this.pattern[this.pstate];
    var dstincr = Math.sqrt(Math.pow(x-this.px,2) + Math.pow(y-this.py,2));
     
  if (dstincr > 0.00001) {
    while (dstincr + this.dstaccum >= dstlimit) {
            // Draw up to the phase change, change phase.
            // compute actual line-to point
            var incrx = x - this.px;
            var incry = y - this.py;

            // Scaling factor
            var linedst = dstlimit - this.dstaccum;
            incrx *= linedst/dstincr;
            incry *= linedst/dstincr;
             
            // Draw if in the draw state
      if (this.pstate === 0) {
                this.ctx.moveTo(this.px, this.py);
                this.ctx.lineTo(this.px+incrx, this.py+incry);
            }
             
            // Reset the accumulator
            this.dstaccum = 0.0;
            this.px += incrx;
            this.py += incry;
            // Flip the pattern state
            this.pstate = 1-this.pstate;
            dstlimit = this.pattern[this.pstate];
            dstincr -= linedst;
        }
         
    // Draw up to the target point.
    if (this.pstate === 0) {
            this.ctx.moveTo(this.px, this.py);
            this.ctx.lineTo(x, y);
        }
    }
    this.px = x;
    this.py = y;
    this.dstaccum += dstincr;
};

DashedDrawer.prototype.skip = function(x,y) {
  this.px = x;
  this.py = y;
};
  
DashedDrawer.prototype.close = function() {
    if(!this.ctx.desmos_batching) this.ctx.stroke();

    this.pstate = 0; // 0 being "draw a line"
    this.dstaccum = 0.0;
    this.px = null;
    this.py = null;
};

return DashedDrawer;
});

define('graphing/graphslayer',['require','pjs','underscore','./canvaslayer','./clipping','./dasheddrawer','./constants','./viewport','graphing/graphmode'],function (require) {
  var P = require('pjs');
  var _ = require('underscore');
  var CanvasLayer = require('./canvaslayer');
  var Clipping = require('./clipping');
  var DashedDrawer = require('./dasheddrawer');
  var constants = require('./constants');
  var Viewport = require('./viewport');
  var GRAPHMODE = require('graphing/graphmode');

  var screenToClippingViewport = function (screen) {
    return new Viewport(-3, screen.width + 3, -3, screen.height + 3);
  };

  var GraphsLayer = P(CanvasLayer, function (layer) {

      layer.redraw = function (projection, graphSketches, drawOrder) {
        var screen = projection.screen;

        // make sure that this is the correct size
        this.resize(screen.width, screen.height);
        // Clear out the drawing area
        this.ctx.clearRect(0, 0, screen.width, screen.height);
        this.redrawToCtx(this.ctx, projection, graphSketches, drawOrder);

      };

      layer.redrawToCtx = function (ctx, projection, graphSketches, drawOrder) {
        // Do the drawing of the segments
        if (drawOrder === undefined || drawOrder.length < _.size(graphSketches)) {
          // If we don't have a drawOrder, or it doesn't include all of our graphSketches then make a new order.
          drawOrder = _.keys(graphSketches);
        }
        drawOrder.forEach(function (id) {
          var sketch = graphSketches[id];
          if (sketch !== undefined) {
            if (sketch.visible) {
              GraphsLayer.drawSketchToCtx(graphSketches[id], ctx, projection);
            }
          }
        });
      };

  });

  GraphsLayer.eachSegment = function (sketch, fn) {
    for (var i = 0; i < sketch.branches.length; i++) {
      var branch = sketch.branches[i];
      for (var j = 0; j < branch.segments.length; j++) {
        var segment = branch.segments[j];
        fn(branch, segment);
      }
    }
  };

  GraphsLayer.drawSketchToCtx = function (sketch, ctx, projection) {
      if (!sketch.branches || !sketch.branches.length) return;
      ctx.lineWidth = projection.settings.graphLineWidth;
      ctx.strokeStyle = sketch.color;
      ctx.fillStyle = sketch.color;
      ctx.lineJoin = "round";
      ctx.lineCap = "round";

      //If we're drawing points, draw points and return
      var allowMovable = !!projection.settings.takingScreenshot;
      ctx.desmos_batching = true;
      ctx.beginPath();
      ctx.save();
      GraphsLayer.eachSegment(sketch, function (branch, segment) {
        if (branch.graphMode === GRAPHMODE.XYPOINT ||
            (branch.graphMode === GRAPHMODE.XYPOINT_MOVABLE && allowMovable)) {
          GraphsLayer.drawPointsToCtx(ctx, projection, segment, branch.style);
        }
      });

      ctx.globalAlpha = constants.POINT_ALPHA;
      ctx.stroke();
      ctx.restore();
      ctx.desmos_batching = false;

      //If we're filling, fill.  No batching, because we want polar to shade deeper in overlaps
      GraphsLayer.eachSegment(sketch, function (branch, segment) {
        if (branch.graphMode === GRAPHMODE.XYPOINT || branch.graphMode === GRAPHMODE.XYPOINT_MOVABLE) return;
        var graphMode = GRAPHMODE.Y;
        if (branch.flip) graphMode = GRAPHMODE.X;
        if (branch.graphMode) graphMode = branch.graphMode;

        if (graphMode === GRAPHMODE.POLYGONFILL) {
          GraphsLayer.fillPolygonToCtx(ctx, projection, segment);
        } else {
          var op = branch.operator;
          var fill = (
            op == "<" || op == ">" || op == "<=" || op == ">=" ||
            op == "\\leq" || op == "\\le" || op == "\\geq" || op == "\\ge"
          );
          var fill_d = (op == "<=" || op == "<" || op == "\\leq" || op == "\\le");

          if (fill) GraphsLayer.fillGraphStrokeToCtx(ctx, projection, segment, fill_d, graphMode);
        }
      });

      //If we're drawing segments, draw them
      ctx.desmos_batching = true;
      ctx.beginPath();
      GraphsLayer.eachSegment(sketch, function (branch, segment) {
        if (branch.graphMode === GRAPHMODE.XYPOINT || branch.graphMode === GRAPHMODE.XYPOINT_MOVABLE) return;
        var graphMode = GRAPHMODE.Y;
        if (branch.flip) graphMode = GRAPHMODE.X;
        if (branch.graphMode) graphMode = branch.graphMode;

        var op = branch.operator;
        // != is used for shade-between lines which should be dashed but not filled
        var dotted = (op == "<" || op == ">" || op == '!=' || sketch.style === 'dashed');

        GraphsLayer.drawGraphStrokeToCtx(ctx, projection, segment, dotted, graphMode, op);
      });
      ctx.globalAlpha = constants.STROKE_ALPHA;
      ctx.stroke();
      ctx.globalAlpha = 1.0;
      ctx.desmos_batching = false;
  };

  GraphsLayer.drawGraphStrokeToCtx = function (ctx, projection, segment, dotted, graphMode, op) {
    ctx.globalAlpha = projection.settings.highlight ?
      constants.HIGHLIGHTED_STROKE_ALPHA : constants.STROKE_ALPHA
    ;

    // takes the raw array of numbers and maps it to the canvas. Then it clips.
    var graphType = GraphsLayer.getClippingGraphType(graphMode, op !== "=", projection.settings);
    var scaled = Clipping.mapSegmentToCanvas(segment, projection.viewport, projection.screen, graphType);
    var clipped = Clipping.clipStrokeEdges(scaled, screenToClippingViewport(projection.screen));
    var i;

    // draws the clipped segment as a solid curve
    if (!dotted) {

      if (!ctx.desmos_batching) ctx.beginPath();
      ctx.moveTo(clipped[0],clipped[1]);
      for (i=0; i<clipped.length; i+=2) {
        ctx.lineTo(clipped[i], clipped[i+1]);
      }
      if (!ctx.desmos_batching) ctx.stroke();

    // draws the clipped segment as a dashed curve
    } else {

      var buf = new DashedDrawer(ctx, DashedDrawer.getTotalSegmentLength(clipped) );
      buf.start(clipped[0], clipped[1]);
      for (i=2; i < clipped.length; i+=2) {
        buf.next(clipped[i], clipped[i+1]);
      }
      buf.close();

    }

    ctx.globalAlpha = 1.0;
  };

  GraphsLayer.mapPointToScreen = function (projection, x, y) {
    // if the point is more than 20px off the screen in any direction, we just
    // don't draw it.
    var padding = 20;
    var mx = projection.mapx(x)-0.5;
    if (mx < -padding || mx > projection.screen.width+padding) return null;

    var my = projection.mapy(y)-0.5;
    if (my < -padding || my > projection.screen.height+padding) return null;

    return {x: mx, y: my};
  };

  GraphsLayer.drawPointToCtx = function (ctx, projection, x, y, alpha, style) {

    var pt = GraphsLayer.mapPointToScreen(projection, x, y);
    var size;
    if (!pt) return false;

    ctx.globalAlpha = projection.settings.highlight ?
      constants.HIGHLIGHTED_POINT_ALPHA : constants.POINT_ALPHA
    ;
    if (alpha) ctx.globalAlpha = alpha;
    ctx.globalAlpha = constants.POINT_ALPHA;
    if (!ctx.desmos_batching) ctx.beginPath();
    // For some reason we need a full polygon, but a small one.

    if (style === 'cross') {
      // The values for this and the open style are largely eyeballed so they
      // seem cohesize when mixed. They may change based on other peoples eyeballs
      size = projection.settings.pointLineWidth * 0.4;
      ctx.moveTo(pt.x-size, pt.y-size);
      ctx.lineTo(pt.x+size, pt.y+size);
      ctx.moveTo(pt.x+size, pt.y-size);
      ctx.lineTo(pt.x-size, pt.y+size);
      ctx.lineWidth = projection.settings.pointLineWidth * 0.3;
    } else if (style === 'open') {
      size = projection.settings.pointLineWidth * 0.5;
      ctx.moveTo(pt.x + size, pt.y);
      ctx.arc(pt.x, pt.y, size, 0, Math.PI*2, true);
      ctx.closePath();
      ctx.fillStyle = "white";
      ctx.lineWidth = projection.settings.pointLineWidth * 0.25;
      ctx.fill();
    } else {
      ctx.moveTo(pt.x-0.1, pt.y-0.1);
      ctx.lineTo(pt.x-0.1, pt.y+0.1);
      ctx.lineTo(pt.x+0.1, pt.y+0.1);
      ctx.lineTo(pt.x+0.1, pt.y-0.1);
    }
    if (!ctx.desmos_batching) ctx.stroke();

    ctx.globalAlpha = 1.0;

    return true;
  };

  GraphsLayer.drawPointsToCtx = function (ctx, projection, segment, style) {
      ctx.lineWidth = projection.settings.pointLineWidth;
      for (var i=0; i < segment.length; i++) {
        GraphsLayer.drawPointToCtx(ctx, projection, segment[i][0], segment[i][1], false, style);
      }
  };

  GraphsLayer.fillGraphStrokeToCtx = function (ctx, projection, segment, fillDown, graphMode) {
    ctx.globalAlpha = (graphMode === GRAPHMODE.POLAR) ? constants.POLAR_ALPHA : constants.FILL_ALPHA;

    var fill_paths = null;
    var clipped_edges = null;
    var fillTowards;

    if (graphMode === GRAPHMODE.POLAR) {

      clipped_edges = Clipping.ALL;
      var radius = fillDown ? 0 : projection.viewport.polarDiameter();
      var interval = projection.settings.degreeMode ? 180.0 : 2*Math.PI;
      fill_paths = Clipping.computePolarFill(segment, radius, interval);

    } else if (graphMode === GRAPHMODE.Y) {

      clipped_edges = Clipping.Y;
      fillTowards = fillDown ? projection.viewport.ymin : projection.viewport.ymax;
      fill_paths = Clipping.computeCartesianFill(segment, fillTowards);

    } else if (graphMode === GRAPHMODE.X) {

      clipped_edges = Clipping.X;
      fillTowards = fillDown ? projection.viewport.xmin : projection.viewport.xmax;
      fill_paths = Clipping.computeCartesianFill(segment, fillTowards);

    }

    // scale, clip, and then draw each fill path
    var clipped_viewport = screenToClippingViewport(projection.screen);
    for (var i=0; i<fill_paths.length; i++) {

      // scale the segment
      var map_graphType = GraphsLayer.getClippingGraphType(graphMode, true, projection.settings);
      var scaled = Clipping.mapSegmentToCanvas(fill_paths[i], projection.viewport, projection.screen, map_graphType);

      // clip the segment
      var clipped = Clipping.clipFillEdges(scaled, clipped_viewport, clipped_edges);

      // draw the segment
      if (clipped.length >= 6) {
        ctx.beginPath();

        ctx.moveTo(clipped[0],clipped[1]);
        for (var j=2; j<clipped.length; j+=2) {
          ctx.lineTo(clipped[j],clipped[j+1]);
        }

        ctx.closePath();
        ctx.fill();
      }
    }

    ctx.globalAlpha = 1.0;
  };

  GraphsLayer.fillPolygonToCtx = function (ctx, projection, segment) {
    ctx.globalAlpha = constants.FILL_ALPHA;

    var clipped_viewport = screenToClippingViewport(projection.screen);

    var scaled = Clipping.mapSegmentToCanvas(segment, projection.viewport, projection.screen, Clipping.Y_EQUALS);

    // clip the segment
    var clipped = Clipping.clipFillEdges(scaled, clipped_viewport, Clipping.ALL);

    // draw the segment
    if (clipped.length >= 6) {
      ctx.beginPath();

      ctx.moveTo(clipped[0],clipped[1]);
      for (var j=2; j<clipped.length; j+=2) {
        ctx.lineTo(clipped[j],clipped[j+1]);
      }

      ctx.closePath();
      ctx.fill();
    }

    ctx.globalAlpha = 1.0;
  };

  GraphsLayer.getClippingGraphType = function (graphMode, isInequality, settings) {
    switch (graphMode) {

      case GRAPHMODE.X:
        return Clipping.X_EQUALS;

      case GRAPHMODE.IMPLICIT:
      case GRAPHMODE.PARAMETRIC:
      case GRAPHMODE.Y:
        return Clipping.Y_EQUALS;

      case GRAPHMODE.POLAR:
        if (settings.degreeMode) {
          return isInequality ? Clipping.POLAR_DEGREE_INEQUALITY : Clipping.POLAR_DEGREE_EQUALITY;
        } else {
          return isInequality ? Clipping.POLAR_RADIAN_INEQUALITY : Clipping.POLAR_RADIAN_EQUALITY;
        }

    }
  };

  return GraphsLayer;
});

define('graphing/poidotslayer',['require','loadcss!css/poi','pjs','./graphslayer','./canvaslayer','math/poi','./constants'],function(require) {
  
  // TODO - we have both a poidots layer and poilabels layer. This is including the css for both layers. Either
  // split the css into two separate files or combine the two layers into a single file
  require('loadcss!css/poi');

  var P = require('pjs');
  var GraphsLayer = require('./graphslayer');
  var CanvasLayer = require('./canvaslayer');
  var POITYPE = require('math/poi');
  var constants = require('./constants');

// TODO - rename from 'POIDotsLayer to something like SketchStyleLayer.
var POIDotsLayer = P(CanvasLayer, function(layer, _super){
  
    layer.init = function () {
      _super.init.apply(this, arguments);
      this.$.addClass('dcg-poi-dots-layer');
    };

    layer.redraw = function (projection, graphSketches) {
    
      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);
      
      // Clear out the drawing area
      this.ctx.clearRect(0, 0, projection.screen.width, projection.screen.height);
      
      // Iterate through each graphSketch, find the ones that should showPOI
      // and draw the poi dots. Also, we save the dots we drew.
      var savedPOI = [];
      for (var id in graphSketches) {
        var sketch = graphSketches[id];
        
        if (sketch.visible) {
          
          if (sketch.showHighlight) {
            POIDotsLayer.drawSketchHighlight(sketch, this.ctx, projection);
          }
          
          var pois = sketch.getPOI();
          if (
            sketch.showPOI ||
            // Always run this routine on defined POI. They aren't drawn to the screen, but they
            // need to be available to be opened. This is easier in the current system
            // than ensuring that showPOI is always set to true for these sketches.
            (pois.length && pois[0].type === POITYPE.DEFINITION)
          ) {
            savedPOI.push.apply(savedPOI,POIDotsLayer.drawPOIs(pois, this.ctx, "#AAAAAA", projection));
          }
        }
      }
      this.savedPOI = savedPOI;
    };
    
    layer.getDrawnPOI = function () {
      return this.savedPOI || [];
    };
});

POIDotsLayer.drawSketchHighlight = function (sketch, ctx, projection) {
  projection.settings.setProperty('highlight', true);
  GraphsLayer.drawSketchToCtx(sketch, ctx, projection);
  projection.settings.setProperty('highlight', false);
};

POIDotsLayer.drawPOIs = function (pois, ctx, color, projection) {

  ctx.lineWidth = projection.settings.pointLineWidth;
  ctx.strokeStyle = color || "#AAAAAA";
  ctx.fillStyle = color || "#AAAAAA";
  ctx.lineJoin = "round";
  ctx.lineCap = "round";

  var oldGlobalAlpha = ctx.globalAlpha;
  ctx.globalAlpha = constants.POI_ALPHA;
  
  var poiOnScreen = [];

  var i, plen = pois.length;
  var poi;
  
  // we don't draw dots for POI that are defined. There is already a dot
  // for the point on the screen. But, we want there to be a POI registered
  // still, so we add it to the list of poiOnScreen
  if (plen && pois[0].type === POITYPE.DEFINITION) {
    for (i=0; i<plen; i++) {
      poi = pois[i];
      if (GraphsLayer.mapPointToScreen(projection, poi.x, poi.y)) {
        poiOnScreen.push(poi);
      }
    }
  }
  
  // actually draw them on screen
  else {
    for (i=0; i<plen; i++) {
      poi = pois[i];
      if (GraphsLayer.drawPointToCtx(ctx, projection, poi.x, poi.y, constants.POI_ALPHA)) {
        poiOnScreen.push(poi);
      }
    }
  }

  ctx.globalAlpha = oldGlobalAlpha;
  return poiOnScreen;
};

return POIDotsLayer;
});

define('graphing/domlayer',['require','pjs','jquery','browser','jquery.disabletextselection'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var Browser = require('browser');
  require('jquery.disabletextselection');

var DOMLayer = P(function(layer){

  layer.init = function ($root) {
    this.$ = $("<div class='dcg-graph-outer'></div>")
           .css('position', 'absolute')
           .css('overflow', 'hidden')
           .disableTextSelection(  Browser.IS_IE  );

    this.dom_node = $("<div></div>")
                     .css('position', 'relative')
                     .css('display', 'block')
                     .disableTextSelection(  Browser.IS_IE  );

    this.$root = $root;
    this.$.append(this.dom_node);
  };

  // can't use jquery addClass and removeClass because they are slow on ipad.
  // the problem appears to be that jquery implementation keeps setting the
  // className property of the element even if nothing has changed. In turn,
  // ios appears to rerender everything since .className was set. So we only
  // add/remove the class if it'll change the className of the body.
  layer.addGlobalClass = function(className) {
    if (!this.$root.hasClass(className)) {
      this.$root.addClass(className);
    }
  };
  layer.removeGlobalClass = function(className) {
   if (this.$root.hasClass(className)) {
     this.$root.removeClass(className);
   }
  };

  layer.resize = function (width, height) {

    // early trap if not changing size
    if (width === this.width && height === this.height) return;

    this.width = width;
    this.height = height;

    this.$.css('width', width + "px")
          .css('height', height + "px");

    this.dom_node.css('width', width + "px")
                 .css('height', height + "px");
  };

  // should get overridden by subclass
  layer.redraw = function() {};

});

return DOMLayer;
});
define('graphing/poilabelslayer',['require','pjs','jquery','./domlayer','./label','graphing/graphmode','math/poi','./constants'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var DOMLayer = require('./domlayer');
  var Label = require('./label');
  var GRAPHMODE = require('graphing/graphmode');
  var POITYPE = require('math/poi');
  var constants = require('./constants');

var POILabelsLayer = P(DOMLayer, function(layer, _super){

    layer.init = function (width, height, $root) {
      _super.init.call(this, width, height, $root);
      this.$.addClass('dcg-poi-labels-layer');
    };

    layer.redraw = function (projection, graphSketches) {

      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);

      // Clear out the drawing area
      this.dom_node.find('.dcg-poi').remove();

      // check if an old hoveredPOI was set and clear it out if so
      var hoveredPOI = this.hoveredPOI;
      var hoveredSketch = hoveredPOI ? hoveredPOI.sketch : null;
      var foundHoveredSketch = false;

      // Iterate through each graphSketch, find the opened poi and draw them
      // also saves which ones were drawn.
      var savedPOI = [];
      for (var id in graphSketches) {
        var sketch = graphSketches[id];
        if (sketch === hoveredSketch) foundHoveredSketch = true;
        if (!sketch.visible) continue;

        var pois = POILabelsLayer.drawOpenPOI(sketch, this.dom_node, projection);
        if (pois.length) {
          savedPOI.push.apply(savedPOI,pois);
        }
      }

      // we had a hoveredPOI set but the sketch isn't there any more. clear out
      // the hoverdPOI property.
      if (!foundHoveredSketch) {
        hoveredPOI = this.hoveredPOI = null;
      }

      if (hoveredPOI && hoveredPOI.sketch.visible) {

        if (!hoveredPOI.isOpen()) {
          POILabelsLayer.drawHoveredPOI(this.dom_node, hoveredPOI, projection);
          this.addGlobalClass('dcg-mouse-over-closed-poi');
        } else {
          this.addGlobalClass('dcg-mouse-over-opened-poi');
        }

      } else {

         this.removeGlobalClass('dcg-mouse-over-closed-poi');
         this.removeGlobalClass('dcg-mouse-over-opened-poi');

      }

      this.savedPOI = savedPOI;
    };

    layer.getDrawnPOI = function () {
      return this.savedPOI || [];
    };

});

POILabelsLayer.getPointLabel = function(poi_in, viewport) {
  var xscale = viewport.xmax - viewport.xmin;
  var yscale = viewport.ymax - viewport.ymin;
  var labels;
  var graphMode = poi_in.getGraphMode();

  if (poi_in.type === POITYPE.TRACE) {
    var flip = graphMode === GRAPHMODE.X;
    var independent = (flip) ? poi_in.y : poi_in.x;
    var fn = poi_in.getCompiledFunction();
    labels = Label.point(independent, xscale, yscale, fn);

    if (flip) {
      var tmp = labels[0];
      labels[0] = labels[1];
      labels[1] = tmp;
    }
  } else {
    labels = [
      Label.value(poi_in.x, xscale),
      Label.value(poi_in.y, yscale)
    ];
  }
  var x_label = (
    labels[0].superscript ? labels[0].mantissa + '<sup>' + labels[0].superscript + '</sup>' : labels[0].string
  );
  var y_label = (
    labels[1].superscript ? labels[1].mantissa + '<sup>' + labels[1].superscript + '</sup>' : labels[1].string
  );
  return {
    x: labels[0].value,
    x_label: x_label,
    y: labels[1].value,
    y_label: y_label,
    is_hole: !isFinite(labels[1].value)
  };
};

// TODO - cleanup. Copied and modified from main/grapher.js
POILabelsLayer.createSinglePOI = function(poi_in, viewport) {

  var pt = POILabelsLayer.getPointLabel(poi_in, viewport);
  var hole = pt.is_hole ? ' dcg-hole' : '';
  var real = poi_in.type === POITYPE.DEFINITION ? ' dcg-real' : '';

  var x_label = pt.x_label.replace("π", "<span class='dcg-pi'>π</span>");
  var y_label = pt.y_label.replace("π", "<span class='dcg-pi'>π</span>");

  return $(
    '<div class="dcg-tracept dcg-poi' + hole + real +'">' +
    '  <div class="dcg-pt"></div>' +
    '  <div class="dcg-label">'+ x_label + ', ' + y_label + '</div>' +
    '  <div class="dcg-arrow""></div>' +
    '</div>'
  );
};

POILabelsLayer.drawHoveredPOI = function (dom, poi, projection) {
  var screen_x = projection.mapx(poi.x);
  var screen_y = projection.mapy(poi.y);

  // ensure is on screen
  if (projection.coordsAreOnscreen(screen_x, screen_y, constants.OFFSCREEN_RENDER_MARGIN)) {
    var dom_poi = POILabelsLayer.createSinglePOI(poi, projection.viewport);
    dom_poi.css({
      left: screen_x + "px",
      top: screen_y + "px"
    });
    dom_poi.addClass('dcg-mouseover');
    dom.append(dom_poi);
  }

};

POILabelsLayer.drawOpenPOI = function (sketch, dom, projection) {

  var pois = sketch.openPOI;
  if (!pois.length) return [];

  var poiOnScreen = [];
  for (var i=0; i<pois.length; i++) {
    var poi = pois[i];
    var screen_x = projection.mapx(poi.x);
    var screen_y = projection.mapy(poi.y);

    // ensure is on screen
    if (projection.coordsAreOnscreen(screen_x, screen_y, constants.OFFSCREEN_RENDER_MARGIN)) {
      var dom_poi = POILabelsLayer.createSinglePOI(poi, projection.viewport);
      dom_poi.css({
        left: screen_x + "px",
        top: screen_y + "px"
      });
      dom_poi.addClass('dcg-opened');

      dom.append(dom_poi);
      poiOnScreen.push(poi);
    }
  }

  return poiOnScreen;
};

return POILabelsLayer;
});

define('graphing/stepnumber',['require','pjs'],function(require){
var P = require('pjs');
  
// a reference to a ctx to do measurements on. Shared between
// all instances of StepNumber
var STATIC_CTX = document.createElement('canvas').getContext('2d');
  
var StepNumber = P(function(proto){
  
  proto.init = function (label, fontSize) {
    this._label = label;
    this._fontSize = fontSize;
    this._layout = this._computeLayout(label, fontSize);
  };
  
  // TODO - memoize
  // the layout assumes text is centered both vertically and horizontall when drawn on the ctx.
  // That's why width/2 and height/2 is used so often.
  proto._computeLayout = function (label, fontSize) {
    var layout = {};
  
    if (label.superscript) {

      layout.mantissa_height = fontSize;
      StepNumber.setCtxFontSize(STATIC_CTX, layout.mantissa_height);
      layout.mantissa_width = STATIC_CTX.measureText(label.mantissa).width;

      layout.superscript_height = Math.round(0.8 * fontSize);
      StepNumber.setCtxFontSize(STATIC_CTX, layout.superscript_height);
      layout.superscript_width = STATIC_CTX.measureText(label.superscript).width;
    
      layout.mantissa_x = 0;
      layout.mantissa_y = fontSize / 5;
      layout.superscript_x = layout.mantissa_width / 2 + layout.superscript_width / 2;
      layout.superscript_y = -fontSize / 4;

      layout.top = layout.superscript_y - layout.superscript_height / 2;
      layout.bottom = layout.mantissa_y + layout.mantissa_height / 2;
      layout.left = layout.mantissa_x - layout.mantissa_width / 2;
      layout.right = layout.superscript_x + layout.superscript_width / 2;

    } else {

      layout.mantissa_height = fontSize;
      StepNumber.setCtxFontSize(STATIC_CTX, fontSize);
      layout.mantissa_width = STATIC_CTX.measureText(label.string).width;

      layout.mantissa_x = 0;
      layout.mantissa_y = 0;
    
      layout.top = layout.mantissa_y - layout.mantissa_height / 2;
      layout.bottom = layout.mantissa_y + layout.mantissa_height / 2;
      layout.left = layout.mantissa_x - layout.mantissa_width / 2;
      layout.right = layout.mantissa_x + layout.mantissa_width / 2;
    
    }

    return layout;
  };
  
  proto.getRect = function () {
    return this.getRectWhenCenteredAt({x: 0, y: 0});
  };
  
  proto.getRectWhenCenteredAt = function (centerPt) {
    return {
      left: this._layout.left + centerPt.x,
      right: this._layout.right + centerPt.x,
      top: this._layout.top + centerPt.y,
      bottom: this._layout.bottom + centerPt.y
    };
  };
  
  proto.getWidth = function () {
    return this._layout.right - this._layout.left;
  };
  
  proto.getHeight = function () {
    return this._layout.bottom - this._layout.top;
  };
  
  proto.clampBoundsWithinRect = function (centerPt, rect) {
    var clampedCenterPt = {};
    
    if (centerPt.x + this._layout.left < rect.left) {
      clampedCenterPt.x = rect.left - this._layout.left;
    } else if (centerPt.x + this._layout.right > rect.right) {
      clampedCenterPt.x = rect.right - this._layout.right;
    } else {
      clampedCenterPt.x = centerPt.x;
    }

    if (centerPt.y + this._layout.top < rect.top) {
      clampedCenterPt.y = rect.top - this._layout.top;
    } else if (centerPt.y + this._layout.bottom > rect.bottom) {
      clampedCenterPt.y = rect.bottom - this._layout.bottom;
    } else {
      clampedCenterPt.y = centerPt.y;
    }
    
    return clampedCenterPt;
  };
  
  proto.getValue = function () {
    return this._label.value;
  };
  
  // TODO - memioze
  proto.getMinusWidth = function () {
    if (this.getValue() < 0) {
      StepNumber.setCtxFontSize(STATIC_CTX, this._fontSize);
      return STATIC_CTX.measureText("-1").width - STATIC_CTX.measureText("1").width;
    } else {
      return 0;
    }
  };
  
  proto.getString = function () {
    if (this._label.superscript) {
      return this._label.mantissa + '^' + this._label.superscript;
    } else {
      return this._label.string;
    }
  };
  
  proto.drawCenteredAt = function (ctx, centerPt) {
    var x = centerPt.x;
    var y = centerPt.y;
    
    ctx.save();
    StepNumber.setCtxFontSize(ctx, this._fontSize);
    
    if (this._label.superscript) {
      ctx.fillText(this._label.mantissa, this._layout.mantissa_x + x, this._layout.mantissa_y + y);
      ctx.fillText(this._label.superscript, this._layout.superscript_x + x, this._layout.superscript_y + y);
    } else {
      ctx.fillText(this._label.string, this._layout.mantissa_x + x, this._layout.mantissa_y + y);
    }
    
    ctx.restore();
  };
  
});

StepNumber.setCtxFontSize = function (ctx, fontSize) {
  ctx.font = fontSize + "px Arial";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
};

return StepNumber;
});

define('graphing/computestepsizes',['require','./stepnumber','./label'],function(require){
var StepNumber = require('./stepnumber');
var Label = require('./label');

var ComputeStepSizes = {};

var eachStep = function (min, max, step, func) {
  var nmin = Math.ceil(min/step);
  var nmax = Math.floor(max/step);
  var invstep = 1/step;
  if (nmin > nmax) return;
  // If step===0, this would loop forever. This is designed for drawing
  // gridlines to a screen, so it shouldn't need to use more steps than
  // there are pixels.
  if (nmax - nmin > 10000) return;
  for (var n = nmin; n <= nmax; n++) func(n/invstep);
};

ComputeStepSizes.RATIONAL_STEPS = {
  base: 10,
  major: [ 1, 2, 5 ],
  minor: [ 4, 4, 5 ]
};

ComputeStepSizes.PI_STEPS = {
  base: 10,
  major: [ Math.PI, 2*Math.PI, 5*Math.PI ],
  minor: [ 4, 4, 5 ]
};

ComputeStepSizes.PI_FRAC_STEPS = {
  base: 2,
  major: [ Math.PI/3 ],
  minor: [ 3 ]
};

function generateSteps(step) {
  if (!step) return ComputeStepSizes.RATIONAL_STEPS;

  return {
    base: 10,
    major: [step, 2*step, 5*step],
    minor: [4, 4, 5]
  };
}

// TODO - test
ComputeStepSizes.bestStep = function (exact, steps) {

  // JM: What does this mean...

  /* 1 + xrange/bestMultiple <= expectedX
  * xrange/(expectedX-1) <= bestMultiple
  * xrange/(expectedX-1) <= mult*base^exp
  * (xrange/expectedX-1) / mult <= base^exp
  * ceil(log((range/expectedX-1)/mult)/log(base)) = exp
  */
  var major, bestMajor = Infinity, bestMinor, exp, num;
  for (var i=0; i < steps.major.length; i++) {
    major = steps.major[i];
    exp = Math.ceil(Math.log(exact/major)/Math.log(steps.base));
    num = major*Math.pow(steps.base, exp);

    if (num < bestMajor) {
      bestMajor = num;
      bestMinor = bestMajor/steps.minor[i];
    }
  }

  return { major: bestMajor, minor: bestMinor };
};

// simply generate the labels and make sure there is space between them.
// TODO - test
ComputeStepSizes.countStepsInRange = function (min, max, step) {
  return 1 + (max - min) / step;
};

ComputeStepSizes.calculateSpaceBetweenRects = function (rect1, rect2) {
  var vertSpace;
  var horizSpace;

  if (rect1.right < rect2.left) {
    horizSpace = rect2.left - rect1.right;
  } else if (rect2.right < rect1.left) {
    horizSpace = rect1.left - rect2.right;
  } else {
    horizSpace = 0;
  }

  if (rect1.bottom < rect2.top) {
    vertSpace = rect2.top - rect1.bottom;
  } else if (rect2.bottom < rect1.top) {
    vertSpace = rect1.top - rect2.bottom;
  } else {
    vertSpace = 0;
  }

  return Math.max(vertSpace, horizSpace);
};

// assumes that each label takes up projection.settings.pixelsPerLabel
// in order to get a rough step size to start working with
ComputeStepSizes.estimateMajors = function (projection) {
  var width = projection.screen.width;
  var height = projection.screen.height;
  var xRange = projection.viewport.xmax - projection.viewport.xmin;
  var yRange = projection.viewport.ymax - projection.viewport.ymin;
  var pixelsPerLabel = projection.settings.pixelsPerLabel;

  return {
    majorStepX: pixelsPerLabel/width * xRange,
    majorStepY: pixelsPerLabel/height * yRange,
  };
};

// TODO - test
ComputeStepSizes.cartesian = function (projection) {
  /* jshint maxcomplexity:18 */
  var cartesianSteps = {};

  var xStep = Math.abs(projection.settings.xAxisStep);
  var yStep = Math.abs(projection.settings.yAxisStep);
  var xRange = projection.viewport.xmax - projection.viewport.xmin;
  var yRange = projection.viewport.ymax - projection.viewport.ymin;
  var xIsMultipleOfPi = Label.value(xStep, xRange).string.indexOf('π') >= 0;
  var yIsMultipleOfPi = Label.value(yStep, yRange).string.indexOf('π') >= 0;
  var numXLabels = ComputeStepSizes.countStepsInRange(projection.viewport.xmin, projection.viewport.xmax, xStep);
  var numYLabels = ComputeStepSizes.countStepsInRange(projection.viewport.ymin, projection.viewport.ymax, yStep);
  var estimatedMajors = ComputeStepSizes.estimateMajors(projection);
  var fontSize = projection.settings.labelSize;

  // if the step is exactly pi we want to fall through to legacy pi labels at the end
  if (xStep && xStep !== Math.PI) {
    if (numXLabels >= 3 && numXLabels < 100) {
      var maxWidth = 0;
      eachStep(projection.viewport.xmin, projection.viewport.xmax, xStep, function (step) {
        var stepNumber = StepNumber(Label.value(step, xRange), fontSize);
        maxWidth = Math.max(stepNumber.getWidth(), maxWidth);
      });

      // check if there's enough room to fit this many labels with a little padding
      if (numXLabels * (maxWidth + 10) <= projection.screen.width) {
        cartesianSteps.majorStepX = xStep;
        cartesianSteps.minorStepX = xStep / 4;
      }
    }
  }

  // if the step is exactly pi we want to fall through to legacy pi labels at the end
  if (yStep && yStep !== Math.PI) {
    if (numYLabels >= 3 && numYLabels < 100) {
      var maxHeight = 0;
      eachStep(projection.viewport.ymin, projection.viewport.ymax, yStep, function (step) {
        var stepNumber = StepNumber(Label.value(step, yRange), fontSize);
        maxHeight = Math.max(stepNumber.getHeight(), maxHeight);
      });

      // check if there's enough room to fit this many labels with a little padding
      if (numYLabels * (maxHeight + 10) <= projection.screen.height) {
        cartesianSteps.majorStepY = yStep;
        cartesianSteps.minorStepY = yStep / 4;
      }
    }
  }

  // either the user didn't define an xstep or the user defined an inappropriate xstep.
  if (!cartesianSteps.majorStepX) {
    var defaultXSteps;
    if (xIsMultipleOfPi) {
      if (estimatedMajors.majorStepX >= 1) {
        defaultXSteps = ComputeStepSizes.PI_STEPS;
      } else {
        defaultXSteps = ComputeStepSizes.PI_FRAC_STEPS;
      }
    } else {
      defaultXSteps = generateSteps(xStep);
    }

    var defaultXLabels = ComputeStepSizes.bestStep(estimatedMajors.majorStepX, defaultXSteps);
    cartesianSteps.majorStepX = defaultXLabels.major;
    cartesianSteps.minorStepX = defaultXLabels.minor;
  }

  // either the user didn't define an ystep or the user defined an inappropriate ystep.
  if (!cartesianSteps.majorStepY) {
    var defaultYSteps;
    if (yIsMultipleOfPi) {
      if (estimatedMajors.majorStepY >= 1) {
        defaultYSteps = ComputeStepSizes.PI_STEPS;
      } else {
        defaultYSteps = ComputeStepSizes.PI_FRAC_STEPS;
      }
    } else {
      defaultYSteps = generateSteps(yStep);
    }

    var defaultYLabels = ComputeStepSizes.bestStep(estimatedMajors.majorStepY, defaultYSteps);
    cartesianSteps.majorStepY = defaultYLabels.major;
    cartesianSteps.minorStepY = defaultYLabels.minor;
  }

  // If the axes have similar extents, prefer to choose the same steps for
  // x and y. Could both be undefined or defined to same number
  if (xStep === yStep) {
    var maxRatio = 2;
    var pixel_scale_ratio = (projection.screen.width / xRange) / (projection.screen.height / yRange);
    if (pixel_scale_ratio >= 1 && pixel_scale_ratio <= maxRatio) {
      cartesianSteps.majorStepX = cartesianSteps.majorStepY;
      cartesianSteps.minorStepX = cartesianSteps.minorStepY;
    } else if( pixel_scale_ratio <= 1 && pixel_scale_ratio >= 1/maxRatio ) {
      cartesianSteps.majorStepY = cartesianSteps.majorStepX;
      cartesianSteps.minorStepY = cartesianSteps.minorStepX;
    }
  }

  //overwrite minorStep if it's been set by the user
  if (projection.settings.xAxisMinorSubdivisions > 0) {
    cartesianSteps.minorStepX = cartesianSteps.majorStepX / projection.settings.xAxisMinorSubdivisions;
  }
  if (projection.settings.yAxisMinorSubdivisions > 0) {
    cartesianSteps.minorStepY = cartesianSteps.majorStepY / projection.settings.yAxisMinorSubdivisions;
  }

  return cartesianSteps;
};

ComputeStepSizes.polar = function (projection) {
  var estimatedStepSizes = ComputeStepSizes.estimateMajors(projection);
  var bestX = ComputeStepSizes.bestStep(estimatedStepSizes.majorStepX, ComputeStepSizes.RATIONAL_STEPS);
  var bestY = ComputeStepSizes.bestStep(estimatedStepSizes.majorStepY, ComputeStepSizes.RATIONAL_STEPS);
  var bestR = bestX.major > bestY.major ? bestX : bestY;

  return {
    majorStepR: bestR.major,
    minorStepR: bestR.minor
  };
};

return ComputeStepSizes;
});

define('graphing/axisarrowmode',{
  NONE: 'NONE',
  POSITIVE: 'POSITIVE',
  BOTH: 'BOTH'
});
define('graphing/gridlayer',['require','pjs','./canvaslayer','./stepnumber','./label','./computestepsizes','./axisarrowmode'],function(require){
var P = require('pjs');
var CanvasLayer = require('./canvaslayer');
var StepNumber = require('./stepnumber');
var Label = require('./label');
var ComputeStepSizes = require('./computestepsizes');
var AxisArrowMode = require('./axisarrowmode');

var GridLayer = P(CanvasLayer, function(layer){

  layer.redraw = function (projection, scaleAxis) {
    var screen = projection.screen;
    // make sure that this is the correct size
    this.resize(screen.width, screen.height);
    // Clear out the drawing area
    this.ctx.clearRect(0, 0, screen.width, screen.height);
    this.redrawToCtx(this.ctx, projection, scaleAxis);
  };

  layer.redrawToCtx = function (ctx, projection, scaleAxis) {

    if (projection.settings.polarMode) {
      projection.settings.setProperty('computedStepSizes', ComputeStepSizes.polar(projection));
    } else {
      projection.settings.setProperty('computedStepSizes', ComputeStepSizes.cartesian(projection));
    }

    if (projection.settings.showGrid) {
      if (projection.settings.polarMode) {
        this.drawPolarGrid(ctx, projection);
       } else {
        this.drawCartesianGrid(ctx, projection);
      }
    }

    this.drawAxes(ctx, projection, scaleAxis);

    var numberBounds;
    if (projection.settings.polarMode) {
      numberBounds = this.drawPolarStepNumbers(ctx, projection);
      this.drawLabels(ctx, projection, numberBounds);
    } else {
      numberBounds = this.drawCartesianStepNumbers(ctx, projection);
      this.drawLabels(ctx, projection, numberBounds);
    }
  };

  layer.addTextShadow = function(ctx) {
    ctx.shadowBlur = 4;
    ctx.shadowColor = "white";
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
  };

  layer.drawPolarGrid = function (ctx, projection) {
    var stepSizes = projection.settings.computedStepSizes;
    var minorOpacity = projection.settings.minorAxisOpacity;
    var majorOpacity = projection.settings.majorAxisOpacity;
    var adjustedMajorOpacity = 1 - (1 - majorOpacity)/(1 - minorOpacity);

    var x = Math.round(projection.mapx(0)) - 0.5;
    var y = Math.round(projection.mapy(0)) - 0.5;
    var rh = projection.screen.height/(projection.viewport.ymax-projection.viewport.ymin);
    var rw = projection.screen.width/(projection.viewport.xmax-projection.viewport.xmin);
    var scale = rh/rw;
    var y_scaled = y/scale;
    var rmin = projection.viewport.smallestR();
    var rmax = projection.viewport.largestR();

    // we don't want to draw from stepSizes.minorStepR if the origin is way off
    // the screen. We figure out the first multiples of minorStepR and
    // majorStepR that are visible (or nearly visible).
    var firstMinorStepR = stepSizes.minorStepR * Math.max(1, Math.floor(rmin/stepSizes.minorStepR));
    var firstMajorStepR = stepSizes.majorStepR * Math.max(1, Math.floor(rmin/stepSizes.majorStepR));

    // minor circles
    ctx.save();
    ctx.scale(1, scale);
    ctx.beginPath();
    eachStep(firstMinorStepR, rmax, stepSizes.minorStepR, function (value) {
      var r = projection.mapx(value) - x;
      ctx.moveTo(x+r, y_scaled);
      ctx.arc(x, y_scaled, r, 0, 2 * Math.PI);
    });
    ctx.restore();
    ctx.lineWidth=1;
    ctx.strokeStyle = "rgba(0, 0 , 0, " + minorOpacity + ")";
    ctx.stroke();

    // minor radial lines
    ctx.beginPath();
    //if rmin > 0, the origin is offscreen. tacky, but use this as the cue to double-up the lines
    var rInterval = (rmin > 0 ? 5 : 15);
    eachStep(0, 359, rInterval, function (degrees) {
      ctx.moveTo(x,y);
      var x_px = projection.mapx(rmax * Math.cos(degrees*Math.PI/180));
      var y_px = projection.mapy(rmax * Math.sin(degrees*Math.PI/180));
      ctx.lineTo(Math.round(x_px) - 0.5, Math.round(y_px) - 0.5);
    });
    ctx.stroke();

    // major circles
    ctx.save();
    ctx.scale(1, scale);
    ctx.beginPath();
    eachStep(firstMajorStepR, rmax, stepSizes.majorStepR, function (value) {
      var r = projection.mapx(value) - x;
      ctx.moveTo(x+r, y_scaled);
      ctx.arc(x, y_scaled, r, 0, 2 * Math.PI);
    });
    ctx.restore();
    ctx.lineWidth=1;
    ctx.strokeStyle = "rgba(0, 0 , 0, " + adjustedMajorOpacity + ")";
    ctx.stroke();

    // major radial lines
    ctx.beginPath();
    eachStep(0, 360-15, 90, function (degrees) {
      ctx.moveTo(x,y);
      var x_px = projection.mapx(rmax * Math.cos(degrees*Math.PI/180));
      var y_px = projection.mapy(rmax * Math.sin(degrees*Math.PI/180));
      ctx.lineTo(Math.round(x_px) - 0.5, Math.round(y_px) - 0.5);
    });
    ctx.stroke();

  };

  layer.drawCartesianGrid = function (ctx, projection) {
    var stepSizes = projection.settings.computedStepSizes;

    var xmin = projection.viewport.xmin, ymin = projection.viewport.ymin;
    var xmax = projection.viewport.xmax, ymax = projection.viewport.ymax;

    var width = projection.screen.width;
    var height = projection.screen.height;

    var minorOpacity = projection.settings.minorAxisOpacity;
    var majorOpacity = projection.settings.majorAxisOpacity;

    ctx.lineWidth = 1;

    // Minor gridlines

    ctx.beginPath();

    ctx.strokeStyle = "rgba(0, 0 , 0, " + minorOpacity + ")";

    eachStep(xmin, xmax, stepSizes.minorStepX, function (value) {
      var pixelValue = Math.round(projection.mapx(value));
      if (pixelValue === width) return;
      ctx.moveTo(pixelValue - 0.5, 0);
      ctx.lineTo(pixelValue - 0.5, height);
    });

    eachStep(ymin, ymax, stepSizes.minorStepY, function (value) {
      var pixelValue = Math.round(projection.mapy(value));
      if (pixelValue === height) return;
      ctx.moveTo(0, pixelValue - 0.5);
      ctx.lineTo(width, pixelValue - 0.5);
    });

    ctx.stroke();

    // Major gridlines

    ctx.beginPath();
    // Compensate for double stroking major gridlines. Strokes opacities
    // compose as o3 = 1 - (1 - o1)(1 - o2). We know what we've stroked so
    // far (o1), and what final stroke we'd like (o3), so solve for o2:
    // o2 = 1 - (1 - o3)/(1 - o1).
    var adjustedMajorOpacity = 1 - (1 - majorOpacity)/(1 - minorOpacity);
    ctx.strokeStyle = "rgba(0, 0 , 0, " + adjustedMajorOpacity + ")";

    eachStep(xmin, xmax, stepSizes.majorStepX, function (value) {
      var pixelValue = Math.round(projection.mapx(value));
      if (pixelValue === width) return;
      ctx.moveTo(pixelValue - 0.5, 0);
      ctx.lineTo(pixelValue - 0.5, height);
    });

    eachStep(ymin, ymax, stepSizes.majorStepY, function (value) {
      var pixelValue = Math.round(projection.mapy(value));
      if (pixelValue === height) return;
      ctx.moveTo(0, pixelValue - 0.5);
      ctx.lineTo(width, pixelValue - 0.5);
    });

    ctx.stroke();

  };

  layer.drawAxes = function(ctx, projection, scaleAxis) {
    var lineOffset = projection.settings.axisLineOffset;
    var axisOpacity = projection.settings.axisOpacity.toString();

    var scaleAxisStyle = "rgba(127,205,230," + axisOpacity + ")";
    var normalAxisStyle = "rgba(0,0,0," + axisOpacity + ")";
    var xAxisArrowMode = projection.settings.xAxisArrowMode;
    var yAxisArrowMode = projection.settings.yAxisArrowMode;
    var showXAxis = projection.settings.showXAxis;
    var showYAxis = projection.settings.showYAxis;

    var scaleAxisMultiplier = 3;

    var pixelX = Math.round(projection.mapx(0)) - lineOffset;
    var pixelY = Math.round(projection.mapy(0)) - lineOffset;
    var height = projection.screen.height;
    var width = projection.screen.width;

    function drawArrow (x,y,angle) {
      var angleOffset = Math.PI/6;
      var hyp = 8*ctx.lineWidth;
      ctx.moveTo(x + Math.cos(angle-angleOffset)*hyp, y + Math.sin(angle-angleOffset)*hyp);
      ctx.lineTo(x,y);
      ctx.lineTo(x + Math.cos(angle+angleOffset)*hyp, y + Math.sin(angle+angleOffset)*hyp);
    }

    if (showYAxis) {
      ctx.lineWidth = projection.settings.axisLineWidth * (scaleAxis === 'y' ? scaleAxisMultiplier : 1);
      ctx.strokeStyle = scaleAxis === 'y' ? scaleAxisStyle : normalAxisStyle;
      ctx.beginPath();
      ctx.moveTo(pixelX, 0);
      ctx.lineTo(pixelX, height);
      if (yAxisArrowMode === AxisArrowMode.BOTH) {
        drawArrow(pixelX, height, 3*Math.PI/2);
        drawArrow(pixelX, 0, Math.PI/2);
      } else if (yAxisArrowMode === AxisArrowMode.POSITIVE) {
        drawArrow(pixelX, 0, Math.PI/2);
      }
      ctx.stroke();
    }

    if (showXAxis) {
      ctx.lineWidth = projection.settings.axisLineWidth * (scaleAxis === 'x' ? scaleAxisMultiplier : 1);
      ctx.strokeStyle = scaleAxis === 'x' ? scaleAxisStyle : normalAxisStyle;
      ctx.beginPath();
      ctx.moveTo(0, pixelY);
      ctx.lineTo(width, pixelY);
      if (xAxisArrowMode === AxisArrowMode.BOTH) {
        drawArrow(0, pixelY, 0);
        drawArrow(width, pixelY, Math.PI);
      } else if (xAxisArrowMode === AxisArrowMode.POSITIVE) {
        drawArrow(width, pixelY, Math.PI);
      }
      ctx.stroke();
    }

  };


  layer.drawPolarStepNumbers = function (ctx, projection) {
    ctx.save();
    var showGrid = projection.settings.showGrid;
    var showXNumbers = projection.settings.xAxisNumbers && projection.settings.showXAxis;
    var showYNumbers = projection.settings.yAxisNumbers && projection.settings.showYAxis;
    var showPolarNumbers = showGrid && projection.settings.polarNumbers;
    var stepSizes = projection.settings.computedStepSizes;

    var rmax = projection.viewport.largestR();
    var rmin = projection.viewport.smallestR();
    var xmin = projection.viewport.xmin, xmax = projection.viewport.xmax;
    var ymin = projection.viewport.ymin, ymax = projection.viewport.ymax;
    var width = projection.screen.width;
    var height = projection.screen.height;
    var screenRect = {left: 3, right: width - 3, top: 3, bottom: height - 3};

    var hangingColor = projection.settings.labelHangingColor;
    var normalColor = projection.settings.labelNormalColor;

    var fontSize = projection.settings.labelSize;
    var textHeight = fontSize;

    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.addTextShadow(ctx);
    ctx.font = fontSize.toString() + "px Arial";
    ctx.fillStyle = normalColor;

    function intersectX (r, bounds, numbers) {
      var y = Math.sqrt(r*r-bounds*bounds);
      if (ymin <= y && y <= ymax) {
        numbers.push({x: projection.mapx(bounds), y: projection.mapy(y)});
      }
      if (ymin <= -y && -y <= ymax) {
        numbers.push({x: projection.mapx(bounds), y: projection.mapy(-y)});
      }
    }

    function intersectY (r, bounds, numbers) {
      var x = Math.sqrt(r*r-bounds*bounds);
      if (xmin <= x && x <= xmax) {
        numbers.push({x: projection.mapx(x), y: projection.mapy(bounds)});
      }
      if (xmin <= -x && -x <= xmax) {
        numbers.push({x: projection.mapx(-x), y: projection.mapy(bounds)});
      }
    }

    var xAxis = projection.mapx(0);
    var yAxis = projection.mapy(0);

    // if the axis is on screen add labels for it
    var xAxisIsWithinViewport = ymin <= 0 && 0 <= ymax;
    var yAxisIsWithinViewport = xmin <= 0 && 0 <= xmax;
    var addXNumbers = xAxisIsWithinViewport && showXNumbers;
    var addYNumbers = yAxisIsWithinViewport && showYNumbers;
    var addEdgeNumbers = '';

    // neither axis is on the screen
    if (!addXNumbers && !addYNumbers && showGrid) {

      // figure out which edge is closest to an axis
      var leftDistance = Math.abs(xAxis);
      var rightDistance = Math.abs(xAxis-width);
      var topDistance = Math.abs(yAxis);
      var bottomDistance = Math.abs(yAxis-height);

      var leftRightWinner, topBottomWinner, leftRightDis, topBottomDis;

      if (leftDistance <= rightDistance) {
        leftRightWinner = 'left';
        leftRightDis = leftDistance;
      } else {
        leftRightWinner = 'right';
        leftRightDis = rightDistance;
      }

      if (topDistance <= bottomDistance) {
        topBottomWinner = 'top';
        topBottomDis = topDistance;
      } else {
        topBottomWinner = 'bottom';
        topBottomDis = bottomDistance;
      }

      if (showXNumbers && showYNumbers) {
        addEdgeNumbers = leftRightDis <= topBottomDis ? leftRightWinner : topBottomWinner;
      } else if (showYNumbers) {
        addEdgeNumbers = leftRightWinner;
      } else if (showXNumbers) {
        addEdgeNumbers = topBottomWinner;
      }
    }

    // the space taken up by the numbers. the axis labels will use this stepSizesrmation
    // to figure out where to jump to.
    var xBounds = {left: 0, right: width, top: yAxis-1, bottom: yAxis+1};
    var yBounds = {left: xAxis-1, right: xAxis+1, top: 0, bottom: height};

    // label each circle where it crosses the x axis, the y axis, and
    // whenever it leaves or enters the viewport.
    eachStep(0, rmax, stepSizes.majorStepR, function (r) {
      /* jshint maxcomplexity:12 */
      var xNumbers = [];
      var yNumbers = [];
      var edgeNumbers = [];

      var stepNumber = StepNumber(Label.value(r, rmax), fontSize);
      var rect = stepNumber.getRect();

      if (r > 0) {
        // check if circle intersects positive y axis
        if (addYNumbers && ymin <= r && r <= ymax) {
          yNumbers.push({x: xAxis - rect.right - 5, y: projection.mapy(r)});
        }

        // check if circle intersects negative y axis
        if (addYNumbers && ymin <= -r && -r <= ymax) {
          yNumbers.push({x: xAxis - rect.right - 5, y: projection.mapy(-r)});
        }

        // check if circle intersects positive x axis
        if (addXNumbers && xmin <= r && r <= xmax) {
          xNumbers.push({x: projection.mapx(r), y: yAxis - rect.top + 3});
        }

        // check if circle intersects negative x axis
        if (addXNumbers && xmin <= -r && -r <= xmax) {
          xNumbers.push({x: projection.mapx(-r), y: yAxis - rect.top + 3});
        }
      }

      // only show 0 if one of the axes are turned off
      else {
        if (addYNumbers && !showXNumbers && ymin <= r && r <= ymax) {
          yNumbers.push({x: xAxis - rect.right - 5, y: projection.mapy(r)});
        } else if (addXNumbers && !showYNumbers && xmin <= r && r <= xmax) {
          xNumbers.push({x: projection.mapx(r), y: yAxis - rect.top + 3});
        }
      }

      // if we're supposed to add numbers to an edge, do it
      switch (addEdgeNumbers) {
        case "top":
          intersectY(r, ymax, edgeNumbers);
          break;

        case "bottom":
          intersectY(r, ymin, edgeNumbers);
          break;

        case "left":
          intersectX(r, xmin, edgeNumbers);
          break;

        case "right":
          intersectX(r, xmax, edgeNumbers);
          break;
      }

      xNumbers.forEach(function (centerPt) {
        centerPt = stepNumber.clampBoundsWithinRect(centerPt, screenRect);
        stepNumber.drawCenteredAt(ctx, centerPt);
        expandBounds(xBounds, stepNumber.getRectWhenCenteredAt(centerPt));
      });

      yNumbers.forEach(function (centerPt) {
        centerPt = stepNumber.clampBoundsWithinRect(centerPt, screenRect);
        stepNumber.drawCenteredAt(ctx, centerPt);
        expandBounds(yBounds, stepNumber.getRectWhenCenteredAt(centerPt));
      });

      edgeNumbers.forEach(function (centerPt) {
        centerPt = stepNumber.clampBoundsWithinRect(centerPt, screenRect);
        stepNumber.drawCenteredAt(ctx, centerPt);
      });
    });

    if (showPolarNumbers) {
      // figure out which circle to label radial lines along.
      // Rule here: halfway between the largest and smallest r (rmin and rmax).
      // not scientific. Round up. Let's see how it feels

      // 0 => 0th circle. 1 => first circle, etc;
      var minRadNum = Math.ceil(rmin / stepSizes.majorStepR);
      var maxRadNum = Math.floor(rmax / stepSizes.majorStepR);
      var radiusNum = Math.ceil((minRadNum + maxRadNum)/2);
      var radial_label_radius = radiusNum * stepSizes.majorStepR;


      //if rmin > 0, the origin is offscreen. tacky, but use this as the cue to double-up the lines
      var rInterval = (rmin > 0 ? 15 : 30);

      // label radial lines
      eachStep(0, 359, rInterval, function (degrees) {
        var string;
        if (projection.settings.degreeMode) {
          string = degrees.toString() + "°";
        } else {
          string = Label.value(degrees*Math.PI/180, 2*Math.PI).string;
        }

        var textHalfWidth = ctx.measureText(string).width/2;
        var r = radial_label_radius / 1.05;

        var x = r * Math.cos(degrees*Math.PI/180);
        var y = r * Math.sin(degrees*Math.PI/180);

        // only draw numbers that are on the screen
        if (x < xmin || x > xmax|| y < ymin || y > ymax) return;

        var pixelX = projection.mapx(x);
        var pixelY = projection.mapy(y);

        // some adjustments to the numbers along the axes
        if (degrees === 0 || degrees === 180) {
          pixelY -= textHeight;
        } else if (degrees === 90 || degrees === 270) {
          pixelX += textHalfWidth+3;
        }

        var clampedPixelX = clamp(pixelX, 3 + textHalfWidth, width - 3 - textHalfWidth);
        var clampedPixelY = clamp(pixelY, 3 + textHeight, height - 3 - textHeight);

        ctx.fillStyle = hangingColor;
        ctx.fillText(string, clampedPixelX, clampedPixelY);
      });
    }
    ctx.restore();
    return {
      x: xBounds,
      y: yBounds
    };
  };

  layer.drawLabels = function (ctx, projection, numberBounds) {
    /* jshint maxcomplexity:11 */
    var xmin = projection.viewport.xmin, xmax = projection.viewport.xmax;
    var ymin = projection.viewport.ymin, ymax = projection.viewport.ymax;
    var width = projection.screen.width;
    var height = projection.screen.height;
    var xscale = (xmax - xmin) / width;
    var yscale = (ymax - ymin) / height;
    var normalColor = projection.settings.labelNormalColor;
    var xAxis = projection.mapx(0);
    var yAxis = projection.mapy(0);
    var fontSize = projection.settings.labelSize;

    //labelEdgePadding is the distance from the edge of the viewport along the label
    var labelEdgePadding = 15;

    var labelFontSize = Math.round(fontSize * 1.25);
    var xLabel = projection.settings.showXAxis && projection.settings.xAxisLabel;
    var yLabel = projection.settings.showYAxis && projection.settings.yAxisLabel;
    var xBounds = numberBounds.x;
    var yBounds = numberBounds.y;

    if (xLabel && xBounds) {
      ctx.save();
      ctx.font = labelFontSize.toString() + "px Arial";

      this.addTextShadow(ctx);
      ctx.fillStyle = normalColor;
      var xLabelPosition;

      if (ctx.__xLabelOffset && projection.settings.isViewportTransient) {
        if (approxEqual(ctx.__xLabelOffset.xscale, xscale) && approxEqual(ctx.__xLabelOffset.yscale, yscale)) {
          xLabelPosition = {x: ctx.__xLabelOffset.x + xAxis, y: ctx.__xLabelOffset.y + yAxis};
        }
      }

      if (!xLabelPosition) {
        var xWidth = ctx.measureText(xLabel).width;
        var xLeft = width - xWidth - labelEdgePadding;
        var xHeight = labelFontSize;

        // there is space below the numbers, draw the label there
        if (xBounds.bottom + xHeight < height) {
          xLabelPosition = {x: xLeft, y: xBounds.bottom + xHeight};
        }
        // there isn't space below the numbers, so draw above them
        else {
          //I don't know why we want xHeight/2 here. It fixes
          //behavior in projector & regular mode though. Otherwise,
          //when floated on top of the x-axis, the label was too far away
          xLabelPosition = {x: xLeft, y: xBounds.top - xHeight/2};
        }

        ctx.__xLabelOffset = {
          x: xLabelPosition.x - xAxis,
          y: xLabelPosition.y - yAxis,
          xscale: xscale,
          yscale: yscale
        };
      }
      ctx.fillText(xLabel, xLabelPosition.x, xLabelPosition.y);
      ctx.restore();
    } else {
      ctx.__xLabelPosition = null;
    }

    if (yLabel && yBounds) {
      ctx.save();

      this.addTextShadow(ctx);
      ctx.font = labelFontSize.toString() + "px Arial";
      ctx.fillStyle = normalColor;
      var yLabelPosition;

      if (ctx.__yLabelOffset && projection.settings.isViewportTransient) {
        if (approxEqual(ctx.__yLabelOffset.xscale, xscale) && approxEqual(ctx.__yLabelOffset.yscale, yscale)) {
          yLabelPosition = {x: ctx.__yLabelOffset.x + xAxis, y: ctx.__yLabelOffset.y + yAxis};
        }
      }

      if (!yLabelPosition) {
        var yHeight = ctx.measureText(yLabel).width;
        var yTop = 0 + labelEdgePadding + yHeight;
        var yWidth = labelFontSize;

        // there is space to the left of the numbers, draw the label there
        if (yBounds.left - yWidth > 0) {
          //I don't know why we want yWidth/2 here. It fixes
          //behavior in projector & regular mode though. Otherwise,
          //when floated on the left of the y-axis, it was too far away
          yLabelPosition = {x: yBounds.left - yWidth/2, y: yTop};
        }

        // there isn't space to the left of the numbers, so draw the label to the right of them
        else {
          yLabelPosition = {x: yBounds.right + yWidth, y: yTop};
        }

        ctx.__yLabelOffset = {
          x: yLabelPosition.x - xAxis,
          y: yLabelPosition.y - yAxis,
          xscale: xscale,
          yscale: yscale
        };
      }

      ctx.translate(yLabelPosition.x, yLabelPosition.y);
      ctx.rotate(-Math.PI/2);
      ctx.fillText(yLabel, 0, 0);
      ctx.restore();
    } else {
      ctx.__yLabelPosition = null;
    }
  };

  layer.drawCartesianStepNumbers = function(ctx, projection) {
    ctx.save();

    var stepSizes = projection.settings.computedStepSizes;

    var showXAxis = projection.settings.showXAxis;
    var showYAxis = projection.settings.showYAxis;
    var drawXNumbers = showXAxis && projection.settings.xAxisNumbers;
    var drawYNumbers = showYAxis && projection.settings.yAxisNumbers;

    var xmin = projection.viewport.xmin, xmax = projection.viewport.xmax;
    var ymin = projection.viewport.ymin, ymax = projection.viewport.ymax;
    var width = projection.screen.width;
    var height = projection.screen.height;
    var screenRect = {left: 3, top: 3, right: width - 3, bottom: height - 3};

    var hangingColor = projection.settings.labelHangingColor;
    var normalColor = projection.settings.labelNormalColor;

    var xAxis = projection.mapx(0);
    var yAxis = projection.mapy(0);

    var fontSize = projection.settings.labelSize;
    this.addTextShadow(ctx);

    // the space taken up by the numbers. the axis labels will use this stepSizesrmation
    // to figure out where to jump to
    var xBounds = {left: 0, right: width, top: yAxis-1, bottom: yAxis+1};
    var yBounds = {left: xAxis-1, right: xAxis+1, top: 0, bottom: height};

    var zeroDrawn = false;
    if (showXAxis && showYAxis && (drawXNumbers || drawYNumbers)) {
      zeroDrawn = true;
      ctx.fillStyle = normalColor;

      var zeroStepNumber = StepNumber(Label.value(0,1), fontSize);

      zeroStepNumber.drawCenteredAt(ctx, {
        x: xAxis - zeroStepNumber.getRect().right - 5,
        y: yAxis - zeroStepNumber.getRect().top + 3
      });
    }

    if (drawXNumbers) {
      eachStep(xmin, xmax, stepSizes.majorStepX, function (step) {
        var stepNumber = StepNumber(Label.value(step, xmax - xmin), fontSize);
        var centerPt = {
          x: projection.mapx(stepNumber.getValue()) - stepNumber.getMinusWidth(),
          y: yAxis - stepNumber.getRect().top + 3
        };
        var clampedCenterPt = stepNumber.clampBoundsWithinRect(centerPt, screenRect);

        ctx.fillStyle = (centerPt.y === clampedCenterPt.y) ? normalColor : hangingColor;

        if (stepNumber.getString() === '0' && zeroDrawn) {
          return;
        }

        stepNumber.drawCenteredAt(ctx, clampedCenterPt);
        expandBounds(xBounds, stepNumber.getRectWhenCenteredAt(clampedCenterPt));
      });
    }

    if (drawYNumbers) {

      eachStep(ymin, ymax, stepSizes.majorStepY, function (step) {
        var stepNumber = StepNumber(Label.value(step, ymax - ymin), fontSize);
        var centerPt = {
          x: xAxis - 5 - stepNumber.getRect().right,
          y: projection.mapy(stepNumber.getValue())
        };
        var clampedCenterPt = stepNumber.clampBoundsWithinRect(centerPt, screenRect);

        ctx.fillStyle = (centerPt.x === clampedCenterPt.x) ? normalColor : hangingColor;

        if (stepNumber.getString() === '0' && zeroDrawn) {
          return;
        }

        stepNumber.drawCenteredAt(ctx, clampedCenterPt);
        expandBounds(yBounds, stepNumber.getRectWhenCenteredAt(clampedCenterPt));
      });
    }

    ctx.restore();

    return {
      x: xBounds,
      y: yBounds
    };
  };

});

var eachStep = function (min, max, step, func) {
  var nmin = Math.ceil(min/step);
  var nmax = Math.floor(max/step);
  var invstep = 1/step;
  if (nmin > nmax) return;
  // If step===0, this would loop forever. This is designed for drawing
  // gridlines to a screen, so it shouldn't need to use more steps than
  // there are pixels.
  if (nmax - nmin > 10000) return;
  for (var n = nmin; n <= nmax; n++) func(n/invstep);
};

var clamp = function (value, min, max) {
  if (value < min) return min;
  if (value > max) return max;
  return value;
};

var expandBounds = function (cumBounds, numBounds) {
  if (numBounds.left < cumBounds.left) cumBounds.left = numBounds.left;
  if (numBounds.right > cumBounds.right) cumBounds.right = numBounds.right;
  if (numBounds.top < cumBounds.top) cumBounds.top = numBounds.top;
  if (numBounds.bottom > cumBounds.bottom) cumBounds.bottom = numBounds.bottom;
};

var approxEqual = function (num1, num2) {
   var A = Math.abs(num1), B = Math.abs(num2), epsilon = 0.0001;
   return Math.abs(A - B) <= (A < B ? B : A) * epsilon;
};

return GridLayer;
});

define('graphing/poi',[], function(){

// This is a very coupled class. It should be used along side GraphSketch.
function POI(x, y, type, sketch, branch) {
  this.x = x;
  this.y = y;
  this.type = type;
  this.sketch = sketch;
  this.branch = branch;
}

POI.prototype.getGraphMode = function () {
  return this.sketch.branches[this.branch].graphMode;
};

POI.prototype.getCompiledFunction = function () {
  return this.sketch.branches[this.branch].compiled.fn;
};

POI.prototype.isOpen = function () {
  return this.sketch.openPOI.indexOf(this) >= 0;
};

POI.prototype.close = function () {
  var index = this.sketch.openPOI.indexOf(this);
  if (index === -1) return false;
  
  this.sketch.openPOI.splice(index,1);
  return true;
};

POI.prototype.open = function () {
  if (this.isOpen()) return false;

  this.sketch.openPOI.push(this);
  return true;
};

return POI;
});

define('graphing/graphsketch',['require','math/poi','./poi','math/distance','graphing/graphmode'],function(require){
  var POITYPE = require('math/poi');
  var POI = require('./poi');
  var Distance = require('math/distance');
  var GRAPHMODE = require('graphing/graphmode');

function GraphSketch (id, branches) {
  // mutable properties
  this.color = '#000000';
  this.style = 'normal';
  this.visible = true;
  this.showPOI = false;
  this.showHighlight = false;
  this.selected = false;
  this.openPOI = []; // the points that are opened and visible
  this.hiddenOpenPOI = []; // the points that were opened previously,
                           // but not mapped to screen any longer.
  // immutable properties
  this.id = id;
  this.branches = branches !== undefined ? branches : [];
}

// looks inside the branches and finds POI. Only needs to do this
// once because branches are immutable. This caches the results. Also
// note that this implementation postpones the conversion from one
// large array of numbers to array of objects until someone actually
// cares about this graphsketch's poi.
GraphSketch.prototype.getPOI = function () {

  if (this.__cachedPOI) return this.__cachedPOI;

  var branch, graphMode;
  this.__cachedPOI = [];
  for (var i=0; i<this.branches.length; i++) {
    branch = this.branches[i];
    graphMode = branch.graphMode;

    var pois = branch.poi;
    if (graphMode === GRAPHMODE.X || graphMode === GRAPHMODE.Y) {
      this._pushPOI(pois.zeros, i, POITYPE.ZERO);
      this._pushPOI(pois.intercept, i, POITYPE.INTERCEPT);
      this._pushPOI(pois.extrema, i, POITYPE.EXTREMUM);
      this._pushPOI(pois.intersections, i, POITYPE.INTERSECTION);
    } else if (graphMode === GRAPHMODE.XYPOINT || graphMode === GRAPHMODE.XYPOINT_MOVABLE) {
      this._pushPOI(pois.defined, i, POITYPE.DEFINITION);
    }
  }

  return this.__cachedPOI;
};

GraphSketch.prototype.getStaticPoints = function () {
  if (this.__cachedStaticPoints) return this.__cachedStaticPoints;
  this.__cachedStaticPoints = [];
  for (var i=0; i<this.branches.length; i++) {
    if (this.branches[i].graphMode === GRAPHMODE.XYPOINT) {
      var segments = this.branches[i].segments[0];
      for (var j=0; j<segments.length; j++) {
        this.__cachedStaticPoints.push({
          id: "static:[" + this.id + ","+ j +"]",
          sketch: this,
          color: this.color,
          x: segments[j][0],
          y: segments[j][1],
        });
      }
    }
  }
  return this.__cachedStaticPoints;
};

// Only the first branch can have movable points as of right now.
// If we ever change that, then we should update this function.
GraphSketch.prototype.getMovablePoints = function () {
  if (this.__cachedMovablePoints) return this.__cachedMovablePoints;
  this.__cachedMovablePoints = [];
  var firstBranch = this.branches[0];
  if (firstBranch && firstBranch.segments.length === 1 && firstBranch.graphMode === GRAPHMODE.XYPOINT_MOVABLE) {
    var segments = firstBranch.segments[0];
    for (var i=0; i<segments.length; i++) {
      var tableInfo;
      if (firstBranch.tableId) {
        tableInfo = {
          tableId: firstBranch.tableId,
          columnId: this.id,
          rowIndex: firstBranch.movablePointInfo[i].index,
          dragX: firstBranch.movablePointInfo[i].dragX,
          dragY: firstBranch.movablePointInfo[i].dragY,
        };
      }

      this.__cachedMovablePoints.push({
        id: "movable:["+ this.id + ","+ (tableInfo ? tableInfo.rowIndex : '') +"]",
        sketch: this,
        color: this.color,
        tableInfo: tableInfo,
        x: segments[i][0],
        y: segments[i][1],
        isMovable: true
      });
    }
  }
  return this.__cachedMovablePoints;
};

GraphSketch.prototype._pushPOI = function (pois, i, type) {
  if (!pois) return;

  for (var j=0, plen = pois.x.length; j < plen; j++) {

    var poi = new POI();
    poi.type = type;
    poi.x = pois.x[j];
    poi.y = pois.y[j];
    poi.branch = i;
    poi.sketch = this;
    if (pois.intersects) poi.intersects = pois.intersects[j];

    this.__cachedPOI.push(poi);
  }
};

GraphSketch.prototype.updateIntersections = function (intersections) {
  for (var i = 0, ilen = this.branches.length; i < ilen; i++) {
    this.branches[i].poi.intersections = intersections[i];
  }
  this.__cachedPOI = undefined;
  this.getPOI();
  this.reopenPOIFrom(this);
};

GraphSketch.prototype.updateFrom = function (sketch) {
  if (!sketch) return;

  this.visible = true;

  if (sketch.openPOI.length || sketch.hiddenOpenPOI.length) {
    this.reopenPOIFrom(sketch);
  }

  this.showPOI = sketch.showPOI;
  this.showHighlight = sketch.showHighlight;
  this.selected = sketch.selected;
};

// TODO - change all the cryptic variable names to meaningful names
GraphSketch.prototype.reopenPOIFrom = function (sketch) {
  /* jshint maxcomplexity:12 */
  var openPOI = [];
  var hiddenOpenPOI = [];
  var pois, n_pts, min, n_j, o_pt, n_pt;
  var t_poi, poi, poi_type;
  var i, j;

  var newPoints = {};
  var oldPoints = {};

  // categorize all new poi
  pois = this.getPOI();

  for (i=0; i<pois.length; i++) {
    poi = pois[i];
    poi_type = poi.type;

    if (!newPoints[poi_type]) {
      newPoints[poi_type] = [poi];
    } else {
      newPoints[poi_type].push(poi);
    }

  }

  // categorize all old poi
  pois = sketch.openPOI.concat(sketch.hiddenOpenPOI);
  for (i=0; i<pois.length; i++) {
    poi = pois[i];
    poi_type = poi.type;

    if (!oldPoints[poi_type]) {
      oldPoints[poi_type] = [poi];
    } else {
      oldPoints[poi_type].push(poi);
    }

  }

  // reopen the new points that were closest to the old opened points
  for (var type in oldPoints) {
    t_poi = oldPoints[type];
    n_pts = newPoints[type] || [];

    for (i = t_poi.length-1; i >= 0; i--) {
      o_pt = t_poi[i];
      min = Infinity;
      n_j = -1;

      for (j = n_pts.length-1; j>=0; j--) {
        n_pt = n_pts[j];
        if (!n_pt) continue;
        // Don't allow intersections to jump between functions.
        if (n_pt.intersects !== o_pt.intersects) continue;

        var dis = Distance.hypot(o_pt.x-n_pt.x, o_pt.y-n_pt.y);
        if (dis < min) {
          n_j = j;
          min = dis;
        }
      }

      if (n_j != -1) {
        openPOI.push(n_pts[n_j]); // open the poi again
        n_pts[n_j] = null;
      } else {
        hiddenOpenPOI.push(o_pt); // mark point as opened but not mapped to screen
      }
    }
  }

  this.openPOI = openPOI;
  this.hiddenOpenPOI = hiddenOpenPOI;
};

return GraphSketch;
});

define('graphing/imagelayer',['require','pjs','./canvaslayer','underscore'],function(require){
var P = require('pjs');
var CanvasLayer = require('./canvaslayer');
var _ = require('underscore');

var ImageLayer = P(CanvasLayer, function(layer){

  layer.redraw = function (projection, graphImages, drawOrder) {
    // Optimization for case when there are no images.
    var isEmpty = !_.size(graphImages);
    if (this.isEmpty && isEmpty) return;
    this.isEmpty = isEmpty;

    var screen = projection.screen;
    this.resize(screen.width, screen.height);
    this.ctx.save();
    this.ctx.clearRect(0, 0, screen.width, screen.height);
    this.ctx.strokeStyle = '#6993C7';
    this.ctx.lineWidth = 2;
    this.redrawToCtx(this.ctx, projection, graphImages, drawOrder);

    this.ctx.restore();
  };

  layer.redrawToCtx = function (ctx, projection, graphImages, drawOrder) {
    // Do the drawing of the segments
    if (drawOrder === undefined || drawOrder.length < _.size(graphImages)) {
      // If we don't have a drawOrder, or it doesn't include all of our graphSketches then make a new order.
      drawOrder = _.keys(graphImages);
    }
    
    // draw images in correct order
    var self = this;
    for (var i = 0; i<drawOrder.length; i++) {
      var image = graphImages[drawOrder[i]];
      if (image && image.shouldGraph) {
        self.drawImageToCtx(image, ctx, projection);
      }
    }
  };

  layer.drawImageToCtx = function (image, ctx, projection) {
    var img_x = image.computed_x;
    var img_y = image.computed_y;
    var img_width = image.computed_width;
    var img_height = image.computed_height;
    
    // check if values are all numbers
    if (!isFinite(img_x) || !isFinite(img_y) || !isFinite(img_width) || !isFinite(img_height)) {
      return;
    }
    
    ctx.globalAlpha = image.opacity;
    
    var height = projection.mapy(img_height) - projection.mapy(0);
    var width = projection.mapx(img_width) - projection.mapx(0);

    // calculate the topLeft given the center as input
    var x = projection.mapx(img_x) - width / 2;
    var y = projection.mapy(img_y) + height / 2;
    
    // We want to correctly invert any images with negative dimensions.
    // This means flipping the context, dimension and associated positioning.
    var yflip = (img_height < 0) ? -1 : 1;
    var xflip = (img_width < 0) ? -1 : 1;
    ctx.save();
    ctx.scale(xflip, yflip);
    
    var canvasX = x*xflip;
    var canvasY = y*yflip;
    var canvasW = Math.abs(width);
    var canvasH = Math.abs(height);
    
    ctx.drawImage(image.imageObj, canvasX, canvasY, canvasW, canvasH);
    if (image.selected) {
      ctx.beginPath();
      ctx.rect(canvasX, canvasY, canvasW, canvasH);
      ctx.stroke();
    }
    
    ctx.restore();
  };

});

return ImageLayer;
});

define('graphing/tracelayer',['require','pjs','./domlayer','./poi','math/poi','./poilabelslayer','./constants'],function (require) {
  var P = require('pjs');
  var DOMLayer = require('./domlayer');
  var POI = require('./poi');
  var POITYPE = require('math/poi');
  var POILabelsLayer = require('./poilabelslayer');
  var constants = require('./constants');

  var TraceLayer = P(DOMLayer, function(layer, _super) {
    layer.init = function () {
      _super.init.apply(this, arguments);
      this.$.addClass('dcg-trace-layer');
    };

    layer.redraw = function (projection) {

      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);

      // Clear out the drawing area
      this.dom_node.find('.dcg-tracept').remove();

      var poi = this.traceInfo ? this.traceInfo.pt : null;
      if (!poi) return;

      var screen_x = projection.mapx(poi.x);
      var screen_y = projection.mapy(poi.y);

      // ensure is on screen
      if (projection.coordsAreOnscreen(screen_x, screen_y, constants.OFFSCREEN_RENDER_MARGIN)) {

        // TODO - this is nasty. the createSinglePOI assumes that we pass in an
        //        instance of the POI class. traceInfo.pt is not a POI. Putting
        //        this here just to test tracing for now.
        var real_poi = new POI(poi.x,
                               poi.y,
                               POITYPE.TRACE,
                               this.traceInfo.branchInfo.sketch,
                               this.traceInfo.branchInfo.branch);

        var dom_poi = POILabelsLayer.createSinglePOI(real_poi, projection.viewport);
        dom_poi.css({
          left: screen_x + "px",
          top: screen_y + "px"
        });
        dom_poi.addClass('dcg-temp');
        dom_poi.removeClass('dcg-poi');
        dom_poi.find('.dcg-pt').css('background-color', real_poi.sketch.color);
        dom_poi.find('.dcg-pt').css('border-color', real_poi.sketch.color);
        this.dom_node.append(dom_poi);

      }
    };
  });

  return TraceLayer;
});

define('graphing/movablepointslayer',['require','pjs','jquery','./domlayer','browser','./constants'],function (require) {
  var P = require('pjs');
  var $ = require('jquery');
  var DOMLayer = require('./domlayer');
  var Browser = require('browser');
  var constants = require('./constants');

  var MovablePointsLayer = P(DOMLayer, function(layer, _super){

    layer.init = function (width, height, $root) {
      _super.init.call(this, width, height, $root);
      this.renderedMovablePoints = {};
    };

    layer.redraw = function (projection, graphSketches) {
      /* jshint maxcomplexity:15 */
      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);

      // we will clear the hovered and pressed effects if we
      // don't find the hovered and pressed points on this redraw.
      var hoveredPoint = null;
      var pressedPoint = null;

      // Iterate through each graphSketch, find the opened poi and draw them
      for (var id in this.renderedMovablePoints) {
        this.renderedMovablePoints[id].shouldGarbageCollect = true;
      }

      for (id in graphSketches) {
        var sketch = graphSketches[id];
        if (!sketch.visible) continue;

        var movablePoints = sketch.getMovablePoints();
        for (var j=0; j<movablePoints.length; j++) {
          var movablePoint = movablePoints[j];
          var styles = {};

          if (movablePoint.id === this.hoveredPointId) {
            styles.hovered = true;
            hoveredPoint = movablePoint;
          }

          if (movablePoint.id === this.pressedPointId) {
            styles.pressed = true;
            pressedPoint = movablePoint;
          }

          this.drawMovablePoint(movablePoint, projection, styles);
        }
      }

      for (id in this.renderedMovablePoints) {
        if (this.renderedMovablePoints[id].shouldGarbageCollect) {
          this.renderedMovablePoints[id].$.remove();
          delete(this.renderedMovablePoints[id]);
        }
      }

      var dragX, dragY;
      if (hoveredPoint) {
          dragX = hoveredPoint.tableInfo && hoveredPoint.tableInfo.dragX;
          dragY = hoveredPoint.tableInfo && hoveredPoint.tableInfo.dragY;
          if (dragX && dragY || !dragX && !dragY) {
            this.addGlobalClass('dcg-mouse-over-movable-point');
          } else if (dragX) {
            this.addGlobalClass('dcg-mouse-over-movable-point-ew');
          } else {
            this.addGlobalClass('dcg-mouse-over-movable-point-ns');
          }
      } else {
         this.hoveredPointId = null;
         this.removeGlobalClass('dcg-mouse-over-movable-point-ew');
         this.removeGlobalClass('dcg-mouse-over-movable-point-ns');
         this.removeGlobalClass('dcg-mouse-over-movable-point');
      }

      if (pressedPoint) {
          dragX = pressedPoint.tableInfo && pressedPoint.tableInfo.dragX;
          dragY = pressedPoint.tableInfo && pressedPoint.tableInfo.dragY;
          if (dragX && dragY || !dragX && !dragY) {
            this.addGlobalClass('dcg-dragging-movable-point');
          } else if (dragX) {
            this.addGlobalClass('dcg-dragging-movable-point-ew');
          } else {
            this.addGlobalClass('dcg-dragging-movable-point-ns');
          }
      } else {
         this.pressedPointId = null;
         this.removeGlobalClass('dcg-dragging-movable-point-ew');
         this.removeGlobalClass('dcg-dragging-movable-point-ns');
         this.removeGlobalClass('dcg-dragging-movable-point');
      }
    };

    layer.drawMovablePoint = function (movablePoint, projection, styles) {
      var id = movablePoint.id;
      var color = movablePoint.color;
      var x = movablePoint.x;
      var y = movablePoint.y;

      var screen_x = projection.mapx(x);
      var screen_y = projection.mapy(y);

      if (!(id in this.renderedMovablePoints)) {
        var tableClass = movablePoint.tableInfo ? 'dcg-table-movable-point' : '';
        var $el = $("<div class='dcg-movable-point "+ tableClass +"'>")
                    .append($("<div class='dcg-background'></div>"))
                    .append($("<div class='dcg-dot'></div></div>"));
        this.dom_node.append($el);
        this.renderedMovablePoints[id] = {
          $: $el,
          shouldGarbageCollect: true
        };
      }

      var dom_poi = this.renderedMovablePoints[id].$;

      // ensure is on screen
      if (projection.coordsAreOnscreen(screen_x, screen_y, constants.OFFSCREEN_RENDER_MARGIN)) {
        dom_poi.css({
          transform: Browser.translateRule(screen_x, screen_y),
          backgroundColor: color
        });

        dom_poi.toggleClass('dcg-simulate-hovered', !!styles.hovered);
        dom_poi.toggleClass('dcg-simulate-active', !!styles.pressed);

        //don't garbage collect this point
        this.renderedMovablePoints[id].shouldGarbageCollect = false;
      }
    };


  });

  return MovablePointsLayer;
});
/*
 * Touch/Mouse event handling gets complicated when a user has both a touch
 * device attached and a mouse attached. This tracking system helps deal with
 * that situation. We listen for the touch and mouse events on the document
 * and redispatch new, normalized events that work for many different devices
 * It's important to note that evt.stopPropagation() cannot be called on any
 * events that this is listening for.
 *
 * It normalizes 'touchStart' and 'mouseDown' to the 'dcg-tapstart' event.
 * It normalizes 'touchMove' and 'mouseMove' to the 'dcg-tapmove' event.
 * It normalizes 'touchEnd' and 'mouseUp' to the 'dcg-tapend' event.
 * It sends out a 'tap' event after a single touchStart and touchEnd.
 * It sends out a 'dcg-longhold' event if 500ms after a single 'dcg-tapstart'
 *    there hasn't been another event and the 'dcg-tapstart' is the only touch.
 *    Events have a 'wasLongheld' property that lets you know if a longhold
 *    has happened.
 *
 * TODO - dispatch 'dcg-doubletap' event after 'dcg-tap' and 'dcg-tap' near same location.
 *
 * One thing that it does is enforce that only one device, either touch or
 * or mouse, be used at a time. TOUCH_MODE starts on 'touchStart' and ends when
 * when all touches are lifted. MOUSE_MODE starts on 'mouseDown' and ends on
 * 'mouseUp'. When in TOUCH_MODE, it ignores all MOUSE_MODE events. When in
 * MOUSE_MODE, it ignores all TOUCH_MODE events.
 *
 * There is still one other slight complication. The ipad issues a 'mouseDown'
 * event after the 'touchEnd' event. That means following the logic above, we'd
 * leave TOUCH_MODE on touchEnd, and we'd get a mouseDown event. That'd put us
 * in MOUSE_MODE. We'd process the 'mouseDown' as if it were from a mouse, and
 * we'd happily process the 'mouseUp' event as well. In order to combat that,
 * on each 'mouseDown' event we check if we've recently been in TOUCH_MODE. We
 * enforce that half a second has passed since a person was in TOUCH_MODE
 * before they can enter MOUSE_MODE. If we decide that that's not ideal, we
 * can check if the mouseDown is near the 'touchStart' or 'touchEnd' events, but
 * that sounds like an unnecessary complication.
 *
 * One other interesting thing is that 'mouseMove' can be dispatched even when
 * the mouse button isn't pressed. For that reason, this doesn't require that
 * you be in MOUSE_MODE to listen for 'mouseMove' events.
 *
 * UPDATE 24/10 - DM
 * I have put in support for pointerevents & MSPointerEvents to allow for multitouch
 * on Windows 8 machines. For once, MS have made a good move and proposed a useful
 * standard in pointerevents - down the line that may end up being the W3C standard
 * which will involve some more work here. Primarily, they don't track multiple touches
 * in a single event, so here we are keeping track of them and then conforming that array
 * to the rest of our more touch/tap-esque system.
 */
define('touchtracking',['require','jquery','ipad.ghostevents'],function(require){

  var $ = require('jquery');
  var GhostEvents = require('ipad.ghostevents');

  GhostEvents.isGhostEvent = function (evt) {
    // I've seen no indication of "ghost events" when using PointerEvents.
    // Disabling altogether because the logic below doesn't work for PointerEvents.
    // The ipad appears to be the only device that sends legacy events after
    // the mouseup. Other devices send the legacy events after their touch,pointerevent
    // equivalent:
    //
    // ipad: touchstart, touchmove, touchend, mousedown, mouseup, click
    // surface: pointerdown, mousedown, pointerup, mouseup, click
    //
    // The logic below assumes that the touchend (or pointerend) has happened before
    // the evt in question. If it has not, then lastTarget will be null and we
    // will consider evt a ghostevent. The ghostevent code is specially tailored
    // to the ipad, so I'm not quick to change it.
    //
    // TODO - maybe make ghost event detection opt in rather opt out. IIRC, android
    // uses the same event sequence as the surface, so it's possible we're detecting
    // ghostevents on android when we shouldn't be.
    //
    // The effect of wrongly considering an event a ghost event is we preventDefault()
    // on it and possibly stopPropagation(). We also do fun things with focus.
    if (window.PointerEvent) {
      return false;
    }

    // not a ghost event if it's from a mouse
    if (mode !== TOUCH_MODE && !hasRecentlyEndedTouchMode()) {
      return false;
    }

    // it's a ghost event if the target of the event and our lastTarget aren't ancestors. What has happened is
    // the dom moved around while the legacy events were being generated. We'll be ignoring the upcoming
    // legacy events.
    if (evt.target === lastTarget) return false;
    if (evt.target && $.contains(evt.target, lastTarget)) return false;
    if (lastTarget && $.contains(lastTarget, evt.target)) return false;

    return true;
  };

  var NO_MODE = 0;    // nothing pressed
  var TOUCH_MODE = 1; // finger is on screen
  var MOUSE_MODE = 2; // mouse is held down

  var mode = NO_MODE;
  var identifierLocation = {}; // lookup up touch identifier location on screen
  var modeEvents = {};
  var modeTargets = [];
  var endTouchModeTime = 0;
  var endTouchModeTimeout = null;
  var lastTarget = null;

  var longholdTimeout = null;
  var pointerTouches = [];

  // returns an array of node, parent, grandparent, etc
  var getAncestors = function (node) {
    var nodes = [];
    while (node) {
      nodes.push(node);
      node = node.parentNode;
    }

    return nodes;
  };

  // only returns nodes within a .dcg-tap-container
  var filterSortedNodesWithinScope = function (sortedNodes) {
    var filtered = [];
    for (var i=0; i<sortedNodes.length; i++) {
      var node = sortedNodes[i];
      filtered.push(node);

      if ($(node).hasClass('dcg-tap-container')) {
        return filtered;
      }
    }

    return [];
  };

  var beginMode = function (evnt) {
    lastTarget = null;

    if (evnt.type === 'mousedown') {
      mode = MOUSE_MODE;
      modeTargets = getAncestors(evnt.target);
    } else if (evnt.type === 'pointerdown' || evnt.type === 'MSPointerDown') {
      //we'll have filtered out all mouse and pen events by here, so this must've been a touch
      mode = TOUCH_MODE;
      modeTargets = getAncestors(evnt.target);
    } else {
      mode = TOUCH_MODE;
      modeTargets = getAncestors(evnt.originalEvent.touches[0].target);
    }
    // make the elements under the mouse look pressed
    $(filterSortedNodesWithinScope(modeTargets)).addClass('dcg-depressed');

    // save original scroll positions for elements we've moused on
    $(modeTargets).each(function(){
      var elm = $(this);

      elm.data({
        originalScrollTop: elm.scrollTop(),
        originalScrollLeft: elm.scrollLeft()
      });
    });

    modeEvents = {};
  };

  var endMode = function (evnt) {
    lastTarget = null;

    // nothing is pressed anymore
    $('.dcg-depressed').removeClass('dcg-depressed');

    // check if any of the elements we originally moused on have scrolled.
    $(modeTargets).each(function(){
      var elm = $(this);
      var verticalOffset = elm.data('originalScrollTop') - elm.scrollTop();
      var horizontalOffset = elm.data('originalScrollLeft') - elm.scrollLeft();
      // save original scroll positions
      if (verticalOffset || horizontalOffset) {
        modeEvents.scroll = true;
      }
    });

    if (
      modeEvents['dcg-tapstart'] === 1 &&
      modeEvents['dcg-tapend']===1 &&
      !modeEvents['dcg-tapcancel'] &&
      !modeEvents.scroll
    ) {

      // get the x and y position of event.
      var x = evnt.device === 'mouse' ? evnt.pageX : evnt.originalEvent.changedTouches[0].pageX;
      var y = evnt.device === 'mouse' ? evnt.pageY : evnt.originalEvent.changedTouches[0].pageY;

      // run through the original modeTargets to see if the touchend is
      // with the bounds.
      var tap_escaped_boundary = false;
      for (var i=0; i<modeTargets.length && !tap_escaped_boundary; i++) {
        var target = $(modeTargets[i]);
        var offset = target.offset();

        // don't let tap events escape from a tapboundary.
        //
        // we allow you to mousedown on one element and mouseup on another. We
        // dispatch the tap event on the common ancestor. This allows you to be
        // imprecise when clicking. Sometimes that isn't ideal however. Say
        // you mouse down on a slider thumb and mouse up on the expression. By
        // default, we'd dispatch a tap event on the expression. That'd cause
        // the expression to be selected and focused. That's not what we want.
        // So, we define a tapboundary on the slider element. That will not
        // allow a tap event to start within the slider and end somewhere
        // outside of it. It must terminate within the boundary, otherwise we
        // won't dispatch a tap event at all.
        if (target.attr('tapboundary') === 'true') {
          tap_escaped_boundary = true;
        }

        if (offset) {

          // check if within top and left sides
          if (x < offset.left || y < offset.top) continue;

          // check if within right side
          if (x > offset.left + target.outerWidth()) continue;

          // check if within bottom side
          if (y > offset.top + target.outerHeight()) continue;

        }

        lastTarget = target[0];
        dispatchEvent('dcg-tap', evnt, lastTarget);
        break;
      }
    }

    // start the timer after we process the tap event.
    // this fires an event 1000ms in the future. If anything had caused the ipad
    // legacy events to get delayed, that'll also cause this function call to
    // get delayed. For us to switch back to MOUSE_MODE, this event must have
    // fired and it must not have been fired within 500ms of us trying to
    // switch to MOUSE_MODE
    if (mode === TOUCH_MODE) {
      endTouchModeTimeout = setTimeout(function(){
        endTouchModeTimeout = null;
        endTouchModeTime = new Date().getTime();
      }, 1000);
    }

    modeTargets = [];
    mode = NO_MODE;
  };

  var hasRecentlyEndedTouchMode = function () {
    return endTouchModeTimeout || new Date().getTime() - endTouchModeTime < 500;
  };

  // it's important to clone touches because some devices keep updating the
  // same reference to a touch.
  var clone = function (touches) {
    var cloned = [];
    for (var i=0; i<touches.length; i++) {

      var touch = touches[i];
      cloned.push({

        identifier: touch.identifier,
        x: touch.pageX,
        y: touch.pageY,

        screenX: touch.screenX,
        screenY: touch.screenY,
        pageX: touch.pageX,
        pageY: touch.pageY,
        clientX: touch.clientX,
        clientY: touch.clientY
      });
    }
    return cloned;
  };

  var dispatchEvent = function (type, evnt, differentTarget) {

    // Both Microsoft and Google think it's cute to send pointermove and
    // touchmove events after pointerdown and touchstart events.
    // I noticed this on the Microsoft Surface and the Samsung Galaxy S4.
    // Not all android devices seem to have this behavior, but we're getting
    // rid of it once and for all by making sure dcg-tapmove events are only
    // fired if a move has actually taken place.
    if (type === 'dcg-tapstart') {
      identifierLocation[evnt.identifier] = {
        type: type,
        pageX: evnt.originalEvent.changedTouches[0].pageX,
        pageY: evnt.originalEvent.changedTouches[0].pageY
      };
    } else if (type === 'dcg-tapmove') {
      var thisEvnt = evnt.originalEvent.changedTouches[0];
      var lastEvnt = identifierLocation[evnt.identifier];
      if (lastEvnt && thisEvnt.pageX === lastEvnt.pageX && thisEvnt.pageY === lastEvnt.pageY) {
        return; //didn't really move
      }

      // Most devices are smart about not firing unintentional dcg-tapmove events after a dcg-tapstart
      // event. Some devices, don't do noise filtering. We do that noise filtering here by
      // making sure your finger moves over a pixel from the dcg-tapstart event location before
      // considering dcg-tapmove events to be intentional.
      if (
        mode === TOUCH_MODE && lastEvnt && lastEvnt.type === 'dcg-tapstart' &&
        Math.abs(lastEvnt.pageX - thisEvnt.pageX) + Math.abs(lastEvnt.pageY - thisEvnt.pageY) < 2)
      {
        return; //this is very likely an unintentional dcg-tapmove event fired. ignoring it.
      }

      identifierLocation[evnt.identifier] = {
        type: type,
        pageX: evnt.originalEvent.changedTouches[0].pageX,
        pageY: evnt.originalEvent.changedTouches[0].pageY
      };
    }

    // count an event type. used to figure out if we should send out
    // a tap and doubletap event.
    if (modeEvents[type.toLowerCase()] === undefined) {
      modeEvents[type.toLowerCase()] = 1;
    } else {
      modeEvents[type.toLowerCase()]++;
    }

    var newEvnt = $.event.fix(evnt.originalEvent);
        newEvnt.type = type;
        newEvnt.device = mode === TOUCH_MODE ? 'touch' : 'mouse';
        newEvnt.touches = clone(evnt.originalEvent.touches);
        newEvnt.changedTouches = clone(evnt.originalEvent.changedTouches);
        newEvnt.target = differentTarget ? differentTarget : evnt.target;

        var wasLongheld = modeEvents['dcg-longhold'] > 0;
        newEvnt.wasLongheld = function () { return wasLongheld };

    // send out a 'dcg-longhold' 500ms after a 'dcg-tapstart' as long as nothing else happens between
    // now and then.
    clearTimeout(longholdTimeout);
    if (newEvnt.type === 'dcg-tapstart' && newEvnt.touches.length === 1) {
      longholdTimeout = setTimeout(function () {
        dispatchEvent('dcg-longhold', evnt, differentTarget);
      }, 500);
    }

    $(newEvnt.target).trigger(newEvnt);
  };

    // TODO - Remember nodes given .hovered last time instead of querying. Only
  //        problem I can see here is that it's possible for a person to
  //        clone an object that has the .hover and add it to
  //        the dom. Then it'll never lose the .hover class. If we find
  //        any more performance problems with this, then maybe we can worry
  //        about it, but I don't think we need that optimization.
  // Already optimized to leave .hover on elements that still are hovered. Saw
  // a preformance problem with sliders before optimization and problem went
  // away after optimization.
  var setHoveredNode = function (node) {

    var hoverableNodes = modeTargets; // gets a list of nodes that were under the mouse when it was pressed
    var checkIfNodeIsHoverable = !!modeTargets.length; // simple mouse move with no mouse down
    var hoveredBefore = $.makeArray($('.dcg-hovered'));
    var hoveredNow = [];
    var lostHover = [];
    var gainedHover = [];

    filterSortedNodesWithinScope(getAncestors(node)).forEach(function (node) {
      // only add to hovered list if it can be hovered.
      if (!checkIfNodeIsHoverable || hoverableNodes.indexOf(node) !== -1) {

        // hovered now, but wasn't before
        if (hoveredBefore.indexOf(node) === -1) {
          gainedHover.push(node);
        }

        hoveredNow.push(node);
      }
    });

    // find the ones that used to be hovered but aren't any more
    for (var i=0; i<hoveredBefore.length; i++) {
      node = hoveredBefore[i];
      if (hoveredNow.indexOf(node) === -1) {
        lostHover.push(node);
      }
    }

    $(lostHover).removeClass('dcg-hovered').trigger('tipsyhide');
    $(gainedHover).addClass('dcg-hovered').trigger('tipsyshow');
  };


  var removePointerEventById = function (id) {
    // Returns the removed event for use in some handlers
    for (var i = 0; i < pointerTouches.length; i++) {
      if (pointerTouches[i].pointerId === id) {
        return pointerTouches.splice(i, 1)[0];
      }
    }
  };

  //From:
  //http://msdn.microsoft.com/en-us/library/windows/apps/hh466130.aspx
  //IE10 uses longs, IE11 uses strings
  var isMSTouchEvent = function (evnt) {
    return (
      evnt.originalEvent.pointerType === 'touch' ||
      evnt.originalEvent.pointerType === 2
    );
  };

  // Apply touch & mouse event handlers for everything that isn't IE10+
  // and mspointerevents (IE10) & pointerevents for IE(11).
  $(document).on('pointerdown MSPointerDown', function (evnt) {
    if (mode === MOUSE_MODE || !isMSTouchEvent(evnt)) return;

    // setup TOUCH_MODE
    if (mode === NO_MODE) {
      beginMode(evnt);
    }

    // nothing can be hovered now
    setHoveredNode(null);

    // normalize pointer-event to a touch-event
    evnt.originalEvent.identifier = evnt.originalEvent.pointerId;
    evnt.originalEvent.touches = pointerTouches;
    evnt.originalEvent.changedTouches = [evnt.originalEvent];
    pointerTouches.push(evnt.originalEvent);

    dispatchEvent('dcg-tapstart', evnt);
  });

  $(document).on('pointermove MSPointerMove', function (evnt) {
    if (mode !== TOUCH_MODE || !isMSTouchEvent(evnt)) return;

    // Pointer events don't get updated, so we need to remove any existing
    // instances of this pointerId we are tracking and add the new data in.
    removePointerEventById(evnt.originalEvent.pointerId);
    pointerTouches.push(evnt.originalEvent);

    // normalize pointer-event to a touch-event
    evnt.originalEvent.identifier = evnt.originalEvent.pointerId;
    evnt.originalEvent.touches = pointerTouches;
    evnt.originalEvent.changedTouches = [evnt.originalEvent];
    dispatchEvent('dcg-tapmove', evnt);
  });

  $(document).on('pointercancel MSPointerCancel', function (evnt) {
    if (mode !== TOUCH_MODE || !isMSTouchEvent(evnt)) return;

    // Pointer events don't get updated, so we need to remove any existing
    // instances of this pointerId we are tracking
    removePointerEventById(evnt.originalEvent.pointerId);

    // normalize pointer-event to a touch-event
    evnt.originalEvent.identifier = evnt.originalEvent.pointerId;
    evnt.originalEvent.touches = pointerTouches;
    evnt.originalEvent.changedTouches = [evnt.originalEvent];

    dispatchEvent('dcg-tapcancel', evnt);
    // switch back to no mode if all touches are gone
    if (evnt.originalEvent.touches.length===0) {
      endMode(evnt);
    }
  });

  $(document).on('pointerup MSPointerUp', function (evnt) {
    if (mode !== TOUCH_MODE || !isMSTouchEvent(evnt)) return;

    // Pointer events don't get updated, so we need to remove any existing
    // instances of this pointerId we are tracking
    removePointerEventById(evnt.originalEvent.pointerId);

    // normalize pointer-event to a touch-event
    evnt.originalEvent.identifier = evnt.originalEvent.pointerId;
    evnt.originalEvent.touches = pointerTouches;
    evnt.originalEvent.changedTouches = [evnt.originalEvent];

    dispatchEvent('dcg-tapend', evnt);
    // switch back to no mode if all touches are gone
    if (evnt.originalEvent.touches.length===0) {
      endMode(evnt);
    }
  });

  $(document).on('touchstart', function (evnt) {
    if (mode === MOUSE_MODE) return;

    // setup TOUCH_MODE
    if (mode === NO_MODE) {
      beginMode(evnt);
    }

    // nothing can be hovered now
    setHoveredNode(null);
    dispatchEvent('dcg-tapstart', evnt);
  });

  $(document).on('touchmove', function (evnt) {
    if (mode !== TOUCH_MODE) return;
    dispatchEvent('dcg-tapmove', evnt);
  });

  $(document).on('touchcancel', function (evnt) {
    if (mode !== TOUCH_MODE) return;
    dispatchEvent('dcg-tapcancel', evnt);
    // switch back to no mode if all touches are gone
    if (evnt.originalEvent.touches.length===0) {
      endMode(evnt);
    }
  });

  $(document).on('touchend', function (evnt) {
    if (mode !== TOUCH_MODE) return;
    dispatchEvent('dcg-tapend', evnt);
    // switch back to no mode if all touches are gone
    if (evnt.originalEvent.touches.length===0) {
      endMode(evnt);
    }
  });

  $(document).on('mousedown', function (evnt) {
    if (evnt.button === 1 || evnt.button === 2) return;

    // Take evasive action for legacy clicks--that is, click events that are
    // synthesized by touch browsers after a sequence of touches has ended.
    // The problem we're trying to solve here is that if you move a DOM
    // element in response to a touch event, then the legacy mouse events will
    // be fired on whatever element happens to now be under where the touch
    // event occurred.
    //
    // For example, the "functions" menu is hidden when one of its buttons is
    // touched, and the legacy click event is subsequently fired on the graph
    // paper. This takes focus from the expression that was being edited.
    //
    // The solution is to preventDefault() on the legacy events if we are in
    // touch mode. However, this prevents inputs, textareas, and selects from
    // being focused properly in mobile webkit browsers. We compromise by
    // firing preventDefault() only if the target is not an input, textarea,
    // or select.
    if (mode === TOUCH_MODE || hasRecentlyEndedTouchMode()) {
      if (!$(evnt.target).is('input, textarea, select')) {
        evnt.preventDefault();
      }
      return;
    }

    // setup MOUSE_MODE
    beginMode(evnt);

    // add in missing touch api information
    evnt.originalEvent.touches = [evnt];
    evnt.originalEvent.changedTouches = [evnt];

    dispatchEvent('dcg-tapstart', evnt);
  });

  // Stop mousedown event from propagating for any element with an ancestor with
  // class .do-not-blur (and no ancestor with .do-blur)
  $(document).ready(function() {
    $(document).on("mousedown", function(e) {
      var doNotBlur = !!$(e.target).closest('.dcg-do-not-blur').length,
        doBlur    = !!$(e.target).closest('.dcg-do-blur').length;
      if (doNotBlur && !doBlur) {
        e.preventDefault();
      }

      // we use preventDefault() in places and that will cause text selection
      // to be preserved when it shouldn't be. On mouse down, if the only
      // thing with selection is something that has the .dcg-text-selectable class
      // then we can safely remove selection.
      var selection = window.getSelection();
      if (selection.rangeCount === 1) {
        var range = selection.getRangeAt(0);
        if (
          range.startContainer === range.endContainer &&
          $(range.startContainer).closest('.dcg-text-selectable').length
        ) {
          selection.removeAllRanges();
        }
      }

    });
  });

  // If the mouse isn't pressed, then the mousemove that moves us off the
  // the screen isn't reported. That'll leave the last hovered element hoverd.
  // this checks if we are in NO_MODE and have a mouseleave event.
  $(document).on('mouseleave', function (evnt) {
    // we can move the mouse while not being in mouseMode
    if (mode !== NO_MODE) return;

    // check if a significant amount of time has passed since
    // switching from TOUCH_MODE to NO_MODE
    if (hasRecentlyEndedTouchMode()) return;

    // nothing is hovered
    setHoveredNode(null);
  });

  $(document).on('mousemove', function (evnt) {
    if (evnt.button === 1 || evnt.button === 2) return;

    // we can move the mouse while not being in mouseMode
    if (mode === TOUCH_MODE) return;

    // check if a significant amount of time has passed since
    // switching from TOUCH_MODE to MOUSE_MODE
    if (hasRecentlyEndedTouchMode()) return;

    setHoveredNode(evnt.target);

    // add in missing touch api information
    evnt.originalEvent.touches = [evnt]; // TODO - not perfect because it could be a non-touch
    evnt.originalEvent.changedTouches = [evnt];

    dispatchEvent('dcg-tapmove', evnt);
  });


  $(document).on('mouseup', function (evnt) {
    if (evnt.button === 1 || evnt.button === 2) return;

    if (mode !== MOUSE_MODE) return;

    // add in missing touch api information
    evnt.originalEvent.touches = [];
    evnt.originalEvent.changedTouches = [evnt];

    dispatchEvent('dcg-tapend', evnt);

    endMode(evnt);
  });

  /* Uncomment to see visual dots on screen following mouse events

  $(document).on('dcg-tapstart dcg-tapend dcg-tapmove dcg-tap dcg-tapcancel', function (evt){
    console.log(evt.type, evt.originalEvent.changedTouches);

    function drawDot (touch, c, r, o) {
      if (evt.isDefaultPrevented()) r *= 10;

      var styles = [
        'position:absolute',
        'z-index: 5000000',
        'pointer-events: none',
        'left:' + (touch.pageX-r) + 'px',
        'top:' + (touch.pageY-r) + 'px',
        'width:' + (2*r) + 'px',
        'height:' + (2*r) + 'px',
        'border-radius:' + r + 'px',
        'background:'+ c,
        'opacity:'+ o
      ];

      return $('<div style="'+ styles.join(';') +'"></div>').appendTo('body');
    }

    for (var i in evt.originalEvent.changedTouches) {
      var touch = evt.originalEvent.changedTouches[i];
      if (evt.type === 'dcg-tapstart') {
        drawDot(touch, '#0F0', 6, .5);
      } else if (evt.type === 'dcg-tapend') {
        drawDot(touch, '#F00', 6, .5);
      } else if (evt.type === 'dcg-tapmove') {
        drawDot(touch, '#00F', 3, 1);
      } else if (evt.type === 'dcg-tap') {
        drawDot(touch, '#FF0', 12, .5);
      }
    }
  });

  */

  //Utilities to allow other modules to query this state
  return {
    isTapActive: function(){
      return (mode !== NO_MODE);
    }
  };

});
/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.9
 *
 * Requires: jQuery 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define('vendor/jquery.mousewheel',['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.9',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        },

        getLineHeight: function(elem) {
            return parseInt($(elem)['offsetParent' in $.fn ? 'offsetParent' : 'parent']().css('fontSize'), 10);
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

define('graphing/viewportcontroller',['require','jquery','pjs','./viewporttransformation','math/distance','./constants','touchtracking','jquery.handleevent','vendor/jquery.mousewheel'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var ViewportTransformation = require('./viewporttransformation');
  var Distance = require('math/distance');
  var constants = require('./constants');

  require('touchtracking');

  require('jquery.handleevent');
  require('vendor/jquery.mousewheel');

  var GraphController = P(function (proto) {
    proto.init = function (grapher, graphSettings) {
      this.grapher = grapher;
      this.graphSettings = graphSettings;
      this.$ = this.grapher.$;

      // callback
      this.triggerViewportStable = function () {};
      // using for jquery's animate feature. Would be nice to use something
      // more suited to only animation, but probably not worth the overhead.
      this.$animation = $('<div></div>');

      if (!this.graphSettings.config.lockViewport) {
        this.addMouseWheelEventHandler();
        this.addTouchEventHandler();
      }
    };

    proto.getViewport = function () {
      return this.grapher.viewport.clone();
    };

    proto.setViewport = function (viewport) {
      if (!viewport.isValid()) return;
      if (!this.grapher.isInTransientState() && viewport.equals(this.grapher.viewport)) {
        this.triggerViewportStable();
        return;
      }

      this.grapher.viewport = viewport.clone();
      this.endTransientState();
      // Note this was added to make sure that graphpaperBounds in the public API
      // gets set when setViewport is called. Ideally, this would fall out more
      // naturally, but I think that would require a larger rearchitecting.
      this.grapher.triggerProjectionChanged(this.grapher.createProjection());
    };

    proto.setTransformation = function (transformation) {

      this.grapher.beginTransientState();
      this.grapher.setTransformation(transformation);
      this.grapher.redrawAllLayers();

      clearTimeout(this.endTransientTimeout);
      this.endTransientTimeout = setTimeout(this.endTransientState.bind(this), 250);
    };

    proto.endTransientState = function () {
      clearTimeout(this.endTransientTimeout);

      this.grapher.endTransientState();
      this.grapher.redrawAllLayers();

      this.triggerViewportStable();
    };

    proto.animateTransformation = function (transformation) {
      var self = this;
      var currentTransformation = this.grapher.transformation;
      var targetTransformation = currentTransformation.compose(transformation);
      this.cancelAnimation();
      this.$animation.css('percent',0);
      this.$animation.animate( {'percent':100}, {

        duration: constants.ANIMATE_ZOOM_DURATION,

        step: function (percent) {
          self.setTransformation(
            currentTransformation.lerp(targetTransformation, percent/100.0)
          );
        }
      });
    };

    proto.cancelAnimation = function () {
      this.$animation.stop();
    };

    // this is simple enough to encapsulate everything in a single closure.
    proto.addMouseWheelEventHandler = function () {
      // Keep track of whether the user is currently scrolling the page with the
      // mousewheel. We don't want to prevent them from scrolling past the
      // calculator. Use the heuristic that if the user has not moved their
      // mouse more than 10px since the last mousewheel that caused a scroll,
      // then they are still scrolling and we should let mousewheel events
      // pass through.
      var scrolling = false;
      var clientX;
      var clientY;

      $(window).on('scroll', function (evt) { scrolling = true; });

      $(window).on('mousewheel', function (evt) {
        // NOTE: jQuery 1.9+ doesn't require .originalEvent here. Can
        // drop it if we upgrade. We're using 1.8.3 at the time of writing.
        clientX = evt.originalEvent.clientX;
        clientY = evt.originalEvent.clientY;
      });

      $(window).on('mousemove', function (evt) {
        if (!scrolling) return;

        var dx = evt.originalEvent.clientX - clientX;
        var dy = evt.originalEvent.clientY - clientY;
        var dsq = dx*dx + dy*dy;

        if (dsq < 100) return;
        scrolling = false;
      });

      var mousewheel_counter = 0;
      var onMouseWheel = function (evt, delta) {
        if (scrolling) return;

        evt.preventDefault();

        if (mousewheel_counter > 0) return;

        mousewheel_counter += 1;
        setTimeout(function () { mousewheel_counter-- }, 50);
        delta = (delta > 0 ? 1 : -1);

        var t = this.grapher.transformation;

        this.setTransformation(
          t.compose(ViewportTransformation(
            0,
            0,
            (delta > 0) ? constants.ZOOM_FACTOR : 1/constants.ZOOM_FACTOR
          ))
        );
      };

      this.$.mousewheel(onMouseWheel.bind(this));
    };

    proto.handleDoubleClick = function (evt) {
      if (this.graphSettings.config.disable_dblclick_zooming) return;
      if (evt.wasHandled()) return;
      evt.preventDefault();

      var pageOffset = this.$.offset();
      var screen = this.grapher.screen;
      var xOffset = evt.pageX - (pageOffset.left + 0.5*screen.width);
      var yOffset = evt.pageY - (pageOffset.top + 0.5*screen.height);
      var scale = constants.DOUBLETAP_ZOOM;

      // VT(dx*(1 - scale), dy*(1 - scale), scale) ===
      // VT(dx, dy, 1).VT(0, 0, scale).VT(-dx, -dy, 1);
      // Scales about the click point instead of the origin.
      this.animateTransformation(ViewportTransformation(
        xOffset*(1 - scale),
        yOffset*(1 - scale),
        scale
      ));
    };

    proto.applyPanTouchChanges = function (oldTouches, newTouches) {
      var dx = newTouches[0].x - oldTouches[0].x;
      var dy = newTouches[0].y - oldTouches[0].y;
      var transformation = this.grapher.transformation.compose(
        ViewportTransformation(dx, dy, 1)
      );
      this.setTransformation(transformation);
    };

    proto.applyScaleTouchChanges = function (oldTouches, newTouches, scaleAxis) {

      var panX = Distance.mean(
        newTouches[0].x - oldTouches[0].x,
        newTouches[1].x - oldTouches[1].x
      );

      var panY = Distance.mean(
        newTouches[0].y - oldTouches[0].y,
        newTouches[1].y - oldTouches[1].y
      );

      var screen = this.grapher.screen;
      var offset = this.grapher.$.offset();

      var x0 = Distance.mean(oldTouches[0].x, oldTouches[1].x) -
        (offset.left + 0.5*screen.width)
      ;
      var y0 = Distance.mean(oldTouches[0].y, oldTouches[1].y) -
        (offset.top + 0.5*screen.height)
      ;

      var dxNew = Math.abs(newTouches[1].x - newTouches[0].x);
      var dyNew = Math.abs(newTouches[1].y - newTouches[0].y);
      var dxOld = Math.abs(oldTouches[1].x - oldTouches[0].x);
      var dyOld = Math.abs(oldTouches[1].y - oldTouches[0].y);

      // Decide if this is an isotropic or anisotropic scaling.
      var xScale, yScale;

      // avoid very large or small scaling when fingers cross
      var thresh = 50; // px,
      if (scaleAxis === 'x') {
        yScale = 1;
        xScale = Math.max(thresh, dxNew)/Math.max(thresh, dxOld);
      } else if (scaleAxis === 'y') {
        xScale = 1;
        yScale = Math.max(thresh, dyNew)/Math.max(thresh, dyOld);
      } else {
        xScale = yScale = (
          Math.max(thresh, Distance.hypot(dxNew, dyNew)) /
          Math.max(thresh, Distance.hypot(dxOld, dyOld))
        );
      }

      // offset*(1 - scale) is a trick for scaling about a point other than
      // the origin. It's equivalent to translating back to the origin,
      // scaling there, then translating back to offset.
      var transformation = this.grapher.transformation.compose(
        ViewportTransformation(
          panX + x0*(1 - xScale),
          panY + y0*(1 - yScale),
          xScale,
          yScale
        )
      );

      this.setTransformation(transformation);
    };

    // a complete closure to all touch event related code
    proto.addTouchEventHandler = function () {

      var self = this;
      var touches = [];
      var isDragging = false;

      var beginDrag = function (evnt) {

        // must not have been handled already. The POI controller may handle
        // this dcg-taptart for POI purposes and we may want to ignore it.
        if (evnt.wasHandled()) return;

        // must not already be dragging
        if (isDragging) return;

        // must not have a touch down anywhere else. Only want to start dragging
        // if this is the first touch and it's on the grapher
        if (evnt.touches.length !== evnt.changedTouches.length) return;

        // setup drag
        isDragging = true;
        $(document).on('dcg-tapmove.graphdrag', updateDrag);
        $(document).on('dcg-tapstart.graphdrag dcg-tapend.graphdrag dcg-tapcancel.graphdrag', updateTouches);
      };

      var _computeScaleAxis = function (touches) {
        if (touches.length < 2) return undefined;

        var projection = self.grapher.createProjection();
        var offset = self.grapher.$.offset();
        var ox = projection.mapx(0);
        var oy = projection.mapy(0);

        // Clamp to screen edges
        ox = Math.min(Math.max(0, ox), projection.screen.width) + offset.left;
        oy = Math.min(Math.max(0, oy), projection.screen.height) + offset.top;

        var xClose = function (x) {
          return 10*Math.abs(x - ox) < projection.screen.width;
        };

        var yClose = function (y) {
          return 10*Math.abs(y - oy) < projection.screen.height;
        };

        var dx = touches[1].x - touches[0].x;
        var dy = touches[1].y - touches[0].y;

        if (
          xClose(touches[0].x) &&
          xClose(touches[1].x) &&
          Math.abs(dy) > 3*Math.abs(dx)
        ) {
          return 'y';
        }

        if (
          yClose(touches[0].y) &&
          yClose(touches[1].y) &&
          Math.abs(dx) > 3*Math.abs(dy)
        ) {
          return 'x';
        }

        return 'both';
      };

      var updateScaleAxis = function (touches) {
        if (!self.grapher.scaleAxis) {
          self.grapher.scaleAxis = _computeScaleAxis(touches);
        }
        return self.grapher.scaleAxis;
      };

      var clearScaleAxis = function () {
        self.grapher.scaleAxis = undefined;
      };

      var updateDrag = function (evnt) {
        // must be dragging
        if (!isDragging) return;

        var newTouches = evnt.touches;

        if (touches.length === 2 && newTouches.length === 2) {
          // zoom and pan
          self.applyScaleTouchChanges(
            touches,
            newTouches,
            updateScaleAxis(newTouches)
          );
        } else {
          clearScaleAxis();
        }

        if (touches.length === 1) {
          // only option is to pan...
          self.applyPanTouchChanges(touches, newTouches);
        }

        touches = newTouches;
      };

      var updateTouches = function (evnt) {

        // must be dragging
        if (!isDragging) return;

        self.cancelAnimation();

        // save our touches so that when we move one we can
        // figure out how the touches have moved.
        touches = evnt.touches;

        // check if drag is over
        if (evnt.touches.length === 0) {
          isDragging = false;
          $(document).off('.graphdrag');
        }

        if (evnt.touches.length < 2) {
          clearScaleAxis();
        }

      };

      this.$.on('dcg-tapstart', beginDrag);
      this.$.on('dblclick', this.handleDoubleClick.bind(this));
    };

    proto.zoom = function (action) {
      if (action === 'in') {
        this.animateTransformation(
          ViewportTransformation(0, 0, 2)
        );
      } else if (action === 'out') {
        this.animateTransformation(
          ViewportTransformation(0, 0, 0.5)
        );
      } else if (action === 'default') {
        this.grapher.settings.setProperty('squareAxes', true);
        this.setViewport(this.grapher.computeDefaultViewport());
      }
    };

    proto.isZoomRestored = function () {
      //a little looser here.
      var v1 = this.grapher.viewport;
      var v2 = this.grapher.computeDefaultViewport();
      var tolerance = 0.05; //within 5% of the default viewport, you don't need help getting back there.
      return (
        this.grapher.settings.squareAxes &&
        Math.abs( (v1.xmin - v2.xmin) / v1.xmin ) < tolerance &&
        Math.abs( (v1.xmax - v2.xmax) / v1.xmax ) < tolerance &&
        Math.abs( (v1.ymin - v2.ymin) / v1.ymin ) < tolerance &&
        Math.abs( (v1.ymax - v2.ymax) / v1.ymax ) < tolerance
      );
    };

    //executes a the axes squaring
    proto.enforceSquareAxes = function () {
      var settings = this.grapher.settings;

      if (!settings.squareAxes) return;

      var preserveDirection = settings.lastChangedAxis;

      var viewport = this.grapher.viewport.clone();
      if (preserveDirection == 'y') {
        viewport.squareXAxis(this.grapher.screen);
      } else {
        viewport.squareYAxis(this.grapher.screen);
      }
      viewport.round(this.grapher.screen);
      this.setViewport(viewport);
    };
  });

  return GraphController;
});

define('graphing/poicontroller',['require','jquery','math/distance','lib/rounding','graphing/graphmode','conditional_blur'],function(require){
  var $ = require('jquery');
  var Distance = require('math/distance');
  var Rounding = require('lib/rounding');
  var GRAPHMODE = require('graphing/graphmode');
  var conditionalBlur = require('conditional_blur');

function POIController (grapher, graphSettings) {
  this.manager = grapher;
  this.graphSettings = graphSettings;
  this.$ = this.manager.$;

  this.triggerMovePoint = function (id, screen_pt, projection) {};
  this.triggerSelectExpression = function (id) {};
  this.triggerStartMovingPoint = function () {};
  this.triggerStopMovingPoint = function () {};

  //don't hook up touchandlers for POIs if we don't have a graph paper
  if (!this.graphSettings.config.graphpaper || this.graphSettings.config.disableMouseInteractions) return;
  this.addTouchEventHandlers();
  this.addHoverEventHandler();
}

POIController.prototype.getToleranceByDevice = function (device) {
  return device === 'touch' ? 20 : 10;
};

POIController.prototype.addHoverEventHandler = function () {

  $(document).on('dcg-tapmove', function(evt){

    // only want this handler to proceed on mouse-based interactions
    if (evt.device === 'touch') return;

    var screen_pt = this.getMouseRelativeToGrapher(evt);
    var tolerance = this.getToleranceByDevice(evt.device);
    var realPointInfo = this.getPointUnderPoint(screen_pt, tolerance);
    var poi = null;
    var movablePointId = null;

    // if there is a real point under the mouse, then don't show a POI hover
    if (realPointInfo) {
      if (realPointInfo.isMovable) {
        movablePointId = realPointInfo.id;
      }
    } else {
      poi = this.getPOIUnderPoint(screen_pt, tolerance);
    }

    if (poi != this.manager.poiLabelsLayer.hoveredPOI) {
      this.manager.poiLabelsLayer.hoveredPOI = poi;
      this.manager.redrawPOILayer();
    }

    if (movablePointId != this.manager.movablePointsLayer.hoveredPointId) {
      this.manager.movablePointsLayer.hoveredPointId = movablePointId;
      this.manager.redrawMovablePointsLayer();
    }
  }.bind(this));
};

POIController.prototype.addTouchEventHandlers = function () {

  // hack to prevent dblclick zoom from working when on poi. Ideally, this
  // would happen more naturally. Maybe we wouldn't listen for dblclick within
  // the graphpaper. Only way that could happen is if we move these events
  // to click based instead of mousedown based.
  this.$.on('dblclick', function (evt){
      var screen_pt = this.getMouseRelativeToGrapher(evt);
      var tolerance = this.getToleranceByDevice(evt.device);
      if (
        this.getPointUnderPoint(screen_pt, tolerance) ||
        this.getPOIUnderPoint(screen_pt, tolerance) ||
        this.getBranchInfoUnderPoint(screen_pt, tolerance)
      ) {
        evt.preventDefault();
        evt.handle();
      }
  }.bind(this));

  this.$.on('dcg-tapstart', function (evt) {
      var screen_pt = this.getMouseRelativeToGrapher(evt);
      var tolerance = this.getToleranceByDevice(evt.device);
      conditionalBlur();

      // Cache offset during dragging.
      this.pageOffset = this.$.offset();
      // check if we're on a point list
      var pointUnderMouse = this.getPointUnderPoint(screen_pt, tolerance);
      if (pointUnderMouse) {
        this.triggerStartMovingPoint(pointUnderMouse);
        this.startMovingPoint(pointUnderMouse);
        evt.handle(); //prevents panning/zooming
        return;
      }

      // check if we're on a POI. If so, either open or close the POI under
      // the mouse.
      if (this.togglePOIUnderPoint(screen_pt, tolerance)) {
        evt.handle(); //prevents panning/zooming
        return;
      }

      // check if we're on a curve
      var branchInfoUnderMouse = this.getBranchInfoUnderPoint(screen_pt, tolerance);

      if (this.graphSettings.config.onlyTraceSelected) {
        if (branchInfoUnderMouse && branchInfoUnderMouse.sketch && branchInfoUnderMouse.sketch.selected) {
          this.startTracingBranch(branchInfoUnderMouse, screen_pt);
          evt.handle(); //prevents panning/zooming
          return;
        }
      } else {
        if (branchInfoUnderMouse) {
          this.triggerSelectExpression(branchInfoUnderMouse.id);
          this.startTracingBranch(branchInfoUnderMouse, screen_pt);
          evt.handle(); //prevents panning/zooming
          return;
        }
      }

      //select images / deselect only on full taps
      var self = this;
      this.$.on('dcg-tapmove.poicontroller', function() {
        self.$.off('.poicontroller');
      });
      this.$.on('dcg-tapend.poicontroller', function(evt) {
        self.$.off('.poicontroller');
        this.pageOffset = undefined;

        var branchInfoUnderMouse = self.getBranchInfoUnderPoint(screen_pt, tolerance);
        if (branchInfoUnderMouse && branchInfoUnderMouse.sketch && !branchInfoUnderMouse.sketch.selected) {
          // selects expression
          self.triggerSelectExpression(branchInfoUnderMouse.id);
          return;
        }

        var imgUnderMouse = self.getImgUnderMouse(screen_pt, tolerance);
        if (imgUnderMouse) {
          self.triggerSelectExpression(imgUnderMouse.id);
          return;
        }

        self.triggerSelectExpression(null);
      });

  }.bind(this));
};

POIController.prototype.getMouseRelativeToGrapher = function (evt) {
  var pageOffset = this.pageOffset || this.$.offset();
  var pt = evt.touches ? evt.touches[0] : evt;

  return {x: pt.pageX - pageOffset.left, y: pt.pageY - pageOffset.top};
};

//modified to give precedence to a MOVABLE POINT
POIController.prototype.getPointUnderPoint = function (screen_pt, tolerance) {
  var minDistance = tolerance;
  var bestPoint = null;
  var foundMovablePoint = false;
  var sketches = this.manager.graphSketches;
  var projection = this.manager.createProjection();
  for (var id in sketches) {
    var sketch = sketches[id];
    if(!sketch || !sketch.visible) continue;

    var i, pt, mapped, dis;
    var movablePoints = sketch.getMovablePoints();
    for (i=0; i<movablePoints.length; i++) {
      pt = movablePoints[i];
      mapped = projection.map_pt(pt);
      dis = Distance.hypot(mapped.x - screen_pt.x, mapped.y - screen_pt.y);
      // pick the movable point if it's the closest point, obviously.
      // prioritize a movable point within the tolerance over a very close static point.
      if (dis < minDistance || (!foundMovablePoint && dis < tolerance)) {
        foundMovablePoint = true;
        minDistance = dis;
        bestPoint = pt;
      }
    }

    if (!foundMovablePoint) {
      var staticPoints = sketch.getStaticPoints();
      for (i=0; i<staticPoints.length; i++) {
        pt = staticPoints[i];
        mapped = projection.map_pt(pt);
        dis = Distance.hypot(mapped.x - screen_pt.x, mapped.y - screen_pt.y);
        if (dis < minDistance) {
          minDistance = dis;
          bestPoint = pt;
        }
      }
    }
  }

  return bestPoint;
};

POIController.prototype.getPOIUnderPoint = function (screen_pt, tolerance) {
  var projection = this.manager.createProjection();
  var poi = this.manager.poiLabelsLayer.getDrawnPOI();
      poi = poi.concat(this.manager.poiDotsLayer.getDrawnPOI());

  if (!poi.length) return null;

  var test_poi = poi[0];
  var mapped_poi = projection.map_pt(test_poi);
  var closest_distance = tolerance;
  var closest_poi = null;

  var test_distance = Distance.hypot(mapped_poi.x-screen_pt.x, mapped_poi.y-screen_pt.y);
  if (test_distance < closest_distance) {
    closest_poi = test_poi;
    closest_distance = test_distance;
  }

  for (var i=1; i<poi.length; i++) {
    test_poi = poi[i];
    mapped_poi = projection.map_pt(test_poi);

    test_distance = Distance.hypot(mapped_poi.x-screen_pt.x, mapped_poi.y-screen_pt.y);
    if (test_distance < closest_distance) {
      closest_distance = test_distance;
      closest_poi = test_poi;
    }
  }
  return closest_poi;
};

// because a POI can be in both the poiLabelsLayer and in
// the poiDotsLayer, it's possible that this function returns
// an array with duplicate elements. But, opened points will
// be returned at the start. Could possibly clean this up,
// but not too important because this really has only 1 purpose.
// That purpose is to allow us to open all POI at the exact same
// location as another one. The functions that use this don't care
// if a specific POI is contained within the returned array more
// than once.
POIController.prototype.getAllPOIAtSameLocation = function (pt) {
  if (!pt) return [];

  var same_poi = [];
  var openedPOI = this.manager.poiLabelsLayer.getDrawnPOI();
  var unopenedPOI = this.manager.poiDotsLayer.getDrawnPOI();
  var all_poi = openedPOI.concat(unopenedPOI);

  if (!all_poi.length) return [];

  for (var i=0; i<all_poi.length; i++) {
    var poi = all_poi[i];

    // doesn't handle the case where x or y is NaN, but in that
    // case I don't think we'd be able to assume the POI are at
    // the same location. NaN means hole and there's no guarantee
    // that the hole is in the same spot. At this point, we don't
    // have information about if this is a discontinuity or not and
    // if it's a discontinuity, we definitely don't know where it is.
    if (poi.x === pt.x && poi.y === pt.y) {
      same_poi.push(poi);
    }
  }
  return same_poi;
};

POIController.prototype.togglePOIUnderPoint = function (screen_pt, tolerance) {
  var poiUnderMouse = this.getPOIUnderPoint(screen_pt, tolerance);
  var allPOIUnderMouse = this.getAllPOIAtSameLocation(poiUnderMouse);

  if (allPOIUnderMouse.length) {

    // want to set all poi under mouse to open or all to closed
    var isOpen = allPOIUnderMouse[0].isOpen();

    for (var i=0; i<allPOIUnderMouse.length; i++) {
      if (isOpen) {
        allPOIUnderMouse[i].close();

        // hide hovered poi
        this.manager.poiLabelsLayer.hoveredPOI = null;
      } else {
        allPOIUnderMouse[i].open();
      }
    }

    this.manager.redrawPOILayer();
    return true;
  } else {
    return false;
  }
};

POIController.prototype.getImgUnderMouse = function (screen_pt, tolerance) {
  var projection = this.manager.createProjection();
  var pt = projection.reverse_map_pt(screen_pt);

  var graphInfo = null;

  var isInside = function(val, center, width, padding) {
    return (
      (val < center + 0.5 * Math.abs(width) + padding) &&
      (val > center - 0.5 * Math.abs(width) + padding)
    );
  };

  for (var id in this.manager.graphImages) {
    var img = this.manager.graphImages[id];
    if (!img || img.hidden) continue;

    if (!isInside(pt.x, img.computed_x, img.computed_width, 0)) continue;
    if (!isInside(pt.y, img.computed_y, img.computed_height, 0)) continue;
    graphInfo = {id: id, img: img};
  }
  return graphInfo;
};

// TODO - cleanup
// returns an object containing the id, sketch, and the branch
POIController.prototype.getBranchInfoUnderPoint = function (screen_pt, tolerance) {

  var graphInfo = null;
  var minDis = tolerance;
  var projection = this.manager.createProjection();
  var pt = projection.reverse_map_pt(screen_pt);

  for (var id in this.manager.graphSketches) {
    var sketch = this.manager.graphSketches[id];
    if(!sketch || !sketch.visible) continue;

    var branches = sketch.branches;
    if (!branches || !branches.length) continue;

    for (var i=0; i<branches.length; i++) {
      var distance = POIController.calculateDistanceFromBranch(branches[i], pt, projection);
      if (distance < minDis) {
        minDis = distance;
        graphInfo = { id: id, branch: i, sketch: sketch };
      }
    }
  }

  return graphInfo;
};

POIController.calculateDistanceFromBranch = function(branch, pt, projection) {
  var distanceInfo = POIController.getBranchesDistanceInfo(branch, pt, projection);
  if (!distanceInfo) return Infinity;
  return distanceInfo.minDistance;
};

// Computes the closest point on branch to pt in screen space, along with some additional info
// that is useful for tracing.
//
// Returns an object
// {
//   closestPoint: { x: 1.0, y: 2.0},
//   minDistance: 3.0,
//   secondDistance: 4.0
// }
//
// Where the closest point coordinates are in math space, but the distances are measured in
// screen space.
//
// If the closest point on the branch lies to the left/right of pt, then secondDistance is the
// distance to the closest point to the right/left of pt respectively. This information is used
// by getBranchesTracePoint to interpolate between using the closest point and using a point
// directly above the mouse in order to avoid discontinuous jumps in the trace point when there
// is a discontinuous jump in the closest point on the curve.
POIController.getBranchesDistanceInfo = function (branch, pt, projection) {

  var xscale = projection.screen.width/(projection.viewport.xmax - projection.viewport.xmin);
  var yscale = projection.screen.height/(projection.viewport.ymax - projection.viewport.ymin);

  var x = pt.x;
  var y = pt.y;

  switch(branch.graphMode) {
    case GRAPHMODE.Y:
    break;

    case GRAPHMODE.X:
    var tmp_swap = x;
    x = y;
    y = tmp_swap;
    tmp_swap = xscale;
    xscale = yscale;
    yscale = tmp_swap;
    break;

    default:
    return null;
  }

  var minLeftDistance = Infinity;
  var minRightDistance = Infinity;
  var closestLeftPoint;
  var closestRightPoint;

  for (var i = 0; i < branch.segments.length; i++) {
    var segment = branch.segments[i];
    for (var j = 0; j < segment.length - 3; j += 2) {
      var x1 = segment[j];
      var y1 = segment[j + 1];
      var x2 = segment[j + 2];
      var y2 = segment[j + 3];
      var p = Distance.closestPointOnSegment(
        0, 0,
        (x1 - x)*xscale, (y1 - y)*yscale,
        (x2 - x)*xscale, (y2 - y)*yscale
      );
      var distance = Distance.hypot(p[0], p[1]);
      if (p[0] < 0) {
        if (distance < minLeftDistance) {
          minLeftDistance = distance;
          closestLeftPoint = p;
        }
      } else {
        if (distance < minRightDistance) {
          minRightDistance = distance;
          closestRightPoint = p;
        }
      }
    }
  }

  var closestPoint = (minLeftDistance < minRightDistance) ? closestLeftPoint : closestRightPoint;

  // Can happen if the branch has no segments, or if there is a segment with no points.
  if (!closestPoint) return null;

  var x_closest = closestPoint[0]/xscale + x;
  var y_closest = closestPoint[1]/yscale + y;

  return {
    closestPoint: {
      x: (branch.graphMode === GRAPHMODE.Y) ? x_closest : y_closest,
      y: (branch.graphMode === GRAPHMODE.Y) ? y_closest : x_closest
    },
    minDistance: Math.min(minLeftDistance, minRightDistance),
    secondDistance: Math.max(minLeftDistance, minRightDistance)
  };

};

// Picks a point on the curve that is close to pt for tracing.
//
// Considers the distance to the closest point on the curve that is to the left of pt and the
// closest point on the curve that is to the right of pt. If these distances are very different,
// uses the closest point on the curve. If these distances are similar, then a small change in the
// position of pt could cause a discontinuous jump in the closestPoint, so we smoothly switch to
// using a point directly above pt instead of the closest point.
//
// The two primary goals of this algorithm are to use the closest point on the curve when the mouse
// is near the curve, and to avoid discontinuous jumps of the trace point as the mouse is moved.
POIController.getBranchesTracePoint = function (branch, pt, projection) {
  // tables lack this, so we shouldn't don't try to see how close we are
  if (!branch || !branch.compiled || !branch.compiled.fn) return;
  var fn = branch.compiled.fn;

  var xscale = projection.screen.width/(projection.viewport.xmax - projection.viewport.xmin);
  var yscale = projection.screen.height/(projection.viewport.ymax - projection.viewport.ymin);

  var distanceInfo = this.getBranchesDistanceInfo(branch, pt, projection);

  if (!distanceInfo) return null;

  var aboveWeight = distanceInfo.minDistance/distanceInfo.secondDistance;

  // Exponent here is kind of a fudge factor. Higher exponents favor taking the closest point
  // over smoothly traversing the curve.
  aboveWeight = aboveWeight*aboveWeight;

  var dir = (branch.graphMode === GRAPHMODE.Y) ? 'x' : 'y';

  var x_weighted = (
    distanceInfo.closestPoint[dir]*(1 - aboveWeight) +
    pt[dir]*aboveWeight
  );

  // Want to find an x value with a nice decimal representation s.t.
  // x, f(x) lies within 1 pixel of x_weighted, f(x_weighted).
  // Evalutate function a half-pixel to the left and right of x_weighted,
  // and then linearly interpolate to restrict y values if necessary.
  var dx = 1/(2*xscale);
  var dy = 1/(2*yscale);

  var y_left = fn(x_weighted - dx);
  var y_mid = fn(x_weighted);
  var y_right = fn(x_weighted + dx);

  var dx_left = dx*Math.min(1, dy/Math.abs(y_left - y_mid));
  var dx_right = dx*Math.min(1, dy/Math.abs(y_right - y_mid));

  if (!isFinite(dx_left)) dx_left = dx;
  if (!isFinite(dx_right)) dx_right = dx;

  x_weighted = Rounding.shortestDecimalBetween(x_weighted - dx_left, x_weighted + dx_right);

  var above = POIController.fillHole(fn, x_weighted, xscale, yscale, pt.x, pt.y);

  return {
    x: (branch.graphMode === GRAPHMODE.Y) ? x_weighted : above,
    y: (branch.graphMode === GRAPHMODE.Y) ? above : x_weighted
  };
};

POIController.prototype.startMovingPoint = function (pointInfo) {
  var move_occured = false;

  this.manager.movablePointsLayer.pressedPointId = pointInfo.isMovable ? pointInfo.id : null;
  this.manager.redrawMovablePointsLayer();

  $(document).on('dcg-tapmove.movepoint', function (evt) {
    move_occured = true;
    var projection = this.manager.createProjection();
    var screen_pt = this.getMouseRelativeToGrapher(evt);
    this.triggerMovePoint(pointInfo, screen_pt, projection);
  }.bind(this));

  $(document).on('dcg-tapend.movepoint dcg-tapcancel.movepoint', function (evt) {
    $(document).off('.movepoint');

    this.manager.movablePointsLayer.pressedPointId = null;
    this.manager.redrawMovablePointsLayer();
    this.triggerStopMovingPoint(pointInfo);

    // if this was just a dcg-tap, then open a label for the point
    if (!move_occured) {
      var projection = this.manager.createProjection();
      var tolerance = this.getToleranceByDevice(evt.device);

      // figure out the exact location of the point on the screen
      var screen_pt = projection.map_pt(pointInfo);
      // TODO - is this necessary? Is there a race condition that'd
      // prevent `sketch = pointInfo.sketch` from working?
      var sketch = this.manager.getGraphSketch(pointInfo.sketch.id);

      // save how many poi are open for this id
      var oldPOICount = sketch.openPOI.length;
      // toggle the poi
      this.togglePOIUnderPoint(screen_pt, tolerance);
      // check how many poi are open for this particular id now
      var newPOICount = sketch.openPOI.length;

      // notify that the point was clicked. If it was deselected, send null.
      if (newPOICount > oldPOICount) this.triggerSelectExpression(pointInfo.sketch.id);
    }
  }.bind(this));
};

// TODO - duplicating some code here
POIController.prototype.startTracingBranch = function (branchInfo, screen_pt) {
  this.last_screen_pt = screen_pt;
  var projection = this.manager.createProjection();
  var pt = projection.reverse_map_pt(screen_pt);

  var sketch = branchInfo.sketch;
  var branch = sketch.branches[branchInfo.branch];
  var tracePt = POIController.getBranchesTracePoint(branch, pt, projection);

  this.manager.traceLayer.traceInfo = {pt: tracePt, branchInfo: branchInfo};
  this.manager.redrawTraceLayer();

  $(document).on('dcg-tapmove.tracing', this.handleTraceUpdate.bind(this));
  $(document).on('dcg-tapend.tracing dcg-tapcancel.tracing', this.stopTracingBranch.bind(this));
};

POIController.prototype.stopTracingBranch = function (evt) {

  // if we're over an unopened hovered poi, open it
  var hoveredPOI = this.manager.poiLabelsLayer.hoveredPOI;
  if (hoveredPOI && !hoveredPOI.isOpen()) {
    hoveredPOI.open();
    this.manager.redrawPOILayer();
  }

  this.manager.traceLayer.traceInfo = null;
  this.manager.redrawTraceLayer();

  $(document).off('.tracing');
};

POIController.prototype.handleTraceUpdate = function(evt) {
  if(!this.manager.traceLayer.traceInfo) return;
  var projection = this.manager.createProjection();
  var screen_pt;
  if(evt){
    screen_pt = this.getMouseRelativeToGrapher(evt);
    this.last_screen_pt = screen_pt;
  } else {
    screen_pt = this.last_screen_pt;
  }
  var pt = projection.reverse_map_pt(screen_pt);
  var minDis = Infinity;
  var bestBranch = -1;

  var traceInfo = this.manager.traceLayer.traceInfo;
  var traceSketch = this.manager.graphSketches[traceInfo.branchInfo.sketch.id];
  traceInfo.branchInfo.sketch = traceSketch;
  var branches = traceInfo.branchInfo.sketch.branches;
  //Look up new branch each time

  // Loop through branches to find which we're closest too
  for(var i=0; i<branches.length; i++) {
    var branchDis = POIController.calculateDistanceFromBranch(branches[i], pt, projection);
    if(branchDis < minDis) {
      bestBranch = i;
      minDis = branchDis;
    }
  }

  var branch = branches[bestBranch];
  var tracePt = branch ? POIController.getBranchesTracePoint(branch, pt, projection) : null;

  this.manager.traceLayer.traceInfo.branchInfo.branch = bestBranch;
  this.manager.traceLayer.traceInfo.pt = tracePt;
  this.manager.redrawTraceLayer();
};

// TODO - might not belong here.. might be more appropriate in the math/poi.js
// TODO - probably better to be smarter about 'tiny offset'. should use a
//        dynmaic offset rather than always using 0.00000000001
POIController.fillHole = function(fn, x_val, xscale, yscale, x, y) {
  var y_val = fn(x_val);
  if (isFinite(y_val)) return y_val;

  var x_left =  x_val - 0.00000000001;
  var x_right = x_val + 0.00000000001;
  var y_left =  fn(x_left);
  var y_right = fn(x_right);

  if (isNaN(y_left) && isNaN(y_right)) return NaN;
  if (isNaN(y_left)) return y_right;
  if (isNaN(y_right)) return y_left;

  var dx_left = (x - x_left) * xscale;
  var dx_right = (x - x_right) * xscale;
  var dy_left = (y - y_left) * yscale;
  var dy_right = (y - y_right) * yscale;

  if (Distance.hypot(dx_left, dy_left) < Distance.hypot(dx_right, dy_right)) {
    return y_left;
  } else {
    return y_right;
  }
};

return POIController;
});

define('graphing/grapher',['require','jquery','browser','./viewport','./viewporttransformation','./screen','./poidotslayer','./poilabelslayer','./gridlayer','./graphsketch','./canvaslayer','./graphslayer','./imagelayer','./projection','./tracelayer','./movablepointslayer','math/poi','./viewportcontroller','./poicontroller','./axisarrowmode'],function(require){
  var $ = require('jquery');
  var Browser = require('browser');
  var Viewport = require('./viewport');
  var ViewportTransformation = require('./viewporttransformation');
  var Screen = require('./screen');
  var POIDotsLayer = require('./poidotslayer');
  var POILabelsLayer = require('./poilabelslayer');
  var GridLayer = require('./gridlayer');
  var GraphSketch = require('./graphsketch');
  var CanvasLayer = require('./canvaslayer');
  var GraphsLayer = require('./graphslayer');
  var ImageLayer = require('./imagelayer');
  var Projection = require('./projection');
  var TraceLayer = require('./tracelayer');
  var MovablePointsLayer = require('./movablepointslayer');
  var POI = require('math/poi');
  var ViewportController = require('./viewportcontroller');
  var POIController = require('./poicontroller');
  var AxisArrowMode = require('./axisarrowmode');

// This is the guy you talk to in order to allocate/deallocate graph layers.
// container is the <div> element that holds the graph area. Grapher handles resize automatically.
// onRecompute is the handler that should be called when a recompute is requested.
// onRecompute(viewport as Viewport, screen as Screen)
function Grapher(container, settings, $root) {
    this.container = container;
    this.$ = $(container);
    this.$root = $root;

    // callback
    this.triggerProjectionChanged = function (projection) {};

    this.viewport = new Viewport();

    // a reference to an UnderscoreModel that we can ask for settings values
    this.settings = settings;

    // Warning, order matters here because both of these bind touch event
    // handlers, and we need tracing (poiController) to get priority over
    // dragging (viewportController).
    this.poiController = new POIController(this, settings);
    this.viewportController = ViewportController(this, settings);

    this.$.css('overflow', 'hidden');

    // image (canvas layer)
    this.imageLayer = ImageLayer();
    this.$.append( this.imageLayer.$ );
    // gridlines (canvas layer)
    this.gridLayer = GridLayer();
    this.$.append( this.gridLayer.$ );

    // poi dots (canvas layer)
    this.poiDotsLayer = POIDotsLayer();
    this.$.append( this.poiDotsLayer.$ );

    // graphs (canvas layer)
    this.graphsLayer = GraphsLayer();
    this.$.append( this.graphsLayer.$ );

    //movable points dom (DOM layer)
    this.movablePointsLayer = MovablePointsLayer(this.$root);
    this.movablePointsLayer.$.css('z-index', '0');
    this.$.append( this.movablePointsLayer.$ );

    // poi labels and opened dots (DOM layer)
    this.poiLabelsLayer = POILabelsLayer(this.$root);
    // some weird interaction with overflow:hidden requires a z-index to be
    // set for openpoi to not flicker.
    this.poiLabelsLayer.$.css('z-index', '0');
    this.$.append( this.poiLabelsLayer.$ );

    // trace layer (DOM layer)
    this.traceLayer = TraceLayer(this.$root);
    // some weird interaction with overflow:hidden requires a z-index to be
    // set for the tracing label to not flicker.
    this.traceLayer.$.css('z-index', '0');
    this.$.append( this.traceLayer.$ );

    // needed to tell IE9 that the layer should steal mouse events.
    if (Browser.IS_IE9) {
      this.traceLayer.$.addClass('dcg-transparent-bg');
    }

    this.setTransformation(new ViewportTransformation());

    // Which axes are currently being scaled. Managed by GraphController.
    // 'x', 'y', 'both', or undefined
    this.scaleAxis = undefined;

    this.__transient = false;
    this.graphSketches = {};
    this.graphImages = {};
    this.__sketchOrder = [];
    this.selectedId = null;
}

Grapher.prototype.setSketchOrder = function (drawOrder) {
  this.__sketchOrder = drawOrder;
  this.redrawGraphsLayer();
  this.redrawImageLayer();
};

Grapher.prototype.clear = function () {
  this.graphSketches = {};
  this.graphImages = {};
};

Grapher.prototype.getGraphSketch = function(graphId) {
  if (graphId in this.graphSketches) {
    return this.graphSketches[graphId];
  } else {
    return null;
  }
};

Grapher.prototype.addGraphSketch = function(sketch) {
  this.graphSketches[sketch.id] = sketch;
};

Grapher.prototype.removeGraphSketch = function(graphId) {
  delete this.graphSketches[graphId];
};

Grapher.prototype.addGraphImage = function(image) {
  this.graphImages[image.id] = image;
};
Grapher.prototype.removeGraphImage = function(imageId) {
  delete this.graphImages[imageId];
};

Grapher.prototype.setTransformation = function (transformation) {
  this.transformation = transformation;
  this.triggerProjectionChanged(this.createProjection());
};

Grapher.prototype.createProjection = function () {
  var projection = new Projection(this.screen, this.viewport, this.settings);

  if (this.isInTransientState()) {
    return this.transformation.transformProjection(projection);
  } else {
    return projection;
  }
};

Grapher.prototype.computeDefaultViewport = function () {
  var viewport = new Viewport(-10, 10, -10, 10);
  viewport.squareYAxis(this.screen);
  viewport.round(this.screen);

  return viewport;
};

// Updates the screen sizes of all of the layers and requests a redraw, viewport stays the same.
Grapher.prototype.updateScreenSize = function(w, h) {
    if (w<=0 || h<=0) return;
    if (this.screen && this.screen.width === w && this.screen.height === h) return;
    this.$.width(w);

    var newScreen = new Screen(w, h);
    var newViewport;

    if (this.settings && this.settings.squareAxes) {

      // The following is used mainly in the API, for the case that the graphaper
      // starts off hidden or with zero size, and is later set to a finite size.
      if (!this.screen) {
        newViewport = this.viewport.clone();
        newViewport.squareYAxis(newScreen);
        newViewport.round(newScreen);
      } else {
        newViewport = this.createProjection().calculateViewportForScreen(newScreen);
      }
    } else {
      newViewport = this.viewport.clone();
    }

    this.screen = newScreen;

    this.viewportController.setViewport(newViewport);

    this.redrawAllLayers();
};

Grapher.prototype.beginTransientState = function() {
  if (this.isInTransientState()) return;

  var projection = this.createProjection();
  this.settings.isViewportTransient = true;
  this.graphsLayer.saveUnscaledCanvas(projection);

  this.__transient = true;
};

Grapher.prototype.endTransientState = function() {
  if (!this.isInTransientState()) return;
  var projection = this.createProjection();
  this.viewport = projection.viewport;
  this.viewport.round(projection.screen);
  this.settings.setProperty(
    'squareAxes',
    this.viewport.isSquare(projection.screen)
  );
  this.settings.isViewportTransient = false;
  this.setTransformation(new ViewportTransformation());
  this.graphsLayer.releaseUnscaledCanvas();
  this.__transient = false;
};

Grapher.prototype.isInTransientState = function () {
  return this.__transient;
};

Grapher.prototype.hide = function (id) {
  var sketch = this.getGraphSketch(id);
  if (sketch) sketch.visible = false;
};

Grapher.prototype.select = function (id) {
  var currentSketch = this.getGraphSketch(this.selectedId);
  if (currentSketch) currentSketch.selected = currentSketch.showPOI = currentSketch.showHighlight = false;
  var newSketch = this.getGraphSketch(id);
  if (newSketch) newSketch.selected = newSketch.showPOI = newSketch.showHighlight = true;
  this.selectedId = id;
};

Grapher.prototype.updateSketch = function (id, graphData) {
  //Pause updates while zooming, to stay in sync with cached canvas
  if(this.isInTransientState()) return;
  var currentSketch = this.getGraphSketch(id);

  //TODO When does this happen?
  if (!graphData.length) return this.hide(id);

  var newSketch = new GraphSketch(id, graphData);
  //TODO - handle differently-colored branches
  newSketch.color = graphData[0].color;
  newSketch.style = graphData[0].style;
  newSketch.updateFrom(currentSketch);
  newSketch.selected = newSketch.showPOI = newSketch.showHighlight = (String(id) === String(this.selectedId));
  this.addGraphSketch(newSketch);
};

Grapher.prototype.updateIntersections = function (id, intersections) {
  var sketch = this.getGraphSketch(id);
  if (sketch) sketch.updateIntersections(intersections);
};

Grapher.prototype.redrawAllLayers = function() {
  this.cancelRedrawSlowly();
  this.redrawGridLayer();
  this.redrawContentLayers();
};

Grapher.prototype.redrawContentLayers = function(){
  this.cancelRedrawSlowly();
  this.redrawGraphsLayer();
  this.redrawPOILayer();
  this.redrawTraceLayer();
  this.redrawMovablePointsLayer();
  this.redrawImageLayer();
};

Grapher.prototype.cancelRedrawSlowly = function(){
  clearTimeout(this.redraw_slowly_timeout);
  this.redraw_slowly_timeout = null;
};

Grapher.prototype.redrawSlowly = function(delay, step, n){
  //This is an intentional slow-down used on initial graph loads to give a line-by-line drawing effect.
  //It draws only the first n graphs, and calls itself repeatedly on a timeout until all layers are drawn
  //Every delay ms, it draws step more graphs
  if(typeof(delay) === 'undefined'){
    delay = 30;
  }
  if(typeof(step) === 'undefined'){
    step = 1;
  }
  if(typeof(n) === 'undefined'){
    this.cancelRedrawSlowly();
    n = 0;
  }

  this.redrawGridLayer(); //Always draw grid first
  var sketches_to_draw = {};
  var stopped_early = false;
  var i = 0;
  for(var id in this.graphSketches){
    if(i++ > n){
      stopped_early = true;
      break;
    }
    sketches_to_draw[id] = this.graphSketches[id];
  }
  this.graphsLayer.redraw(this.createProjection(), sketches_to_draw, this.__sketchOrder);

  if(stopped_early){
    var self = this;
    //Store timeout so that this can be interrupted
    this.redraw_slowly_timeout = setTimeout(function(){self.redrawSlowly(delay, step, n+step)}, delay);
  }
  else{
    //Only draw trace and POI if this was our last iteration
    this.redrawPOILayer();
    this.redrawTraceLayer();
    this.redrawMovablePointsLayer();

    this.redraw_slowly_timeout = null;
  }
};

Grapher.prototype.redrawGridLayer = function () {
  if (!this.screen) return;
  this.gridLayer.redraw(this.createProjection(), this.scaleAxis);
};

Grapher.prototype.redrawGraphsLayer = function () {
  if (!this.screen) return;
  if (!this.isInTransientState()) {
    this.graphsLayer.redraw(this.createProjection(), this.graphSketches, this.__sketchOrder);
  } else {
    this.graphsLayer.paintScaledCanvas(this.transformation);
  }
};

Grapher.prototype.redrawMovablePointsLayer = function () {
  if (!this.screen) return;
  this.movablePointsLayer.redraw(this.createProjection(), this.graphSketches);
};

Grapher.prototype.redrawPOILayer = function () {
  if (!this.screen) return;
  this.poiDotsLayer.redraw(this.createProjection(), this.graphSketches);
  this.poiLabelsLayer.redraw(this.createProjection(), this.graphSketches);
};

Grapher.prototype.redrawTraceLayer = function () {
  if (!this.screen) return;
  this.traceLayer.redraw(this.createProjection());
};

Grapher.prototype.redrawImageLayer = function () {
  if (!this.screen) return;
  this.imageLayer.redraw(this.createProjection(), this.graphImages, this.__sketchOrder);
};

Grapher.prototype.screenshot = function (width, height) {
  height = height || width || this.screen.height;
  width = width || this.screen.width;
  var screen = new Screen(width, height);

  var printLayer = CanvasLayer();
  printLayer.resize(width, height);
  var ctx = printLayer.ctx;

  var settings = this.settings.clone();
  if (width < 256 || height < 256) {
    settings.setProperty('xAxisNumbers', false);
    settings.setProperty('yAxisNumbers', false);
    settings.setProperty('polarNumbers', false);
  }

  var viewport = this.viewport.clone();

  if (viewport.isSquare(this.screen)) viewport.squareCrop(screen);

  var projection = new Projection(screen, viewport, settings);

  // Make a white background, since transparent backgrounds are funny in some
  // environments.
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, screen.width, screen.height);

  this.settings.takingScreenshot = true;
  this.imageLayer.redrawToCtx(ctx, projection, this.graphImages);
  this.gridLayer.redrawToCtx(ctx, projection);
  this.graphsLayer.redrawToCtx(ctx, projection, this.graphSketches);
  this.settings.takingScreenshot = false;

  return printLayer.canvas_node.get(0).toDataURL("image/png");
};

Grapher.prototype.thumbnail = Grapher.prototype.screenshot;

Grapher.prototype.getOpenIntersectionIds = function () {
  var openPOI;
  var hiddenOpenPOI;
  var i;

  var intersectIds = {};

  for (var id in this.graphSketches) {
    if (!this.graphSketches.hasOwnProperty(id)) continue;
    openPOI = this.graphSketches[id].openPOI;
    for (i = openPOI.length - 1; i >= 0; i--) {
      if (openPOI[i].type === POI.INTERSECTION) intersectIds[id] = true;
    }
    hiddenOpenPOI = this.graphSketches[id].hiddenOpenPOI;
    for (i = hiddenOpenPOI.length - 1; i >= 0; i--) {
      if (hiddenOpenPOI[i].type === POI.INTERSECTION) intersectIds[id] = true;
    }
  }

  return intersectIds;
};

Grapher.prototype.getSetting = function (setting, _default) {
  var value = this.settings.getProperty(setting);
  return value !== undefined ? value : _default;
};

Grapher.prototype.setSetting = function (setting, value, _default) {
  this.settings.setProperty(
    setting,
    value !== undefined ? value : _default
  );
};

Grapher.prototype.getState = function () {
  var state = {};
  var self = this;

  this.settings.stateProperties.forEach(function (prop) {
    state[prop] = self.getSetting(prop);
  });

  state.viewport = this.viewportController.getViewport().toObject();

  return state;
};

// TODO - Each one of these setSetting commands will update the grids
// layer. That's not terrible, but it might be nice to have control over
// that.
//
// Might be worth adding the observer in here rather than in
// graph_settings.js so that we can turn the observer off/on cleanly
// any time we do a batch update like this.
Grapher.prototype.setState = function (state) {
  this.setSetting('showGrid', state.showGrid, true);
  this.setSetting('polarMode', state.polarMode, false);
  this.setSetting('showXAxis', state.showXAxis, !!state.showAxes); // used to have a single showAxes option
  this.setSetting('showYAxis', state.showYAxis, !!state.showAxes); // used to have a single showAxes option
  this.setSetting('squareAxes', state.squareAxes, true);
  this.setSetting('xAxisStep', state.xAxisStep, state.labelXMode === 'pi' ? Math.PI : 0);
  this.setSetting('yAxisStep', state.yAxisStep, state.labelYMode === 'pi' ? Math.PI : 0);
  this.setSetting('xAxisMinorSubdivisions', state.xAxisMinorSubdivisions, 0);
  this.setSetting('yAxisMinorSubdivisions', state.yAxisMinorSubdivisions, 0);
  this.setSetting('degreeMode', state.degreeMode, false);
  this.setSetting('xAxisArrowMode', state.xAxisArrowMode, AxisArrowMode.NONE);
  this.setSetting('yAxisArrowMode', state.yAxisArrowMode, AxisArrowMode.NONE);
  this.setSetting('xAxisLabel', state.xAxisLabel, '');
  this.setSetting('yAxisLabel', state.yAxisLabel, '');
  this.setSetting('xAxisNumbers', state.xAxisNumbers, !!state.showLabels); //used to have a single showLabels option
  this.setSetting('yAxisNumbers', state.yAxisNumbers, !!state.showLabels); //used to have a single showLabels option
  this.setSetting('polarNumbers', state.polarNumbers, !!state.showLabels); //used to have a single showLabels option

  if ("viewport" in state) {
    var viewport = Viewport.fromObject(state.viewport);
    if (
      this.screen &&
      this.getSetting('squareAxes') &&
      !viewport.isSquare(this.screen)
    ) {
      viewport.squareYAxis(this.screen);
      viewport.round(this.screen);
    }

    this.viewportController.setViewport(viewport);
  }

};

return Grapher;
});

define('main/graph_settings',['require','pjs','underscore_model','graphing/axisarrowmode'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  var AxisArrowMode = require('graphing/axisarrowmode');

  /*
  * graph settings
  */

  var GraphSettings = P(UnderscoreModel, function (settings, _super) {

    //these are user-defined properties and can be saved in the state
    settings.init = function () {
      _super.init.call(this);
      this.stateProperties = [];

      //config holds properties of the individual API instance that
      //shouldn't be cloned (e.g. keyboardVisible). It has setProperty & getProperty
      //like any other underscore model
      this.config = new UnderscoreModel();

      // stored in state
      this.addStateProperty('showGrid', true);
      this.addStateProperty('polarMode', false);
      this.addStateProperty('showXAxis', true);
      this.addStateProperty('showYAxis', true);
      this.addStateProperty('xAxisStep', 0);
      this.addStateProperty('yAxisStep', 0);
      this.addStateProperty('xAxisMinorSubdivisions', 0);
      this.addStateProperty('yAxisMinorSubdivisions', 0);
      this.addStateProperty('degreeMode', false);
      this.addStateProperty('xAxisArrowMode', AxisArrowMode.NONE);
      this.addStateProperty('yAxisArrowMode', AxisArrowMode.NONE);
      this.addStateProperty('xAxisLabel', '');
      this.addStateProperty('yAxisLabel', '');
      this.addStateProperty('xAxisNumbers', true);
      this.addStateProperty('yAxisNumbers', true);
      this.addStateProperty('polarNumbers', true);
      this.addStateProperty('projectorMode', false);
      this.addStateProperty('squareAxes', true);

      // not stored in state
      this.computedStepSizes = {};
      this.squareAxes = true;

      //non computed -- these are the same for projectorMode and non-projector Mode
      this.labelHangingColor = 'rgba(150,150,150,1)';
      this.labelNormalColor = 'rgba(0,0,0,1)';

      //non-computed and not-stored in state. Just used for squaring Axes
      this.lastChangedAxis = 'x';

      // below here are properties that *are not* stored in the state and can,
      // right now, only be changed by toggling 'projectorMode'
      var self = this;
      function createProjectorProperty (property, offValue, onValue) {

        function computeProperty() {
          self.setProperty(property, self.projectorMode ? onValue : offValue);
        }

        self.observe('projectorMode', computeProperty);
        computeProperty();
      }

      function createHighlightProperty (property, off_off, off_on, on_off, on_on) {
        function computeProperty() {
          var value;
          if (self.projectorMode) {
            value = self.highlight ? on_on : on_off;
          } else {
            value = self.highlight ? off_on : off_off;
          }

          self.setProperty(property, value);
        }

        self.observe('projectorMode highlight', computeProperty);
        computeProperty();
      }

      //font size of labels
      createProjectorProperty('labelSize', 12, 16);
      //darker grid lines
      createProjectorProperty('majorAxisOpacity', 0.3, 0.5);

      //lighter grid lines
      createProjectorProperty('minorAxisOpacity', 0.12, 0.15);

      //main axes
      createProjectorProperty('axisOpacity', 0.7, 0.9);

      createProjectorProperty('axisLineWidth', 1, 2);

      //for antialiasing axes
      createProjectorProperty('axisLineOffset', 0.5, 0);

      //minimum separation between major axis lines
      createProjectorProperty('pixelsPerLabel', 70, 100);

      //line width for graphs
      createHighlightProperty('graphLineWidth', 2, 3, 6, 9);

      //line width for points
      createHighlightProperty('pointLineWidth', 7, 11, 15, 22);
    };

    settings.addStateProperty = function (prop, defaultValue) {
      this[prop] = defaultValue;
      this.stateProperties.push(prop);
    };

    settings.clone = function () {
      var newSettings = GraphSettings(this.grapher);

      var self = this;
      this.stateProperties.forEach(function (prop) {
        newSettings.setProperty(prop, self[prop]);
      });

      newSettings.setProperty('squareAxes', this.squareAxes);

      return newSettings;
    };

    settings.registerCallbacks = function (grapher, expressionsView, $rootElement) {

      var self = this;

      this.stateProperties.forEach(function (prop) {
        self.observe(prop, function () {
          grapher.redrawGridLayer();
        });
      });

      this.observe('squareAxes', function() {
        grapher.viewportController.enforceSquareAxes();
      });

      this.observe('projectorMode', function() {
        //set class on the body for POIs & trace -- see poi.css
        $rootElement.toggleClass('dcg-PROJECTOR-MODE', !!self.projectorMode);
        if (expressionsView) {
          expressionsView.onProjectorModeChange();
        }
        grapher.redrawAllLayers();
      });
    };
  });

  return GraphSettings;
});


define('expressions/abstractitem',['require','pjs','underscore_model'],function(require) {
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');

  var AbstractItemModel = P(UnderscoreModel, function (model, _super) {

    var nextItemId = 1;

    model.init = function (state, list) {
      _super.init.call(this);

      // TODO - these belong on view, not the model
      this.index = -1;
      this.selected = false;
      this.list = list;

      // Normalize ids to strings. Note that some legacy states are stored with integer ids.
      for (var property in state) {
        if (state.hasOwnProperty(property)) {
          if (property === 'id') {
            this[property] = '' + state[property];
          } else {
            this[property] = state[property];
          }
        }
      }

      if (!this.hasOwnProperty('id')) {
        this.id = '' + nextItemId++;
      } else if (parseInt(this.id, 10) >= nextItemId) {
        nextItemId = parseInt(this.id, 10) + 1;
      }

      this.observe('folder', this.updateFolder.bind(this));
      this.observe('selected', this.__onSelectedChange.bind(this));
    };

    model.eachLatex = function (fn) {}; // Not implemented

    model.onAddedToList = function () {};
    model.onRemovedFromList = function () {};

    // Record change for undo-redo
    model.onStateDidChange = function(prop) {
      var id = this.id;
      var oldValue = this.getOldProperty(prop);
      var newValue = this.getProperty(prop);

      var list = this.list;

      list.undoRedo.addTransaction({
        type: list.undoRedo.RESPONSE_TO_CHANGE,
        undo: function() {
          list.getItemById(id).setProperty(prop, oldValue);
        },
        redo: function () {
          list.getItemById(id).setProperty(prop, newValue);
        }
      });
    };

    model.updateCollapsed = function () {
      this.setProperty(
        'inCollapsedFolder',
        this.folder ? this.folder.collapsed : false
      );
    };

    model.updateFolder = function () {
      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.id);
      }
      if (this.folder) {
        this.folder.observe(
          'collapsed.' + this.id,
          this.updateCollapsed.bind(this)
        );
      }
      this.updateCollapsed();
    };

    // selecting an expression within a collapsed folder expands the folder.
    // this can happen by clicking the curve on the graphpaper
    model.__onSelectedChange = function () {
      // notify the list that the selectedItem has potentially changed. Putting this
      // as the very first handler to a selection change so that any calls (within this stack) to
      // list.getSelected() returns the correct thing.
      if (this.list) this.list.handleSelectionChange(this);

      // TODO - ideally the folder would be listening for this event on each of it's children, but the folder
      // doesn't have a reference to it's children. We should change that, but it's a potentially dangerous refactor.
      if (this.selected && this.inCollapsedFolder) {
        this.folder.updateSelectedHiddenChild();
      }
    };

  });

  return AbstractItemModel;
});

define('expressions/domain',['require','underscore_model','pjs'],function(require){
  var UnderscoreModel = require('underscore_model');
  var P = require('pjs');

var DomainModel = P(UnderscoreModel, function (model, _super) {
  model.init = function (min, max) {
    _super.init.call(this);
    this.min = min;
    this.max = max;
  };
  
  model.isValid = function () {
    return isFinite(this.min) && isFinite(this.max) && (this.max > this.min);
  };
  
  model.serialize = function () {
    return {min: this.min, max: this.max};
  };
});

DomainModel.deserialize = function (obj) {
  if (!obj) return DomainModel();
  else return DomainModel(obj.min, obj.max);
};

return DomainModel;
});

/* big.js v1.0.1 https://github.com/MikeMcl/big.js/LICENCE */
;(function ( global ) {
    

    /*
      big.js v1.0.1
      A small, fast Javascript library for arbitrary-precision arithmetic with decimal numbers. 
      https://github.com/MikeMcl/big.js/
      Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */

    /****************************** EDITABLE DEFAULTS **********************************/


    // The default values below must be integers within the stated ranges (inclusive).

    /*
     * The maximum number of decimal places of the results of methods involving
     * division, i.e. 'div' and 'sqrt', and 'pow' with negative exponents.
     */
    Big['DP'] = 20;                                  // 0 to MAX_DP

    /*
     * The rounding mode used when rounding to the above decimal places.
     *
     * 0 Round towards zero (i.e. truncate, no rounding).               (ROUND_DOWN     )
     * 1 Round to nearest neighbour. If equidistant, round up.          (ROUND_HALF_UP  )
     * 2 Round to nearest neighbour. If equidistant, to even neighbour. (ROUND_HALF_EVEN)
     */
    Big['RM'] = 1;                                   // 0, 1 or 2

        // The maximum value of 'Big.DP'.
    var MAX_DP = 1E6,                                // 0 to 1e+6

        // The maximum magnitude of the exponent argument to the 'pow' method.
        MAX_POWER = 1E6,                             // 1 to 1e+6

        /*
         * The exponent value at and beneath which 'toString' returns exponential notation.
         * Javascript's Number type: -7
         * -1e+6 is the minimum recommended exponent value of a 'Big'.
         */
        TO_EXP_NEG = -7,                             // 0 to -1e+6

        /*
         * The exponent value at and above which 'toString' returns exponential notation.
         * Javascript's Number type: 21
         * 1e+6 is the maximum recommended exponent value of a 'Big', though there is no
         * enforcing or checking of a limit.
         */
        TO_EXP_POS = 21,                             // 0 to 1e+6


    /***********************************************************************************/

        P = Big.prototype,
        isValid = /^-?\d+(?:\.\d+)?(?:e[+-]?\d+)?$/i,
        ONE = new Big(1);


    // CONSTRUCTOR


    /*
     * The exported function.
     * Create and return a new instance of a 'Big' object.
     *
     * n {number|string|Big} A numeric value.
     */
    function Big( n ) {
        var i, j, nL,
            x = this;

        // Enable constructor usage without new.
        if ( !(x instanceof Big) ) {
            return new Big( n )
        }

        // Duplicate.
        if ( n instanceof Big ) {
            x['s'] = n['s'];
            x['e'] = n['e'];
            x['c'] = n['c'].slice();
            return
        }

        // Minus zero?
        if ( n === 0 && 1 / n < 0 ) {
            n = '-0'
        // Ensure 'n' is string and check validity.
        } else if ( !isValid.test(n += '') ) {
            throw NaN
        }

        // Determine sign.
        x['s'] = n.charAt(0) == '-' ? ( n = n.slice(1), -1 ) : 1;

        // Decimal point?
        if ( ( i = n.indexOf('.') ) > -1 ) {
            n = n.replace( '.', '' )
        }

        // Exponential form?
        if ( ( j = n.search(/e/i) ) > 0 ) {

            // Determine exponent.
            if ( i < 0 ) {
                i = j
            }
            i += +n.slice( j + 1 );
            n = n.substring( 0, j )

        } else if ( i < 0 ) {

            // Integer.
            i = n.length
        }

        // Determine leading zeros.
        for ( j = 0; n.charAt(j) == '0'; j++ ) {
        }

        if ( j == ( nL = n.length ) ) {

            // Zero.
            x['c'] = [ x['e'] = 0 ]
        } else {

            // Determine trailing zeros.
            for ( ; n.charAt(--nL) == '0'; ) {
            }

            x['e'] = i - j - 1;
            x['c'] = [];

            // Convert string to array of digits (without leading and trailing zeros).
            for ( i = 0; j <= nL; x['c'][i++] = +n.charAt(j++) ) {
            }
        }
    }


    // PRIVATE FUNCTIONS


    /*
     * Round 'Big' 'x' to a maximum of 'dp' decimal places using rounding mode
     * 'rm'. (Called by 'div', 'sqrt' and 'round'.)
     *
     * x {Big} The 'Big' to round.
     * dp {number} Integer, 0 to MAX_DP inclusive.
     * rm {number} 0, 1 or 2 ( ROUND_DOWN, ROUND_HALF_UP or ROUND_HALF_EVEN )
     * [more] {boolean} Whether the result of division was truncated.
     */
    function rnd( x, dp, rm, more ) {
        var xc = x['c'],
            i = x['e'] + dp + 1;

        if ( rm !== 0 && rm !== 1 && rm !== 2 ) {
            throw '!Big.RM!'
        }

        // 'xc[i]' is the digit after the digit that may be rounded up.
        rm = rm && ( xc[i] > 5 || xc[i] == 5 &&
          ( rm == 1 || more || i < 0 || xc[i + 1] != null || xc[i - 1] & 1 ) );

        if ( i < 1 || !xc[0] ) {
            x['c'] = rm
              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              ? ( x['e'] = -dp, [1] )
              // Zero.
              : [ x['e'] = 0 ];
        } else {

            // Remove any digits after the required decimal places.
            xc.length = i--;

            // Round up?
            if ( rm ) {

                // Rounding up may mean the previous digit has to be rounded up and so on.
                for ( ; ++xc[i] > 9; ) {
                    xc[i] = 0;

                    if ( !i-- ) {
                        ++x['e'];
                        xc.unshift(1)
                    }
                }
            }

            // Remove trailing zeros.
            for ( i = xc.length; !xc[--i]; xc.pop() ) {
            }
        }

        return x
    }


    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return
     * 1 if the value of this 'Big' is greater than the value of 'Big' 'y',
     * -1 if the value of this 'Big' is less than the value of 'Big' 'y', or
     * 0 if they have the same value,
     */
    P['cmp'] = function ( y ) {
        var xNeg,
            x = this,
            xc = x['c'],
            yc = ( y = new Big( y ) )['c'],
            i = x['s'],
            j = y['s'],
            k = x['e'],
            l = y['e'];

        // Either zero?
        if ( !xc[0] || !yc[0] ) {
            return !xc[0] ? !yc[0] ? 0 : -j : i
        }

        // Signs differ?
        if ( i != j ) {
            return i
        }
        xNeg = i < 0;

        // Compare exponents.
        if ( k != l ) {
            return k > l ^ xNeg ? 1 : -1
        }

        // Compare digit by digit.
        for ( i = -1,
              j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
              ++i < j; ) {

            if ( xc[i] != yc[i] ) {
                return xc[i] > yc[i] ^ xNeg ? 1 : -1
            }
        }

        // Compare lengths.
        return k == l ? 0 : k > l ^ xNeg ? 1 : -1
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' divided by the
     * value of 'Big' 'y', rounded, if necessary, to a maximum of 'Big.DP'
     * decimal places using rounding mode 'Big.RM'.
     */
    P['div'] = function ( y ) {
        var x = this,
            dvd = x['c'],
            dvs = ( y = new Big(y) )['c'],
            s = x['s'] == y['s'] ? 1 : -1,
            dp = Big['DP'];

        if ( dp !== ~~dp || dp < 0 || dp > MAX_DP ) {
            throw '!Big.DP!'
        }

        // Either 0?
        if ( !dvd[0] || !dvs[0] ) {

            // Both 0?
            if ( dvd[0] == dvs[0] ) {
                throw NaN
            }

            // 'dvs' is 0?
            if ( !dvs[0] ) {
                // Throw +-Infinity.
                throw s / 0
            }

            // 'dvd' is 0. Return +-0.
            return new Big( s * 0 )
        }


        var dvsL, dvsT, next, cmp, remI,
            dvsZ = dvs.slice(),
            dvdI = dvsL = dvs.length,
            dvdL = dvd.length,
            rem = dvd.slice( 0, dvsL ),
            remL = rem.length,
            quo = new Big(ONE),
            qc = quo['c'] = [],
            qi = 0,
            digits = dp + ( quo['e'] = x['e'] - y['e'] ) + 1;

        quo['s'] = s;
        s = digits < 0 ? 0 : digits;

        // Create version of divisor with leading zero.
        dvsZ.unshift(0);

        // Add zeros to make remainder as long as divisor.
        for ( ; remL++ < dvsL; rem.push(0) ) {
        }

        do {

            // 'next' is how many times the divisor goes into the current remainder.
            for ( next = 0; next < 10; next++ ) {

                // Compare divisor and remainder.
                if ( dvsL != ( remL = rem.length ) ) {
                    cmp = dvsL > remL ? 1 : -1
                } else {
                    for ( remI = -1, cmp = 0; ++remI < dvsL; ) {

                        if ( dvs[remI] != rem[remI] ) {
                            cmp = dvs[remI] > rem[remI] ? 1 : -1;
                            break
                        }
                    }
                }

                // Subtract divisor from remainder (if divisor < remainder).
                if ( cmp < 0 ) {

                    // Remainder cannot be more than one digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for ( dvsT = remL == dvsL ? dvs : dvsZ; remL; ) {

                        if ( rem[--remL] < dvsT[remL] ) {

                            for ( remI = remL;
                                  remI && !rem[--remI];
                                  rem[remI] = 9 ) {
                            }
                            --rem[remI];
                            rem[remL] += 10
                        }
                        rem[remL] -= dvsT[remL]
                    }
                    for ( ; !rem[0]; rem.shift() ) {
                    }
                } else {
                    break
                }
            }

            // Add the 'next' digit to the result array.
            qc[qi++] = cmp ? next : ++next;

            // Update the remainder.
            rem[0] && cmp
              ? ( rem[remL] = dvd[dvdI] || 0 )
              : ( rem = [ dvd[dvdI] ] )

        } while ( ( dvdI++ < dvdL || rem[0] != null ) && s-- );

        // Leading zero? Do not remove if result is simply zero (qi == 1).
        if ( !qc[0] && qi != 1) {

            // There can't be more than one zero.
            qc.shift();
            quo['e']--;
        }

        // Round?
        if ( qi > digits ) {
            rnd( quo, dp, Big['RM'], rem[0] != null )
        }

        return quo
    }


    /*
     * Return a new 'Big' whose value is the value of this 'Big' minus the value
     * of 'Big' 'y'.
     */
    P['minus'] = function ( y ) {
        var d, i, j, xLTy,
            x = this,
            a = x['s'],
            b = ( y = new Big( y ) )['s'];

        // Signs differ?
        if ( a != b ) {
            return y['s'] = -b, x['plus'](y)
        }

        var xc = x['c'],
            xe = x['e'],
            yc = y['c'],
            ye = y['e'];

        // Either zero?
        if ( !xc[0] || !yc[0] ) {

            // 'y' is non-zero?
            return yc[0]
              ? ( y['s'] = -b, y )
              // 'x' is non-zero?
              : new Big( xc[0]
                ? x
                // Both are zero.
                : 0 )
        }

        // Determine which is the bigger number.
        // Prepend zeros to equalise exponents.
        if ( xc = xc.slice(), a = xe - ye ) {
            d = ( xLTy = a < 0 ) ? ( a = -a, xc ) : ( ye = xe, yc );

            for ( d.reverse(), b = a; b--; d.push(0) ) {
            }
            d.reverse()
        } else {

            // Exponents equal. Check digit by digit.
            j = ( ( xLTy = xc.length < yc.length ) ? xc : yc ).length;

            for ( a = b = 0; b < j; b++ ) {

                if ( xc[b] != yc[b] ) {
                    xLTy = xc[b] < yc[b];
                    break
                }
            }
        }

        // 'x' < 'y'? Point 'xc' to the array of the bigger number.
        if ( xLTy ) {
            d = xc, xc = yc, yc = d;
            y['s'] = -y['s']
        }

        /*
         * Append zeros to 'xc' if shorter. No need to add zeros to 'yc' if shorter
         * as subtraction only needs to start at 'yc.length'.
         */
        if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

            for ( ; b--; xc[j++] = 0 ) {
            }
        }

        // Subtract 'yc' from 'xc'.
        for ( b = yc.length; b > a; ){

            if ( xc[--b] < yc[b] ) {

                for ( i = b; i && !xc[--i]; xc[i] = 9 ) {
                }
                --xc[i];
                xc[b] += 10
            }
            xc[b] -= yc[b]
        }

        // Remove trailing zeros.
        for ( ; xc[--j] == 0; xc.pop() ) {
        }

        // Remove leading zeros and adbust exponent accordingly.
        for ( ; xc[0] == 0; xc.shift(), --ye ) {
        }

        if ( !xc[0] ) {

            // Result must be zero.
            xc = [ye = 0]
        }

        return y['c'] = xc, y['e'] = ye, y
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' modulo the
     * value of 'Big' 'y'.
     */
    P['mod'] = function ( y ) {
        y = new Big( y );
        var c,
            x = this,
            i = x['s'],
            j = y['s'];

        if ( !y['c'][0] ) {
            throw NaN
        }

        x['s'] = y['s'] = 1;
        c = y['cmp'](x) == 1;
        x['s'] = i, y['s'] = j;

        return c
          ? new Big(x)
          : ( i = Big['DP'], j = Big['RM'],
            Big['DP'] = Big['RM'] = 0,
              x = x['div'](y),
                Big['DP'] = i, Big['RM'] = j,
                  this['minus']( x['times'](y) ) )
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' plus the value
     * of 'Big' 'y'.
     */
    P['plus'] = function ( y ) {
        var d,
            x = this,
            a = x['s'],
            b = ( y = new Big( y ) )['s'];

        // Signs differ?
        if ( a != b ) {
            return y['s'] = -b, x['minus'](y)
        }

        var xe = x['e'],
            xc = x['c'],
            ye = y['e'],
            yc = y['c'];

        // Either zero?
        if ( !xc[0] || !yc[0] ) {

            // 'y' is non-zero?
            return yc[0]
              ? y
              : new Big( xc[0]

                // 'x' is non-zero?
                ? x

                // Both are zero. Return zero.
                : a * 0 )
        }

        // Prepend zeros to equalise exponents.
        // Note: Faster to use reverse then do unshifts.
        if ( xc = xc.slice(), a = xe - ye ) {
            d = a > 0 ? ( ye = xe, yc ) : ( a = -a, xc );

            for ( d.reverse(); a--; d.push(0) ) {
            }
            d.reverse()
        }

        // Point 'xc' to the longer array.
        if ( xc.length - yc.length < 0 ) {
            d = yc, yc = xc, xc = d
        }

        /*
         * Only start adding at 'yc.length - 1' as the
         * further digits of 'xc' can be left as they are.
         */
        for ( a = yc.length, b = 0; a;
             b = ( xc[--a] = xc[a] + yc[a] + b ) / 10 ^ 0, xc[a] %= 10 ) {
        }

        // No need to check for zero, as +x + +y != 0 && -x + -y != 0

        if ( b ) {
            xc.unshift(b);
            ++ye
        }

         // Remove trailing zeros.
        for ( a = xc.length; xc[--a] == 0; xc.pop() ) {
        }

        return y['c'] = xc, y['e'] = ye, y
    };


    /*
     * Return a 'Big' whose value is the value of this 'Big' raised to the power
     * 'e'. If 'e' is negative, round, if necessary, to a maximum of 'Big.DP'
     * decimal places using rounding mode 'Big.RM'.
     *
     * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.
     */
    P['pow'] = function ( e ) {
        var isNeg = e < 0,
            x = new Big(this),
            y = ONE;

        if ( e !== ~~e || e < -MAX_POWER || e > MAX_POWER ) {
            throw '!pow!'
        }

        for ( e = isNeg ? -e : e; ; ) {

            if ( e & 1 ) {
                y = y['times'](x)
            }
            e >>= 1;

            if ( !e ) {
                break
            }
            x = x['times'](x)
        }

        return isNeg ? ONE['div'](y) : y
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' rounded, if
     * necessary, to a maximum of 'dp' decimal places using rounding mode 'rm'.
     * If 'dp' is not specified, round to 0 decimal places.
     * If 'rm' is not specified, use 'Big.RM'.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     * [rm] 0, 1 or 2 ( i.e. ROUND_DOWN, ROUND_HALF_UP or ROUND_HALF_EVEN )
     */
    P['round'] = function ( dp, rm ) {
        var x = new Big(this);

        if ( dp == null ) {
            dp = 0
        } else if ( dp !== ~~dp || dp < 0 || dp > MAX_DP ) {
            throw '!round!'
        }
        rnd( x, dp, rm == null ? Big['RM'] : rm );

        return x
    };


    /*
     * Return a new 'Big' whose value is the square root of the value of this
     * 'Big', rounded, if necessary, to a maximum of 'Big.DP' decimal places
     * using rounding mode 'Big.RM'.
     */
    P['sqrt'] = function () {
        var estimate, r, approx,
            x = this,
            xc = x['c'],
            i = x['s'],
            e = x['e'],
            half = new Big('0.5');

        // Zero?
        if ( !xc[0] ) {
            return new Big(x)
        }

        // Negative?
        if ( i < 0 ) {
            throw NaN
        }

        // Estimate.
        i = Math.sqrt( x.toString() );

        // Math.sqrt underflow/overflow?
        // Pass 'x' to Math.sqrt as integer, then adjust the exponent of the result.
        if ( i == 0 || i == 1 / 0 ) {
            estimate = xc.join('');

            if ( !( estimate.length + e & 1 ) ) {
                estimate += '0'
            }

            r = new Big( Math.sqrt(estimate).toString() );
            r['e'] = ( ( ( e + 1 ) / 2 ) | 0 ) - ( e < 0 || e & 1 )
        } else {
            r = new Big( i.toString() )
        }

        i = r['e'] + ( Big['DP'] += 4 );

        // Newton-Raphson loop.
        do {
            approx = r;
            r = half['times']( approx['plus']( x['div'](approx) ) )
        } while ( approx['c'].slice( 0, i ).join('') !==
                       r['c'].slice( 0, i ).join('') );

        rnd( r, Big['DP'] -= 4, Big['RM'] );

        return r
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' times the value
     * of 'Big' 'y'.
     */
    P['times'] = function ( y ) {
        var c,
            x = this,
            xc = x['c'],
            yc = ( y = new Big( y ) )['c'],
            a = xc.length,
            b = yc.length,
            i = x['e'],
            j = y['e'];

        y['s'] = x['s'] == y['s'] ? 1 : -1;

        // Either 0?
        if ( !xc[0] || !yc[0] ) {

            return new Big( y['s'] * 0 )
        }

        y['e'] = i + j;

        if ( a < b ) {
            c = xc, xc = yc, yc = c, j = a, a = b, b = j
        }

        for ( j = a + b, c = []; j--; c.push(0) ) {
        }

        // Multiply!
        for ( i = b - 1; i > -1; i-- ) {

            for ( b = 0, j = a + i;
                  j > i;
                  b = c[j] + yc[i] * xc[j - i - 1] + b,
                  c[j--] = b % 10 | 0,
                  b = b / 10 | 0 ) {
            }

            if ( b ) {
                c[j] = ( c[j] + b ) % 10
            }
        }

        b && ++y['e'];

        // Remove any leading zero.
        !c[0] && c.shift();

        // Remove trailing zeros.
        for ( j = c.length; !c[--j]; c.pop() ) {
        }

        return y['c'] = c, y
    };


    /*
     * Return a string representing the value of this 'Big'.
     * Return exponential notation if this 'Big' has a positive exponent equal
     * to or greater than 'TO_EXP_POS', or a negative exponent equal to or less
     * than 'TO_EXP_NEG'.
     */
    P['toString'] = P['valueOf'] = function () {
        var x = this,
            e = x['e'],
            str = x['c'].join(''),
            strL = str.length;

        // Exponential notation?
        if ( e <= TO_EXP_NEG || e >= TO_EXP_POS ) {
            str = str.charAt(0) + ( strL > 1 ?  '.' + str.slice(1) : '' ) +
              ( e < 0 ? 'e' : 'e+' ) + e

        // Negative exponent?
        } else if ( e < 0 ) {

        // Prepend zeros.
            for ( ; ++e; str = '0' + str ) {
            }
            str = '0.' + str

        // Positive exponent?
        } else if ( e > 0 ) {

            if ( ++e > strL ) {

                // Append zeros.
                for ( e -= strL; e-- ; str += '0' ) {
                }
            } else if ( e < strL ) {
                str = str.slice( 0, e ) + '.' + str.slice(e)
            }

        // Exponent zero.
        } else if ( strL > 1 ) {
            str = str.charAt(0) + '.' + str.slice(1)
        }

        // Avoid '-0'
        return x['s'] < 0 && x['c'][0] ? '-' + str : str
    };


    /*
     ***************************************************************************
     *
     * If 'toExponential', 'toFixed', 'toPrecision' and 'format' are not
     * required they can safely be commented-out or deleted. No redundant code
     * will be left. 'format' is used only by 'toExponential', 'toFixed' and
     * 'toPrecision'.
     *
     ***************************************************************************
     */
     

    /*
     * PRIVATE FUNCTION
     *
     * Return a string representing the value of 'Big' 'x' in normal or
     * exponential notation to a fixed number of decimal places or significant
     * digits 'dp'.
     * (Called by toString, toExponential, toFixed and toPrecision.)
     *
     * x {Big} The 'Big' to format.
     * dp {number} Integer, 0 to MAX_DP inclusive.
     * toE {number} undefined (toFixed), 1 (toExponential) or 2 (toPrecision).
     */
    function format( x, dp, toE ) {
        // The index (in normal notation) of the digit that may be rounded up.
        var i = dp - ( x = new Big(x) )['e'],
            c = x['c'];

        // Round?
        if ( c.length > ++dp ) {
            rnd( x, i, Big['RM'] )
        }

        // Recalculate 'i' if toFixed as 'x.e' may have changed if value rounded up.
        i = !c[0] ? i + 1 : toE ? dp : ( c = x['c'], x['e'] + i + 1 );

        // Append zeros?
        for ( ; c.length < i; c.push(0) ) {
        }
        i = x['e'];

        /*
         * 'toPrecision' returns exponential notation if the number of
         * significant digits specified is less than the number of digits
         * necessary to represent the integer part of the value in normal
         * notation.
         */
        return toE == 1 || toE == 2 && ( dp <= i || i <= TO_EXP_NEG )

            // Exponential notation.
            ? ( x['s'] < 0 && c[0] ? '-' : '' ) + ( c.length > 1
              ? ( c.splice( 1, 0, '.' ), c.join('') )
              : c[0] ) + ( i < 0 ? 'e' : 'e+' ) + i

            // Normal notation.
            : x.toString()
    }


    /*
     * Return a string representing the value of this 'Big' in exponential
     * notation to 'dp' fixed decimal places and rounded, if necessary, using
     * 'Big.RM'.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     */
    P['toExponential'] = function ( dp ) {

        if ( dp == null ) {
            dp = this['c'].length - 1
        } else if ( dp !== ~~dp || dp < 0 || dp > MAX_DP ) {
            throw '!toExp!'
        }

        return format( this, dp, 1 )
    };


    /*
     * Return a string representing the value of this 'Big' in normal notation
     * to 'dp' fixed decimal places and rounded, if necessary, using 'Big.RM'.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     */
    P['toFixed'] = function ( dp ) {
        var str,
            x = this,
            neg = TO_EXP_NEG,
            pos = TO_EXP_POS;

        TO_EXP_NEG = -( TO_EXP_POS = 1 / 0 );

        if ( dp == null ) {
            str = x.toString()
        } else if ( dp === ~~dp && dp >= 0 && dp <= MAX_DP ) {
            str = format( x, x['e'] + dp );

            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
            if ( x['s'] < 0 && x['c'][0] && str.indexOf('-') < 0 ) {
                // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                str = '-' + str
            }
        }
        TO_EXP_NEG = neg, TO_EXP_POS = pos;

        if ( !str ) {
            throw '!toFix!'
        }

        return str
    };


    /*
     * Return a string representing the value of this 'Big' to 'sd' significant
     * digits and rounded, if necessary, using 'Big.RM'. If 'sd' is less than
     * the number of digits necessary to represent the integer part of the value
     * in normal notation, then use exponential notation.
     *
     * sd {number} Integer, 1 to MAX_DP inclusive.
     */
    P['toPrecision'] = function ( sd ) {

        if ( sd == null ) {
            return this.toString()
        } else if ( sd !== ~~sd || sd < 1 || sd > MAX_DP ) {
            throw '!toPre!'
        }

        return format( this, sd - 1, 2 )
    };


    // EXPORT


    // Node and other CommonJS-like environments that support module.exports.
    if ( typeof module !== 'undefined' && module.exports ) {
        module.exports = Big

    //AMD.
    } else if ( typeof define == 'function' && define.amd ) {
        define('vendor/big',[], function () {
            return Big
        })

    //Browser.
    } else {
        global['Big'] = Big
    }

})( this );

define('big',['require','vendor/big'],function(require){
  var Big = require('vendor/big');
  Big.prototype.equals = function (x) { return this.cmp(x) === 0; };
  return Big;
});

define('expressions/slider',['require','pjs','underscore_model','big','lib/rounding'],function(require) {
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  var Big = require('big');
  var Rounding = require('lib/rounding');

  var SliderModel = P(UnderscoreModel, function (model, _super) {

    model.DEFAULT_PERIOD = 8000; //8s

    model.init = function (options) {
      _super.init.call(this);
      if (!options) {
        options = {};
      }

      this.hardMin = !!options.hardMin;
      this.hardMax = !!options.hardMax;
      this.min = options.min === undefined ? -10 : options.min;
      this.max = options.max === undefined ? 10 : options.max;
      this.value = options.value !== undefined ? options.value : 0;
      this.step = options.step;
      this.animationPeriod = options.animationPeriod !== undefined ? options.animationPeriod : this.DEFAULT_PERIOD;
      this.playDirection = options.playDirection !== undefined ? options.playDirection : 1;
      this.isPlaying = options.isPlaying !== undefined ? options.isPlaying : false;
      this.observe('isPlaying', this.updateAnimationTargetValue.bind(this));
      this.observe('stepper isPlaying', this.updateObservedStepper.bind(this));
      this.observe('dragging isMoving isPlaying', this.setTransient.bind(this));

      this.observe('isPlaying', function () {
        if (this.isPlaying) {
          this.animationTargetValue = this.value; //Animate target value smoothly, and just round displayed value
        }
      }.bind(this));

      this.observe('isPlaying dragging isMoving', this.setTransient.bind(this));
      this.observe('stepper isPlaying', this.updateObservedStepper.bind(this));

      // a slider can start of with isPlaying=true, so the observer for 'isPlaying' won't fire. Call it
      // manually here.
      this.updateAnimationTargetValue();

      // a slider can start off with 'isPlaying' === true. Manually call the observers that
      // would be called if we pressed the play button.
      this.setTransient();
    };

    model.updateAnimationTargetValue = function () {
      if (this.isPlaying) {
        this.animationTargetValue = this.value; //Animate target value smoothly, and just round displayed value
      }
    };

    model.setTransient = function () {
      this.setProperty(
        'transient',
        this.dragging || this.isPlaying || this.isMoving
      );
    };

    model.updateObservedStepper = function () {
      var canPlayStep = this.isPlaying && this.stepper;
      var shouldUnobserve = (!canPlayStep || this.stepper !== this._observedStepper) && this._observedStepper;
      var shouldObserve = canPlayStep && this._observedStepper !== this.stepper;

      if (shouldUnobserve) {
        this._observedStepper.unobserve('playStep.' + this.guid);
        this._observedStepper = undefined;
      }

      if (shouldObserve ) {
        this._observedStepper = this.stepper;
        this._observedStepper.observe('playStep.' + this.guid, this.playStep.bind(this));
      }
    };

    model.playStep = function () {
      //PingPong behavior
      if (this.animationTargetValue >= this.max) {
        this.playDirection = -1;
      } else if (this.animationTargetValue <= this.min) {
        this.playDirection = +1;
      }

      var animationStep = (this.max - this.min) * ((1000 / this.stepper.stepHz) / this.animationPeriod);

      //Animate target without accumulating rounding error
      this.animationTargetValue += animationStep * this.playDirection;

      var newValue = this.computeSnappedValue(this.animationTargetValue); //Always snap to slider markers
      if(!this.step){
        //If no markers, snap to a reasonable decimal close to the animation target
        newValue = Rounding.shortestDecimalBetween(newValue - animationStep * 0.1, newValue + animationStep * 0.1);
      }

      //don't exceed the endpoints
      newValue = Math.max(this.min, Math.min(this.max, newValue));

      //commit the value change
      this.setProperty('value', newValue);
    };

    model.serialize = function () {
      return {
        min: this.min,
        max: this.max,
        hardMin: this.hardMin,
        hardMax: this.hardMax,
        step: this.step,
        value: this.value,
        playDirection: this.playDirection,
        animationPeriod: this.animationPeriod,
        isPlaying: this.isPlaying
      };
    };

    model.computeSnappedValue = function (val) {
      if (this.step) {
        var nsteps = Math.round((val - this.min)/this.step);
        // Use big.js to do exact decimal arithmetic to avoid rounding errors here.
        var snapped = (new Big(this.step)).times(nsteps).plus(this.min);
        // Turn back to Number
        val = parseFloat(snapped.toString());
      }

      // enforce hard limits
      if (this.hardMin && val < this.min) val = this.min;
      if (this.hardMax && val > this.max) val = this.max;

      return val;
    };

  });

  return SliderModel;
});
define('expressions/colors',['require'],function(require) {
  var RED = '#C0504D';
  var BLUE = '#4F81BD';
  var GREEN = '#9BBB59';
  var PURPLE = '#8064A2';
  var ORANGE = '#F79646';
  var BLACK = '#000000';
  var all = [ RED, BLUE, GREEN, PURPLE, ORANGE, BLACK ];
  var i = 0;

  function next () {
    var color = all[i];
    i = (i + 1) % all.length;
    return color;
  }

  function reset () {
    i = 0;
  }

  return {
    all: all,
    next: next,
    reset: reset,
    RED: RED,
    BLUE: BLUE,
    GREEN: GREEN,
    PURPLE: PURPLE,
    ORANGE: ORANGE,
    BLACK: BLACK
  };
});
define('expressions/expression',['require','pjs','./abstractitem','./domain','./slider','./colors','bugsnag'],function(require){
  var P = require('pjs');
  var AbstractItemModel = require('./abstractitem');
  var DomainModel = require('./domain');
  var SliderModel = require('./slider');
  var Colors = require('./colors');
  var Bugsnag = require('bugsnag');

  var ExpressionObject = P(AbstractItemModel, function(model, _super) {
    model.isExpression = true;

    model._computeNewLatex = function(latex, newValue) {
      //we know the expression will look like:
      // a bunch of stuff (we ignore this in the regex)
      // an "=" (doesn't slide if it's < or >)
      //
      // a bunch of stuff (spaces, parens, the rest of the le, ge, etc)  ($1)
      // the number we're trying to replace ($2)
      // a bunch more stuff (spaces, parens, etc.) (we ignore this in the regex)
      var regex = /=(.*?)([-\.0-9]+)/;

      //if they're typing something crazy like y=00001, we want to not overwrite their work
      var matches = latex.match(regex);
      if (!matches) {
        Bugsnag.notify(
          "InvalidSliderLatex",
          "Slider rhs did not match number regex.",
          { latex: latex }
        );
        return latex;
      }
      if (parseFloat(matches[2]) === newValue) return latex;

      return latex.replace(regex, "=$1" + newValue);
    };

    model.isExpression = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);

      this.loading = true;
      // a default blank formula while we calculate the real one
      this.formula = {error:''};
      // Use to signifiy that a plotted expression has not been fully resolved by the plotter.
      this.unresolved = false;

      // TODO - this is very temporary. Eventually we'll want to save the
      // slider info in here, but there are some old states that have obsolete
      // values stored in there. We've repurposed the .slider variable on this
      // class to be a SliderModel. Because the .slider value is being set
      // on instantiation, we aren't overwriting it with a SliderModel. Then,
      // when the .slider property is expected to do things that a SliderModel
      // can, it throws an error. When we migrate old graph states to use this
      // property, we need to remove the next line.
      delete this.slider;
      // fill in a color if not specified
      if (!this.color) {
        this.color = Colors.next();
      }
      // convert old style of color definition to simpler new version
      else if (typeof this.color === 'object') {
        this.color = this.color.value;
      }
      if (this.style === undefined) {
        this.style = 'normal';
      }

      // Handle legacy data about whether an expression should be hidden
      if (this.hidden === undefined) {
        if (this.hasOwnProperty('graphed')) {
          this.hidden = !this.graphed;
        } else if (this.hasOwnProperty('userRequestedGraphing')) {
          this.hidden = (this.userRequestedGraphing === 'never');
        } else {
          this.hidden = false;
        }
      }

      if (this.latex === undefined) this.latex = '';

      this.isLogModeRegression = !!this.isLogModeRegression;

      // convert raw domain object to a DomainModel Object
      var raw_domain = this.domain ? this.domain : {min: 0, max: 1};
      this.domain = DomainModel.deserialize(raw_domain);
      this.domain.observe('min max', function (property) {
        this.onExpressionDidChange();

        // handle undo/redo
        var id = this.id;
        var oldValue = this.domain.getOldProperty(property);
        var newValue = this.domain.getProperty(property);
        var list = this.list;

        list.undoRedo.addTransaction({
          type: list.undoRedo.RESPONSE_TO_CHANGE,
          undo: function()  { list.getItemById(id).domain.setProperty(property, oldValue); },
          redo: function () { list.getItemById(id).domain.setProperty(property, newValue); }
        });
      }.bind(this));

      if (!this.regressionParameters) this.regressionParameters = {};
      if (!this.residualVariable) this.residualVariable = '';

      this.computeShouldGraph();

      this.observe('formula', this.onFormulaUpdate.bind(this));
      this.observe('latex color hidden style', this.onStateDidChange.bind(this));
      this.observe(
        'latex shouldGraph color style isLogModeRegression',
        this.onExpressionDidChange.bind(this)
      );
      this.observe('hidden', this.computeShouldGraph.bind(this));
    };

    model.onStateDidChange = function (prop) {

      // ignore latex changes from transient slider
      if (prop === 'latex' && this.slider && this.slider.transient) {
        return;
      }

      // don't send to undo/redo if this is the first set
      if (prop === 'style' && this.getOldProperty('style') === undefined) {
        return;
      }

      _super.onStateDidChange.call(this, prop);
    };

    model.updateFolder = function () {
      _super.updateFolder.call(this);

      // TODO namespacing with the id seems kind of gross...
      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.id);
      }
      if (this.folder) {
        this.folder.observe(
          'hidden.' + this.id,
          this.computeShouldGraph.bind(this)
        );
      }
      this.computeShouldGraph();
    };

    model.computeShouldGraph = function () {
      if (this.folder && this.folder.hidden) {
        this.setProperty('shouldGraph', false);
        return;
      }
      this.setProperty('shouldGraph', !this.hidden);
    };

    model.onExpressionDidChange = function() {
      if (this.domain.isValid()) {
        this.requestParse();
      }
    };

    model.eachLatex = function (fn) {
      fn(this.latex);
      if (this.residualVariable) fn(this.residualVariable);
    };

    model.getParsableObject = function () {
      //Work-around for bug in Mathquill / expression list
      // where on deletion of an expression via back-space key, Mathquill fires both an UpwardDelete
      // and a Render event.  UpwardDelete causes the expressionList to delete, and Render causes
      // expression list to fire another add request for the already deleted expression, which comes
      // in with latex === undefined.
      if(this.latex === undefined){
        return undefined;
      }
      return {
        type: 'statement',
        id: this.id,
        latex: this.latex,
        domain: this.domain.serialize(),
        shouldGraph: this.shouldGraph,
        color: this.color,
        style: this.style,
        residualVariable: this.residualVariable,
        regressionParameters: this.regressionParameters,
        isLogModeRegression: this.isLogModeRegression
      };
    };

    model.requestParse = function () {
      this.list.triggerAddExp(this.getParsableObject());
    };

    model.requestUnparse = function () {
      this.list.triggerRemoveExp(this.id);
    };

    model.onAddedToList = function () {
      this.requestParse();
    };

    model.onRemovedFromList = function () {
      // turn slider off when deleted
      if (this.slider) {
        this.slider.setProperty('isPlaying', false);
      }

      this.requestUnparse();
    };

    model.getState = function() {
      /* jshint maxcomplexity:11 */
      var state = {
        id: this.id,
        type: 'expression',
        latex: this.latex,
        domain: this.domain.serialize(),
        hidden: this.hidden,
        color: this.color,
        style: this.style,
        residualVariable: this.residualVariable,
        regressionParameters: this.regressionParameters,
        isLogModeRegression: this.isLogModeRegression
      };

     // TODO - change this to state.slider = this.slider.serialize() but can't
     // do that until we convert all previously saved graphs to have a slider
     // object rather than three global properties. We either need to do that
     // or we need to make the setState() function backwards compatible.
     if (this.slider) {
       state.sliderMin = this.slider.min;
       state.sliderMax = this.slider.max;
       state.sliderHardMin = this.slider.hardMin;
       state.sliderHardMax = this.slider.hardMax;
       state.sliderInterval = this.slider.step;
       state.sliderAnimationPeriod = this.slider.animationPeriod;
       state.sliderPlayDirection = this.slider.playDirection;
       state.sliderIsPlaying = this.slider.isPlaying;
     }

     // if we haven't been parsed yet, just return what we started
     // with. Gross, gross, gross!
     else if (this.loading) {
       if (this.hasOwnProperty('sliderMin')) state.sliderMin = this.sliderMin;
       if (this.hasOwnProperty('sliderMax')) state.sliderMax = this.sliderMax;
       if (this.hasOwnProperty('sliderHardMin')) state.sliderHardMin = this.sliderHardMin;
       if (this.hasOwnProperty('sliderHardMax')) state.sliderHardMax = this.sliderHardMax;
       if (this.hasOwnProperty('sliderInterval')) state.sliderInterval = this.sliderInterval;
       if (this.hasOwnProperty('sliderAnimationPeriod')) state.sliderAnimationPeriod = this.sliderAnimationPeriod;
       if (this.hasOwnProperty('sliderPlayDirection')) state.sliderPlayDirection = this.sliderPlayDirection;
       if (this.hasOwnProperty('sliderIsPlaying')) state.sliderIsPlaying = this.sliderIsPlaying;
     }

     return state;
    };

    model.onFormulaUpdate = function () {
      var formula = this.formula;

      this.setProperty('error', formula.error ? formula.error : '');
      this.setProperty('isGraphable', formula.is_graphable);
      this.setProperty('dependent', formula.assignment);
      this.setProperty('isTableable', formula.is_tableable);
      this.setProperty('unresolved', false);

      this.validateStyle();

      if (formula.is_slidable) {
        // delay instantiation of a slider for this expression until we need one.
        if (!this.slider) this.createSliderModel();
        // When we're in transient mode, the frontend is in charge of writes to the slider
        // so ignore updates from the worker
        if (!this.slider.transient) this.slider.setProperty('value', formula.constant_value);
      } else {
        this.slider = null;
      }

      if (formula.is_regression) {
        this.regressionParameters = formula.regression.parameters;
        this.residualVariable = formula.regression.residualVariable;
      } else {
        this.regressionParameters = {};
      }
    };

    model.validateStyle = function () {
      var formula = this.formula;
      if (formula.error) return;

      // When we default the style back to expression default we need the
      // onStateDidChange handler to know to not send the change to undo/redo.
      // This is part of a bigger change that'll automatically cause the style
      // to change. Without the self.style = undefined catch we'll get an
      // extra undo/redo transaction stored. That'll also mess up Toast on setState.
      var self = this;
      function defaultStyleTo (style) {
        if (self.style !== style) {
          self.style = undefined;
          self.setProperty('style', style);
        }
      }

      // If we have changed from a point to a function or vis a versa, we need to be
      // the default draw style for that type.
      if (formula.is_point_list) {
        if (!(this.style === 'point' || this.style === 'open' || this.style === 'cross')) {
          defaultStyleTo('point');
        }
      } else if (formula.is_inequality) {
        // Graphlayer will deal with making this dashed if the inequality requires it.
        defaultStyleTo('normal');
      } else {
        if (!(this.style === 'normal' || this.style === 'dashed')) {
          defaultStyleTo('normal');
        }
      }
    };

    model.toggleLogMode = function () {
      var id = this.id;
      var current = this.isLogModeRegression;

      var list = this.list;
      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,
        undo: function() {
          list.getItemById(id).setProperty('isLogModeRegression', current);
        },
        redo: function() {
          list.getItemById(id).setProperty('isLogModeRegression', !current);
        }
      });
    };

    model.createSliderModel = function () {
      // Once created, the slider object won't be destroyed. The slider instance sticks
      // around to save information about limits. They'd get reset each time if we didn't
      // keep the slider. Also, things that observe changes to the slider shouldn't have
      // to change observers from one slider object to another.
      if (this.__singleSliderInstance) {
        this.slider = this.__singleSliderInstance;
        return;
      }

      this.slider = this.__singleSliderInstance = SliderModel({
        min: this.sliderMin !== undefined ? this.sliderMin : -10,
        max: this.sliderMax !== undefined ? this.sliderMax : 10,
        hardMin: this.sliderHardMin,
        hardMax: this.sliderHardMax,
        animationPeriod: this.sliderAnimationPeriod,
        playDirection: this.sliderPlayDirection,
        isPlaying: this.sliderIsPlaying,
        step: this.sliderInterval,
        value: this.formula.constant_value
      });

      var id = this.id;
      var list = this.list;

      this.slider.observe('step', function () {
        // don't record changes in undo/redo while slider is transient.
        // this is handled elsewhere specially
        if (this.slider.transient) return;

        var oldStep = this.slider.getOldProperty('step');
        var newStep = this.slider.getProperty('step');

        list.undoRedo.addTransaction({
          type: list.undoRedo.RESPONSE_TO_CHANGE,
          undo: function() {
            list.getItemById(id).slider.setProperty('step', oldStep);
          },
          redo: function() {
            list.getItemById(id).slider.setProperty('step', newStep);
          }
        });
      }.bind(this));

      this.slider.observe('min', function () {
        // don't record changes in undo/redo while slider is transient.
        // this is handled elsewhere specially
        if (this.slider.transient) return;

        var oldMin = this.slider.getOldProperty('min');
        var newMin = this.slider.getProperty('min');
        var oldValue = this.slider.getProperty('value');
        var oldLatex = newMin > oldValue ? this.latex : null;
        var newLatex = newMin > oldValue ? this._computeNewLatex(oldLatex, newMin) : null;

        list.undoRedo.addTransaction({
          type: list.undoRedo.CAUSE_OF_CHANGE,
          undo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('min', oldMin);
            if (oldLatex) {
              expression.setProperty('latex', oldLatex);
            }
          },
          redo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('min', newMin);
            if (newLatex) {
              expression.setProperty('latex', newLatex);
            }
          }
        });
      }.bind(this));

      this.slider.observe('max', function () {
        // don't record changes in undo/redo while slider is transient.
        // this is handled elsewhere specially
        if (this.slider.transient) return;

        var oldMax = this.slider.getOldProperty('max');
        var newMax = this.slider.getProperty('max');
        var oldValue = this.slider.getProperty('value');
        var oldLatex = newMax < oldValue ? this.latex : null;
        var newLatex = newMax < oldValue ? this._computeNewLatex(oldLatex, newMax) : null;

        list.undoRedo.addTransaction({
          type: list.undoRedo.CAUSE_OF_CHANGE,
          undo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('max', oldMax);
            if (oldLatex) {
              expression.setProperty('latex', oldLatex);
            }
          },
          redo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('max', newMax);
            if (newLatex) {
              expression.setProperty('latex', newLatex);
            }
          }
        });
      }.bind(this));

      this.slider.observe('transient', function () {
        var wasTransient = this.slider.getOldProperty('transient');
        var isTransient = this.slider.getProperty('transient');

        // just turned transient
        if (!wasTransient && isTransient) {

          // this will be filled in when we end the transient state.
          var startingValues = this.slider.serialize();
          var endingValues = this.slider.serialize();

          // when undoing or redoing, pause the slider
          startingValues.isPlaying = false;
          endingValues.isPlaying = false;

          // keep a record to ending values so that we can update them when we end transient state
          this.transientEndingValues = endingValues;

          list.undoRedo.addTransaction({
            type: list.undoRedo.RESPONSE_TO_CHANGE,
            undo: function () {
              var expression =  list.getItemById(id);

              // set starting values
              for (var prop in startingValues) {
                if (startingValues.hasOwnProperty(prop)) {
                  expression.slider.setProperty(prop, startingValues[prop]);
                }
              }
            },
            redo: function () {
              var expression =  list.getItemById(id);

              // set ending values
              for (var prop in endingValues) {
                if (endingValues.hasOwnProperty(prop)) {
                  expression.slider.setProperty(prop, endingValues[prop]);
                }
              }
            }
          });
        }

        // just ended being transient
        else if (wasTransient && !isTransient && this.transientEndingValues) {
          var lastValues = this.slider.serialize();

          // update the values stored within the undo/redo transaction
          for (var prop in lastValues) {
            if (lastValues.hasOwnProperty(prop)) {
              this.transientEndingValues[prop] = lastValues[prop];
            }
          }
        }
      }.bind(this));

      this.slider.observe('value', function () {
        var newValue = this.slider.getProperty('value');

        // if slider value is smaller than min, decrease min to equal value
        if (newValue < this.slider.min) {
          this.slider.setProperty('min', newValue);
        }

        // if slider value is bigger than max, increase max to equal value
        if (newValue > this.slider.max) {
          this.slider.setProperty('max', newValue);
        }

        // compute and set what the new latex should be based on the value change
        var newLatex = this._computeNewLatex(this.latex, newValue);
        this.setProperty('latex', newLatex);
      }.bind(this));

      // the list is going to step the slider through its animation
      this.slider.setProperty('stepper', this.list);

      // let others know that we've created the slider model
      this.notifyPropertyChange('slider');
    };

    model.isEmpty = function() {
      var latex = this.latex;
      return !latex || latex.split(" ").join("") === "";
    };
  });

  return ExpressionObject;
});

define('expressions/text',['require','pjs','./abstractitem'],function(require) {
  var P = require('pjs');
  var AbstractItemModel = require('./abstractitem');

  var TextObject = P(AbstractItemModel, function(model, _super) {
    model.isText = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);

      if (!this.text) this.text = '';
      this.observe('text', this.onStateDidChange.bind(this));
    };

    model.isEmpty = function() {
      return this.text.split(" ").join("") === "";
    };

    model.getState = function() {
      return {
        id: this.id,
        type: 'text',
        text: this.text
      };
    };
  });

  return TextObject;
});

define('expressions/table',['require','underscore','pjs','underscore_model','graphing/columnmode','graphing/dragmode','big','./abstractitem','./colors','graphing/label'],function(require) {
  var _ = require('underscore');
  var P = require('pjs');
  var UnderscoreModel = require('underscore_model');
  var COLUMNMODE = require('graphing/columnmode');
  var DRAGMODE = require('graphing/dragmode');
  var Big = require('big');
  var AbstractItemModel = require('./abstractitem');
  var Colors = require('./colors');
  var Label = require('graphing/label');

  var Cell = P(UnderscoreModel, function (cellModel, _super) {

    cellModel.init = function (column, state) {
      _super.init.call(this);

      this.column = column;

      if (state) {
        this.value = state.value;
        this.error = state.error;
      }
    };

    cellModel.isEmpty = function () {
      return this.value.split(' ').join("") === '';
    };
  });


  var Column = P(AbstractItemModel, function(colModel, _super) {

    colModel.init = function (table, index, state) {

      // backwards compatibility:
      // used to used showLine and showPoints
      // now we use hidden and columnMode
      if (state.showPoints !== undefined || state.showLine !== undefined) {
        state = JSON.parse(JSON.stringify(state)); // make copy so we don't modify passed in state

        if (state.showPoints && state.showLine) {
          state.columnMode = COLUMNMODE.POINTS_AND_LINES;
        } else if (state.showPoints) {
          state.columnMode = COLUMNMODE.POINTS;
        } else if (state.showLine) {
          state.columnMode = COLUMNMODE.LINES;
        } else {
          state.hidden = true;
          state.columnMode = COLUMNMODE.POINTS;
        }
      }

      // default values
      this.latex = '';
      this.hidden = false;
      this.columnMode = COLUMNMODE.POINTS;
      this.dragMode = DRAGMODE.NONE;
      this.values = [];
      this.error = '';

      _super.init.call(this, state);

      if (!this.color) {
        this.color =  Colors.next();
      }

      if (!this.style) {
        this.style =  'point';
      }

      // any column other than the first should generate the correct number
      // of blank cells if none are passed in.
      if (index !== 0 && this.values.length === 0 && table.columns[0].cells) {
        this.values = []; // don't want to modify array passed in through 'state'
        var len = table.columns[0].cells.length;
        for (var i=0; i<len; i++) {
          this.values.push('');
        }
      }

      // map cells from raw values to objects
      var self = this;
      this.cells = this.values.map(function (value) {
        return Cell(self, {value: String(value)});
      });
      delete this.values;

      this.table = table;
      this.index = index;

      // first column can't be graphed
      if (index === 0) {
        this.hidden = true;
      }

      // observers
      this.isGraphable = !this.error;
      this.observe('error', function () {
        this.setProperty('isGraphable', !this.error);
      }.bind(this));
      this.observe('color columnMode dragMode hidden latex style', this.onStateChange.bind(this));

      // need to factor in whether the table is forcing the column hidden
      this.observe('hidden hiddenByTable', this.computeShouldGraph.bind(this));
      this.computeShouldGraph();
      this.observe('shouldGraph', this.table.requestParse.bind(this.table));

      //rules governing the interaction between dragMode and columnMode:
      //* if you switch to a dragMode and you're in "lines", go to "lines-and-dots"
      //* if you switch to "lines" or turn off the column header, turn of drag mode
      //* if you switch to a computed column header, turn off drag mode

      //note: these are `observe` and not `observeAndSync` because we don't want to prematurely
      //set dragMode (that triggers a reparse, which is bad if done before everything's settled in)
      this.observe('columnMode hidden draggable', function () {
        if (this.columnMode === COLUMNMODE.LINES || this.hidden || !this.draggable) {
          this.setProperty('dragMode', DRAGMODE.NONE);
        }
      }.bind(this));
      this.observe('dragMode', function () {
        if (this.dragMode !== DRAGMODE.NONE && this.columnMode === COLUMNMODE.LINES) {
          this.setProperty('columnMode', COLUMNMODE.POINTS_AND_LINES);
        }
      }.bind(this));
    };

    colModel.computeShouldGraph = function () {
      this.setProperty('shouldGraph', !this.hiddenByTable && !this.hidden);
    };

    colModel.onStateChange = function (property) {
      this.table.requestParse();

      var id = this.table.id;
      var index = this.index;
      var list = this.table.list;
      function getColumn () {
        return list.getItemById(id).columns[index];
      }

      var oldValue = this.getOldProperty(property);
      var newValue = this.getProperty(property);
      list.undoRedo.addTransaction({
        type: list.undoRedo.RESPONSE_TO_CHANGE,
        undo: function () { getColumn().setProperty(property, oldValue); },
        redo: function () { getColumn().setProperty(property, newValue); }
      });
    };

    colModel.isEmpty = function () {
      return this.latex.split(" ").join(" ") === "";
    };

    colModel.getValues = function () {
      var vals = [];
      var len = this.cells.length;
      for (var i=0; i < len; i++) {
        var val = this.cells[i].value;
        if (val === null || val === undefined) {
          vals.push('');
        } else {
          vals.push(String(val));
        }
      }

      return vals;
    };

    colModel.triggerRowChange = function () {};

    colModel.insertCell = function (index, value) {
      var cell = Cell(this, {value: value});
      this.cells.splice(index, 0, cell);

      // add blank independent value in this spot if need be
      if (this.independentValues) {
        this.independentValues.splice(index, 0, '');
      }
    };

    colModel.removeCell = function (index) {
      this.cells.splice(index, 1);

      // remove independent value in this spot if need be
      if (this.independentValues) {
        this.independentValues.splice(index, 1);
      }
    };

    function formatValuesForDisplay (values) {
      var vals = [];

      for (var i=0; i<values.length; i++) {
        var value = values[i];
        var val_str;
        if (!_.isNumber(value)) {
          val_str = '';
        } else if (!isFinite(value)) {
          val_str = "\\mathrm{undefined}";
        } else {
          //logic similar to multiple-answer output in evaluation.js
          if (Math.abs(value) < 1e-15) {
            val_str = '0';
          } else if (Math.abs(value) > 1e6 || Math.abs(value) < 1e-3) {
            val_str = Label.latexSciNote(value.toExponential(6));
          } else {
            val_str = Label.stripZeros(value.toPrecision(8));
          }
        }
        vals.push(val_str);
      }

      return vals;
    }

    colModel.setComputedValues = function (c_data) {

      // TODO - get the worker to pass back a blank array. It'll be important
      // for when we check that the size of the output matches the size of the
      // table. If there is a size mismatch, we must throw the computations
      // away because they are stale.

      // the worker thread doesn't pass back a list of values in this case.
      // we need to build list of null values
      if (c_data.values.length === 0 && c_data.error) {
        for (var i=0; i<this.cells.length-1; i++) {
          c_data.values[i] = null;
        }
      }


      this.setProperty('error', c_data.error);
      this.setProperty('discrete', c_data.discrete);
      this.setProperty('disabled', c_data.dependent);
      this.setProperty('draggable', !c_data.error && !c_data.dependent);
      this.setErrors(c_data.values);

      if (c_data.dependent) {

        // if we haven't saved the independent values, save them now before
        // they get overwritten with the values sent back from the evaluator.
        if (!this.independentValues) {
          this.independentValues = this.getValues();
        }

        this.setValues(formatValuesForDisplay(c_data.values));
      } else if (this.independentValues) {

        // set the indepentedValues back.
        this.setValues(this.independentValues);

        // clear out the cached independent values.
        this.independentValues = null;

        // send the table back to the evaluator
        this.table.requestParse();
      }
    };

    colModel.getValue = function (index) {
      if (this.cells[index]) {
        return this.cells[index].value;
      }
    };

    colModel.setValue = function (index, val) {
      if (this.cells[index]) {
        this.cells[index].setProperty('value', val);
      }
    };

    colModel.setValues = function (values) {
      for (var i=0; i<this.cells.length; i++) {
        this.cells[i].setProperty('value', values[i]);
      }
    };

    colModel.setErrors = function (values) {
      // if the computed value is a string, then it's an error
      for (var i=0; i<values.length; i++) {
        if (typeof values[i] === "string") {
          this.cells[i].setProperty('error', values[i]);
        } else {
          this.cells[i].setProperty('error', '');
        }
      }
    };

    colModel.serialize = function () {
      return {
        values: this.getValues(),
        columnMode: this.columnMode,
        dragMode: this.dragMode,
        hidden: this.hidden,
        id: this.id,
        color: this.color,
        style: this.style,
        latex: this.latex
      };
    };

  });

  var TableObject = P(AbstractItemModel, function(model, _super) {

    model.isTable = true;

    model.init = function (state, list) {
      /* jshint maxcomplexity: 12 */
      var r, c;
      _super.init.call(this, state, list);

      this.list = list;
      this.selectedCell = null;

      // TODO - get rid of this when we upgrade states in DB
      // what we used to call 'headings' is now 'columns'
      if (this.headings) {
        this.columns = this.headings;
        delete this.headings;
      }

      // TODO - get rid of this when we upgrade states in DB
      // what used to be 'rows' is now transposed and part of each column
      if (this.rows) {
        for (c=0; c<this.columns.length; c++) {
          var column = this.columns[c];
          column.values = [];

          for (r=0; r<this.rows.length; r++) {
            column.values.push(this.rows[r][c]);
          }
        }

        delete this.rows;
      }

      // Normalize the length of the column values to the maximum length
      // of any of them.
      var i, maxLength = 0;
      for (i = 0; i < this.columns.length; i++) {
        if (!this.columns[i].values) this.columns[i].values = [];
        if (this.columns[i].values.length > maxLength) {
          maxLength = this.columns[i].values.length;
        }
      }

      for (i = 0; i < this.columns.length; i++) {
        for (var deficit = maxLength - this.columns[i].values.length; deficit > 0; deficit--) {
          this.columns[i].values.push('');
        }
      }

      // map raw columns to Column objects
      var self = this;
      if (!this.columns) this.columns = [];
      this.columns = this.columns.map(function(col_state, index){
        return Column(self, index, col_state);
      });

      var emptyValues = [];
      for (i = 0; i < maxLength; i++) emptyValues.push('');

      // add a column to the right
      this.columns.push(Column(this, this.columns.length, {disabled: true, values: emptyValues}));

      // add a bottom row of empty values
      var lastRow = this.columns[0].cells.length;
      _.each(this.columns, function (column) {
        column.insertCell(lastRow, '');
      });

      // observers
      this.observe('selected', this.onSelectedChange.bind(this));
      this.observe('formula', this.onFormulaUpdate.bind(this));
    };

    model.onFormulaUpdate = function () {
      this.setComputedValues(this.formula.column_data);
      this.setProperty('canAutoRegress', !!this.formula.can_auto_regress);
    };

    model.updateFolder = function () {
      _super.updateFolder.call(this);


      // TODO namespacing with the id seems kind of gross...
      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.id);
      }
      if (this.folder) {
        this.folder.observe(
          'hidden.' + this.id,
          this.computeColumnsHidden.bind(this)
        );
      }
      this.computeColumnsHidden();
    };

    model.computeColumnsHidden = function () {
      var hidden = this.folder && this.folder.hidden;

      _.each(this.columns, function (column) {
        column.setProperty('hiddenByTable', hidden);
      });
    };

    model.onSelectedChange = function () {
      if (!this.selected) {
        this.setProperty('selectedCell', null);
      }
    };

    model.insertColumn = function (index, column) {

      var id = this.id;
      var list = this.list;

      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,
        undo: function () {
          var table = list.getItemById(id);
          table.__removeColumn(index);
        },

        redo: function () {
          var table = list.getItemById(id);
          table.__insertColumn(index, column);

          // need to update reference to heading so that
          // next time we press redo, we pass in the complete
          // heading info. This makes sure the next redo uses
          // the same color and id as the original column that
          // was later deleted and then restored.
          column = table.columns[index].serialize();
        }
      });

    };

    model.removeColumn = function (index) {

      var id = this.id;
      var column = this.columns[index].serialize();
      var list = this.list;
      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,
        undo: function () {
          var table = list.getItemById(id);
          table.__insertColumn(index, column);
        },

        redo: function () {
          var table = list.getItemById(id);
          table.__removeColumn(index);
        }
      });
    };

    model.moveColumn = function (from, to) {
      var id = this.id;
      var list = this.list;

      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,
        undo: function () {
          var table = list.getItemById(id);
          table.__moveColumn(to, from);
        },

        redo: function () {
          var table = list.getItemById(id);
          table.__moveColumn(from, to);
        }
      });
    };

    // this does the raw column insert. Called from the wrapper function that
    // makes it also work with undo redo.
    model.triggerColumnAdded = function (index) {};
    model.__insertColumn = function (index, columnData) {
      if (!columnData) {
        columnData = {};
      }

      // add column
      var column = Column(this, index, columnData);
      this.columns.splice(index, 0, column);

      // let every column after the insertion point know its new index
      for (var i=index+1; i<this.columns.length; i++) {
        this.columns[i].setProperty('index', i);
      }

      this.triggerColumnAdded(index);

      this.requestParse();
    };

    // this does the raw column remove. Called from the wrapper function that
    // makes it also work with undo redo.
    model.triggerColumnRemoved = function (index) {};
    model.__removeColumn = function (index) {

      // remove column
      this.requestUnparseColumn(index);
      this.columns.splice(index, 1);

      // let every column after the deletion point know its new index
      for (var i=index; i<this.columns.length; i++) {
        this.columns[i].setProperty('index', i);
      }

      this.triggerColumnRemoved(index);

      this.requestParse();
    };

    // this does the raw column move. Called from the wrapper function that
    // makes it also work with undo redo.
    model.triggerColumnMoved = function (from, to) {};
    model.__moveColumn = function(from, to) {
      if (from === to) return;

      var len = this.columns.length;
      var column = this.columns[from];

      // can't move the first or last columns
      if (from < 1 || to < 1 || from >= len-1 || to >= len-1) return;

      // remove from items
      this.columns.splice(from , 1);

      // insert back in correct spot
      this.columns.splice(to, 0, column);

      // insert index on each column
      for (var i=0; i<len; i++) {
        this.columns[i].setProperty('index', i);
      }

      // allow a view to tap into this
      this.triggerColumnMoved(from, to);
    };

    // Could try to recognize fractions and multiples of pi (or anything
    // really).
    model.getAutofillValues = function (index) {
      var i;
      var numberOfColumns = this.columns.length;
      var rowValues = [];
      for (i=0; i<numberOfColumns; i++) {
        rowValues.push('');
      }

      var firstColumn = this.columns[0].getValues();

      // Use big.js https://github.com/desmosinc/big.js to compute exact
      // differences and sums so that autofilling decimals works.
      // big.js will throw errors if improper input is used.
      //
      // this line just ensures that there is a constant offset between
      // each value in the first column starting from the beginning up
      // right before where we want to auto fill.
      var valDiff;
      try {
        if (index > 1) {
          valDiff = Big(firstColumn[1]).minus(firstColumn[0]);
        }

        for (i = 2; i<index && valDiff !== undefined; i++) {
          var nextDiff = Big(firstColumn[i]).minus(firstColumn[i-1]);
          if (!valDiff.equals(nextDiff)) {
            valDiff = undefined;
          }
        }
      } catch (e) {
        valDiff = undefined;
      }

      // add valDiff to the previous row to figure out what the autocomplete
      // value should be
      if (valDiff !== undefined) {
        rowValues[0] = valDiff.plus(firstColumn[index-1]).toString();
      }

      return rowValues;
    };

    model.setComputedValues = function (columns_data) {
      this.setProperty('changingMultipleCells', true);

      // there is mandatory empty cell at the end of columns, so
      // we subtract 1 for that.
      var currentRowCount = this.columns[0].cells.length - 1;

      // Find the column that wants to display the most values
      var i, maxRowCount = 0;
      for (i=0; i < columns_data.length; i++) {
        var numberOfRows = columns_data[i].values.length;
        if (numberOfRows > maxRowCount) {
          maxRowCount = numberOfRows;
        }
      }

      // TODO - figure out undo/redo for this. We are left with
      // an extra row because the added rows aren't insertted
      // into the undo/redo stream. Maybe automatically removing
      // rows when we don't need them will fix this?

      // Add as many rows as necessary so that the longest
      // column can be fully displayed
      for (i = maxRowCount - currentRowCount ; i > 0; i--) {
        this.__insertRow(currentRowCount);
        currentRowCount++;
      }

      for (i=0; i<columns_data.length; i++) {
        this.columns[i].setComputedValues(columns_data[i]);
      }

      this.setProperty('changingMultipleCells', false);
      this.triggerEvent('computedValuesSet');
    };

    model.triggerRowAdded = function (index){};
    model.__insertRow = function (index, values) {
      for (var i=0; i<this.columns.length; i++) {
        this.columns[i].insertCell(index, values ? values[i] : '');
      }
      this.triggerRowAdded(index);
    };
    model.insertRow = function (index, values) {
      this.__insertRow(index, values);

      var id = this.id;
      var list = this.list;
      list.undoRedo.addTransaction({
        type: list.undoRedo.RESPONSE_TO_CHANGE,
        undo: function () {
          list.getItemById(id).removeRow(index);
        },
        redo: function () {
          list.getItemById(id).insertRow(index, values);
        }
      });

      this.requestParse();
    };

    model.triggerRowRemoved = function (index) {};
    model.removeRow = function (index) {
      var values = [];

      //don't let the user delete a row if there's only one row (below the header)
      if (!this.columns.length || this.columns[0].cells.length <= 2) return;

      for (var i=0; i<this.columns.length; i++) {
        values.push(this.columns[i].cells[index].value);
        this.columns[i].removeCell(index);
      }

      this.triggerRowRemoved(index);

      var id = this.id;
      var list = this.list;
      list.undoRedo.addTransaction({
        type: list.undoRedo.RESPONSE_TO_CHANGE,
        undo: function () {
          list.getItemById(id).insertRow(index, values);
        },
        redo: function () {
          list.getItemById(id).removeRow(index);
        }
      });

      this.requestParse();
    };

    model.eachLatex = function (fn) {
      for (var i = 0; i < this.columns.length; i++) {
        var column = this.columns[i];
        fn(column.latex);
        for (var j = 0; j < column.cells.length; j++) {
          // Column values are sometimes `undefined` in case of errors.
          // Avoid passing undefined to callbacks that expect latex.
          if (column.cells[j].value) fn(column.cells[j].value);
        }
      }
    };

    model.getParsableObject = function () {
      var self = this;
      var columns = this.columns.map(function (column){

        // serialize column to pure JSON
        var obj = column.serialize();

        // use shouldGraph rather than hidden when deciding if to graph
        obj.hidden = !column.shouldGraph;

        // add tableId in here to pass through
        obj.tableId = self.id;

        // pop off blank bottom row
        obj.values.pop();

        return obj;
      });

      // popoff blank right column
      columns.pop();

      return {
        type: 'table',
        id: self.id,
        columns: columns
      };
    };

    model.requestParse = function () {
      this.list.triggerAddExp(this.getParsableObject());
    };

    model.requestUnparse = function () {
      var ids = [this.id];
      for (var i=0; i<this.columns.length; i++) {
        ids.push(this.columns[i].id);
      }

      this.list.triggerRemoveExps(ids);
    };

    model.onAddedToList = function () {
      this.requestParse();
    };

    model.onRemovedFromList = function () {
      this.requestUnparse();
    };

    model.requestUnparseColumn = function (index) {
      this.list.triggerRemoveExp(this.columns[index].id);
    };

    model.getColumnByIndex = function (index) {
      return this.columns[index];
    };

    model.getColumnById = function (id) {
      for (var i=0; i<this.columns.length; i++) {
        if (this.columns[i].id === id) {
          return this.columns[i];
        }
      }
      return null;
    };

    model.getState = function() {

      // serialize each column
      var columns = this.columns.map(function(column) {
        var data = column.serialize();

        // pop off blank bottom row
        data.values.pop();

        // TODO - do we want to do this? Might be better for loadup if
        // we save the previous values along with wether or not the column
        // was disabled. If the evaluator ever changes, we can convert
        // old graph states or just let the new system overwrite the values like
        // it does now. The two big complaints I have is that computed columns
        // show up with an 'empty' underline temporarily and the table icon
        // flickers if the column is actually continuous rather than discrete.
        // if column is disabled, all values blanked
        // TODO - convert old graph states to have '' instead of null.
        if (column.disabled) {
          data.values = data.values.map(function(){return ''});
        }

        return data;
      });

      // pop off blank right column
      columns.pop();

      return {
        id: this.id,
        columns: columns,
        type: 'table'
      };
    };

    model.isEmpty = function() {
      return false;
    };
  });

  return TableObject;
});

define('loadcss!css/folder', function(){});
define('expressions/folder',['require','loadcss!css/folder','pjs','underscore','./abstractitem'],function (require) {
  require('loadcss!css/folder');
  var P = require('pjs');
  var _ = require('underscore');
  var AbstractItemModel = require('./abstractitem');

  var FolderObject = P(AbstractItemModel, function(model, _super) {
    model.isFolder = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);

      if (!this.title) this.title = '';

      if (!this.memberIds) this.memberIds = {};
      this.hidden = !!this.hidden;
      this.collapsed = !!this.collapsed;

      this.updateCount();

      this.observe('selected collapsed', this.updateSelectedHiddenChild.bind(this));
      this.observe('title hidden', this.onStateDidChange.bind(this));
    };

    model.updateCount = function () {
      this.setProperty('count', _.size(this.memberIds));
    };

    model.getState = function () {
      return {
        id: this.id,
        type: 'folder',
        title: this.title,
        memberIds: this.memberIds,
        hidden: this.hidden,
        collapsed: this.collapsed
      };
    };

    model._addItem = function(itemId) {
      var list = this.list;
      var item = list.getItemById(itemId);

      this.memberIds[itemId] = true;
      if (item) item.setProperty('folder', this);

      this.updateCount();
    };

    model._removeItem = function(itemId) {
      var list = this.list;
      var item = list.getItemById(itemId);

      if (item) item.setProperty('folder', undefined);
      if (this.memberIds.hasOwnProperty(itemId)) {
        delete this.memberIds[itemId];
      }
      this.updateCount();
    };

    model.addItem = function (item) {
      var list = this.list;
      var id = this.id;
      var itemId = item.id;

      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,
        redo: function(){
          list.getItemById(id)._addItem(itemId);
        },
        undo: function(){
          list.getItemById(id)._removeItem(itemId);
        }
      });
    };

    model.removeItem = function (item) {
      var list = this.list;
      var id = this.id;
      var itemId = item.id;

      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,
        redo: function () {
          list.getItemById(id)._removeItem(itemId);
        },
        undo: function () {
          list.getItemById(id)._addItem(itemId);
        }
      });
    };
    
    model.updateSelectedHiddenChild = function () {
      var selectedItem = this.list.getSelected();

      if (this.collapsed) {
        // we are collapsed, and the selectedItem is a child ==> It's our selectedHiddenChild
        if (selectedItem && this.memberIds.hasOwnProperty(selectedItem.id)) {
          this.setProperty('selectedHiddenChild', selectedItem);
          this.setProperty('selected', true);
        }
    
        // we are collapsed, and we are not selected ==> We have no selectedHiddenChild
        else if (selectedItem !== this) {
          this.setProperty('selectedHiddenChild', null);
        }
      } else {
        // we are not collapsed, and we are selected, and we have a selectedHiddenChild ==> select it
        if (selectedItem === this && this.selectedHiddenChild) {
          this.selectedHiddenChild.setProperty('selected', true);
        }
    
        // no children are hidden
        this.setProperty('selectedHiddenChild', null);
      }
    };
  });

  return FolderObject;
});
define('expressions/helperexpression',['require','pjs','math/evaluationstate','./abstractitem','./slider'],function(require){
  var P = require('pjs');
  var EvaluationState = require('math/evaluationstate');
  var AbstractItemModel = require('./abstractitem');
  var SliderModel = require('./slider');

  var HelperExpressionObject = P(AbstractItemModel, function(model, _super) {

    model.isHelperExpression = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);

      this.hidden = !!this.hidden;
      this.is_slidable = false;

      this.formula = EvaluationState.default();
      this.observe('formula', this.onFormulaUpdate.bind(this));
      this.observe('latex hidden color', this.onExpressionDidChange.bind(this));
    };

    model.onExpressionDidChange = function() {
      this.requestParse();
    };

    model.getParsableObject = function () {
      return {
        type: 'statement',
        id: this.id,
        latex: this.latex,
        shouldGraph: !this.hidden,
        color: this.color
      };
    };

    model.requestParse = function () {
      this.list.triggerAddExp(this.getParsableObject());
    };

    model.requestUnparse = function () {
      this.list.triggerRemoveExp(this.id);
    };

    model.onAddedToList = function () {
      this.requestParse();
    };

    model.onRemovedFromList = function () {
      // turn slider off when deleted
      if (this.slider) {
        this.slider.setProperty('isPlaying', false);
      }

      this.requestUnparse();
    };

    model.getState = function() {
      var state = {
        id: this.id,
        latex: this.latex,
        color: this.color,
        hidden: this.hidden
      };

     // TODO - change this to state.slider = this.slider.serialize() but can't
     // do that until we convert all previously saved graphs to have a slider
     // object rather than three global properties. We either need to do that
     // or we need to make the setState() function backwards compatible.
     if (this.slider) {
       state.sliderMin = this.slider.min;
       state.sliderMax = this.slider.max;
       state.sliderHardMin = this.slider.hardMin;
       state.sliderHardMax = this.slider.hardMax;
       state.sliderInterval = this.slider.step;
       state.sliderAnimationPeriod = this.slider.animationPeriod;
       state.sliderPlayDirection = this.slider.playDirection;
       state.sliderIsPlaying = this.slider.isPlaying;
     }

     return state;
    };

    model.onFormulaUpdate = function () {
      var formula = this.formula;

      this.setProperty('error', formula.error ? formula.error : '');

      if (formula.is_slidable) {
        // delay instantiation of a slider for this expression until we need one.
        if (!this.slider) {
          this.createSliderModel();
        }

        this.slider.setProperty('value', formula.constant_value);
      } else {
        this.slider = null;
      }

      this.setProperty('is_slidable', formula.is_slidable);
    };

    model.createSliderModel = function () {
      // Once created, the slider object won't be destroyed. The slider instance sticks
      // around to save information about limits. They'd get reset each time if we didn't
      // keep the slider. Also, things that observe changes to the slider shouldn't have
      // to change observers from one slider object to another.
      if (this.__singleSliderInstance) {
        this.slider = this.__singleSliderInstance;
        return;
      }
      this.slider = this.__singleSliderInstance = SliderModel({
        min: this.sliderMin !== undefined ? this.sliderMin : -10,
        max: this.sliderMax !== undefined ? this.sliderMax : 10,
        hardMin: this.sliderHardMin,
        hardMax: this.sliderHardMax,
        animationPeriod: this.sliderAnimationPeriod,
        playDirection: this.sliderPlayDirecction,
        isPlaying: this.sliderIsPlaying,
        step: this.sliderInterval,
        value: this.formula.constant_value
      });

      // let others know that we've created the slider model
      this.notifyPropertyChange('slider');
    };

    model.isEmpty = function() {
      var latex = this.latex;
      return !latex || latex.split(" ").join("") === "";
    };
  });

  return HelperExpressionObject;
});

define('expressions/image',['require','pjs','./abstractitem','./helperexpression','i18n','underscore'],function(require) {
  var P = require('pjs');
  var AbstractItemModel = require('./abstractitem');
  var HelperExpressionObject = require('./helperexpression');
  var i18n = require('i18n');
  var _ = require('underscore');

  var ImageObject = P(AbstractItemModel, function(model, _super) {
    model.isImage = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);
      this.hidden = !!this.hidden;
      this.shouldGraph = !this.hidden;
      this.errors = {};
      this.helpers = {};
      this.alias_helpers = {};
      this.point_helpers = [];
      this.imageObj = new Image();

      this.observe('x y width height name opacity shouldGraph', this.onStateDidChange.bind(this));
      this.observe('hidden', this.onVisibilityChange.bind(this));
      this.observe('showPoints', this.onShowPointsChange.bind(this));
      this.observe('transient', this.onTransientChange.bind(this));
      this.observe('errors', this.onErrorsChange.bind(this));
      this.observe('image_url', this.loadImage.bind(this));

      function computeShowPoints () {
        this.setProperty('showPoints', this.shouldGraph && this.selected && this.loaded);
      }
      this.observe('shouldGraph selected loaded', computeShowPoints.bind(this));

      // parses inputs and computes values
      this.createInputHelper('x');
      this.createInputHelper('y');
      this.createInputHelper('width');
      this.createInputHelper('height');

      // the helpers that make static values slidable
      this.createAliasHelper('x');
      this.createAliasHelper('y');
      this.createAliasHelper('width');
      this.createAliasHelper('height');

      // the resize points
      this.createResizeHelper('left','top');
      this.createResizeHelper('left','middle');
      this.createResizeHelper('left','bottom');
      this.createResizeHelper('middle','bottom');
      this.createResizeHelper('right','bottom');
      this.createResizeHelper('right','middle');
      this.createResizeHelper('right','top');
      this.createResizeHelper('middle','top');

      // the center move point
      this.createMoveHelper();

      // check if any helper is transient (movable point being dragged)
      var self = this;
      this.point_helpers.forEach(function (helper) {
        helper.observe('transient', function () {
          self.computeTransient();
        });
      });

      this.computeTransient();

      // only load image if url is set
      if (this.image_url) {
        this.loadImage();
      }
    };
    model.computeShouldGraph = function () {
      var shouldGraph = (this.folder && this.folder.hidden ? false : !this.hidden);
      this.setProperty("shouldGraph", shouldGraph);
    };
    model.computeTransient = function () {
      var is_transient = false;
      this.point_helpers.forEach(function (helper) {
        is_transient = is_transient || helper.transient;
      });

      this.setProperty('transient', !!is_transient);
    };
    model.computeVariables = function () {
      var vars = _.flatten([
        this.helpers.x.formula.variables,
        this.helpers.y.formula.variables,
        this.helpers.width.formula.variables,
        this.helpers.height.formula.variables
      ]);

      var uniq_vars = _.uniq(vars);
      this.setProperty('variables', uniq_vars);
    };
    model.onErrorsChange = function () {
      var errorMessages = {
        x: i18n.t('Invalid x coordinate.'),
        y: i18n.t('Invalid y coordinate.'),
        width: i18n.t('Invalid width.'),
        height: i18n.t('Invalid height.')
      };

      var errors = [];
      for (var id in this.errors) {
        errors.push(errorMessages[id]);
      }

      // just picking first error for now. Showing all the erros is a matter of formatting.
      this.setProperty('error', errors[0] || '');
    };
    model.onTransientChange = function () {
      var id = this.id;
      var list = this.list;
      var wasTransient = this.getOldProperty('transient');
      var isTransient = this.getProperty('transient');

      // just turned transient
      if (!wasTransient && isTransient) {

        // this will be filled in when we end the transient state.
        var startingValues = {x: this.x , y: this.y, width: this.width, height: this.height};
        var endingValues   = {x: this.x , y: this.y, width: this.width, height: this.height};

        // keep a record to ending values so that we can update them when we end transient state
        this.transientEndingValues = endingValues;

        list.undoRedo.addTransaction({
          type: list.undoRedo.RESPONSE_TO_CHANGE,
          undo: function () {
            var expression =  list.getItemById(id);

            // set starting values
            for (var prop in startingValues) {
              if (startingValues.hasOwnProperty(prop)) {
                expression.setProperty(prop, startingValues[prop]);
              }
            }
          },
          redo: function () {
            var expression =  list.getItemById(id);

            // set ending values
            for (var prop in endingValues) {
              if (endingValues.hasOwnProperty(prop)) {
                expression.setProperty(prop, endingValues[prop]);
              }
            }
          }
        });
      }

      // just ended being transient
      else if (wasTransient && !isTransient) {
        var lastValues = {x: this.x , y: this.y, width: this.width, height: this.height};

        // update the values stored within the undo/redo transaction
        for (var prop in lastValues) {
          if (lastValues.hasOwnProperty(prop)) {
            this.transientEndingValues[prop] = lastValues[prop];
          }
        }
      }
    };

    model.updateFolder = function () {
      _super.updateFolder.call(this);

      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.guid);
      }
      if (this.folder) {
        this.folder.observe(
          'hidden.' + this.guid,
          this.computeShouldGraph.bind(this)
        );
      }
      this.computeShouldGraph();
    };

    model.createInputHelper = function (prop) {
      var self = this;
      var helper = HelperExpressionObject({hidden: true}, self.list);
      helper.id = helper.guid;
      self.helpers[prop] = helper;

      // update the computed value when helper is computed
      helper.observe('formula', function () {
        var value = NaN, error = '', formula = helper.formula;

        self.computeVariables();

        if (isFinite(formula.constant_value)) {
          value = formula.constant_value;
        } else if (formula.zero_values) {
          value = formula.zero_values[0].val;
        }

        if (isNaN(value)) {
          if (formula.error) {
            error = formula.error;
          } else {
            error = i18n.t('Does not compute to constant.');
          }

          // check if this error has changed
          if (self.errors[prop] !== error) {
            self.errors[prop] = error;
            self.notifyPropertyChange('errors');
          }
        }

        // had an error, but now it's gone
        else if (self.errors.hasOwnProperty(prop)) {
          delete self.errors[prop];
          self.notifyPropertyChange('errors');
        }

        self.setProperty('computed_' + prop, value);
        self.list.triggerRedrawImages();
      });

      function updateLatex () {
        helper.setProperty('latex', self[prop]);
      }

      self.observe(prop, updateLatex);
      updateLatex();
    };

    model.getAliasIdentifier = function (prop) {
      return 'a_{'+ prop + this.guid.split('_').join('') +'}';
    };

    /*
      when the inputs are simple numbers, we must use an alias expression
      to make them slidable.

      The point (1,2) is not slidable.

      This is slidable though:
      a = 1
      b = 2
      (a,b)

      These helpers define an expression in terms of the static value. The expression
      becomes slidable and we can drag the slider. When the slider is dragged, we update
      the original property.
    */
    model.createAliasHelper = function (prop) {
      var self = this;
      var helper = HelperExpressionObject({hidden: true}, self.list);
      helper.id = helper.guid;
      self.helpers['alias_' + prop] = helper;

      // wait for the slider to be created
      helper.observe('slider', function () {
        helper.slider.observe('value', function () {
          self.setProperty(prop, helper.slider.value.toString());
        });
      });

      // update the helper when property changes
      function updateLatex () {
        helper.setProperty('latex', self.getAliasIdentifier(prop) + '=' + self[prop]);
      }

      self.observe(prop, updateLatex);
      updateLatex();
      self.alias_helpers[prop] = helper;
    };

    model.createResizeHelper = function (xPos, yPos) {
      var self = this;
      var helper = HelperExpressionObject({color: '#4F81BD', hidden: true}, self.list);
      helper.id = helper.guid;
      self.helpers[xPos + '_' + yPos] = helper;

      function updateLatex () {
        var widthExpr;
        if (self.alias_helpers.width.is_slidable) {
          widthExpr = self.getAliasIdentifier('width');
        } else {
          widthExpr = self.width;
        }

        var heightExpr;
        if (self.alias_helpers.height.is_slidable) {
          heightExpr = self.getAliasIdentifier('height');
        } else {
          heightExpr = self.height;
        }

        var xOffsetExpr;
        if (xPos === 'left') {
          xOffsetExpr = '-(' + widthExpr + ')/2';
        } else if (xPos === 'right') {
          xOffsetExpr = '+(' + widthExpr + ')/2';
        } else {
          xOffsetExpr = '';
        }

        var yOffsetExpr;
        if (yPos === 'top') {
          yOffsetExpr = '+(' + heightExpr + ')/2';
        } else if (yPos === 'bottom') {
          yOffsetExpr = '-(' + heightExpr + ')/2';
        } else {
          yOffsetExpr = '';
        }

        // makes it so the xCenter is stationary and not draggable.
        var xCenterExpr = '\\left\\{1>0:'+ self.x + '\\right\\}';
        var yCenterExpr = '\\left\\{1>0:'+ self.y + '\\right\\}';

        helper.setProperty('latex','('+ xCenterExpr + xOffsetExpr +','+ yCenterExpr + yOffsetExpr +')');
      }

      function updateConstraint () {
        // don't update constraints while transient
        if (self.transient) return;

        // if width and height aren't simple, don't constrain the resize point
        if (!self.alias_helpers.width.is_slidable || !self.alias_helpers.height.is_slidable) {
          helper.constrainPt = null;
        }

        else {

          var heightToWidthRatio = self.computed_height / self.computed_width;
          var x_middle = self.computed_x;
          var y_middle = self.computed_y;

          helper.constrainPt = function (pt) {
            var x_offset = pt.x - x_middle;
            var y_offset = heightToWidthRatio * x_offset * (xPos === 'left' ? 1 : -1) * (yPos === 'top' ? -1 : 1);
            return {x: pt.x, y: y_middle + y_offset};
          };
        }
      }

      self.alias_helpers.width.observe('is_slidable', updateLatex);
      self.alias_helpers.height.observe('is_slidable', updateLatex);
      self.observe('x y width height', updateLatex);
      updateLatex();

      // only do this if it's a corner point
      if (xPos !== 'middle' && yPos !== 'middle') {
        self.alias_helpers.width.observe('is_slidable', updateConstraint);
        self.alias_helpers.height.observe('is_slidable', updateConstraint);
        self.observe('computed_x computed_y computed_width computed_height transient', updateConstraint);

        updateConstraint();
      }

      self.point_helpers.push(helper);
    };

    model.createMoveHelper = function () {
      var self = this;
      var helper = HelperExpressionObject({color: '#4F81BD', hidden: true}, self.list);
      helper.id = helper.guid;
      self.helpers.move = helper;

      function updateLatex () {
        var xExpr;
        if (self.alias_helpers.x.is_slidable) {
          xExpr = self.getAliasIdentifier('x');
        } else {
          xExpr = self.x;
        }

        var yExpr;
        if (self.alias_helpers.y.is_slidable) {
          yExpr = self.getAliasIdentifier('y');
        } else {
          yExpr = self.y;
        }

        helper.setProperty('latex', '('+ xExpr +','+ yExpr +')');
      }

      self.observe('x y', updateLatex);
      self.alias_helpers.x.observe('is_slidable', updateLatex);
      self.alias_helpers.y.observe('is_slidable', updateLatex);
      updateLatex();
      self.point_helpers.push(helper);
    };

    model.onShowPointsChange = function () {
      var hidden = !this.showPoints;

      // tell each point if it should be hidden
      this.point_helpers.forEach(function (helper){
        helper.setProperty('hidden', hidden);
      });
    };

    model.onVisibilityChange = function () {
      this.computeShouldGraph();
      this.list.triggerRedrawImages();
    };

    model.onAddedToList = function () {
      // add all helpers
      for (var i in this.helpers) {
        var helper = this.helpers[i];
        this.list.addHelperItem(helper);
      }

      this.list.triggerAddImage(this);
    };

    model.onRemovedFromList = function () {
      // remove all helpers
      for (var i in this.helpers) {
        var helper = this.helpers[i];
        this.list.removeHelperItem(helper.id);
      }

      this.list.triggerRemoveImage(this);

      // don't listen for the image to load
      this.imageObj.onload = null;
    };

    model.loadImage = function () {
      var self = this;
      this.imageObj.onload = function () {
        self.setProperty('loaded', true);
      };

      this.imageObj.src = this.image_url;
    };

    model.isEmpty = function() {
      return false;
    };

    model.getState = function() {
      return {
        id: this.id,
        image_url: this.image_url,
        originalFilename: this.originalFilename,
        name: this.name,
        hidden: this.hidden,
        height: this.height,
        width: this.width,
        x: this.x,
        y: this.y,
        opacity: this.opacity,
        type: 'image'
      };
    };

    // Record change for undo-redo
    model.onStateDidChange = function(prop) {

      // Ignore changes while transient
      if (this.transient || this.isUploading) return;

      var oldValue = this.getOldProperty(prop);
      var newValue = this.getProperty(prop);
      if (oldValue === undefined) return;
      var id = this.id;
      var list = this.list;

      list.undoRedo.addTransaction({
        type: list.undoRedo.RESPONSE_TO_CHANGE,
        undo: function() {
          list.getItemById(id).setProperty(prop, oldValue);
        },
        redo: function () {
          list.getItemById(id).setProperty(prop, newValue);
        }
      });

      list.triggerRedrawImages();
    };

  });
  return ImageObject;
});
define('expressions/list',['require','pjs','underscore','underscore_model','./expression','./text','./table','./folder','./image','lib/rounding','bugsnag'],function(require) {
  var P = require('pjs');
  var _ = require('underscore');
  var UnderscoreModel = require('underscore_model');
  var ExpressionObject = require('./expression');
  var TextObject = require('./text');
  var TableObject = require('./table');
  var FolderObject = require('./folder');
  var ImageObject = require('./image');
  var Rounding = require('lib/rounding');
  var Bugsnag = require('bugsnag');

  var ExpressionListModel = P(UnderscoreModel, function (model, _super) {

    model.init = function (undoRedo) {
      _super.init.call(this);
      var self = this;

      this.__items = [];
      this.__itemIds = {};
      this.__helperItemIds = {};
      this.drawOrder = [];

      // an optimization so that we don't compare entire items when changing
      // selectedItem property.
      this.setPropertyComparator('selectedItem', function (a,b) {
        return a === b;
      });

      this.undoRedo = undoRedo;

      // keep stepping sliders ever 40ms
      this.stepHz = 25;
      var stepSliders = function () {
        self.batchEvaluation(function () {
          self.notifyPropertyChange('playStep');
        });

        setTimeout(function () {
          stepSliders();
        }, 1000/self.stepHz);
      };
      stepSliders();
    };

    model.getItemByIndex = function (index) {
      return this.__items[index] || null;
    };

    model.getItemsByIndexRange = function (min, max) {
      min = Math.max(0, min);
      max = Math.min(this.getItemCount()-1 , max);

      var arr=[];
      for (var i=min; i<=max; i++) {
        arr.push(this.getItemByIndex(i));
      }
      return arr;
    };

    model.eachLatex = function (fn) {
      for (var i = 0; i < this.__items.length; i++) {
        this.__items[i].eachLatex(fn);
      }
    };

    model.findAvailableColumnSubscript = function () {
      // Choose an unused subscript for table entries
      var subscripts = [];
      this.eachLatex(function (latex) {
        // Ignore subscripts occuring in regressions.
        // https://github.com/desmosinc/knox/pull/4889#commitcomment-10042422
        if (latex.indexOf('~') !== -1) return;

        var subscriptRe = new RegExp(/_(\d)|_\{(?:\s|\\space)*(\d+)(?:\s|\\space)*\}/g);
        while (true) {
          var match = subscriptRe.exec(latex);
          if (!match) break;
          subscripts.push(parseInt(match[1] || match[2], 10));
        }
      });
      subscripts.sort(function (a, b) { return a - b; });

      var subscript = 1;
      for (var i = 0; i < subscripts.length; i++) {
        if (subscripts[i] === subscript) subscript++;
      }
      return subscript;
    };

    model.onChange = function(changes) {
      var id, expression, formula;

      for (id in changes) {
        if (!changes.hasOwnProperty(id)) continue;

        expression = this.getItemById(id);
        formula = changes[id];
        if (!expression) continue;
        expression.setProperty('loading', false);
        expression.setProperty('formula', formula);
      }
    };

    model.onGraphComputed = function (id, graphData) {
      var item = this.getItemById(id);
      if (!item) return;

      var branchResolved = function (branch) {
        if (!branch.hasOwnProperty('resolved')) return true;
        return branch.resolved;
      };

      var unresolved = !graphData.every(branchResolved);
      item.setProperty('unresolved', unresolved);
    };

    model.updateDrawOrder = function () {
      var drawOrder = [];
      var listItems = _.sortBy(this.__itemIds, function (item) {return item.index});
      listItems = listItems.concat(_.values(this.__helperItemIds));
      _.each(listItems, function(item) {
        if (item.hasOwnProperty('columns')) {
          _.each(item.columns, function (column) {
            drawOrder.push(column.id);
          });
        } else {
          drawOrder.push(item.id);
        }
      });
      this.setProperty('drawOrder', drawOrder);
    };

    model.getItemById = function(id) {
      return this.__itemIds[id] || this.__helperItemIds[id];
    };

    model._insertItemAt = function (index, item) {
      var item_id = String(item.id);
      if (this.__itemIds.hasOwnProperty(item_id)) {
        throw Error('Item with id \'' + item_id + '\' is already in list');
      }

      // add item to list
      this.__itemIds[item_id] = item;
      this.__items.splice(index, 0, item);

      item.index = index;

      if (item.selected) {
        this.handleSelectionChange(item);
      }

      // request that expressions get evaluated
      item.onAddedToList();
    };

    model.handleSelectionChange = function (item) {
      var selected = item.selected;
      if(!selected && this.selectedItem === item){
        this.setProperty('selectedItem', null);
      } else if (selected && !this.selectedItem) {
        this.setProperty('selectedItem', item);
      } else if (selected && this.selectedItem !== item) {
        this.selectedItem.setProperty('selected', false);
        this.setProperty('selectedItem', item);
      }
    };

    model.triggerItemInserted = function (index, item) {};
    model.insertItemAt = function (index, item) {

      // insert item
      this._insertItemAt(index, item);

      // allow view to tap into this
      this.triggerItemInserted(index, item);

      // add to undo/redo
      var self = this;
      var constructor = item.constructor;
      var state = item.getState();
      self.undoRedo.addTransaction({
        type: self.undoRedo.RESPONSE_TO_CHANGE,
        undo: function () {
          // save the state when we remove because some properties may have been filled in after
          // the initial creation. For example, images are created without a width, height, and image_url
          // initially, but then get filled in after the upload is complete.
          state = item.getState();
          self.removeItemAt(index);
        },
        redo: function () {
          self.insertItemAt(index, constructor(state, self));
        }
      });

      this.updateDrawOrder();
    };

    // Helper items are invisible items.
    model.addHelperItem = function (obj) {
      this.__helperItemIds[obj.id] = obj;
      obj.onAddedToList();
      this.updateDrawOrder();
    };

    model.removeHelperItem = function (id) {
      var item = this.__helperItemIds[id];
      if (!item) return;

      item.onRemovedFromList();
      delete this.__helperItemIds[id];
    };

    model.addItem = function (obj) {
      var lastObject = this.getItemByIndex(this.getItemCount() - 1);
      // Replace empty expressions
      if (
        lastObject &&
        //TODO - remove headings after DB updated
        !(lastObject.text || lastObject.columns || lastObject.headings) &&
        lastObject.latex === ''
      ) {
        this.removeItemAt(this.getItemCount()-1); //pop off last
      }

      this.insertItemAt(this.getItemCount(), obj); //push to end
    };

    function extendTableProperties(oldState, newProperties) {
      // copy properties, since they may be passed in by a client through the API.
      newProperties = JSON.parse(JSON.stringify(newProperties));

      if (!oldState.columns || !newProperties.columns) return newProperties;
      for (var i = 0; i < newProperties.columns.length; i++) {
        var oldColumn = oldState.columns[i];
        var newColumn = newProperties.columns[i];
        if (!oldColumn) continue;
        for (var key in oldColumn) {
          if (!oldColumn.hasOwnProperty(key)) continue;
          if (newColumn.hasOwnProperty(key)) continue;
          newColumn[key] = oldColumn[key];
        }
      }
      return newProperties;
    }

    model.updateItemById = function (id, properties) {
      var oldExpression = this.getItemById(id);

      // Special case tables here. For now, changing a table's columns nuke's
      // the entire table.
      if (oldExpression.isTable && properties.columns) {
        // Goal of extendTableProperties here is to preserve properties like color or
        // dragMode on update if they are not explicitly passed in.
        properties = extendTableProperties(oldExpression.getState(), properties);
        this.replaceItemAt(oldExpression.index, this.fromState(properties));
      } else {
        for (var key in properties) {
          if (!properties.hasOwnProperty(key)) continue;
          switch (key) {
            case 'sliderMin':
              oldExpression.slider.setProperty('hardMin', false);
              oldExpression.slider.setProperty('min', properties.sliderMin);
              break;
            case 'sliderMax':
              oldExpression.slider.setProperty('hardMax', false);
              oldExpression.slider.setProperty('max', properties.sliderMax);
              break;
            case 'sliderInterval':
              oldExpression.slider.setProperty('step', properties.sliderInterval);
              break;
            case 'domain':
              oldExpression.domain.setProperty('min', properties.domain.min);
              oldExpression.domain.setProperty('max', properties.domain.max);
              break;
            default:
              oldExpression.setProperty(key, properties[key]);
          }
        }
      }

      this.updateDrawOrder();
    };

    model.replaceItemAt = function (index, newExpression) {
      var self = this;
      this.undoRedo.oneTransaction(function () {
        self.batchEvaluation(function () {
          self.removeItemAt(index);
          self.insertItemAt(index, newExpression);
        });
      });
    };

    model._removeItemAt = function (index) {
      var item = this.__items[index];
      if (!item) {
        Bugsnag.notify("BadListIndex", "list._removeItemAt called with an inconsistent index", {
          index: index,
          actualIndices: this.__items.map(function (elt) {return elt.index})
        });
        return;
      }

      if (this.selectedItem === item) {
        this.setProperty('selectedItem', null);
      }

      var self = this;
      if (item.isFolder) {
        for (var id in item.memberIds) {
          self.removeItemAt(self.getItemById(id).index);
        }
      }

      this.__items.splice(index, 1);

      for (var i = 0; i < this.__items.length; i++) {
        this.__items[i].setProperty('index', i);
      }

      var item_id = String(item.id);
      delete this.__itemIds[item_id];

      item.onRemovedFromList();

      return item;
    };

    model._removeAllItems = function () {
      for (var i=0; i<this.__items.length; i++) {
        this.__items[i].onRemovedFromList();
      }

      for (var id in this.__helperItemIds) {
        if (this.__helperItemIds.hasOwnProperty(id)) {
          this.__helperItemIds[id].onRemovedFromList();
        }
      }

      this.__items = [];
      this.__itemIds = {};
      this.__helperItemIds = {};
      this.setProperty('selectedItem', false);
    };


    model.triggerItemRemoved = function (index, item) {};
    model.removeItemAt = function (index) {
      var self = this;
      self.undoRedo.oneTransaction(function () {

        var item = this._removeItemAt(index);
        if (!item) return;

        // allow a view to tap into this
        this.triggerItemRemoved(index, item);

        var constructor = item.constructor;
        var state = item.getState();
        if (item.folder) item.folder.removeItem(item);

        self.undoRedo.addTransaction({
          type: self.undoRedo.RESPONSE_TO_CHANGE,
          undo: function () {
            var newItem = constructor(state, self);
            self.insertItemAt(index, newItem);
          },
          redo: function () {
            self.removeItemAt(index);
          }
        });
      }.bind(this));

      this.updateDrawOrder();
    };

    model.removeItemById = function (id) {
      var expression = this.getItemById(id);
      if (!expression) return;

      if (expression.isHelperExpression) {
        this.removeHelperItem(expression.id);
      } else {
        this.removeItemAt(expression.index);
      }
    };

    model.triggerItemMoved = function (from, to){};
    model.moveItemTo = function(a, b) {
      var self = this;

      var manipulator = function (from, to) {
        if (from === to) return;

        var len = self.getItemCount();
        var item = self.__items[from];

        // check that the numbers are within range
        if (from < 0 || to < 0 || from >= len || to >= len) return;

        // remove from items
        self.__items.splice(from , 1);

        // insert back in correct spot
        self.__items.splice(to, 0, item);

        // allow a view to tap into this
        self.triggerItemMoved(from, to);

        self.updateDrawOrder();
      };

      // add to undo/redo
      self.undoRedo.addTransaction({
        type: self.undoRedo.CAUSE_OF_CHANGE,
        undo: function () {
          manipulator(b, a);
        },
        redo: function () {
          manipulator(a, b);
        }
      });
    };
    model.moveItemsTo = function(a, b, n){
      var self = this;

      self.undoRedo.oneTransaction(function () {
        var i;
        if (b >= a && b < a+n) return;
        if(a < b){
          for(i = 0; i < n; i++){
            self.moveItemTo(a, b);
          }
        } else{
          for(i = 0; i < n; i++){
            self.moveItemTo(a + i, b + i);
          }
        }
      });
    };

    model.getItemCount = function () {
      return this.__items.length;
    };

    model.getAllSliders = function () {
      var sliders = [];

      for (var i=0; i<this.__items.length; i++) {
        var item = this.__items[i];
        if (item.slider) {
          sliders.push(item.slider);
        }
      }

      return sliders;
    };

    model.getSelected = function() {
      return this.selectedItem;
    };

    model.setSelected = function(i) {
      var nextSelected = i;

      if (typeof i === 'number')  nextSelected = this.getItemByIndex(i);
      if (nextSelected) {
        nextSelected.setProperty('selected', true);
      } else {
        var selected = this.getSelected();
        if (selected) selected.setProperty('selected', false);
      }
    };

    model.onStartMovingPoint = function (pointInfo) {
      var self = this;

      // table movable point
      if (pointInfo.tableInfo) {

        var tableId = pointInfo.tableInfo.tableId;
        var row = pointInfo.tableInfo.rowIndex;
        var colId = pointInfo.tableInfo.columnId;
        var dragX = pointInfo.tableInfo.dragX;
        var dragY = pointInfo.tableInfo.dragY;

        var tableExpr = this.getItemById(tableId);
        if (!tableExpr || !tableExpr.getColumnByIndex(0) || !tableExpr.getColumnById(colId)) return;

        var startingValues = {
          x: tableExpr.getColumnByIndex(0).getValue(row),
          y: tableExpr.getColumnById(colId).getValue(row)
        };

        var endingValues = {
          x: tableExpr.getColumnByIndex(0).getValue(row),
          y: tableExpr.getColumnById(colId).getValue(row)
        };

        var updateCells = function (vals) {
          return function () {
            var tableExpr = self.getItemById(tableId);
            if (!tableExpr) return;

            if (dragX) { tableExpr.getColumnByIndex(0).setValue(row, vals.x)}
            if (dragY) { tableExpr.getColumnById(colId).setValue(row, vals.y)}
            tableExpr.requestParse();
          };
        };

        this.tablePointDragTransaction = self.undoRedo.addTransaction({
          type: self.undoRedo.CAUSE_OF_CHANGE,
          undo: updateCells(startingValues),
          redo: updateCells(endingValues)
        });

        // keep a reference to this value. We will update it on each mouse move
        this.tablePointDragTransaction.endingValues = endingValues;

        this.setSelected(null);
      }

      // normal movable point
      else {
        var movedExpr = this.getItemById(pointInfo.sketch.id);
        var moveIds = movedExpr && movedExpr.formula && movedExpr.formula.move_ids;
        if (!moveIds) return;

        if (movedExpr.isHelperExpression) {
          movedExpr.setProperty('transient', true);
        }

        // combine all changed sliders into a single transaction
        self.undoRedo.oneTransaction(function () {
          for (var i = 0; i < moveIds.length; i++) {
            if (moveIds[i] === undefined) continue;
            var item = self.getItemById(moveIds[i]);
            if (!item) continue;

            item.slider.setProperty('isMoving', true);
            item.slider.setProperty('isPlaying', false);
          }
        });

        // This might not be a failproof conditional in the future, but it works for now.
        // We ordinarily want to deselect expressions when we start dragging a point. But, we
        // don't want to deselect an image when we drag one of it's pull points. The pull points
        // are defined by helper expressions.
        if (!movedExpr.isHelperExpression) {
          this.setSelected(null);
        }
      }
    };

    model.onStopMovingPoint = function (pointInfo) {
      // table movable point
      if (pointInfo.tableInfo) {
        var tableExpr = this.getItemById(pointInfo.tableInfo.tableId);
        if (!tableExpr) return;

        // transaction can't be modified any longer
        this.tablePointDragTransaction = null;
      }

      // normal movable point
      else {
        var movedExpr = this.getItemById(pointInfo.sketch.id);
        var moveIds = movedExpr && movedExpr.formula && movedExpr.formula.move_ids;
        if (!moveIds) return;

        if (movedExpr.isHelperExpression) {
          movedExpr.setProperty('transient', false);
        }

        for (var i = 0; i < moveIds.length; i++) {
          if (moveIds[i] === undefined) continue;
          var item = this.getItemById(moveIds[i]);
          if (!item) continue;

          item.slider.setProperty('isMoving', false);
        }
      }
    };

    model.onMovePoint = function (pointInfo, screen_pt, projection) {
      var tl, br;

      // table movable point
      if (pointInfo.tableInfo) {
        if (!this.tablePointDragTransaction) return;

        // we are going to search within the square pixel around our mouse to
        // find the shortest decimal for x and for y. We get the topLeft and
        // bottomRight (in viewport units, not pixels) of that square pixel here.
        tl = projection.reverse_map_pt({
          x: screen_pt.x - 0.5,
          y: screen_pt.y - 0.5
        });

        br = projection.reverse_map_pt({
          x: screen_pt.x + 0.5,
          y: screen_pt.y + 0.5
        });

        var newValues = this.tablePointDragTransaction.endingValues;
        newValues.x = '' + Rounding.shortestDecimalBetween(tl.x, br.x);
        newValues.y = '' + Rounding.shortestDecimalBetween(tl.y, br.y);

        // apply the transaction again now that the values are updated
        this.tablePointDragTransaction.redo();
      }

      // normal movable point
      else {
        var movedExpr = this.getItemById(pointInfo.sketch.id);
        if (!movedExpr) return;
        var formula = movedExpr.formula;
        if (!formula) return;
        var moveIds = formula.move_ids;
        if (!moveIds) return;
        var moveMatrix = formula.move_matrix;
        if (!moveMatrix) return;

        // constrain your mouse to the viewport
        var screenTL = projection.map_pt({x: projection.viewport.xmin , y: projection.viewport.ymax});
        var screenBR = projection.map_pt({x: projection.viewport.xmax , y: projection.viewport.ymin});
        screen_pt.x = Math.min(Math.max(screen_pt.x, screenTL.x), screenBR.x);
        screen_pt.y = Math.min(Math.max(screen_pt.y, screenTL.y), screenBR.y);

        // further constrain the point if need be
        if (movedExpr.constrainPt) {
          var viewport_pt = projection.reverse_map_pt(screen_pt);
          screen_pt = projection.map_pt(movedExpr.constrainPt(viewport_pt));
        }

        // we are going to search within the square pixel around our mouse to
        // find the shortest decimal for x and for y. We get the topLeft and
        // bottomRight (in viewport units, not pixels) of that square pixel here.
        tl = projection.reverse_map_pt({
          x: screen_pt.x - 0.5,
          y: screen_pt.y - 0.5
        });

        br = projection.reverse_map_pt({
          x: screen_pt.x + 0.5,
          y: screen_pt.y + 0.5
        });

        // TODO - moved this here from somewhere else. Looks like the
        // code that depended on this was written to be a little more
        // general purpose (eg, valueLimits.length is referenced). Not sure
        // what was going on there, but we could simplify things.
        var valueLimits = [{min:tl.x, max:br.x}, {min:tl.y, max:br.y}];

        var min, max, value;
        var expr;

        //Option move matrix to allow offset, factors, and multi-variable
        //dependencies.  Does in-place modification of values array
        //Possibly we should actually use Numeric or something real here
        var self = this;
        self.undoRedo.oneTransaction(function () {
          for (var i = 0; i < moveIds.length; i++) {
            if (moveIds[i] === undefined) continue;
            min = moveMatrix[i][valueLimits.length];
            max = moveMatrix[i][valueLimits.length];
            for (var j = 0; j < valueLimits.length; j++) {
              var k = moveMatrix[i][j];
              min += k * (k > 0 ? valueLimits[j].min : valueLimits[j].max);
              max += k * (k > 0 ? valueLimits[j].max : valueLimits[j].min);
            }

            value = Rounding.shortestDecimalBetween(min, max);

            var moveId = moveIds[i];

            expr = self.getItemById(moveId);
            if (expr && expr.slider) {
              expr.slider.setProperty('value', expr.slider.computeSnappedValue(value));
            }
          }
        });
      }
    };

    model.isEmpty = function() {
      var len = this.getItemCount();
      if ( len === 0) return true;
      if ( len > 1) return false;

      // TODO - maybe this should be this.getItemByIndex(0).isEmpty(). Only
      // problem I see there is that tables aren't ever considered empty. Not
      // sure if we consider expression list empty if it only contains an
      // empty text.
      return this.getItemByIndex(0).latex === '';
    };

    model.getState = function() {
      var list_state = [];
      var len = this.getItemCount();

      for (var i=0; i<len; i++) {
        list_state.push(this.getItemByIndex(i).getState());
      }

      return {list: list_state};
    };

    model.batchEvaluation = function(fn){
      fn();
    };
    model.triggerSetState = function (list) {};
    model.setState = function(state) {
      var i;
      var list_content = [];
      var folders = [];
      var obj;

      for (i=0; i<state.list.length; i++) {
        var expState = state.list[i];

        obj = this.fromState(expState);
        // Start rendering UI as shell until we know if it's on screen
        obj.renderShell = true;

        if (!obj) continue;

        if (obj.isFolder) folders.push(obj);

        list_content.push(obj);
      }

      // remove all items and then add the new ones in a single batch
      var self = this;
      this.batchEvaluation(function () {
        self._removeAllItems();

        for (i=0; i<list_content.length; i++) {
          self._insertItemAt(i, list_content[i]);
        }
      });

      // Tell expressions about their parent folders.
      folders.forEach(function (folder) {
        for (var id in folder.memberIds) {
          // defensive programming. see #3920 where memberIds contained a missing id
          var item = self.getItemById(id);
          if (item) {
            item.setProperty('folder', folder);
          } else {
            delete folder.memberIds[id];
          }
        }
      });

      // allow the view to tap into this
      this.triggerSetState(list_content);

      this.updateDrawOrder();
    };

    var ItemTypes = {
      expression: ExpressionObject,
      table: TableObject,
      text: TextObject,
      folder: FolderObject,
      image: ImageObject,
    };

    // Attach type key to each constructor
    for (var type in ItemTypes) {
      if (!ItemTypes.hasOwnProperty(type)) continue;
      ItemTypes[type].prototype.type = type;
    }

    function inferItemType (obj) {
      if (obj.type) {
        if (ItemTypes.hasOwnProperty(obj.type)) {
          return obj.type;
        } else {
          throw new Error('Invalid item type: \'' + obj.type + '\'.');
        }
      }
      if (obj.text !== undefined) return 'text';
      if (obj.columns !== undefined || obj.headings !== undefined) return 'table';
      return 'expression';
    }

    // Factory method for making a single expression object of the appropriate
    // type from a serialized state.
    model.fromState = function(itemState) {
      return ItemTypes[inferItemType(itemState)](itemState, this);
    };

    model.triggerRemoveExps = function () {};
    model.triggerRemoveExp = function () {};
    model.triggerAddExp = function () {};
  });


  return ExpressionListModel;
});

define('loadcss!css/expression_top_bar', function(){});
define('loadcss!css/expressions', function(){});
define('loadcss!css/expressions.icon', function(){});
define('loadcss!vendor_css/mathquill/mathquill-basic', function(){});
/**
 * MathQuill: http://mathquill.com
 * by Jeanine (jneen@jneen.net) and Han (laughinghan@gmail.com)
 *
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a copy of the MPL
 * was not distributed with this file, You can obtain
 * one at http://mozilla.org/MPL/2.0/.
 */

(function() {

var jQuery = window.jQuery,
  undefined,
  mqCmdId = 'mathquill-command-id',
  mqBlockId = 'mathquill-block-id',
  min = Math.min,
  max = Math.max;

function noop() {}

/**
 * A utility higher-order function that makes defining variadic
 * functions more convenient by letting you essentially define functions
 * with the last argument as a splat, i.e. the last argument "gathers up"
 * remaining arguments to the function:
 *   var doStuff = variadic(function(first, rest) { return rest; });
 *   doStuff(1, 2, 3); // => [2, 3]
 */
var __slice = [].slice;
function variadic(fn) {
  var numFixedArgs = fn.length - 1;
  return function() {
    var args = __slice.call(arguments, 0, numFixedArgs);
    var varArg = __slice.call(arguments, numFixedArgs);
    return fn.apply(this, args.concat([ varArg ]));
  };
}

/**
 * A utility higher-order function that makes combining object-oriented
 * programming and functional programming techniques more convenient:
 * given a method name and any number of arguments to be bound, returns
 * a function that calls it's first argument's method of that name (if
 * it exists) with the bound arguments and any additional arguments that
 * are passed:
 *   var sendMethod = send('method', 1, 2);
 *   var obj = { method: function() { return Array.apply(this, arguments); } };
 *   sendMethod(obj, 3, 4); // => [1, 2, 3, 4]
 *   // or more specifically,
 *   var obj2 = { method: function(one, two, three) { return one*two + three; } };
 *   sendMethod(obj2, 3); // => 5
 *   sendMethod(obj2, 4); // => 6
 */
var send = variadic(function(method, args) {
  return variadic(function(obj, moreArgs) {
    if (method in obj) return obj[method].apply(obj, args.concat(moreArgs));
  });
});

/**
 * A utility higher-order function that creates "implicit iterators"
 * from "generators": given a function that takes in a sole argument,
 * a "yield_" function, that calls "yield_" repeatedly with an object as
 * a sole argument (presumably objects being iterated over), returns
 * a function that calls it's first argument on each of those objects
 * (if the first argument is a function, it is called repeatedly with
 * each object as the first argument, otherwise it is stringified and
 * the method of that name is called on each object (if such a method
 * exists)), passing along all additional arguments:
 *   var a = [
 *     { method: function(list) { list.push(1); } },
 *     { method: function(list) { list.push(2); } },
 *     { method: function(list) { list.push(3); } }
 *   ];
 *   a.each = iterator(function(yield_) {
 *     for (var i in this) yield_(this[i]);
 *   });
 *   var list = [];
 *   a.each('method', list);
 *   list; // => [1, 2, 3]
 *   // Note that the for-in loop will yield 'each', but 'each' maps to
 *   // the function object created by iterator() which does not have a
 *   // .method() method, so that just fails silently.
 */
function iterator(generator) {
  return variadic(function(fn, args) {
    if (typeof fn !== 'function') fn = send(fn);
    var yield_ = function(obj) { return fn.apply(obj, [ obj ].concat(args)); };
    return generator.call(this, yield_);
  });
}

/**
 * sugar to make defining lots of commands easier.
 * TODO: rethink this.
 */
function bind(cons /*, args... */) {
  var args = __slice.call(arguments, 1);
  return function() {
    return cons.apply(this, args);
  };
}

/**
 * a development-only debug method.  This definition and all
 * calls to `pray` will be stripped from the minified
 * build of mathquill.
 *
 * This function must be called by name to be removed
 * at compile time.  Do not define another function
 * with the same name, and only call this function by
 * name.
 */
function pray(message, cond) {
  if (!cond) throw new Error('prayer failed: '+message);
}
var P = (function(prototype, ownProperty, undefined) {
  // helper functions that also help minification
  function isObject(o) { return typeof o === 'object'; }
  function isFunction(f) { return typeof f === 'function'; }

  // used to extend the prototypes of superclasses (which might not
  // have `.Bare`s)
  function SuperclassBare() {}

  return function P(_superclass /* = Object */, definition) {
    // handle the case where no superclass is given
    if (definition === undefined) {
      definition = _superclass;
      _superclass = Object;
    }

    // C is the class to be returned.
    //
    // It delegates to instantiating an instance of `Bare`, so that it
    // will always return a new instance regardless of the calling
    // context.
    //
    //  TODO: the Chrome inspector shows all created objects as `C`
    //        rather than `Object`.  Setting the .name property seems to
    //        have no effect.  Is there a way to override this behavior?
    function C() {
      var self = new Bare;
      if (isFunction(self.init)) self.init.apply(self, arguments);
      return self;
    }

    // C.Bare is a class with a noop constructor.  Its prototype is the
    // same as C, so that instances of C.Bare are also instances of C.
    // New objects can be allocated without initialization by calling
    // `new MyClass.Bare`.
    function Bare() {}
    C.Bare = Bare;

    // Set up the prototype of the new class.
    var _super = SuperclassBare[prototype] = _superclass[prototype];
    var proto = Bare[prototype] = C[prototype] = C.p = new SuperclassBare;

    // other variables, as a minifier optimization
    var extensions;


    // set the constructor property on the prototype, for convenience
    proto.constructor = C;

    C.mixin = function(def) {
      Bare[prototype] = C[prototype] = P(C, def)[prototype];
      return C;
    }

    return (C.open = function(def) {
      extensions = {};

      if (isFunction(def)) {
        // call the defining function with all the arguments you need
        // extensions captures the return value.
        extensions = def.call(C, proto, _super, C, _superclass);
      }
      else if (isObject(def)) {
        // if you passed an object instead, we'll take it
        extensions = def;
      }

      // ...and extend it
      if (isObject(extensions)) {
        for (var ext in extensions) {
          if (ownProperty.call(extensions, ext)) {
            proto[ext] = extensions[ext];
          }
        }
      }

      // if there's no init, we assume we're inheriting a non-pjs class, so
      // we default to applying the superclass's constructor.
      if (!isFunction(proto.init)) {
        proto.init = _superclass;
      }

      return C;
    })(definition);
  }

  // as a minifier optimization, we've closured in a few helper functions
  // and the string 'prototype' (C[p] is much shorter than C.prototype)
})('prototype', ({}).hasOwnProperty);
/*************************************************
 * Base classes of edit tree-related objects
 *
 * Only doing tree node manipulation via these
 * adopt/ disown methods guarantees well-formedness
 * of the tree.
 ************************************************/

// L = 'left'
// R = 'right'
//
// the contract is that they can be used as object properties
// and (-L) === R, and (-R) === L.
var L = MathQuill.L = -1;
var R = MathQuill.R = 1;

function prayDirection(dir) {
  pray('a direction was passed', dir === L || dir === R);
}

/**
 * Tiny extension of jQuery adding directionalized DOM manipulation methods.
 *
 * Funny how Pjs v3 almost just works with `jQuery.fn.init`.
 *
 * jQuery features that don't work on $:
 *   - jQuery.*, like jQuery.ajax, obviously (Pjs doesn't and shouldn't
 *                                            copy constructor properties)
 *
 *   - jQuery(function), the shortcut for `jQuery(document).ready(function)`,
 *     because `jQuery.fn.init` is idiosyncratic and Pjs doing, essentially,
 *     `jQuery.fn.init.apply(this, arguments)` isn't quite right, you need:
 *
 *       _.init = function(s, c) { jQuery.fn.init.call(this, s, c, $(document)); };
 *
 *     if you actually give a shit (really, don't bother),
 *     see https://github.com/jquery/jquery/blob/1.7.2/src/core.js#L889
 *
 *   - jQuery(selector), because jQuery translates that to
 *     `jQuery(document).find(selector)`, but Pjs doesn't (should it?) let
 *     you override the result of a constructor call
 *       + note that because of the jQuery(document) shortcut-ness, there's also
 *         the 3rd-argument-needs-to-be-`$(document)` thing above, but the fix
 *         for that (as can be seen above) is really easy. This problem requires
 *         a way more intrusive fix
 *
 * And that's it! Everything else just magically works because jQuery internally
 * uses `this.constructor()` everywhere (hence calling `$`), but never ever does
 * `this.constructor.find` or anything like that, always doing `jQuery.find`.
 */
var $ = P(jQuery, function(_) {
  _.insDirOf = function(dir, el) {
    return dir === L ?
      this.insertBefore(el.first()) : this.insertAfter(el.last());
  };
  _.insAtDirEnd = function(dir, el) {
    return dir === L ? this.prependTo(el) : this.appendTo(el);
  };
});

var Point = P(function(_) {
  _.parent = 0;
  _[L] = 0;
  _[R] = 0;

  _.init = function(parent, leftward, rightward) {
    this.parent = parent;
    this[L] = leftward;
    this[R] = rightward;
  };

  this.copy = function(pt) {
    return Point(pt.parent, pt[L], pt[R]);
  };
});

/**
 * MathQuill virtual-DOM tree-node abstract base class
 */
var Node = P(function(_) {
  _[L] = 0;
  _[R] = 0
  _.parent = 0;

  var id = 0;
  function uniqueNodeId() { return id += 1; }
  this.byId = {};

  _.init = function() {
    this.id = uniqueNodeId();
    Node.byId[this.id] = this;

    this.ends = {};
    this.ends[L] = 0;
    this.ends[R] = 0;
  };

  _.dispose = function() { delete Node.byId[this.id]; };

  _.toString = function() { return '{{ MathQuill Node #'+this.id+' }}'; };

  _.jQ = $();
  _.jQadd = function(jQ) { return this.jQ = this.jQ.add(jQ); };
  _.jQize = function(jQ) {
    // jQuery-ifies this.html() and links up the .jQ of all corresponding Nodes
    var jQ = $(jQ || this.html());

    function jQadd(el) {
      if (el.getAttribute) {
        var cmdId = el.getAttribute('mathquill-command-id');
        var blockId = el.getAttribute('mathquill-block-id');
        if (cmdId) Node.byId[cmdId].jQadd(el);
        if (blockId) Node.byId[blockId].jQadd(el);
      }
      for (el = el.firstChild; el; el = el.nextSibling) {
        jQadd(el);
      }
    }

    for (var i = 0; i < jQ.length; i += 1) jQadd(jQ[i]);
    return jQ;
  };

  _.createDir = function(dir, cursor) {
    prayDirection(dir);
    var node = this;
    node.jQize();
    node.jQ.insDirOf(dir, cursor.jQ);
    cursor[dir] = node.adopt(cursor.parent, cursor[L], cursor[R]);
    return node;
  };
  _.createLeftOf = function(el) { return this.createDir(L, el); };

  _.selectChildren = function(leftEnd, rightEnd) {
    return Selection(leftEnd, rightEnd);
  };

  _.bubble = iterator(function(yield_) {
    for (var ancestor = this; ancestor; ancestor = ancestor.parent) {
      var result = yield_(ancestor);
      if (result === false) break;
    }

    return this;
  });

  _.postOrder = iterator(function(yield_) {
    (function recurse(descendant) {
      descendant.eachChild(recurse);
      yield_(descendant);
    })(this);

    return this;
  });

  _.isEmpty = function() {
    return this.ends[L] === 0 && this.ends[R] === 0;
  };

  _.children = function() {
    return Fragment(this.ends[L], this.ends[R]);
  };

  _.eachChild = function() {
    var children = this.children();
    children.each.apply(children, arguments);
    return this;
  };

  _.foldChildren = function(fold, fn) {
    return this.children().fold(fold, fn);
  };

  _.withDirAdopt = function(dir, parent, withDir, oppDir) {
    Fragment(this, this).withDirAdopt(dir, parent, withDir, oppDir);
    return this;
  };

  _.adopt = function(parent, leftward, rightward) {
    Fragment(this, this).adopt(parent, leftward, rightward);
    return this;
  };

  _.disown = function() {
    Fragment(this, this).disown();
    return this;
  };

  _.remove = function() {
    this.jQ.remove();
    this.postOrder('dispose');
    return this.disown();
  };
});

function prayWellFormed(parent, leftward, rightward) {
  pray('a parent is always present', parent);
  pray('leftward is properly set up', (function() {
    // either it's empty and `rightward` is the left end child (possibly empty)
    if (!leftward) return parent.ends[L] === rightward;

    // or it's there and its [R] and .parent are properly set up
    return leftward[R] === rightward && leftward.parent === parent;
  })());

  pray('rightward is properly set up', (function() {
    // either it's empty and `leftward` is the right end child (possibly empty)
    if (!rightward) return parent.ends[R] === leftward;

    // or it's there and its [L] and .parent are properly set up
    return rightward[L] === leftward && rightward.parent === parent;
  })());
}


/**
 * An entity outside the virtual tree with one-way pointers (so it's only a
 * "view" of part of the tree, not an actual node/entity in the tree) that
 * delimits a doubly-linked list of sibling nodes.
 * It's like a fanfic love-child between HTML DOM DocumentFragment and the Range
 * classes: like DocumentFragment, its contents must be sibling nodes
 * (unlike Range, whose contents are arbitrary contiguous pieces of subtrees),
 * but like Range, it has only one-way pointers to its contents, its contents
 * have no reference to it and in fact may still be in the visible tree (unlike
 * DocumentFragment, whose contents must be detached from the visible tree
 * and have their 'parent' pointers set to the DocumentFragment).
 */
var Fragment = P(function(_) {
  _.init = function(withDir, oppDir, dir) {
    if (dir === undefined) dir = L;
    prayDirection(dir);

    pray('no half-empty fragments', !withDir === !oppDir);

    this.ends = {};

    if (!withDir) return;

    pray('withDir is passed to Fragment', withDir instanceof Node);
    pray('oppDir is passed to Fragment', oppDir instanceof Node);
    pray('withDir and oppDir have the same parent',
         withDir.parent === oppDir.parent);

    this.ends[dir] = withDir;
    this.ends[-dir] = oppDir;

    // To build the jquery collection for a fragment, accumulate elements
    // into an array and then call jQ.add once on the result. jQ.add sorts the
    // collection according to document order each time it is called, so
    // building a collection by folding jQ.add directly takes more than
    // quadratic time in the number of elements.
    //
    // https://github.com/jquery/jquery/blob/2.1.4/src/traversing.js#L112
    var accum = this.fold([], function (accum, el) {
      Array.prototype.push.apply(accum, el.jQ.get());
      return accum;
    });

    this.jQ = this.jQ.add(accum);
  };
  _.jQ = $();

  // like Cursor::withDirInsertAt(dir, parent, withDir, oppDir)
  _.withDirAdopt = function(dir, parent, withDir, oppDir) {
    return (dir === L ? this.adopt(parent, withDir, oppDir)
                      : this.adopt(parent, oppDir, withDir));
  };
  _.adopt = function(parent, leftward, rightward) {
    prayWellFormed(parent, leftward, rightward);

    var self = this;
    self.disowned = false;

    var leftEnd = self.ends[L];
    if (!leftEnd) return this;

    var rightEnd = self.ends[R];

    if (leftward) {
      // NB: this is handled in the ::each() block
      // leftward[R] = leftEnd
    } else {
      parent.ends[L] = leftEnd;
    }

    if (rightward) {
      rightward[L] = rightEnd;
    } else {
      parent.ends[R] = rightEnd;
    }

    self.ends[R][R] = rightward;

    self.each(function(el) {
      el[L] = leftward;
      el.parent = parent;
      if (leftward) leftward[R] = el;

      leftward = el;
    });

    return self;
  };

  _.disown = function() {
    var self = this;
    var leftEnd = self.ends[L];

    // guard for empty and already-disowned fragments
    if (!leftEnd || self.disowned) return self;

    self.disowned = true;

    var rightEnd = self.ends[R]
    var parent = leftEnd.parent;

    prayWellFormed(parent, leftEnd[L], leftEnd);
    prayWellFormed(parent, rightEnd, rightEnd[R]);

    if (leftEnd[L]) {
      leftEnd[L][R] = rightEnd[R];
    } else {
      parent.ends[L] = rightEnd[R];
    }

    if (rightEnd[R]) {
      rightEnd[R][L] = leftEnd[L];
    } else {
      parent.ends[R] = leftEnd[L];
    }

    return self;
  };

  _.remove = function() {
    this.jQ.remove();
    this.each('postOrder', 'dispose');
    return this.disown();
  };

  _.each = iterator(function(yield_) {
    var self = this;
    var el = self.ends[L];
    if (!el) return self;

    for (; el !== self.ends[R][R]; el = el[R]) {
      var result = yield_(el);
      if (result === false) break;
    }

    return self;
  });

  _.fold = function(fold, fn) {
    this.each(function(el) {
      fold = fn.call(this, fold, el);
    });

    return fold;
  };
});


/**
 * Registry of LaTeX commands and commands created when typing
 * a single character.
 *
 * (Commands are all subclasses of Node.)
 */
var LatexCmds = {}, CharCmds = {};
/********************************************
 * Cursor and Selection "singleton" classes
 *******************************************/

/* The main thing that manipulates the Math DOM. Makes sure to manipulate the
HTML DOM to match. */

/* Sort of singletons, since there should only be one per editable math
textbox, but any one HTML document can contain many such textboxes, so any one
JS environment could actually contain many instances. */

//A fake cursor in the fake textbox that the math is rendered in.
var Cursor = P(Point, function(_) {
  _.init = function(initParent, options) {
    this.parent = initParent;
    this.options = options;

    var jQ = this.jQ = this._jQ = $('<span class="mq-cursor">&#8203;</span>');
    //closured for setInterval
    this.blink = function(){ jQ.toggleClass('mq-blink'); };

    this.upDownCache = {};
  };

  _.show = function() {
    this.jQ = this._jQ.removeClass('mq-blink');
    if ('intervalId' in this) //already was shown, just restart interval
      clearInterval(this.intervalId);
    else { //was hidden and detached, insert this.jQ back into HTML DOM
      if (this[R]) {
        if (this.selection && this.selection.ends[L][L] === this[L])
          this.jQ.insertBefore(this.selection.jQ);
        else
          this.jQ.insertBefore(this[R].jQ.first());
      }
      else
        this.jQ.appendTo(this.parent.jQ);
      this.parent.focus();
    }
    this.intervalId = setInterval(this.blink, 500);
    return this;
  };
  _.hide = function() {
    if ('intervalId' in this)
      clearInterval(this.intervalId);
    delete this.intervalId;
    this.jQ.detach();
    this.jQ = $();
    return this;
  };

  _.withDirInsertAt = function(dir, parent, withDir, oppDir) {
    if (parent !== this.parent && this.parent.blur) this.parent.blur();
    this.parent = parent;
    this[dir] = withDir;
    this[-dir] = oppDir;
  };
  _.insDirOf = function(dir, el) {
    prayDirection(dir);
    this.withDirInsertAt(dir, el.parent, el[dir], el);
    this.parent.jQ.addClass('mq-hasCursor');
    this.jQ.insDirOf(dir, el.jQ);
    return this;
  };
  _.insLeftOf = function(el) { return this.insDirOf(L, el); };
  _.insRightOf = function(el) { return this.insDirOf(R, el); };

  _.insAtDirEnd = function(dir, el) {
    prayDirection(dir);
    this.withDirInsertAt(dir, el, 0, el.ends[dir]);
    this.jQ.insAtDirEnd(dir, el.jQ);
    el.focus();
    return this;
  };
  _.insAtLeftEnd = function(el) { return this.insAtDirEnd(L, el); };
  _.insAtRightEnd = function(el) { return this.insAtDirEnd(R, el); };

  /**
   * jump up or down from one block Node to another:
   * - cache the current Point in the node we're jumping from
   * - check if there's a Point in it cached for the node we're jumping to
   *   + if so put the cursor there,
   *   + if not seek a position in the node that is horizontally closest to
   *     the cursor's current position
   */
  _.jumpUpDown = function(from, to) {
    var self = this;
    self.upDownCache[from.id] = Point.copy(self);
    var cached = self.upDownCache[to.id];
    if (cached) {
      cached[R] ? self.insLeftOf(cached[R]) : self.insAtRightEnd(cached.parent);
    }
    else {
      var pageX = self.offset().left;
      to.seek(pageX, self);
    }
  };
  _.offset = function() {
    //in Opera 11.62, .getBoundingClientRect() and hence jQuery::offset()
    //returns all 0's on inline elements with negative margin-right (like
    //the cursor) at the end of their parent, so temporarily remove the
    //negative margin-right when calling jQuery::offset()
    //Opera bug DSK-360043
    //http://bugs.jquery.com/ticket/11523
    //https://github.com/jquery/jquery/pull/717
    var self = this, offset = self.jQ.removeClass('mq-cursor').offset();
    self.jQ.addClass('mq-cursor');
    return offset;
  }
  _.unwrapGramp = function() {
    var gramp = this.parent.parent;
    var greatgramp = gramp.parent;
    var rightward = gramp[R];
    var cursor = this;

    var leftward = gramp[L];
    gramp.disown().eachChild(function(uncle) {
      if (uncle.isEmpty()) return;

      uncle.children()
        .adopt(greatgramp, leftward, rightward)
        .each(function(cousin) {
          cousin.jQ.insertBefore(gramp.jQ.first());
        })
      ;

      leftward = uncle.ends[R];
    });

    if (!this[R]) { //then find something to be rightward to insLeftOf
      if (this[L])
        this[R] = this[L][R];
      else {
        while (!this[R]) {
          this.parent = this.parent[R];
          if (this.parent)
            this[R] = this.parent.ends[L];
          else {
            this[R] = gramp[R];
            this.parent = greatgramp;
            break;
          }
        }
      }
    }
    if (this[R])
      this.insLeftOf(this[R]);
    else
      this.insAtRightEnd(greatgramp);

    gramp.jQ.remove();

    if (gramp[L].siblingDeleted) gramp[L].siblingDeleted(cursor.options, R);
    if (gramp[R].siblingDeleted) gramp[R].siblingDeleted(cursor.options, L);
  };
  _.startSelection = function() {
    var anticursor = this.anticursor = Point.copy(this);
    var ancestors = anticursor.ancestors = {}; // a map from each ancestor of
      // the anticursor, to its child that is also an ancestor; in other words,
      // the anticursor's ancestor chain in reverse order
    for (var ancestor = anticursor; ancestor.parent; ancestor = ancestor.parent) {
      ancestors[ancestor.parent.id] = ancestor;
    }
  };
  _.endSelection = function() {
    delete this.anticursor;
  };
  _.select = function() {
    var anticursor = this.anticursor;
    if (this[L] === anticursor[L] && this.parent === anticursor.parent) return false;

    // Find the lowest common ancestor (`lca`), and the ancestor of the cursor
    // whose parent is the LCA (which'll be an end of the selection fragment).
    for (var ancestor = this; ancestor.parent; ancestor = ancestor.parent) {
      if (ancestor.parent.id in anticursor.ancestors) {
        var lca = ancestor.parent;
        break;
      }
    }
    pray('cursor and anticursor in the same tree', lca);
    // The cursor and the anticursor should be in the same tree, because the
    // mousemove handler attached to the document, unlike the one attached to
    // the root HTML DOM element, doesn't try to get the math tree node of the
    // mousemove target, and Cursor::seek() based solely on coordinates stays
    // within the tree of `this` cursor's root.

    // The other end of the selection fragment, the ancestor of the anticursor
    // whose parent is the LCA.
    var antiAncestor = anticursor.ancestors[lca.id];

    // Now we have two either Nodes or Points, guaranteed to have a common
    // parent and guaranteed that if both are Points, they are not the same,
    // and we have to figure out which is the left end and which the right end
    // of the selection.
    var leftEnd, rightEnd, dir = R;

    // This is an extremely subtle algorithm.
    // As a special case, `ancestor` could be a Point and `antiAncestor` a Node
    // immediately to `ancestor`'s left.
    // In all other cases,
    // - both Nodes
    // - `ancestor` a Point and `antiAncestor` a Node
    // - `ancestor` a Node and `antiAncestor` a Point
    // `antiAncestor[R] === rightward[R]` for some `rightward` that is
    // `ancestor` or to its right, if and only if `antiAncestor` is to
    // the right of `ancestor`.
    if (ancestor[L] !== antiAncestor) {
      for (var rightward = ancestor; rightward; rightward = rightward[R]) {
        if (rightward[R] === antiAncestor[R]) {
          dir = L;
          leftEnd = ancestor;
          rightEnd = antiAncestor;
          break;
        }
      }
    }
    if (dir === R) {
      leftEnd = antiAncestor;
      rightEnd = ancestor;
    }

    // only want to select Nodes up to Points, can't select Points themselves
    if (leftEnd instanceof Point) leftEnd = leftEnd[R];
    if (rightEnd instanceof Point) rightEnd = rightEnd[L];

    this.hide().selection = lca.selectChildren(leftEnd, rightEnd);
    this.insDirOf(dir, this.selection.ends[dir]);
    this.selectionChanged();
    return true;
  };

  _.clearSelection = function() {
    if (this.selection) {
      this.selection.clear();
      delete this.selection;
      this.selectionChanged();
    }
    return this;
  };
  _.deleteSelection = function() {
    if (!this.selection) return;

    this[L] = this.selection.ends[L][L];
    this[R] = this.selection.ends[R][R];
    this.selection.remove();
    this.selectionChanged();
    delete this.selection;
  };
  _.replaceSelection = function() {
    var seln = this.selection;
    if (seln) {
      this[L] = seln.ends[L][L];
      this[R] = seln.ends[R][R];
      delete this.selection;
    }
    return seln;
  };
});

var Selection = P(Fragment, function(_, super_) {
  _.init = function() {
    super_.init.apply(this, arguments);
    this.jQ = this.jQ.wrapAll('<span class="mq-selection"></span>').parent();
      //can't do wrapAll(this.jQ = $(...)) because wrapAll will clone it
  };
  _.adopt = function() {
    this.jQ.replaceWith(this.jQ = this.jQ.children());
    return super_.adopt.apply(this, arguments);
  };
  _.clear = function() {
    // using the browser's native .childNodes property so that we
    // don't discard text nodes.
    this.jQ.replaceWith(this.jQ[0].childNodes);
    return this;
  };
  _.join = function(methodName) {
    return this.fold('', function(fold, child) {
      return fold + child[methodName]();
    });
  };
});
/*********************************************
 * Controller for a MathQuill instance,
 * on which services are registered with
 *
 *   Controller.open(function(_) { ... });
 *
 ********************************************/

var Controller = P(function(_) {
  _.init = function(API, root, container) {
    this.API = API;
    this.root = root;
    this.container = container;

    API.__controller = root.controller = this;

    this.cursor = root.cursor = Cursor(root, API.__options);
    // TODO: stop depending on root.cursor, and rm it
  };

  _.handle = function(name, dir) {
    var handlers = this.API.__options.handlers;
    if (handlers && handlers[name]) {
      if (dir === L || dir === R) handlers[name](dir, this.API);
      else handlers[name](this.API);
    }
  };

  var notifyees = [];
  this.onNotify = function(f) { notifyees.push(f); };
  _.notify = function() {
    for (var i = 0; i < notifyees.length; i += 1) {
      notifyees[i].apply(this.cursor, arguments);
    }
    return this;
  };
});
/*********************************************************
 * The publicly exposed MathQuill API.
 ********************************************************/

/**
 * Global function that takes an HTML element and, if it's the root HTML element
 * of a static math or math or text field, returns its API object (if not, null).
 * Identity of API object guaranteed if called multiple times, i.e.:
 *
 *   var mathfield = MathQuill.MathField(mathFieldSpan);
 *   assert(MathQuill(mathFieldSpan) === mathfield);
 *   assert(MathQuill(mathFieldSpan) === MathQuill(mathFieldSpan));
 *
 */
function MathQuill(el) {
  if (!el || !el.nodeType) return null; // check that `el` is a HTML element, using the
    // same technique as jQuery: https://github.com/jquery/jquery/blob/679536ee4b7a92ae64a5f58d90e9cc38c001e807/src/core/init.js#L92
  var blockId = $(el).children('.mq-root-block').attr(mqBlockId);
  return blockId ? Node.byId[blockId].controller.API : null;
};

MathQuill.noConflict = function() {
  window.MathQuill = origMathQuill;
  return MathQuill;
};
var origMathQuill = window.MathQuill;
window.MathQuill = MathQuill;

/**
 * Returns function (to be publicly exported) that MathQuill-ifies an HTML
 * element and returns an API object. If the element had already been MathQuill-
 * ified into the same kind, return the original API object (if different kind
 * or not an HTML element, null).
 */
function APIFnFor(APIClass) {
  function APIFn(el, opts) {
    var mq = MathQuill(el);
    if (mq instanceof APIClass || !el || !el.nodeType) return mq;
    return APIClass($(el), opts);
  }
  APIFn.prototype = APIClass.prototype;
  return APIFn;
}

var Options = P(), optionProcessors = {};
MathQuill.__options = Options.p;

var AbstractMathQuill = P(function(_) {
  _.init = function() { throw "wtf don't call me, I'm 'abstract'"; };
  _.initRoot = function(root, el, opts) {
    this.__options = Options();
    this.config(opts);

    var ctrlr = Controller(this, root, el);
    ctrlr.createTextarea();

    var contents = el.contents().detach();
    root.jQ =
      $('<span class="mq-root-block"/>').attr(mqBlockId, root.id).appendTo(el);
    this.latex(contents.text());

    this.revert = function() {
      return el.empty().unbind('.mathquill')
      .removeClass('mq-editable-field mq-math-mode mq-text-mode')
      .append(contents);
    };
  };
  _.config =
  MathQuill.config = function(opts) {
    for (var opt in opts) if (opts.hasOwnProperty(opt)) {
      var optVal = opts[opt], processor = optionProcessors[opt];
      this.__options[opt] = (processor ? processor(optVal) : optVal);
    }
    return this;
  };
  _.el = function() { return this.__controller.container[0]; };
  _.text = function() { return this.__controller.exportText(); };
  _.latex = function(latex) {
    if (arguments.length > 0) {
      this.__controller.renderLatexMath(latex);
      if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();
      return this;
    }
    return this.__controller.exportLatex();
  };
  _.html = function() {
    return this.__controller.root.jQ.html()
      .replace(/ mathquill-(?:command|block)-id="?\d+"?/g, '')
      .replace(/<span class="?mq-cursor( mq-blink)?"?>.?<\/span>/i, '')
      .replace(/ mq-hasCursor|mq-hasCursor ?/, '')
      .replace(/ class=(""|(?= |>))/g, '');
  };
  _.reflow = function() {
    this.__controller.root.postOrder('reflow');
    return this;
  };
  _.fastClick = function(target, clientX, clientY) {
    var ctrlr = this.__controller, root = ctrlr.root;
    var el = document.elementFromPoint(clientX, clientY);
    if (!jQuery.contains(root.jQ[0], el)) el = root.jQ[0];
    ctrlr.seek($(el), clientX + pageXOffset, clientY + pageYOffset);
  };
  _.ignoreNextMousedown = function(fn) {
    this.__controller.cursor.options.ignoreNextMousedown = fn;
  };
});
MathQuill.prototype = AbstractMathQuill.prototype;

MathQuill.StaticMath = APIFnFor(P(AbstractMathQuill, function(_, super_) {
  _.init = function(el) {
    this.initRoot(MathBlock(), el.addClass('mq-math-mode'));
    this.__controller.delegateMouseEvents();
    this.__controller.staticMathTextareaEvents();
  };
  _.latex = function() {
    var returned = super_.latex.apply(this, arguments);
    if (arguments.length > 0) {
      this.__controller.root.postOrder('registerInnerField', this.innerFields = []);
    }
    return returned;
  };
}));

var EditableField = MathQuill.EditableField = P(AbstractMathQuill, function(_) {
  _.initRootAndEvents = function(root, el, opts) {
    this.initRoot(root, el, opts);
    this.__controller.editable = true;
    this.__controller.delegateMouseEvents();
    this.__controller.editablesTextareaEvents();
  };
  _.focus = function() { this.__controller.textarea.focus(); return this; };
  _.blur = function() { this.__controller.textarea.blur(); return this; };
  _.write = function(latex) {
    this.__controller.writeLatex(latex);
    if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();
    return this;
  };
  _.cmd = function(cmd) {
    var ctrlr = this.__controller.notify(), cursor = ctrlr.cursor;
    if (/^\\[a-z]+$/i.test(cmd)) {
      cmd = cmd.slice(1);
      var klass = LatexCmds[cmd];
      if (klass) {
        cmd = klass(cmd);
        if (cursor.selection) cmd.replaces(cursor.replaceSelection());
        cmd.createLeftOf(cursor.show());
      }
      else /* TODO: API needs better error reporting */;
    }
    else cursor.parent.write(cursor, cmd);
    if (ctrlr.blurred) cursor.hide().parent.blur();
    return this;
  };
  _.select = function() {
    var ctrlr = this.__controller;
    ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);
    while (ctrlr.cursor[L]) ctrlr.selectLeft();
    return this;
  };
  _.clearSelection = function() {
    this.__controller.cursor.clearSelection();
    return this;
  };

  _.moveToDirEnd = function(dir) {
    this.__controller.notify('move').cursor.insAtDirEnd(dir, this.__controller.root);
    return this;
  };
  _.moveToLeftEnd = function() { return this.moveToDirEnd(L); };
  _.moveToRightEnd = function() { return this.moveToDirEnd(R); };

  _.keystroke = function(keys) {
    var keys = keys.replace(/^\s+|\s+$/g, '').split(/\s+/);
    for (var i = 0; i < keys.length; i += 1) {
      this.__controller.keystroke(keys[i], { preventDefault: noop });
    }
    return this;
  };
  _.typedText = function(text) {
    for (var i = 0; i < text.length; i += 1) this.__controller.typedText(text.charAt(i));
    return this;
  };
});

function RootBlockMixin(_) {
  var names = 'moveOutOf deleteOutOf selectOutOf upOutOf downOutOf reflow'.split(' ');
  for (var i = 0; i < names.length; i += 1) (function(name) {
    _[name] = function(dir) { this.controller.handle(name, dir); };
  }(names[i]));
}
var Parser = P(function(_, super_, Parser) {
  // The Parser object is a wrapper for a parser function.
  // Externally, you use one to parse a string by calling
  //   var result = SomeParser.parse('Me Me Me! Parse Me!');
  // You should never call the constructor, rather you should
  // construct your Parser from the base parsers and the
  // parser combinator methods.

  function parseError(stream, message) {
    if (stream) {
      stream = "'"+stream+"'";
    }
    else {
      stream = 'EOF';
    }

    throw 'Parse Error: '+message+' at '+stream;
  }

  _.init = function(body) { this._ = body; };

  _.parse = function(stream) {
    return this.skip(eof)._(''+stream, success, parseError);

    function success(stream, result) { return result; }
  };

  // -*- primitive combinators -*- //
  _.or = function(alternative) {
    pray('or is passed a parser', alternative instanceof Parser);

    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      return self._(stream, onSuccess, failure);

      function failure(newStream) {
        return alternative._(stream, onSuccess, onFailure);
      }
    });
  };

  _.then = function(next) {
    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      return self._(stream, success, onFailure);

      function success(newStream, result) {
        var nextParser = (next instanceof Parser ? next : next(result));
        pray('a parser is returned', nextParser instanceof Parser);
        return nextParser._(newStream, onSuccess, onFailure);
      }
    });
  };

  // -*- optimized iterative combinators -*- //
  _.many = function() {
    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      var xs = [];
      while (self._(stream, success, failure));
      return onSuccess(stream, xs);

      function success(newStream, x) {
        stream = newStream;
        xs.push(x);
        return true;
      }

      function failure() {
        return false;
      }
    });
  };

  _.times = function(min, max) {
    if (arguments.length < 2) max = min;
    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      var xs = [];
      var result = true;
      var failure;

      for (var i = 0; i < min; i += 1) {
        result = self._(stream, success, firstFailure);
        if (!result) return onFailure(stream, failure);
      }

      for (; i < max && result; i += 1) {
        result = self._(stream, success, secondFailure);
      }

      return onSuccess(stream, xs);

      function success(newStream, x) {
        xs.push(x);
        stream = newStream;
        return true;
      }

      function firstFailure(newStream, msg) {
        failure = msg;
        stream = newStream;
        return false;
      }

      function secondFailure(newStream, msg) {
        return false;
      }
    });
  };

  // -*- higher-level combinators -*- //
  _.result = function(res) { return this.then(succeed(res)); };
  _.atMost = function(n) { return this.times(0, n); };
  _.atLeast = function(n) {
    var self = this;
    return self.times(n).then(function(start) {
      return self.many().map(function(end) {
        return start.concat(end);
      });
    });
  };

  _.map = function(fn) {
    return this.then(function(result) { return succeed(fn(result)); });
  };

  _.skip = function(two) {
    return this.then(function(result) { return two.result(result); });
  };

  // -*- primitive parsers -*- //
  var string = this.string = function(str) {
    var len = str.length;
    var expected = "expected '"+str+"'";

    return Parser(function(stream, onSuccess, onFailure) {
      var head = stream.slice(0, len);

      if (head === str) {
        return onSuccess(stream.slice(len), head);
      }
      else {
        return onFailure(stream, expected);
      }
    });
  };

  var regex = this.regex = function(re) {
    pray('regexp parser is anchored', re.toString().charAt(1) === '^');

    var expected = 'expected '+re;

    return Parser(function(stream, onSuccess, onFailure) {
      var match = re.exec(stream);

      if (match) {
        var result = match[0];
        return onSuccess(stream.slice(result.length), result);
      }
      else {
        return onFailure(stream, expected);
      }
    });
  };

  var succeed = Parser.succeed = function(result) {
    return Parser(function(stream, onSuccess) {
      return onSuccess(stream, result);
    });
  };

  var fail = Parser.fail = function(msg) {
    return Parser(function(stream, _, onFailure) {
      return onFailure(stream, msg);
    });
  };

  var letter = Parser.letter = regex(/^[a-z]/i);
  var letters = Parser.letters = regex(/^[a-z]*/i);
  var digit = Parser.digit = regex(/^[0-9]/);
  var digits = Parser.digits = regex(/^[0-9]*/);
  var whitespace = Parser.whitespace = regex(/^\s+/);
  var optWhitespace = Parser.optWhitespace = regex(/^\s*/);

  var any = Parser.any = Parser(function(stream, onSuccess, onFailure) {
    if (!stream) return onFailure(stream, 'expected any character');

    return onSuccess(stream.slice(1), stream.charAt(0));
  });

  var all = Parser.all = Parser(function(stream, onSuccess, onFailure) {
    return onSuccess('', stream);
  });

  var eof = Parser.eof = Parser(function(stream, onSuccess, onFailure) {
    if (stream) return onFailure(stream, 'expected EOF');

    return onSuccess(stream, stream);
  });
});
/*************************************************
 * Sane Keyboard Events Shim
 *
 * An abstraction layer wrapping the textarea in
 * an object with methods to manipulate and listen
 * to events on, that hides all the nasty cross-
 * browser incompatibilities behind a uniform API.
 *
 * Design goal: This is a *HARD* internal
 * abstraction barrier. Cross-browser
 * inconsistencies are not allowed to leak through
 * and be dealt with by event handlers. All future
 * cross-browser issues that arise must be dealt
 * with here, and if necessary, the API updated.
 *
 * Organization:
 * - key values map and stringify()
 * - saneKeyboardEvents()
 *    + defer() and flush()
 *    + event handler logic
 *    + attach event handlers and export methods
 ************************************************/

var saneKeyboardEvents = (function() {
  // The following [key values][1] map was compiled from the
  // [DOM3 Events appendix section on key codes][2] and
  // [a widely cited report on cross-browser tests of key codes][3],
  // except for 10: 'Enter', which I've empirically observed in Safari on iOS
  // and doesn't appear to conflict with any other known key codes.
  //
  // [1]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#keys-keyvalues
  // [2]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#fixed-virtual-key-codes
  // [3]: http://unixpapa.com/js/key.html
  var KEY_VALUES = {
    8: 'Backspace',
    9: 'Tab',

    10: 'Enter', // for Safari on iOS

    13: 'Enter',

    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    20: 'CapsLock',

    27: 'Esc',

    32: 'Spacebar',

    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',

    37: 'Left',
    38: 'Up',
    39: 'Right',
    40: 'Down',

    45: 'Insert',

    46: 'Del',

    144: 'NumLock'
  };

  // To the extent possible, create a normalized string representation
  // of the key combo (i.e., key code and modifier keys).
  function stringify(evt) {
    var which = evt.which || evt.keyCode;
    var keyVal = KEY_VALUES[which];
    var key;
    var modifiers = [];

    if (evt.ctrlKey) modifiers.push('Ctrl');
    if (evt.originalEvent && evt.originalEvent.metaKey) modifiers.push('Meta');
    if (evt.altKey) modifiers.push('Alt');
    if (evt.shiftKey) modifiers.push('Shift');

    key = keyVal || String.fromCharCode(which);

    if (!modifiers.length && !keyVal) return key;

    modifiers.push(key);
    return modifiers.join('-');
  }

  // create a keyboard events shim that calls callbacks at useful times
  // and exports useful public methods
  return function saneKeyboardEvents(el, handlers) {
    var keydown = null;
    var keypress = null;

    var textarea = jQuery(el);
    var target = jQuery(handlers.container || textarea);

    // checkTextareaFor() is called after keypress or paste events to
    // say "Hey, I think something was just typed" or "pasted" (resp.),
    // so that at all subsequent opportune times (next event or timeout),
    // will check for expected typed or pasted text.
    // Need to check repeatedly because #135: in Safari 5.1 (at least),
    // after selecting something and then typing, the textarea is
    // incorrectly reported as selected during the input event (but not
    // subsequently).
    var checkTextarea = noop, timeoutId;
    function checkTextareaFor(checker) {
      checkTextarea = checker;
      clearTimeout(timeoutId);
      timeoutId = setTimeout(checker);
    }
    target.bind('keydown keypress input keyup focusout paste', function() { checkTextarea(); });


    // -*- public methods -*- //
    function select(text) {
      // check textarea at least once/one last time before munging (so
      // no race condition if selection happens after keypress/paste but
      // before checkTextarea), then never again ('cos it's been munged)
      checkTextarea();
      checkTextarea = noop;
      clearTimeout(timeoutId);

      textarea.val(text);
      if (text && textarea[0].select) textarea[0].select();
      shouldBeSelected = !!text;
    }
    var shouldBeSelected = false;

    // -*- helper subroutines -*- //

    // Determine whether there's a selection in the textarea.
    // This will always return false in IE < 9, which don't support
    // HTMLTextareaElement::selection{Start,End}.
    function hasSelection() {
      var dom = textarea[0];

      if (!('selectionStart' in dom)) return false;
      return dom.selectionStart !== dom.selectionEnd;
    }

    function handleKey() {
      handlers.keystroke(stringify(keydown), keydown);
    }

    // -*- event handlers -*- //
    function onKeydown(e) {
      keydown = e;
      keypress = null;

      if (shouldBeSelected) checkTextareaFor(function() {
        if (textarea[0].select) textarea[0].select(); // re-select textarea in case it's an unrecognized
        checkTextarea = noop; // key that clears the selection, then never
        clearTimeout(timeoutId); // again, 'cos next thing might be blur
      });

      handleKey();
    }

    function onKeypress(e) {
      // call the key handler for repeated keypresses.
      // This excludes keypresses that happen directly
      // after keydown.  In that case, there will be
      // no previous keypress, so we skip it here
      if (keydown && keypress) handleKey();

      keypress = e;

      checkTextareaFor(typedText);
    }
    function typedText() {
      // If there is a selection, the contents of the textarea couldn't
      // possibly have just been typed in.
      // This happens in browsers like Firefox and Opera that fire
      // keypress for keystrokes that are not text entry and leave the
      // selection in the textarea alone, such as Ctrl-C.
      // Note: we assume that browsers that don't support hasSelection()
      // also never fire keypress on keystrokes that are not text entry.
      // This seems reasonably safe because:
      // - all modern browsers including IE 9+ support hasSelection(),
      //   making it extremely unlikely any browser besides IE < 9 won't
      // - as far as we know IE < 9 never fires keypress on keystrokes
      //   that aren't text entry, which is only as reliable as our
      //   tests are comprehensive, but the IE < 9 way to do
      //   hasSelection() is poorly documented and is also only as
      //   reliable as our tests are comprehensive
      // If anything like #40 or #71 is reported in IE < 9, see
      // b1318e5349160b665003e36d4eedd64101ceacd8
      if (hasSelection()) return;

      var text = textarea.val();
      if (text.length === 1) {
        textarea.val('');
        handlers.typedText(text);
      } // in Firefox, keys that don't type text, just clear seln, fire keypress
      // https://github.com/mathquill/mathquill/issues/293#issuecomment-40997668
      else if (text && textarea[0].select) textarea[0].select(); // re-select if that's why we're here
    }

    function onBlur() { keydown = keypress = null; }

    function onPaste(e) {
      // browsers are dumb.
      //
      // In Linux, middle-click pasting causes onPaste to be called,
      // when the textarea is not necessarily focused.  We focus it
      // here to ensure that the pasted text actually ends up in the
      // textarea.
      //
      // It's pretty nifty that by changing focus in this handler,
      // we can change the target of the default action.  (This works
      // on keydown too, FWIW).
      //
      // And by nifty, we mean dumb (but useful sometimes).
      textarea.focus();

      checkTextareaFor(pastedText);
    }
    function pastedText() {
      var text = textarea.val();
      textarea.val('');
      if (text) handlers.paste(text);
    }

    // -*- attach event handlers -*- //
    target.bind({
      keydown: onKeydown,
      keypress: onKeypress,
      focusout: onBlur,
      paste: onPaste
    });

    // -*- export public methods -*- //
    return {
      select: select
    };
  };
}());
/***********************************************
 * Export math in a human-readable text format
 * As you can see, only half-baked so far.
 **********************************************/

Controller.open(function(_, super_) {
  _.exportText = function() {
    return this.root.foldChildren('', function(text, child) {
      return text + child.text();
    });
  };
});
Controller.open(function(_) {
  _.focusBlurEvents = function() {
    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor;
    var blurTimeout;
    ctrlr.textarea.focus(function() {
      ctrlr.blurred = false;
      clearTimeout(blurTimeout);
      ctrlr.container.addClass('mq-focused');
      if (!cursor.parent)
        cursor.insAtRightEnd(root);
      if (cursor.selection) {
        cursor.selection.jQ.removeClass('mq-blur');
        ctrlr.selectionChanged(); //re-select textarea contents after tabbing away and back
      }
      else
        cursor.show();
    }).blur(function() {
      ctrlr.blurred = true;
      blurTimeout = setTimeout(function() { // wait for blur on window; if
        root.postOrder('intentionalBlur'); // none, intentional blur: #264
        cursor.clearSelection();
        blur();
      });
      $(window).on('blur', windowBlur);
    });
    function windowBlur() { // blur event also fired on window, just switching
      clearTimeout(blurTimeout); // tabs/windows, not intentional blur
      if (cursor.selection) cursor.selection.jQ.addClass('mq-blur');
      blur();
    }
    function blur() { // not directly in the textarea blur handler so as to be
      cursor.hide().parent.blur(); // synchronous with/in the same frame as
      ctrlr.container.removeClass('mq-focused'); // clearing/blurring selection
      $(window).off('blur', windowBlur);
    }
    ctrlr.blurred = true;
    cursor.hide().parent.blur();
  };
});

/**
 * TODO: I wanted to move MathBlock::focus and blur here, it would clean
 * up lots of stuff like, TextBlock::focus is set to MathBlock::focus
 * and TextBlock::blur calls MathBlock::blur, when instead they could
 * use inheritance and super_.
 *
 * Problem is, there's lots of calls to .focus()/.blur() on nodes
 * outside Controller::focusBlurEvents(), such as .postOrder('blur') on
 * insertion, which if MathBlock::blur becomes Node::blur, would add the
 * 'blur' CSS class to all Symbol's (because .isEmpty() is true for all
 * of them).
 *
 * I'm not even sure there aren't other troublesome calls to .focus() or
 * .blur(), so this is TODO for now.
 */
/*****************************************
 * Deals with the browser DOM events from
 * interaction with the typist.
 ****************************************/

Controller.open(function(_) {
  _.keystroke = function(key, evt) {
    this.cursor.parent.keystroke(key, evt, this);
  };
});

Node.open(function(_) {
  _.keystroke = function(key, e, ctrlr) {
    var cursor = ctrlr.cursor;

    switch (key) {
    case 'Ctrl-Shift-Backspace':
    case 'Ctrl-Backspace':
      while (cursor[L] || cursor.selection) {
        ctrlr.backspace();
      }
      break;

    case 'Shift-Backspace':
    case 'Backspace':
      ctrlr.backspace();
      break;

    // Tab or Esc -> go one block right if it exists, else escape right.
    case 'Esc':
    case 'Tab':
      ctrlr.escapeDir(R, key, e);
      return;

    // Shift-Tab -> go one block left if it exists, else escape left.
    case 'Shift-Tab':
    case 'Shift-Esc':
      ctrlr.escapeDir(L, key, e);
      return;

    // End -> move to the end of the current block.
    case 'End':
      ctrlr.notify('move').cursor.insAtRightEnd(cursor.parent);
      break;

    // Ctrl-End -> move all the way to the end of the root block.
    case 'Ctrl-End':
      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);
      break;

    // Shift-End -> select to the end of the current block.
    case 'Shift-End':
      while (cursor[R]) {
        ctrlr.selectRight();
      }
      break;

    // Ctrl-Shift-End -> select to the end of the root block.
    case 'Ctrl-Shift-End':
      while (cursor[R] || cursor.parent !== ctrlr.root) {
        ctrlr.selectRight();
      }
      break;

    // Home -> move to the start of the root block or the current block.
    case 'Home':
      ctrlr.notify('move').cursor.insAtLeftEnd(cursor.parent);
      break;

    // Ctrl-Home -> move to the start of the current block.
    case 'Ctrl-Home':
      ctrlr.notify('move').cursor.insAtLeftEnd(ctrlr.root);
      break;

    // Shift-Home -> select to the start of the current block.
    case 'Shift-Home':
      while (cursor[L]) {
        ctrlr.selectLeft();
      }
      break;

    // Ctrl-Shift-Home -> move to the start of the root block.
    case 'Ctrl-Shift-Home':
      while (cursor[L] || cursor.parent !== ctrlr.root) {
        ctrlr.selectLeft();
      }
      break;

    case 'Left': ctrlr.moveLeft(); break;
    case 'Shift-Left': ctrlr.selectLeft(); break;
    case 'Ctrl-Left': break;

    case 'Right': ctrlr.moveRight(); break;
    case 'Shift-Right': ctrlr.selectRight(); break;
    case 'Ctrl-Right': break;

    case 'Up': ctrlr.moveUp(); break;
    case 'Down': ctrlr.moveDown(); break;

    case 'Shift-Up':
      if (cursor[L]) {
        while (cursor[L]) ctrlr.selectLeft();
      } else {
        ctrlr.selectLeft();
      }

    case 'Shift-Down':
      if (cursor[R]) {
        while (cursor[R]) ctrlr.selectRight();
      }
      else {
        ctrlr.selectRight();
      }

    case 'Ctrl-Up': break;
    case 'Ctrl-Down': break;

    case 'Ctrl-Shift-Del':
    case 'Ctrl-Del':
      while (cursor[R] || cursor.selection) {
        ctrlr.deleteForward();
      }
      break;

    case 'Shift-Del':
    case 'Del':
      ctrlr.deleteForward();
      break;

    case 'Meta-A':
    case 'Ctrl-A':
      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);
      while (cursor[L]) ctrlr.selectLeft();
      break;

    default:
      return;
    }
    e.preventDefault();
    ctrlr.scrollHoriz();
  };

  _.moveOutOf = // called by Controller::escapeDir, moveDir
  _.moveTowards = // called by Controller::moveDir
  _.deleteOutOf = // called by Controller::deleteDir
  _.deleteTowards = // called by Controller::deleteDir
  _.unselectInto = // called by Controller::selectDir
  _.selectOutOf = // called by Controller::selectDir
  _.selectTowards = // called by Controller::selectDir
    function() { pray('overridden or never called on this node'); };
});

Controller.open(function(_) {
  this.onNotify(function(e) {
    if (e === 'move' || e === 'upDown') this.show().clearSelection();
  });
  _.escapeDir = function(dir, key, e) {
    prayDirection(dir);
    var cursor = this.cursor;

    //tabbing out of selection behaves like pressing the relevant arrow direction
    if (cursor.selection) {
      if (dir === R) this.moveRight();
      if (dir === L) this.moveLeft();
      return e.preventDefault();
    }

    // only prevent default of Tab if not in the root editable
    if (cursor.parent !== this.root) e.preventDefault();

    // want to be a noop if in the root editable (in fact, Tab has an unrelated
    // default browser action if so)
    if (cursor.parent === this.root) return;

    cursor.parent.moveOutOf(dir, cursor);
    return this.notify('move');
  };

  optionProcessors.leftRightIntoCmdGoes = function(updown) {
    if (updown && updown !== 'up' && updown !== 'down') {
      throw '"up" or "down" required for leftRightIntoCmdGoes option, '
            + 'got "'+updown+'"';
    }
    return updown;
  };
  _.moveDir = function(dir) {
    prayDirection(dir);
    var cursor = this.cursor, updown = cursor.options.leftRightIntoCmdGoes;

    if (cursor.selection) {
      cursor.insDirOf(dir, cursor.selection.ends[dir]);
    }
    else if (cursor[dir]) cursor[dir].moveTowards(dir, cursor, updown);
    else cursor.parent.moveOutOf(dir, cursor, updown);

    return this.notify('move');
  };
  _.moveLeft = function() { return this.moveDir(L); };
  _.moveRight = function() { return this.moveDir(R); };

  /**
   * moveUp and moveDown have almost identical algorithms:
   * - first check left and right, if so insAtLeft/RightEnd of them
   * - else check the parent's 'upOutOf'/'downOutOf' property:
   *   + if it's a function, call it with the cursor as the sole argument and
   *     use the return value as if it were the value of the property
   *   + if it's a Node, jump up or down into it:
   *     - if there is a cached Point in the block, insert there
   *     - else, seekHoriz within the block to the current x-coordinate (to be
   *       as close to directly above/below the current position as possible)
   *   + unless it's exactly `true`, stop bubbling
   */
  _.moveUp = function() { return moveUpDown(this, 'up'); };
  _.moveDown = function() { return moveUpDown(this, 'down'); };
  function moveUpDown(self, dir) {
    var cursor = self.notify('upDown').cursor;
    var dirInto = dir+'Into', dirOutOf = dir+'OutOf';
    if (cursor[R][dirInto]) cursor.insAtLeftEnd(cursor[R][dirInto]);
    else if (cursor[L][dirInto]) cursor.insAtRightEnd(cursor[L][dirInto]);
    else {
      cursor.parent.bubble(function(ancestor) {
        var prop = ancestor[dirOutOf];
        if (prop) {
          if (typeof prop === 'function') prop = ancestor[dirOutOf](cursor);
          if (prop instanceof Node) cursor.jumpUpDown(ancestor, prop);
          if (prop !== true) return false;
        }
      });
    }
    return self;
  }
  this.onNotify(function(e) { if (e !== 'upDown') this.upDownCache = {}; });

  this.onNotify(function(e) { if (e === 'edit') this.show().deleteSelection(); });
  _.deleteDir = function(dir) {
    prayDirection(dir);
    var cursor = this.cursor;

    var hadSelection = cursor.selection;
    this.notify('edit'); // deletes selection if present
    if (!hadSelection) {
      if (cursor[dir]) cursor[dir].deleteTowards(dir, cursor);
      else cursor.parent.deleteOutOf(dir, cursor);
    }

    if (cursor[L].siblingDeleted) cursor[L].siblingDeleted(cursor.options, R);
    if (cursor[R].siblingDeleted) cursor[R].siblingDeleted(cursor.options, L);
    cursor.parent.bubble('reflow');

    return this;
  };
  _.backspace = function() { return this.deleteDir(L); };
  _.deleteForward = function() { return this.deleteDir(R); };

  this.onNotify(function(e) { if (e !== 'select') this.endSelection(); });
  _.selectDir = function(dir) {
    var cursor = this.notify('select').cursor, seln = cursor.selection;
    prayDirection(dir);

    if (!cursor.anticursor) cursor.startSelection();

    var node = cursor[dir];
    if (node) {
      // "if node we're selecting towards is inside selection (hence retracting)
      // and is on the *far side* of the selection (hence is only node selected)
      // and the anticursor is *inside* that node, not just on the other side"
      if (seln && seln.ends[dir] === node && cursor.anticursor[-dir] !== node) {
        node.unselectInto(dir, cursor);
      }
      else node.selectTowards(dir, cursor);
    }
    else cursor.parent.selectOutOf(dir, cursor);

    cursor.clearSelection();
    cursor.select() || cursor.show();
  };
  _.selectLeft = function() { return this.selectDir(L); };
  _.selectRight = function() { return this.selectDir(R); };
});
// Parser MathCommand
var latexMathParser = (function() {
  function commandToBlock(cmd) {
    var block = MathBlock();
    cmd.adopt(block, 0, 0);
    return block;
  }
  function joinBlocks(blocks) {
    var firstBlock = blocks[0] || MathBlock();

    for (var i = 1; i < blocks.length; i += 1) {
      blocks[i].children().adopt(firstBlock, firstBlock.ends[R], 0);
    }

    return firstBlock;
  }

  var string = Parser.string;
  var regex = Parser.regex;
  var letter = Parser.letter;
  var any = Parser.any;
  var optWhitespace = Parser.optWhitespace;
  var succeed = Parser.succeed;
  var fail = Parser.fail;

  // Parsers yielding MathCommands
  var variable = letter.map(function(c) { return Letter(c); });
  var symbol = regex(/^[^${}\\_^]/).map(function(c) { return VanillaSymbol(c); });

  var controlSequence =
    regex(/^[^\\a-eg-zA-Z]/) // hotfix #164; match MathBlock::write
    .or(string('\\').then(
      regex(/^[a-z]+/i)
      .or(regex(/^\s+/).result(' '))
      .or(any)
    )).then(function(ctrlSeq) {
      var cmdKlass = LatexCmds[ctrlSeq];

      if (cmdKlass) {
        return cmdKlass(ctrlSeq).parser();
      }
      else {
        return fail('unknown command: \\'+ctrlSeq);
      }
    })
  ;

  var command =
    controlSequence
    .or(variable)
    .or(symbol)
  ;

  // Parsers yielding MathBlocks
  var mathGroup = string('{').then(function() { return mathSequence; }).skip(string('}'));
  var mathBlock = optWhitespace.then(mathGroup.or(command.map(commandToBlock)));
  var mathSequence = mathBlock.many().map(joinBlocks).skip(optWhitespace);

  var optMathBlock =
    string('[').then(
      mathBlock.then(function(block) {
        return block.join('latex') !== ']' ? succeed(block) : fail();
      })
      .many().map(joinBlocks).skip(optWhitespace)
    ).skip(string(']'))
  ;

  var latexMath = mathSequence;

  latexMath.block = mathBlock;
  latexMath.optBlock = optMathBlock;
  return latexMath;
})();

Controller.open(function(_, super_) {
  _.exportLatex = function() {
    return this.root.latex().replace(/(\\[a-z]+) (?![a-z])/ig,'$1');
  };
  _.writeLatex = function(latex) {
    var cursor = this.notify('edit').cursor;

    var all = Parser.all;
    var eof = Parser.eof;

    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);

    if (block && !block.isEmpty()) {
      block.children().adopt(cursor.parent, cursor[L], cursor[R]);
      var jQ = block.jQize();
      jQ.insertBefore(cursor.jQ);
      cursor[L] = block.ends[R];
      block.finalizeInsert(cursor.options, cursor);
      if (block.ends[R][R].siblingCreated) block.ends[R][R].siblingCreated(cursor.options, L);
      if (block.ends[L][L].siblingCreated) block.ends[L][L].siblingCreated(cursor.options, R);
      cursor.parent.bubble('reflow');
    }

    return this;
  };
  _.renderLatexMath = function(latex) {
    var root = this.root, cursor = this.cursor;

    var all = Parser.all;
    var eof = Parser.eof;

    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);

    root.eachChild('postOrder', 'dispose');
    root.ends[L] = root.ends[R] = 0;

    if (block) {
      block.children().adopt(root, 0, 0);
    }

    var jQ = root.jQ;

    if (block) {
      var html = block.join('html');
      jQ.html(html);
      root.jQize(jQ.children());
      root.finalizeInsert(cursor.options);
    }
    else {
      jQ.empty();
    }

    delete cursor.selection;
    cursor.insAtRightEnd(root);
  };
  _.renderLatexText = function(latex) {
    var root = this.root, cursor = this.cursor;

    root.jQ.children().slice(1).remove();
    root.eachChild('postOrder', 'dispose');
    root.ends[L] = root.ends[R] = 0;
    delete cursor.selection;
    cursor.show().insAtRightEnd(root);

    var regex = Parser.regex;
    var string = Parser.string;
    var eof = Parser.eof;
    var all = Parser.all;

    // Parser RootMathCommand
    var mathMode = string('$').then(latexMathParser)
      // because TeX is insane, math mode doesn't necessarily
      // have to end.  So we allow for the case that math mode
      // continues to the end of the stream.
      .skip(string('$').or(eof))
      .map(function(block) {
        // HACK FIXME: this shouldn't have to have access to cursor
        var rootMathCommand = RootMathCommand(cursor);

        rootMathCommand.createBlocks();
        var rootMathBlock = rootMathCommand.ends[L];
        block.children().adopt(rootMathBlock, 0, 0);

        return rootMathCommand;
      })
    ;

    var escapedDollar = string('\\$').result('$');
    var textChar = escapedDollar.or(regex(/^[^$]/)).map(VanillaSymbol);
    var latexText = mathMode.or(textChar).many();
    var commands = latexText.skip(eof).or(all.result(false)).parse(latex);

    if (commands) {
      for (var i = 0; i < commands.length; i += 1) {
        commands[i].adopt(root, root.ends[R], 0);
      }

      root.jQize().appendTo(root.jQ);

      root.finalizeInsert(cursor.options);
    }
  };
});
/********************************************************
 * Deals with mouse events for clicking, drag-to-select
 *******************************************************/

Controller.open(function(_) {
  Options.p.ignoreNextMousedown = noop;
  _.delegateMouseEvents = function() {
    var ultimateRootjQ = this.root.jQ;
    //drag-to-select event handling
    this.container.bind('mousedown.mathquill', function(e) {
      var rootjQ = $(e.target).closest('.mq-root-block');
      var root = Node.byId[rootjQ.attr(mqBlockId) || ultimateRootjQ.attr(mqBlockId)];
      var ctrlr = root.controller, cursor = ctrlr.cursor, blink = cursor.blink;
      var textareaSpan = ctrlr.textareaSpan, textarea = ctrlr.textarea;

      if (cursor.options.ignoreNextMousedown(e)) return;
      else cursor.options.ignoreNextMousedown = noop;

      var target;
      function mousemove(e) { target = $(e.target); }
      function docmousemove(e) {
        if (!cursor.anticursor) cursor.startSelection();
        ctrlr.seek(target, e.pageX, e.pageY).cursor.select();
        target = undefined;
      }
      // outside rootjQ, the MathQuill node corresponding to the target (if any)
      // won't be inside this root, so don't mislead Controller::seek with it

      function mouseup(e) {
        cursor.blink = blink;
        if (!cursor.selection) {
          if (ctrlr.editable) {
            cursor.show();
          }
          else {
            textareaSpan.detach();
          }
        }

        // delete the mouse handlers now that we're not dragging anymore
        rootjQ.unbind('mousemove', mousemove);
        $(e.target.ownerDocument).unbind('mousemove', docmousemove).unbind('mouseup', mouseup);
      }

      if (ctrlr.blurred) {
        if (!ctrlr.editable) rootjQ.prepend(textareaSpan);
        textarea.focus();
      }
      e.preventDefault(); // doesn't work in IE\u22648, but it's a one-line fix:
      e.target.unselectable = true; // http://jsbin.com/yagekiji/1

      cursor.blink = noop;
      ctrlr.seek($(e.target), e.pageX, e.pageY).cursor.startSelection();

      rootjQ.mousemove(mousemove);
      $(e.target.ownerDocument).mousemove(docmousemove).mouseup(mouseup);
      // listen on document not just body to not only hear about mousemove and
      // mouseup on page outside field, but even outside page, except iframes: https://github.com/mathquill/mathquill/commit/8c50028afcffcace655d8ae2049f6e02482346c5#commitcomment-6175800
    });
  }
});

Controller.open(function(_) {
  _.seek = function(target, pageX, pageY) {
    var cursor = this.notify('select').cursor;

    if (target) {
      var nodeId = target.attr(mqBlockId) || target.attr(mqCmdId);
      if (!nodeId) {
        var targetParent = target.parent();
        nodeId = targetParent.attr(mqBlockId) || targetParent.attr(mqCmdId);
      }
    }
    var node = nodeId ? Node.byId[nodeId] : this.root;
    pray('nodeId is the id of some Node that exists', node);

    // don't clear selection until after getting node from target, in case
    // target was selection span, otherwise target will have no parent and will
    // seek from root, which is less accurate (e.g. fraction)
    cursor.clearSelection().show();

    node.seek(pageX, cursor);
    this.scrollHoriz(); // before .selectFrom when mouse-selecting, so
                        // always hits no-selection case in scrollHoriz and scrolls slower
    return this;
  };
});
/***********************************************
 * Horizontal panning for editable fields that
 * overflow their width
 **********************************************/

Controller.open(function(_) {
  _.scrollHoriz = function() {
    var cursor = this.cursor, seln = cursor.selection;
    var rootRect = this.root.jQ[0].getBoundingClientRect();
    if (!seln) {
      var x = cursor.jQ[0].getBoundingClientRect().left;
      if (x > rootRect.right - 20) var scrollBy = x - (rootRect.right - 20);
      else if (x < rootRect.left + 20) var scrollBy = x - (rootRect.left + 20);
      else return;
    }
    else {
      var rect = seln.jQ[0].getBoundingClientRect();
      var overLeft = rect.left - (rootRect.left + 20);
      var overRight = rect.right - (rootRect.right - 20);
      if (seln.ends[L] === cursor[R]) {
        if (overLeft < 0) var scrollBy = overLeft;
        else if (overRight > 0) {
          if (rect.left - overRight < rootRect.left + 20) var scrollBy = overLeft;
          else var scrollBy = overRight;
        }
        else return;
      }
      else {
        if (overRight > 0) var scrollBy = overRight;
        else if (overLeft < 0) {
          if (rect.right - overLeft > rootRect.right - 20) var scrollBy = overRight;
          else var scrollBy = overLeft;
        }
        else return;
      }
    }
    this.root.jQ.stop().animate({ scrollLeft: '+=' + scrollBy}, 100);
  };
});
/*********************************************
 * Manage the MathQuill instance's textarea
 * (as owned by the Controller)
 ********************************************/

Controller.open(function(_) {
  Options.p.substituteTextarea = function() { return $('<textarea>')[0]; };
  _.createTextarea = function() {
    var textareaSpan = this.textareaSpan = $('<span class="mq-textarea"></span>'),
      textarea = this.API.__options.substituteTextarea();
    if (!textarea.nodeType) {
      throw 'substituteTextarea() must return a DOM element, got ' + textarea;
    }
    textarea = this.textarea = $(textarea).appendTo(textareaSpan);

    var ctrlr = this;
    ctrlr.cursor.selectionChanged = function() { ctrlr.selectionChanged(); };
    ctrlr.container.bind('copy', function() { ctrlr.setTextareaSelection(); });
  };
  _.selectionChanged = function() {
    var ctrlr = this;
    forceIERedraw(ctrlr.container[0]);

    // throttle calls to setTextareaSelection(), because setting textarea.value
    // and/or calling textarea.select() can have anomalously bad performance:
    // https://github.com/mathquill/mathquill/issues/43#issuecomment-1399080
    if (ctrlr.textareaSelectionTimeout === undefined) {
      ctrlr.textareaSelectionTimeout = setTimeout(function() {
        ctrlr.setTextareaSelection();
      });
    }
  };
  _.setTextareaSelection = function() {
    this.textareaSelectionTimeout = undefined;
    var latex = '';
    if (this.cursor.selection) {
      latex = this.cursor.selection.join('latex');
      if (this.API.__options.statelessClipboard) {
        // FIXME: like paste, only this works for math fields; should ask parent
        latex = '$' + latex + '$';
      }
    }
    this.selectFn(latex);
  };
  _.staticMathTextareaEvents = function() {
    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor,
      textarea = ctrlr.textarea, textareaSpan = ctrlr.textareaSpan;

    this.container.prepend('<span class="mq-selectable">$'+ctrlr.exportLatex()+'$</span>');
    ctrlr.blurred = true;
    textarea.bind('cut paste', false)
    .focus(function() { ctrlr.blurred = false; }).blur(function() {
      if (cursor.selection) cursor.selection.clear();
      setTimeout(detach); //detaching during blur explodes in WebKit
    });
    function detach() {
      textareaSpan.detach();
      ctrlr.blurred = true;
    }

    ctrlr.selectFn = function(text) {
      textarea.val(text);
      if (text) textarea.select();
    };
  };
  _.editablesTextareaEvents = function() {
    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor,
      textarea = ctrlr.textarea, textareaSpan = ctrlr.textareaSpan;

    var keyboardEventsShim = saneKeyboardEvents(textarea, this);
    this.selectFn = function(text) { keyboardEventsShim.select(text); };

    this.container.prepend(textareaSpan)
    .on('cut', function(e) {
      if (cursor.selection) {
        setTimeout(function() {
          ctrlr.notify('edit'); // deletes selection if present
          cursor.parent.bubble('reflow');
        });
      }
    });

    this.focusBlurEvents();
  };
  _.typedText = function(ch) {
    if (ch === '\n') return this.handle('enter');
    var cursor = this.notify().cursor;
    cursor.parent.write(cursor, ch);
    this.scrollHoriz();
  };
  _.paste = function(text) {
    // TODO: document `statelessClipboard` config option in README, after
    // making it work like it should, that is, in both text and math mode
    // (currently only works in math fields, so worse than pointless, it
    //  only gets in the way by \text{}-ifying pasted stuff and $-ifying
    //  cut/copied LaTeX)
    if (this.API.__options.statelessClipboard) {
      if (text.slice(0,1) === '$' && text.slice(-1) === '$') {
        text = text.slice(1, -1);
      }
      else {
        text = '\\text{'+text+'}';
      }
    }
    // FIXME: this always inserts math or a TextBlock, even in a RootTextBlock
    this.writeLatex(text).cursor.show();
  };
});
/*************************************************
 * Abstract classes of math blocks and commands.
 ************************************************/

/**
 * Math tree node base class.
 * Some math-tree-specific extensions to Node.
 * Both MathBlock's and MathCommand's descend from it.
 */
var MathElement = P(Node, function(_, super_) {
  _.finalizeInsert = function(options, cursor) { // `cursor` param is only for
      // SupSub::contactWeld, and is deliberately only passed in by writeLatex,
      // see ea7307eb4fac77c149a11ffdf9a831df85247693
    var self = this;
    self.postOrder('finalizeTree', options);
    self.postOrder('contactWeld', cursor);

    // note: this order is important.
    // empty elements need the empty box provided by blur to
    // be present in order for their dimensions to be measured
    // correctly by 'reflow' handlers.
    self.postOrder('blur');

    self.postOrder('reflow');
    if (self[R].siblingCreated) self[R].siblingCreated(options, L);
    if (self[L].siblingCreated) self[L].siblingCreated(options, R);
    self.bubble('reflow');
  };
});

/**
 * Commands and operators, like subscripts, exponents, or fractions.
 * Descendant commands are organized into blocks.
 */
var MathCommand = P(MathElement, function(_, super_) {
  _.init = function(ctrlSeq, htmlTemplate, textTemplate) {
    var cmd = this;
    super_.init.call(cmd);

    if (!cmd.ctrlSeq) cmd.ctrlSeq = ctrlSeq;
    if (htmlTemplate) cmd.htmlTemplate = htmlTemplate;
    if (textTemplate) cmd.textTemplate = textTemplate;
  };

  // obvious methods
  _.replaces = function(replacedFragment) {
    replacedFragment.disown();
    this.replacedFragment = replacedFragment;
  };
  _.isEmpty = function() {
    return this.foldChildren(true, function(isEmpty, child) {
      return isEmpty && child.isEmpty();
    });
  };

  _.parser = function() {
    var block = latexMathParser.block;
    var self = this;

    return block.times(self.numBlocks()).map(function(blocks) {
      self.blocks = blocks;

      for (var i = 0; i < blocks.length; i += 1) {
        blocks[i].adopt(self, self.ends[R], 0);
      }

      return self;
    });
  };

  // createLeftOf(cursor) and the methods it calls
  _.createLeftOf = function(cursor) {
    var cmd = this;
    var replacedFragment = cmd.replacedFragment;

    cmd.createBlocks();
    super_.createLeftOf.call(cmd, cursor);
    if (replacedFragment) {
      replacedFragment.adopt(cmd.ends[L], 0, 0);
      replacedFragment.jQ.appendTo(cmd.ends[L].jQ);
    }
    cmd.finalizeInsert(cursor.options);
    cmd.placeCursor(cursor);
  };
  _.createBlocks = function() {
    var cmd = this,
      numBlocks = cmd.numBlocks(),
      blocks = cmd.blocks = Array(numBlocks);

    for (var i = 0; i < numBlocks; i += 1) {
      var newBlock = blocks[i] = MathBlock();
      newBlock.adopt(cmd, cmd.ends[R], 0);
    }
  };
  _.placeCursor = function(cursor) {
    //insert the cursor at the right end of the first empty child, searching
    //left-to-right, or if none empty, the right end child
    cursor.insAtRightEnd(this.foldChildren(this.ends[L], function(leftward, child) {
      return leftward.isEmpty() ? leftward : child;
    }));
  };

  // editability methods: called by the cursor for editing, cursor movements,
  // and selection of the MathQuill tree, these all take in a direction and
  // the cursor
  _.moveTowards = function(dir, cursor, updown) {
    var updownInto = updown && this[updown+'Into'];
    cursor.insAtDirEnd(-dir, updownInto || this.ends[-dir]);
  };
  _.deleteTowards = function(dir, cursor) {
    this.moveTowards(dir, cursor, null);
  };
  _.selectTowards = function(dir, cursor) {
    cursor[-dir] = this;
    cursor[dir] = this[dir];
  };
  _.selectChildren = function() {
    return Selection(this, this);
  };
  _.unselectInto = function(dir, cursor) {
    cursor.insAtDirEnd(-dir, cursor.anticursor.ancestors[this.id]);
  };
  _.seek = function(pageX, cursor) {
    function getBounds(node) {
      var bounds = {}
      bounds[L] = node.jQ.offset().left;
      bounds[R] = bounds[L] + node.jQ.outerWidth();
      return bounds;
    }

    var cmd = this;
    var cmdBounds = getBounds(cmd);

    if (pageX < cmdBounds[L]) return cursor.insLeftOf(cmd);
    if (pageX > cmdBounds[R]) return cursor.insRightOf(cmd);

    var leftLeftBound = cmdBounds[L];
    cmd.eachChild(function(block) {
      var blockBounds = getBounds(block);
      if (pageX < blockBounds[L]) {
        // closer to this block's left bound, or the bound left of that?
        if (pageX - leftLeftBound < blockBounds[L] - pageX) {
          if (block[L]) cursor.insAtRightEnd(block[L]);
          else cursor.insLeftOf(cmd);
        }
        else cursor.insAtLeftEnd(block);
        return false;
      }
      else if (pageX > blockBounds[R]) {
        if (block[R]) leftLeftBound = blockBounds[R]; // continue to next block
        else { // last (rightmost) block
          // closer to this block's right bound, or the cmd's right bound?
          if (cmdBounds[R] - pageX < pageX - blockBounds[R]) {
            cursor.insRightOf(cmd);
          }
          else cursor.insAtRightEnd(block);
        }
      }
      else {
        block.seek(pageX, cursor);
        return false;
      }
    });
  }

  // methods involved in creating and cross-linking with HTML DOM nodes
  /*
    They all expect an .htmlTemplate like
      '<span>&0</span>'
    or
      '<span><span>&0</span><span>&1</span></span>'

    See html.test.js for more examples.

    Requirements:
    - For each block of the command, there must be exactly one "block content
      marker" of the form '&<number>' where <number> is the 0-based index of the
      block. (Like the LaTeX \newcommand syntax, but with a 0-based rather than
      1-based index, because JavaScript because C because Dijkstra.)
    - The block content marker must be the sole contents of the containing
      element, there can't even be surrounding whitespace, or else we can't
      guarantee sticking to within the bounds of the block content marker when
      mucking with the HTML DOM.
    - The HTML not only must be well-formed HTML (of course), but also must
      conform to the XHTML requirements on tags, specifically all tags must
      either be self-closing (like '<br/>') or come in matching pairs.
      Close tags are never optional.

    Note that &<number> isn't well-formed HTML; if you wanted a literal '&123',
    your HTML template would have to have '&amp;123'.
  */
  _.numBlocks = function() {
    var matches = this.htmlTemplate.match(/&\d+/g);
    return matches ? matches.length : 0;
  };
  _.html = function() {
    // Render the entire math subtree rooted at this command, as HTML.
    // Expects .createBlocks() to have been called already, since it uses the
    // .blocks array of child blocks.
    //
    // See html.test.js for example templates and intended outputs.
    //
    // Given an .htmlTemplate as described above,
    // - insert the mathquill-command-id attribute into all top-level tags,
    //   which will be used to set this.jQ in .jQize().
    //   This is straightforward:
    //     * tokenize into tags and non-tags
    //     * loop through top-level tokens:
    //         * add #cmdId attribute macro to top-level self-closing tags
    //         * else add #cmdId attribute macro to top-level open tags
    //             * skip the matching top-level close tag and all tag pairs
    //               in between
    // - for each block content marker,
    //     + replace it with the contents of the corresponding block,
    //       rendered as HTML
    //     + insert the mathquill-block-id attribute into the containing tag
    //   This is even easier, a quick regex replace, since block tags cannot
    //   contain anything besides the block content marker.
    //
    // Two notes:
    // - The outermost loop through top-level tokens should never encounter any
    //   top-level close tags, because we should have first encountered a
    //   matching top-level open tag, all inner tags should have appeared in
    //   matching pairs and been skipped, and then we should have skipped the
    //   close tag in question.
    // - All open tags should have matching close tags, which means our inner
    //   loop should always encounter a close tag and drop nesting to 0. If
    //   a close tag is missing, the loop will continue until i >= tokens.length
    //   and token becomes undefined. This will not infinite loop, even in
    //   production without pray(), because it will then TypeError on .slice().

    var cmd = this;
    var blocks = cmd.blocks;
    var cmdId = ' mathquill-command-id=' + cmd.id;
    var tokens = cmd.htmlTemplate.match(/<[^<>]+>|[^<>]+/g);

    pray('no unmatched angle brackets', tokens.join('') === this.htmlTemplate);

    // add cmdId to all top-level tags
    for (var i = 0, token = tokens[0]; token; i += 1, token = tokens[i]) {
      // top-level self-closing tags
      if (token.slice(-2) === '/>') {
        tokens[i] = token.slice(0,-2) + cmdId + '/>';
      }
      // top-level open tags
      else if (token.charAt(0) === '<') {
        pray('not an unmatched top-level close tag', token.charAt(1) !== '/');

        tokens[i] = token.slice(0,-1) + cmdId + '>';

        // skip matching top-level close tag and all tag pairs in between
        var nesting = 1;
        do {
          i += 1, token = tokens[i];
          pray('no missing close tags', token);
          // close tags
          if (token.slice(0,2) === '</') {
            nesting -= 1;
          }
          // non-self-closing open tags
          else if (token.charAt(0) === '<' && token.slice(-2) !== '/>') {
            nesting += 1;
          }
        } while (nesting > 0);
      }
    }
    return tokens.join('').replace(/>&(\d+)/g, function($0, $1) {
      return ' mathquill-block-id=' + blocks[$1].id + '>' + blocks[$1].join('html');
    });
  };

  // methods to export a string representation of the math tree
  _.latex = function() {
    return this.foldChildren(this.ctrlSeq, function(latex, child) {
      return latex + '{' + (child.latex() || ' ') + '}';
    });
  };
  _.textTemplate = [''];
  _.text = function() {
    var cmd = this, i = 0;
    return cmd.foldChildren(cmd.textTemplate[i], function(text, child) {
      i += 1;
      var child_text = child.text();
      if (text && cmd.textTemplate[i] === '('
          && child_text[0] === '(' && child_text.slice(-1) === ')')
        return text + child_text.slice(1, -1) + cmd.textTemplate[i];
      return text + child.text() + (cmd.textTemplate[i] || '');
    });
  };
});

/**
 * Lightweight command without blocks or children.
 */
var Symbol = P(MathCommand, function(_, super_) {
  _.init = function(ctrlSeq, html, text) {
    if (!text) text = ctrlSeq && ctrlSeq.length > 1 ? ctrlSeq.slice(1) : ctrlSeq;

    super_.init.call(this, ctrlSeq, html, [ text ]);
  };

  _.parser = function() { return Parser.succeed(this); };
  _.numBlocks = function() { return 0; };

  _.replaces = function(replacedFragment) {
    replacedFragment.remove();
  };
  _.createBlocks = noop;

  _.moveTowards = function(dir, cursor) {
    cursor.jQ.insDirOf(dir, this.jQ);
    cursor[-dir] = this;
    cursor[dir] = this[dir];
  };
  _.deleteTowards = function(dir, cursor) {
    cursor[dir] = this.remove()[dir];
  };
  _.seek = function(pageX, cursor) {
    // insert at whichever side the click was closer to
    if (pageX - this.jQ.offset().left < this.jQ.outerWidth()/2)
      cursor.insLeftOf(this);
    else
      cursor.insRightOf(this);
  };

  _.latex = function(){ return this.ctrlSeq; };
  _.text = function(){ return this.textTemplate; };
  _.placeCursor = noop;
  _.isEmpty = function(){ return true; };
});
var VanillaSymbol = P(Symbol, function(_, super_) {
  _.init = function(ch, html) {
    super_.init.call(this, ch, '<span>'+(html || ch)+'</span>');
  };
});
var BinaryOperator = P(Symbol, function(_, super_) {
  _.init = function(ctrlSeq, html, text) {
    super_.init.call(this,
      ctrlSeq, '<span class="mq-binary-operator">'+html+'</span>', text
    );
  };
});

/**
 * Children and parent of MathCommand's. Basically partitions all the
 * symbols and operators that descend (in the Math DOM tree) from
 * ancestor operators.
 */
var MathBlock = P(MathElement, function(_, super_) {
  _.join = function(methodName) {
    return this.foldChildren('', function(fold, child) {
      return fold + child[methodName]();
    });
  };
  _.html = function() { return this.join('html'); };
  _.latex = function() { return this.join('latex'); };
  _.text = function() {
    return (this.ends[L] === this.ends[R] && this.ends[L] !== 0) ?
      this.ends[L].text() :
      this.join('text')
    ;
  };

  _.keystroke = function(key, e, ctrlr) {
    if (ctrlr.API.__options.spaceBehavesLikeTab
        && (key === 'Spacebar' || key === 'Shift-Spacebar')) {
      e.preventDefault();
      ctrlr.escapeDir(key === 'Shift-Spacebar' ? L : R, key, e);
      return;
    }
    return super_.keystroke.apply(this, arguments);
  };

  // editability methods: called by the cursor for editing, cursor movements,
  // and selection of the MathQuill tree, these all take in a direction and
  // the cursor
  _.moveOutOf = function(dir, cursor, updown) {
    var updownInto = updown && this.parent[updown+'Into'];
    if (!updownInto && this[dir]) cursor.insAtDirEnd(-dir, this[dir]);
    else cursor.insDirOf(dir, this.parent);
  };
  _.selectOutOf = function(dir, cursor) {
    cursor.insDirOf(dir, this.parent);
  };
  _.deleteOutOf = function(dir, cursor) {
    cursor.unwrapGramp();
  };
  _.seek = function(pageX, cursor) {
    var node = this.ends[R];
    if (!node || node.jQ.offset().left + node.jQ.outerWidth() < pageX) {
      return cursor.insAtRightEnd(this);
    }
    if (pageX < this.ends[L].jQ.offset().left) return cursor.insAtLeftEnd(this);
    while (pageX < node.jQ.offset().left) node = node[L];
    return node.seek(pageX, cursor);
  };
  _.chToCmd = function(ch) {
    var cons;
    // exclude f because it gets a dedicated command with more spacing
    if (ch.match(/^[a-eg-zA-Z]$/))
      return Letter(ch);
    else if (/^\d$/.test(ch))
      return Digit(ch);
    else if (cons = CharCmds[ch] || LatexCmds[ch])
      return cons(ch);
    else
      return VanillaSymbol(ch);
  };
  _.write = function(cursor, ch) {
    var cmd = this.chToCmd(ch);
    if (cursor.selection) cmd.replaces(cursor.replaceSelection());
    cmd.createLeftOf(cursor.show());
  };

  _.focus = function() {
    this.jQ.addClass('mq-hasCursor');
    this.jQ.removeClass('mq-empty');

    return this;
  };
  _.blur = function() {
    this.jQ.removeClass('mq-hasCursor');
    if (this.isEmpty())
      this.jQ.addClass('mq-empty');

    return this;
  };
});

var RootMathBlock = P(MathBlock, RootBlockMixin);
MathQuill.MathField = APIFnFor(P(EditableField, function(_, super_) {
  _.init = function(el, opts) {
    el.addClass('mq-editable-field mq-math-mode');
    this.initRootAndEvents(RootMathBlock(), el, opts);
  };
}));
/*********************************
 * Symbols for Basic Mathematics
 ********************************/

var Digit = P(VanillaSymbol, function(_, super_) {
  _.createLeftOf = function(cursor) {
    if (cursor.options.autoSubscriptNumerals
        && cursor.parent !== cursor.parent.parent.sub
        && ((cursor[L] instanceof Variable && cursor[L].isItalic !== false)
            || (cursor[L] instanceof SupSub
                && cursor[L][L] instanceof Variable
                && cursor[L][L].isItalic !== false))) {
      LatexCmds._().createLeftOf(cursor);
      super_.createLeftOf.call(this, cursor);
      cursor.insRightOf(cursor.parent.parent);
    }
    else super_.createLeftOf.call(this, cursor);
  };
});

var Variable = P(Symbol, function(_, super_) {
  _.init = function(ch, html) {
    super_.init.call(this, ch, '<var>'+(html || ch)+'</var>');
  };
  _.text = function() {
    var text = this.ctrlSeq;
    if (this[L] && !(this[L] instanceof Variable)
        && !(this[L] instanceof BinaryOperator))
      text = '*' + text;
    if (this[R] && !(this[R] instanceof BinaryOperator)
        && !(this[R].ctrlSeq === '^'))
      text += '*';
    return text;
  };
});

Options.p.autoCommands = { _maxLength: 0 };
optionProcessors.autoCommands = function(cmds) {
  if (!/^[a-z]+(?: [a-z]+)*$/i.test(cmds)) {
    throw '"'+cmds+'" not a space-delimited list of only letters';
  }
  var list = cmds.split(' '), dict = {}, maxLength = 0;
  for (var i = 0; i < list.length; i += 1) {
    var cmd = list[i];
    if (cmd.length < 2) {
      throw 'autocommand "'+cmd+'" not minimum length of 2';
    }
    if (LatexCmds[cmd] === OperatorName) {
      throw '"' + cmd + '" is a built-in operator name';
    }
    dict[cmd] = 1;
    maxLength = max(maxLength, cmd.length);
  }
  dict._maxLength = maxLength;
  return dict;
};

var Letter = P(Variable, function(_, super_) {
  _.init = function(ch) { return super_.init.call(this, this.letter = ch); };
  _.createLeftOf = function(cursor) {
    var autoCmds = cursor.options.autoCommands, maxLength = autoCmds._maxLength;
    if (maxLength > 0) {
      // want longest possible autocommand, so join together longest
      // sequence of letters
      var str = this.letter, l = cursor[L], i = 1;
      while (l instanceof Letter && i < maxLength) {
        str = l.letter + str, l = l[L], i += 1;
      }
      // check for an autocommand, going thru substrings longest to shortest
      while (str.length) {
        if (autoCmds.hasOwnProperty(str)) {
          for (var i = 2, l = cursor[L]; i < str.length; i += 1, l = l[L]);
          Fragment(l, cursor[L]).remove();
          cursor[L] = l[L];
          return LatexCmds[str](str).createLeftOf(cursor);
        }
        str = str.slice(1);
      }
    }
    super_.createLeftOf.apply(this, arguments);
  };
  _.italicize = function(bool) {
    this.isItalic = bool;
    this.jQ.toggleClass('mq-operator-name', !bool);
    return this;
  };
  _.finalizeTree = _.siblingDeleted = _.siblingCreated = function(opts, dir) {
    // don't auto-un-italicize if the sibling to my right changed (dir === R or
    // undefined) and it's now a Letter, it will un-italicize everyone
    if (dir !== L && this[R] instanceof Letter) return;
    this.autoUnItalicize(opts);
  };
  _.autoUnItalicize = function(opts) {
    var autoOps = opts.autoOperatorNames;
    if (autoOps._maxLength === 0) return;
    // want longest possible operator names, so join together entire contiguous
    // sequence of letters
    var str = this.letter;
    for (var l = this[L]; l instanceof Letter; l = l[L]) str = l.letter + str;
    for (var r = this[R]; r instanceof Letter; r = r[R]) str += r.letter;

    // removeClass and delete flags from all letters before figuring out
    // which, if any, are part of an operator name
    Fragment(l[R] || this.parent.ends[L], r[L] || this.parent.ends[R]).each(function(el) {
      el.italicize(true).jQ.removeClass('mq-first mq-last');
      el.ctrlSeq = el.letter;
    });

    // check for operator names: at each position from left to right, check
    // substrings from longest to shortest
    outer: for (var i = 0, first = l[R] || this.parent.ends[L]; i < str.length; i += 1, first = first[R]) {
      for (var len = min(autoOps._maxLength, str.length - i); len > 0; len -= 1) {
        var word = str.slice(i, i + len);
        if (autoOps.hasOwnProperty(word)) {
          for (var j = 0, letter = first; j < len; j += 1, letter = letter[R]) {
            letter.italicize(false);
            var last = letter;
          }

          var isBuiltIn = BuiltInOpNames.hasOwnProperty(word);
          first.ctrlSeq = (isBuiltIn ? '\\' : '\\operatorname{') + first.ctrlSeq;
          last.ctrlSeq += (isBuiltIn ? ' ' : '}');
          if (TwoWordOpNames.hasOwnProperty(word)) last[L][L][L].jQ.addClass('mq-last');
          if (nonOperatorSymbol(first[L])) first.jQ.addClass('mq-first');
          if (nonOperatorSymbol(last[R])) last.jQ.addClass('mq-last');

          i += len - 1;
          first = last;
          continue outer;
        }
      }
    }
  };
  function nonOperatorSymbol(node) {
    return node instanceof Symbol && !(node instanceof BinaryOperator);
  }
});
var BuiltInOpNames = {}; // http://latex.wikia.com/wiki/List_of_LaTeX_symbols#Named_operators:_sin.2C_cos.2C_etc.
  // except for over/under line/arrow \lim variants like \varlimsup
var TwoWordOpNames = { limsup: 1, liminf: 1, projlim: 1, injlim: 1 };
(function() {
  var autoOps = Options.p.autoOperatorNames = { _maxLength: 9 };
  var mostOps = ('arg deg det dim exp gcd hom inf ker lg lim ln log max min sup'
                 + ' limsup liminf injlim projlim Pr').split(' ');
  for (var i = 0; i < mostOps.length; i += 1) {
    BuiltInOpNames[mostOps[i]] = autoOps[mostOps[i]] = 1;
  }

  var builtInTrigs = // why coth but not sech and csch, LaTeX?
    'sin cos tan arcsin arccos arctan sinh cosh tanh sec csc cot coth'.split(' ');
  for (var i = 0; i < builtInTrigs.length; i += 1) {
    BuiltInOpNames[builtInTrigs[i]] = 1;
  }

  var autoTrigs = 'sin cos tan sec cosec csc cotan cot ctg'.split(' ');
  for (var i = 0; i < autoTrigs.length; i += 1) {
    autoOps[autoTrigs[i]] =
    autoOps['arc'+autoTrigs[i]] =
    autoOps[autoTrigs[i]+'h'] =
    autoOps['ar'+autoTrigs[i]+'h'] =
    autoOps['arc'+autoTrigs[i]+'h'] = 1;
  }
}());
optionProcessors.autoOperatorNames = function(cmds) {
  if (!/^[a-z]+(?: [a-z]+)*$/i.test(cmds)) {
    throw '"'+cmds+'" not a space-delimited list of only letters';
  }
  var list = cmds.split(' '), dict = {}, maxLength = 0;
  for (var i = 0; i < list.length; i += 1) {
    var cmd = list[i];
    if (cmd.length < 2) {
      throw '"'+cmd+'" not minimum length of 2';
    }
    dict[cmd] = 1;
    maxLength = max(maxLength, cmd.length);
  }
  dict._maxLength = maxLength;
  return dict;
};
var OperatorName = P(Symbol, function(_, super_) {
  _.init = function(fn) { this.ctrlSeq = fn; };
  _.createLeftOf = function(cursor) {
    var fn = this.ctrlSeq;
    for (var i = 0; i < fn.length; i += 1) {
      Letter(fn.charAt(i)).createLeftOf(cursor);
    }
  };
  _.parser = function() {
    var fn = this.ctrlSeq;
    var block = MathBlock();
    for (var i = 0; i < fn.length; i += 1) {
      Letter(fn.charAt(i)).adopt(block, block.ends[R], 0);
    }
    return Parser.succeed(block.children());
  };
});
for (var fn in BuiltInOpNames) if (BuiltInOpNames.hasOwnProperty(fn)) {
  LatexCmds[fn] = OperatorName;
}
LatexCmds.operatorname = P(MathCommand, function(_) {
  _.createLeftOf = noop;
  _.numBlocks = function() { return 1; };
  _.parser = function() {
    return latexMathParser.block.map(function(b) { return b.children(); });
  };
});

LatexCmds.f = P(Letter, function(_, super_) {
  _.init = function() {
    Symbol.p.init.call(this, this.letter = 'f', '<var class="mq-f">f</var>');
  };
  _.italicize = function(bool) {
    this.jQ.html('f').toggleClass('mq-f', bool);
    return super_.italicize.apply(this, arguments);
  };
});

// VanillaSymbol's
LatexCmds[' '] = LatexCmds.space = bind(VanillaSymbol, '\\ ', '&nbsp;');

LatexCmds["'"] = LatexCmds.prime = bind(VanillaSymbol, "'", '&prime;');

LatexCmds.backslash = bind(VanillaSymbol,'\\backslash ','\\');
if (!CharCmds['\\']) CharCmds['\\'] = LatexCmds.backslash;

LatexCmds.$ = bind(VanillaSymbol, '\\$', '$');

// does not use Symbola font
var NonSymbolaSymbol = P(Symbol, function(_, super_) {
  _.init = function(ch, html) {
    super_.init.call(this, ch, '<span class="mq-nonSymbola">'+(html || ch)+'</span>');
  };
});

LatexCmds['@'] = NonSymbolaSymbol;
LatexCmds['&'] = bind(NonSymbolaSymbol, '\\&', '&amp;');
LatexCmds['%'] = bind(NonSymbolaSymbol, '\\%', '%');

//the following are all Greek to me, but this helped a lot: http://www.ams.org/STIX/ion/stixsig03.html

//lowercase Greek letter variables
LatexCmds.alpha =
LatexCmds.beta =
LatexCmds.gamma =
LatexCmds.delta =
LatexCmds.zeta =
LatexCmds.eta =
LatexCmds.theta =
LatexCmds.iota =
LatexCmds.kappa =
LatexCmds.mu =
LatexCmds.nu =
LatexCmds.xi =
LatexCmds.rho =
LatexCmds.sigma =
LatexCmds.tau =
LatexCmds.chi =
LatexCmds.psi =
LatexCmds.omega = P(Variable, function(_, super_) {
  _.init = function(latex) {
    super_.init.call(this,'\\'+latex+' ','&'+latex+';');
  };
});

//why can't anybody FUCKING agree on these
LatexCmds.phi = //W3C or Unicode?
  bind(Variable,'\\phi ','&#981;');

LatexCmds.phiv = //Elsevier and 9573-13
LatexCmds.varphi = //AMS and LaTeX
  bind(Variable,'\\varphi ','&phi;');

LatexCmds.epsilon = //W3C or Unicode?
  bind(Variable,'\\epsilon ','&#1013;');

LatexCmds.epsiv = //Elsevier and 9573-13
LatexCmds.varepsilon = //AMS and LaTeX
  bind(Variable,'\\varepsilon ','&epsilon;');

LatexCmds.piv = //W3C/Unicode and Elsevier and 9573-13
LatexCmds.varpi = //AMS and LaTeX
  bind(Variable,'\\varpi ','&piv;');

LatexCmds.sigmaf = //W3C/Unicode
LatexCmds.sigmav = //Elsevier
LatexCmds.varsigma = //LaTeX
  bind(Variable,'\\varsigma ','&sigmaf;');

LatexCmds.thetav = //Elsevier and 9573-13
LatexCmds.vartheta = //AMS and LaTeX
LatexCmds.thetasym = //W3C/Unicode
  bind(Variable,'\\vartheta ','&thetasym;');

LatexCmds.upsilon = //AMS and LaTeX and W3C/Unicode
LatexCmds.upsi = //Elsevier and 9573-13
  bind(Variable,'\\upsilon ','&upsilon;');

//these aren't even mentioned in the HTML character entity references
LatexCmds.gammad = //Elsevier
LatexCmds.Gammad = //9573-13 -- WTF, right? I dunno if this was a typo in the reference (see above)
LatexCmds.digamma = //LaTeX
  bind(Variable,'\\digamma ','&#989;');

LatexCmds.kappav = //Elsevier
LatexCmds.varkappa = //AMS and LaTeX
  bind(Variable,'\\varkappa ','&#1008;');

LatexCmds.rhov = //Elsevier and 9573-13
LatexCmds.varrho = //AMS and LaTeX
  bind(Variable,'\\varrho ','&#1009;');

//Greek constants, look best in non-italicized Times New Roman
LatexCmds.pi = LatexCmds['\u03c0'] = bind(NonSymbolaSymbol,'\\pi ','&pi;');
LatexCmds.lambda = bind(NonSymbolaSymbol,'\\lambda ','&lambda;');

//uppercase greek letters

LatexCmds.Upsilon = //LaTeX
LatexCmds.Upsi = //Elsevier and 9573-13
LatexCmds.upsih = //W3C/Unicode "upsilon with hook"
LatexCmds.Upsih = //'cos it makes sense to me
  bind(Symbol,'\\Upsilon ','<var style="font-family: serif">&upsih;</var>'); //Symbola's 'upsilon with a hook' is a capital Y without hooks :(

//other symbols with the same LaTeX command and HTML character entity reference
LatexCmds.Gamma =
LatexCmds.Delta =
LatexCmds.Theta =
LatexCmds.Lambda =
LatexCmds.Xi =
LatexCmds.Pi =
LatexCmds.Sigma =
LatexCmds.Phi =
LatexCmds.Psi =
LatexCmds.Omega =
LatexCmds.forall = P(VanillaSymbol, function(_, super_) {
  _.init = function(latex) {
    super_.init.call(this,'\\'+latex+' ','&'+latex+';');
  };
});

// symbols that aren't a single MathCommand, but are instead a whole
// Fragment. Creates the Fragment from a LaTeX string
var LatexFragment = P(MathCommand, function(_) {
  _.init = function(latex) { this.latex = latex; };
  _.createLeftOf = function(cursor) {
    var block = latexMathParser.parse(this.latex);
    block.children().adopt(cursor.parent, cursor[L], cursor[R]);
    cursor[L] = block.ends[R];
    block.jQize().insertBefore(cursor.jQ);
    block.finalizeInsert(cursor.options, cursor);
    if (block.ends[R][R].siblingCreated) block.ends[R][R].siblingCreated(cursor.options, L);
    if (block.ends[L][L].siblingCreated) block.ends[L][L].siblingCreated(cursor.options, R);
    cursor.parent.bubble('reflow');
  };
  _.parser = function() {
    var frag = latexMathParser.parse(this.latex).children();
    return Parser.succeed(frag);
  };
});

// for what seems to me like [stupid reasons][1], Unicode provides
// subscripted and superscripted versions of all ten Arabic numerals,
// as well as [so-called "vulgar fractions"][2].
// Nobody really cares about most of them, but some of them actually
// predate Unicode, dating back to [ISO-8859-1][3], apparently also
// known as "Latin-1", which among other things [Windows-1252][4]
// largely coincides with, so Microsoft Word sometimes inserts them
// and they get copy-pasted into MathQuill.
//
// (Irrelevant but funny story: Windows-1252 is actually a strict
// superset of the "closely related but distinct"[3] "ISO 8859-1" --
// see the lack of a dash after "ISO"? Completely different character
// set, like elephants vs elephant seals, or "Zombies" vs "Zombie
// Redneck Torture Family". What kind of idiot would get them confused.
// People in fact got them confused so much, it was so common to
// mislabel Windows-1252 text as ISO-8859-1, that most modern web
// browsers and email clients treat the MIME charset of ISO-8859-1
// as actually Windows-1252, behavior now standard in the HTML5 spec.)
//
// [1]: http://en.wikipedia.org/wiki/Unicode_subscripts_andsuper_scripts
// [2]: http://en.wikipedia.org/wiki/Number_Forms
// [3]: http://en.wikipedia.org/wiki/ISO/IEC_8859-1
// [4]: http://en.wikipedia.org/wiki/Windows-1252
LatexCmds['\u00b9'] = bind(LatexFragment, '^1');
LatexCmds['\u00b2'] = bind(LatexFragment, '^2');
LatexCmds['\u00b3'] = bind(LatexFragment, '^3');
LatexCmds['\u00bc'] = bind(LatexFragment, '\\frac14');
LatexCmds['\u00bd'] = bind(LatexFragment, '\\frac12');
LatexCmds['\u00be'] = bind(LatexFragment, '\\frac34');

var PlusMinus = P(BinaryOperator, function(_) {
  _.init = VanillaSymbol.prototype.init;

  _.contactWeld = _.siblingCreated = _.siblingDeleted = function(opts, dir) {
    if (dir === R) return; // ignore if sibling only changed on the right
    this.jQ[0].className =
      (!this[L] || this[L] instanceof BinaryOperator ? '' : 'mq-binary-operator');
    return this;
  };
});

LatexCmds['+'] = bind(PlusMinus, '+', '+');
//yes, these are different dashes, I think one is an en dash and the other is a hyphen
LatexCmds['\u2013'] = LatexCmds['-'] = bind(PlusMinus, '-', '&minus;');
LatexCmds['\u00b1'] = LatexCmds.pm = LatexCmds.plusmn = LatexCmds.plusminus =
  bind(PlusMinus,'\\pm ','&plusmn;');
LatexCmds.mp = LatexCmds.mnplus = LatexCmds.minusplus =
  bind(PlusMinus,'\\mp ','&#8723;');

CharCmds['*'] = LatexCmds.sdot = LatexCmds.cdot =
  bind(BinaryOperator, '\\cdot ', '&middot;');
//semantically should be &sdot;, but &middot; looks better

var Inequality = P(BinaryOperator, function(_, super_) {
  _.init = function(data, strict) {
    this.data = data;
    this.strict = strict;
    var strictness = (strict ? 'Strict' : '');
    super_.init.call(this, data['ctrlSeq'+strictness], data['html'+strictness],
                     data['text'+strictness]);
  };
  _.swap = function(strict) {
    this.strict = strict;
    var strictness = (strict ? 'Strict' : '');
    this.ctrlSeq = this.data['ctrlSeq'+strictness];
    this.jQ.html(this.data['html'+strictness]);
    this.textTemplate = [ this.data['text'+strictness] ];
  };
  _.deleteTowards = function(dir, cursor) {
    if (dir === L && !this.strict) {
      this.swap(true);
      this.bubble('reflow');
      return;
    }
    super_.deleteTowards.apply(this, arguments);
  };
});

var less = { ctrlSeq: '\\le ', html: '&le;', text: '\u2264',
             ctrlSeqStrict: '<', htmlStrict: '&lt;', textStrict: '<' };
var greater = { ctrlSeq: '\\ge ', html: '&ge;', text: '\u2265',
                ctrlSeqStrict: '>', htmlStrict: '&gt;', textStrict: '>' };

LatexCmds['<'] = LatexCmds.lt = bind(Inequality, less, true);
LatexCmds['>'] = LatexCmds.gt = bind(Inequality, greater, true);
LatexCmds['\u2264'] = LatexCmds.le = LatexCmds.leq = bind(Inequality, less, false);
LatexCmds['\u2265'] = LatexCmds.ge = LatexCmds.geq = bind(Inequality, greater, false);

var Equality = P(BinaryOperator, function(_, super_) {
  _.init = function() {
    super_.init.call(this, '=', '=');
  };
  _.createLeftOf = function(cursor) {
    if (cursor[L] instanceof Inequality && cursor[L].strict) {
      cursor[L].swap(false);
      cursor[L].bubble('reflow');
      return;
    }
    super_.createLeftOf.apply(this, arguments);
  };
});
LatexCmds['='] = Equality;

LatexCmds.times = bind(BinaryOperator, '\\times ', '&times;', '[x]');

LatexCmds['\u00f7'] = LatexCmds.div = LatexCmds.divide = LatexCmds.divides =
  bind(BinaryOperator,'\\div ','&divide;', '[/]');

CharCmds['~'] = LatexCmds.sim = bind(BinaryOperator, '\\sim ', '~', '~');
/***************************
 * Commands and Operators.
 **************************/

var scale, // = function(jQ, x, y) { ... }
//will use a CSS 2D transform to scale the jQuery-wrapped HTML elements,
//or the filter matrix transform fallback for IE 5.5-8, or gracefully degrade to
//increasing the fontSize to match the vertical Y scaling factor.

//ideas from http://github.com/louisremi/jquery.transform.js
//see also http://msdn.microsoft.com/en-us/library/ms533014(v=vs.85).aspx

  forceIERedraw = noop,
  div = document.createElement('div'),
  div_style = div.style,
  transformPropNames = {
    transform:1,
    WebkitTransform:1,
    MozTransform:1,
    OTransform:1,
    msTransform:1
  },
  transformPropName;

for (var prop in transformPropNames) {
  if (prop in div_style) {
    transformPropName = prop;
    break;
  }
}

if (transformPropName) {
  scale = function(jQ, x, y) {
    jQ.css(transformPropName, 'scale('+x+','+y+')');
  };
}
else if ('filter' in div_style) { //IE 6, 7, & 8 fallback, see https://github.com/laughinghan/mathquill/wiki/Transforms
  forceIERedraw = function(el){ el.className = el.className; };
  scale = function(jQ, x, y) { //NOTE: assumes y > x
    x /= (1+(y-1)/2);
    jQ.css('fontSize', y + 'em');
    if (!jQ.hasClass('mq-matrixed-container')) {
      jQ.addClass('mq-matrixed-container')
      .wrapInner('<span class="mq-matrixed"></span>');
    }
    var innerjQ = jQ.children()
    .css('filter', 'progid:DXImageTransform.Microsoft'
        + '.Matrix(M11=' + x + ",SizingMethod='auto expand')"
    );
    function calculateMarginRight() {
      jQ.css('marginRight', (innerjQ.width()-1)*(x-1)/x + 'px');
    }
    calculateMarginRight();
    var intervalId = setInterval(calculateMarginRight);
    $(window).load(function() {
      clearTimeout(intervalId);
      calculateMarginRight();
    });
  };
}
else {
  scale = function(jQ, x, y) {
    jQ.css('fontSize', y + 'em');
  };
}

var Style = P(MathCommand, function(_, super_) {
  _.init = function(ctrlSeq, tagName, attrs) {
    super_.init.call(this, ctrlSeq, '<'+tagName+' '+attrs+'>&0</'+tagName+'>');
  };
});

//fonts
LatexCmds.mathrm = bind(Style, '\\mathrm', 'span', 'class="mq-roman mq-font"');
LatexCmds.mathit = bind(Style, '\\mathit', 'i', 'class="mq-font"');
LatexCmds.mathbf = bind(Style, '\\mathbf', 'b', 'class="mq-font"');
LatexCmds.mathsf = bind(Style, '\\mathsf', 'span', 'class="mq-sans-serif mq-font"');
LatexCmds.mathtt = bind(Style, '\\mathtt', 'span', 'class="mq-monospace mq-font"');
//text-decoration
LatexCmds.underline = bind(Style, '\\underline', 'span', 'class="mq-non-leaf mq-underline"');
LatexCmds.overline = LatexCmds.bar = bind(Style, '\\overline', 'span', 'class="mq-non-leaf mq-overline"');

// `\textcolor{color}{math}` will apply a color to the given math content, where
// `color` is any valid CSS Color Value (see [SitePoint docs][] (recommended),
// [Mozilla docs][], or [W3C spec][]).
//
// [SitePoint docs]: http://reference.sitepoint.com/css/colorvalues
// [Mozilla docs]: https://developer.mozilla.org/en-US/docs/CSS/color_value#Values
// [W3C spec]: http://dev.w3.org/csswg/css3-color/#colorunits
var TextColor = LatexCmds.textcolor = P(MathCommand, function(_, super_) {
  _.setColor = function(color) {
    this.color = color;
    this.htmlTemplate =
      '<span class="mq-textcolor" style="color:' + color + '">&0</span>';
  };
  _.latex = function() {
    return '\\textcolor{' + this.color + '}{' + this.blocks[0].latex() + '}';
  };
  _.parser = function() {
    var self = this;
    var optWhitespace = Parser.optWhitespace;
    var string = Parser.string;
    var regex = Parser.regex;

    return optWhitespace
      .then(string('{'))
      .then(regex(/^[#\w\s.,()%-]*/))
      .skip(string('}'))
      .then(function(color) {
        self.setColor(color);
        return super_.parser.call(self);
      })
    ;
  };
});

// Very similar to the \textcolor command, but will add the given CSS class.
// Usage: \class{classname}{math}
// Note regex that whitelists valid CSS classname characters:
// https://github.com/mathquill/mathquill/pull/191#discussion_r4327442
var Class = LatexCmds['class'] = P(MathCommand, function(_, super_) {
  _.parser = function() {
    var self = this, string = Parser.string, regex = Parser.regex;
    return Parser.optWhitespace
      .then(string('{'))
      .then(regex(/^[-\w\s\\\xA0-\xFF]*/))
      .skip(string('}'))
      .then(function(cls) {
        self.htmlTemplate = '<span class="mq-class '+cls+'">&0</span>';
        return super_.parser.call(self);
      })
    ;
  };
});

var SupSub = P(MathCommand, function(_, super_) {
  _.ctrlSeq = '_{...}^{...}';
  _.createLeftOf = function(cursor) {
    if (!cursor[L] && cursor.options.supSubsRequireOperand) return;
    return super_.createLeftOf.apply(this, arguments);
  };
  _.contactWeld = function(cursor) {
    // Look on either side for a SupSub, if one is found compare my
    // .sub, .sup with its .sub, .sup. If I have one that it doesn't,
    // then call .addBlock() on it with my block; if I have one that
    // it also has, then insert my block's children into its block,
    // unless my block has none, in which case insert the cursor into
    // its block (and not mine, I'm about to remove myself) in the case
    // I was just typed.
    // TODO: simplify

    // equiv. to [L, R].forEach(function(dir) { ... });
    for (var dir = L; dir; dir = (dir === L ? R : false)) {
      if (this[dir] instanceof SupSub) {
        // equiv. to 'sub sup'.split(' ').forEach(function(supsub) { ... });
        for (var supsub = 'sub'; supsub; supsub = (supsub === 'sub' ? 'sup' : false)) {
          var src = this[supsub], dest = this[dir][supsub];
          if (!src) continue;
          if (!dest) this[dir].addBlock(src.disown());
          else if (!src.isEmpty()) { // ins src children at -dir end of dest
            src.jQ.children().insAtDirEnd(-dir, dest.jQ);
            var children = src.children().disown();
            var pt = Point(dest, children.ends[R], dest.ends[L]);
            if (dir === L) children.adopt(dest, dest.ends[R], 0);
            else children.adopt(dest, 0, dest.ends[L]);
          }
          else var pt = Point(dest, 0, dest.ends[L]);
          this.placeCursor = (function(dest, src) { // TODO: don't monkey-patch
            return function(cursor) { cursor.insAtDirEnd(-dir, dest || src); };
          }(dest, src));
        }
        this.remove();
        if (cursor && cursor[L] === this) {
          if (dir === R && pt) {
            pt[L] ? cursor.insRightOf(pt[L]) : cursor.insAtLeftEnd(pt.parent);
          }
          else cursor.insRightOf(this[dir]);
        }
        break;
      }
    }
    this.respace();
  };
  Options.p.charsThatBreakOutOfSupSub = '';
  _.finalizeTree = function() {
    this.ends[L].write = function(cursor, ch) {
      if (cursor.options.autoSubscriptNumerals && this === this.parent.sub) {
        if (ch === '_') return;
        var cmd = this.chToCmd(ch);
        if (cmd instanceof Symbol) cursor.deleteSelection();
        else cursor.clearSelection().insRightOf(this.parent);
        return cmd.createLeftOf(cursor.show());
      }
      if (
        cursor.options.charsThatBreakOutOfSupSub.indexOf(ch) > -1 &&
        // Unary operators never break out of exponents, so that it's easy to
        // write negative exponents.
        cursor[L] !== 0
      ) {
        cursor.insRightOf(this.parent);
      }
      MathBlock.p.write.apply(this, arguments);
    };
  };
  _.moveTowards = function(dir, cursor, updown) {
    if (cursor.options.autoSubscriptNumerals && !this.sup) {
      cursor.insDirOf(dir, this);
    }
    else super_.moveTowards.apply(this, arguments);
  };
  _.deleteTowards = function(dir, cursor) {
    if (cursor.options.autoSubscriptNumerals && this.sub) {
      var cmd = this.sub.ends[-dir];
      if (cmd instanceof Symbol) cmd.remove();
      else if (cmd) cmd.deleteTowards(dir, cursor.insAtDirEnd(-dir, this.sub));

      // TODO: factor out a .removeBlock() or something
      // Also note `-dir` because in e.g. x_1^2| want backspacing (leftward)
      // to delete the 1 but to end up rightward of x^2; with non-negated
      // `dir` (try it), the cursor appears to have gone "through" the ^2.
      if (this.sub.isEmpty()) this.sub.deleteOutOf(-dir, cursor.insAtLeftEnd(this.sub));
    }
    else super_.deleteTowards.apply(this, arguments);
  };
  _.latex = function() {
    function latex(prefix, block) {
      var l = block && block.latex();
      return block ? prefix + (l.length === 1 ? l : '{' + (l || ' ') + '}') : '';
    }
    return latex('_', this.sub) + latex('^', this.sup);
  };
  _.respace = _.siblingCreated = _.siblingDeleted = function(opts, dir) {
    if (dir === R) return; // ignore if sibling only changed on the right
    this.jQ.toggleClass('mq-limit', this[L].ctrlSeq === '\\int ');
  };
  _.addBlock = function(block) {
    if (this.supsub === 'sub') {
      this.sup = this.upInto = this.sub.upOutOf = block;
      block.adopt(this, this.sub, 0).downOutOf = this.sub;
      block.jQ = $('<span class="mq-sup"/>').append(block.jQ.children())
        .attr(mqBlockId, block.id).prependTo(this.jQ);
    }
    else {
      this.sub = this.downInto = this.sup.downOutOf = block;
      block.adopt(this, 0, this.sup).upOutOf = this.sup;
      block.jQ = $('<span class="mq-sub"></span>').append(block.jQ.children())
        .attr(mqBlockId, block.id).appendTo(this.jQ.removeClass('mq-sup-only'));
      this.jQ.append('<span style="display:inline-block;width:0">&#8203;</span>');
    }
    // like 'sub sup'.split(' ').forEach(function(supsub) { ... });
    for (var i = 0; i < 2; i += 1) (function(cmd, supsub, oppositeSupsub, updown) {
      cmd[supsub].deleteOutOf = function(dir, cursor) {
        cursor.insDirOf(dir, this.parent);
        if (!this.isEmpty()) {
          cursor[-dir] = this.ends[dir];
          this.children().disown()
            .withDirAdopt(dir, cursor.parent, cursor[dir], this.parent)
            .jQ.insDirOf(dir, this.parent.jQ);
        }
        cmd.supsub = oppositeSupsub;
        delete cmd[supsub];
        delete cmd[updown+'Into'];
        cmd[oppositeSupsub][updown+'OutOf'] = insLeftOfMeUnlessAtEnd;
        delete cmd[oppositeSupsub].deleteOutOf;
        if (supsub === 'sub') $(cmd.jQ.addClass('mq-sup-only')[0].lastChild).remove();
        this.remove();
      };
    }(this, 'sub sup'.split(' ')[i], 'sup sub'.split(' ')[i], 'down up'.split(' ')[i]));
  };
});

function insLeftOfMeUnlessAtEnd(cursor) {
  // cursor.insLeftOf(cmd), unless cursor at the end of block, and every
  // ancestor cmd is at the end of every ancestor block
  var cmd = this.parent, ancestorCmd = cursor;
  do {
    if (ancestorCmd[R]) return cursor.insLeftOf(cmd);
    ancestorCmd = ancestorCmd.parent.parent;
  } while (ancestorCmd !== cmd);
  cursor.insRightOf(cmd);
}

LatexCmds.subscript =
LatexCmds._ = P(SupSub, function(_, super_) {
  _.supsub = 'sub';
  _.htmlTemplate =
      '<span class="mq-supsub mq-non-leaf">'
    +   '<span class="mq-sub">&0</span>'
    +   '<span style="display:inline-block;width:0">&#8203;</span>'
    + '</span>'
  ;
  _.textTemplate = [ '_' ];
  _.finalizeTree = function() {
    this.downInto = this.sub = this.ends[L];
    this.sub.upOutOf = insLeftOfMeUnlessAtEnd;
    super_.finalizeTree.call(this);
  };
});

LatexCmds.superscript =
LatexCmds.supscript =
LatexCmds['^'] = P(SupSub, function(_, super_) {
  _.supsub = 'sup';
  _.htmlTemplate =
      '<span class="mq-supsub mq-non-leaf mq-sup-only">'
    +   '<span class="mq-sup">&0</span>'
    + '</span>'
  ;
  _.textTemplate = [ '**' ];
  _.finalizeTree = function() {
    this.upInto = this.sup = this.ends[R];
    this.sup.downOutOf = insLeftOfMeUnlessAtEnd;
    super_.finalizeTree.call(this);
  };
});

var SummationNotation = P(MathCommand, function(_, super_) {
  _.init = function(ch, html) {
    var htmlTemplate =
      '<span class="mq-large-operator mq-non-leaf">'
    +   '<span class="mq-to"><span>&1</span></span>'
    +   '<big>'+html+'</big>'
    +   '<span class="mq-from"><span>&0</span></span>'
    + '</span>'
    ;
    Symbol.prototype.init.call(this, ch, htmlTemplate);
  };
  _.createLeftOf = function(cursor) {
    super_.createLeftOf.apply(this, arguments);
    if (cursor.options.sumStartsWithNEquals) {
      Letter('n').createLeftOf(cursor);
      Equality().createLeftOf(cursor);
    }
  };
  _.latex = function() {
    function simplify(latex) {
      return latex.length === 1 ? latex : '{' + (latex || ' ') + '}';
    }
    return this.ctrlSeq + '_' + simplify(this.ends[L].latex()) +
      '^' + simplify(this.ends[R].latex());
  };
  _.parser = function() {
    var string = Parser.string;
    var optWhitespace = Parser.optWhitespace;
    var succeed = Parser.succeed;
    var block = latexMathParser.block;

    var self = this;
    var blocks = self.blocks = [ MathBlock(), MathBlock() ];
    for (var i = 0; i < blocks.length; i += 1) {
      blocks[i].adopt(self, self.ends[R], 0);
    }

    return optWhitespace.then(string('_').or(string('^'))).then(function(supOrSub) {
      var child = blocks[supOrSub === '_' ? 0 : 1];
      return block.then(function(block) {
        block.children().adopt(child, child.ends[R], 0);
        return succeed(self);
      });
    }).many().result(self);
  };
  _.finalizeTree = function() {
    this.downInto = this.ends[L];
    this.upInto = this.ends[R];
    this.ends[L].upOutOf = this.ends[R];
    this.ends[R].downOutOf = this.ends[L];
  };
});

LatexCmds['\u2211'] =
LatexCmds.sum =
LatexCmds.summation = bind(SummationNotation,'\\sum ','&sum;');

LatexCmds['\u220f'] =
LatexCmds.prod =
LatexCmds.product = bind(SummationNotation,'\\prod ','&prod;');

LatexCmds.coprod =
LatexCmds.coproduct = bind(SummationNotation,'\\coprod ','&#8720;');

var Fraction =
LatexCmds.frac =
LatexCmds.dfrac =
LatexCmds.cfrac =
LatexCmds.fraction = P(MathCommand, function(_, super_) {
  _.ctrlSeq = '\\frac';
  _.htmlTemplate =
      '<span class="mq-fraction mq-non-leaf">'
    +   '<span class="mq-numerator">&0</span>'
    +   '<span class="mq-denominator">&1</span>'
    +   '<span style="display:inline-block;width:0">&#8203;</span>'
    + '</span>'
  ;
  _.textTemplate = ['(', '/', ')'];
  _.finalizeTree = function() {
    this.upInto = this.ends[R].upOutOf = this.ends[L];
    this.downInto = this.ends[L].downOutOf = this.ends[R];
  };
});

var LiveFraction =
LatexCmds.over =
CharCmds['/'] = P(Fraction, function(_, super_) {
  _.createLeftOf = function(cursor) {
    if (!this.replacedFragment) {
      var leftward = cursor[L];
      while (leftward &&
        !(
          leftward instanceof BinaryOperator ||
          leftward instanceof (LatexCmds.text || noop) ||
          leftward instanceof SummationNotation ||
          leftward.ctrlSeq === '\\ ' ||
          /^[,;:]$/.test(leftward.ctrlSeq)
        ) //lookbehind for operator
      ) leftward = leftward[L];

      if (leftward instanceof SummationNotation && leftward[R] instanceof SupSub) {
        leftward = leftward[R];
        if (leftward[R] instanceof SupSub && leftward[R].ctrlSeq != leftward.ctrlSeq)
          leftward = leftward[R];
      }

      if (leftward !== cursor[L]) {
        this.replaces(Fragment(leftward[R] || cursor.parent.ends[L], cursor[L]));
        cursor[L] = leftward;
      }
    }
    super_.createLeftOf.call(this, cursor);
  };
});

var SquareRoot =
LatexCmds.sqrt =
LatexCmds['\u221a'] = P(MathCommand, function(_, super_) {
  _.ctrlSeq = '\\sqrt';
  _.htmlTemplate =
      '<span class="mq-non-leaf">'
    +   '<span class="mq-scaled mq-sqrt-prefix">&radic;</span>'
    +   '<span class="mq-non-leaf mq-sqrt-stem">&0</span>'
    + '</span>'
  ;
  _.textTemplate = ['sqrt(', ')'];
  _.parser = function() {
    return latexMathParser.optBlock.then(function(optBlock) {
      return latexMathParser.block.map(function(block) {
        var nthroot = NthRoot();
        nthroot.blocks = [ optBlock, block ];
        optBlock.adopt(nthroot, 0, 0);
        block.adopt(nthroot, optBlock, 0);
        return nthroot;
      });
    }).or(super_.parser.call(this));
  };
  _.reflow = function() {
    var block = this.ends[R].jQ;
    scale(block.prev(), 1, block.innerHeight()/+block.css('fontSize').slice(0,-2) - .1);
  };
});

var Vec = LatexCmds.vec = P(MathCommand, function(_, super_) {
  _.ctrlSeq = '\\vec';
  _.htmlTemplate =
      '<span class="mq-non-leaf">'
    +   '<span class="mq-vector-prefix">&rarr;</span>'
    +   '<span class="mq-vector-stem">&0</span>'
    + '</span>'
  ;
  _.textTemplate = ['vec(', ')'];
});

var NthRoot =
LatexCmds.nthroot = P(SquareRoot, function(_, super_) {
  _.htmlTemplate =
      '<sup class="mq-nthroot mq-non-leaf">&0</sup>'
    + '<span class="mq-scaled">'
    +   '<span class="mq-sqrt-prefix mq-scaled">&radic;</span>'
    +   '<span class="mq-sqrt-stem mq-non-leaf">&1</span>'
    + '</span>'
  ;
  _.textTemplate = ['sqrt[', '](', ')'];
  _.latex = function() {
    return '\\sqrt['+this.ends[L].latex()+']{'+this.ends[R].latex()+'}';
  };
});

function DelimsMixin(_, super_) {
  _.jQadd = function() {
    super_.jQadd.apply(this, arguments);
    this.delimjQs = this.jQ.children(':first').add(this.jQ.children(':last'));
    this.contentjQ = this.jQ.children(':eq(1)');
  };
  _.reflow = function() {
    var height = this.contentjQ.outerHeight()
                 / parseFloat(this.contentjQ.css('fontSize'));
    scale(this.delimjQs, min(1 + .2*(height - 1), 1.2), 1.2*height);
  };
}

// Round/Square/Curly/Angle Brackets (aka Parens/Brackets/Braces)
//   first typed as one-sided bracket with matching "ghost" bracket at
//   far end of current block, until you type an opposing one
var Bracket = P(P(MathCommand, DelimsMixin), function(_, super_) {
  _.init = function(side, open, close, ctrlSeq, end) {
    super_.init.call(this, '\\left'+ctrlSeq, undefined, [open, close]);
    this.side = side;
    this.sides = {};
    this.sides[L] = { ch: open, ctrlSeq: ctrlSeq };
    this.sides[R] = { ch: close, ctrlSeq: end };
  };
  _.numBlocks = function() { return 1; };
  _.html = function() { // wait until now so that .side may
    this.htmlTemplate = // be set by createLeftOf or parser
        '<span class="mq-non-leaf">'
      +   '<span class="mq-scaled mq-paren'+(this.side === R ? ' mq-ghost' : '')+'">'
      +     this.sides[L].ch
      +   '</span>'
      +   '<span class="mq-non-leaf">&0</span>'
      +   '<span class="mq-scaled mq-paren'+(this.side === L ? ' mq-ghost' : '')+'">'
      +     this.sides[R].ch
      +   '</span>'
      + '</span>'
    ;
    return super_.html.call(this);
  };
  _.latex = function() {
    return '\\left'+this.sides[L].ctrlSeq+this.ends[L].latex()+'\\right'+this.sides[R].ctrlSeq;
  };
  _.oppBrack = function(opts, node, expectedSide) {
    // return node iff it's a 1-sided bracket of expected side (if any, may be
    // undefined), and of opposite side from me if I'm not a pipe
    return node instanceof Bracket && node.side && node.side !== -expectedSide
      && (this.sides[this.side].ch === '|' || node.side === -this.side)
      && (!opts.restrictMismatchedBrackets
        || OPP_BRACKS[this.sides[this.side].ch] === node.sides[node.side].ch
        || { '(': ']', '[': ')' }[this.sides[L].ch] === node.sides[R].ch) && node;
  };
  _.closeOpposing = function(brack) {
    brack.side = 0;
    brack.sides[this.side] = this.sides[this.side]; // copy over my info (may be
    brack.delimjQs.eq(this.side === L ? 0 : 1) // mismatched, like [a, b))
      .removeClass('mq-ghost').html(this.sides[this.side].ch);
  };
  _.createLeftOf = function(cursor) {
    if (!this.replacedFragment) { // unless wrapping seln in brackets,
        // check if next to or inside an opposing one-sided bracket
        // (must check both sides 'cos I might be a pipe)
      var opts = cursor.options;
      var brack = this.oppBrack(opts, cursor[L], L)
                  || this.oppBrack(opts, cursor[R], R)
                  || this.oppBrack(opts, cursor.parent.parent);
    }
    if (brack) {
      var side = this.side = -brack.side; // may be pipe with .side not yet set
      this.closeOpposing(brack);
      if (brack === cursor.parent.parent && cursor[side]) { // move the stuff between
        Fragment(cursor[side], cursor.parent.ends[side], -side) // me and ghost outside
          .disown().withDirAdopt(-side, brack.parent, brack, brack[side])
          .jQ.insDirOf(side, brack.jQ);
        brack.bubble('reflow');
      }
    }
    else {
      brack = this, side = brack.side;
      if (brack.replacedFragment) brack.side = 0; // wrapping seln, don't be one-sided
      else if (cursor[-side]) { // elsewise, auto-expand so ghost is at far end
        brack.replaces(Fragment(cursor[-side], cursor.parent.ends[-side], side));
        cursor[-side] = 0;
      }
      super_.createLeftOf.call(brack, cursor);
    }
    if (side === L) cursor.insAtLeftEnd(brack.ends[L]);
    else cursor.insRightOf(brack);
  };
  _.placeCursor = noop;
  _.unwrap = function() {
    this.ends[L].children().disown().adopt(this.parent, this, this[R])
      .jQ.insertAfter(this.jQ);
    this.remove();
  };
  _.deleteSide = function(side, outward, cursor) {
    var parent = this.parent, sib = this[side], farEnd = parent.ends[side];

    if (
      //unwrap if deleting either...
      side === this.side || //the solid side with a ghost pair
      (this.side === 0 && side === -1) //opening paren
    ) {
      this.unwrap();
      sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);
      return;
    }

    var opts = cursor.options;
    this.side = -side;
    // if deleting like, outer close-brace of [(1+2)+3} where inner open-paren
    if (this.oppBrack(opts, this.ends[L].ends[this.side], side)) { // is ghost,
      this.closeOpposing(this.ends[L].ends[this.side]); // then become [1+2)+3
      var origEnd = this.ends[L].ends[side];
      this.unwrap();
      if (origEnd.siblingCreated) origEnd.siblingCreated(cursor.options, side);
      sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);
    }
    else { // if deleting like, inner close-brace of ([1+2}+3) where outer
      if (this.oppBrack(opts, this.parent.parent, side)) { // open-paren is
        this.parent.parent.closeOpposing(this); // ghost, then become [1+2+3)
        this.parent.parent.unwrap();
      }
      else { // deleting one of a pair of brackets, become one-sided
        this.sides[side] = { ch: OPP_BRACKS[this.sides[this.side].ch],
                             ctrlSeq: OPP_BRACKS[this.sides[this.side].ctrlSeq] };
        this.delimjQs.removeClass('mq-ghost')
          .eq(side === L ? 0 : 1).addClass('mq-ghost').html(this.sides[side].ch);
      }
      if (sib) { // auto-expand so ghost is at far end
        var origEnd = this.ends[L].ends[side];
        Fragment(sib, farEnd, -side).disown()
          .withDirAdopt(-side, this.ends[L], origEnd, 0)
          .jQ.insAtDirEnd(side, this.ends[L].jQ.removeClass('mq-empty'));
        if (origEnd.siblingCreated) origEnd.siblingCreated(cursor.options, side);
        cursor.insDirOf(-side, sib);
      } // didn't auto-expand, cursor goes just outside or just inside parens
      else (outward ? cursor.insDirOf(side, this)
                    : cursor.insAtDirEnd(side, this.ends[L]));
    }
  };
  _.deleteTowards = function(dir, cursor) {
    this.deleteSide(-dir, false, cursor);
  };
  _.finalizeTree = function() {
    this.ends[L].deleteOutOf = function(dir, cursor) {
      this.parent.deleteSide(dir, true, cursor);
    };
    // FIXME HACK: after initial creation/insertion, finalizeTree would only be
    // called if the paren is selected and replaced, e.g. by LiveFraction
    this.finalizeTree = this.intentionalBlur = function() {
      this.delimjQs.eq(this.side === L ? 1 : 0).removeClass('mq-ghost');
      this.side = 0;
    };
  };
  _.siblingCreated = function(opts, dir) { // if something typed between ghost and far
    if (dir === -this.side) this.finalizeTree(); // end of its block, solidify
  };
});

var OPP_BRACKS = {
  '(': ')',
  ')': '(',
  '[': ']',
  ']': '[',
  '{': '}',
  '}': '{',
  '\\{': '\\}',
  '\\}': '\\{',
  '&lang;': '&rang;',
  '&rang;': '&lang;',
  '\\langle ': '\\rangle ',
  '\\rangle ': '\\langle ',
  '|': '|'
};

function bindCharBracketPair(open, ctrlSeq) {
  var ctrlSeq = ctrlSeq || open, close = OPP_BRACKS[open], end = OPP_BRACKS[ctrlSeq];
  CharCmds[open] = bind(Bracket, L, open, close, ctrlSeq, end);
  CharCmds[close] = bind(Bracket, R, open, close, ctrlSeq, end);
}
bindCharBracketPair('(');
bindCharBracketPair('[');
bindCharBracketPair('{', '\\{');
LatexCmds.langle = bind(Bracket, L, '&lang;', '&rang;', '\\langle ', '\\rangle ');
LatexCmds.rangle = bind(Bracket, R, '&lang;', '&rang;', '\\langle ', '\\rangle ');
CharCmds['|'] = bind(Bracket, L, '|', '|', '|', '|');

LatexCmds.left = P(MathCommand, function(_) {
  _.parser = function() {
    var regex = Parser.regex;
    var string = Parser.string;
    var succeed = Parser.succeed;
    var optWhitespace = Parser.optWhitespace;

    return optWhitespace.then(regex(/^(?:[([|]|\\\{)/))
      .then(function(ctrlSeq) { // TODO: \langle, \rangle
        var open = (ctrlSeq.charAt(0) === '\\' ? ctrlSeq.slice(1) : ctrlSeq);
        return latexMathParser.then(function (block) {
          return string('\\right').skip(optWhitespace)
            .then(regex(/^(?:[\])|]|\\\})/)).map(function(end) {
              var close = (end.charAt(0) === '\\' ? end.slice(1) : end);
              var cmd = Bracket(0, open, close, ctrlSeq, end);
              cmd.blocks = [ block ];
              block.adopt(cmd, 0, 0);
              return cmd;
            })
          ;
        });
      })
    ;
  };
});

LatexCmds.right = P(MathCommand, function(_) {
  _.parser = function() {
    return Parser.fail('unmatched \\right');
  };
});

var Binomial =
LatexCmds.binom =
LatexCmds.binomial = P(P(MathCommand, DelimsMixin), function(_, super_) {
  _.ctrlSeq = '\\binom';
  _.htmlTemplate =
      '<span class="mq-non-leaf">'
    +   '<span class="mq-paren mq-scaled">(</span>'
    +   '<span class="mq-non-leaf">'
    +     '<span class="mq-array mq-non-leaf">'
    +       '<span>&0</span>'
    +       '<span>&1</span>'
    +     '</span>'
    +   '</span>'
    +   '<span class="mq-paren mq-scaled">)</span>'
    + '</span>'
  ;
  _.textTemplate = ['choose(',',',')'];
});

var Choose =
LatexCmds.choose = P(Binomial, function(_) {
  _.createLeftOf = LiveFraction.prototype.createLeftOf;
});

var InnerMathField = P(MathQuill.MathField, function(_) {
  _.init = function(root, container) {
    RootBlockMixin(root);
    this.__options = Options();
    var ctrlr = Controller(this, root, container);
    ctrlr.editable = true;
    ctrlr.createTextarea();
    ctrlr.editablesTextareaEvents();
    ctrlr.cursor.insAtRightEnd(root);
  };
});
LatexCmds.MathQuillMathField = P(MathCommand, function(_, super_) {
  _.ctrlSeq = '\\MathQuillMathField';
  _.htmlTemplate =
      '<span class="mq-editable-field">'
    +   '<span class="mq-root-block">&0</span>'
    + '</span>'
  ;
  _.parser = function() {
    var self = this,
      string = Parser.string, regex = Parser.regex, succeed = Parser.succeed;
    return string('[').then(regex(/^[a-z][a-z0-9]*/i)).skip(string(']'))
      .map(function(name) { self.name = name; }).or(succeed())
      .then(super_.parser.call(self));
  };
  _.finalizeTree = function() { InnerMathField(this.ends[L], this.jQ); };
  _.registerInnerField = function(innerFields) {
    innerFields.push(innerFields[this.name] = this.ends[L].controller.API);
  };
  _.latex = function(){ return this.ends[L].latex(); };
  _.text = function(){ return this.ends[L].text(); };
});

}());

define("mathquill", ["jquery","loadcss!vendor_css/mathquill/mathquill-basic"], (function (global) {
    return function () {
        var ret, fn;
       fn = function () {
        var $ = this.jQuery, L = this.MathQuill.L;
        return this.MathQuill.config({
          handlers: {
            reflow: function(mathField) {
              setTimeout(function () {
                $(mathField.el()).trigger('render');
              });
            },
            enter: function(mathField) {
              setTimeout(function () {
                $(mathField.el()).trigger('enterPressed');
              });
            },
            upOutOf: function(mathField) {
              setTimeout(function () {
                $(mathField.el()).trigger('upPressed');
              });
            },
            downOutOf: function(mathField) {
              setTimeout(function () {
                $(mathField.el()).trigger('downPressed');
              });
            },
            moveOutOf: function(dir, mathField) {
              setTimeout(function () {
                $(mathField.el()).trigger((dir === L ? 'left' : 'right') + 'Pressed');
              });
            },
            deleteOutOf: function(dir, mathField) {
              setTimeout(function () {
                $(mathField.el()).trigger((dir === L ? 'backspace' : 'del') + 'Pressed');
              });
            }
          },
          leftRightIntoCmdGoes: 'up',
          sumStartsWithNEquals: true,
          supSubsRequireOperand: true,
          charsThatBreakOutOfSupSub: '+-=<>',
          autoCommands: 'sqrt theta phi pi tau nthroot sum prod',
          autoSubscriptNumerals: true,
          restrictMismatchedBrackets: true,
          substituteTextarea: function() {
            var is_ios = navigator.userAgent.match(/(iPad|iPhone|iPod)/i) !== null;
            var is_android = navigator.userAgent.match(/Android/i) !== null;
            if (is_ios || is_android) {
              // iOS never fires key events on read-only textareas even with an
              // external keyboard, and Safari on iOS shows an ugly thick blue
              // cursor even if the textarea is read-only AND hidden, no matter
              // the means of hiding: http://goo.gl/pAHjlU and #5024
              return $('<span tabindex=0' +
                       ' style="display:inline-block;height:1px;width:1px">')[0];
            }
            // allow typing but suppress OS virtual keyboard: http://goo.gl/pAHjlU
            return $('<textarea readonly>').on('keydown', function() {
              this.readOnly = false;
              this.select();
            }).on('blur', function() {
              this.readOnly = true;
            })[0];
          },
          autoOperatorNames: [
            'exp ln log',
            'total length mean median quantile nCr nPr',
            'stdev stddev stdDev stdevp stddevp stdDevP mad var variance cov corr',
            'lcm mcm gcd mcd gcf mod ceil floor round abs min max sign signum',
            'sin cos tan csc sec cot',
            'sinh cosh tanh csch sech coth',
            'arcsin arccos arctan arccsc arcsec arccot',
            'arcsinh arccosh arctanh arccsch arcsech arccoth'
          ].join(' ')
        }).noConflict();
      };
        ret = fn.apply(global, arguments);
        return ret;
    };
}(this)));

define('expressions/dragdrop',['require','jquery','pjs','tipsy','jquery.handleevent'],function(require){
  var $ = require('jquery');
  var P = require('pjs');
  var Tipsy = require('tipsy');
  require('jquery.handleevent');

  var DragDrop = P(function(dragdrop){

    // methods to be filled in by subclass
    dragdrop.toggleStyling = function(isDragging) {};
    dragdrop.onDragStart = function (evt, view) {};
    dragdrop.onDragStop = function (evt) {};
    dragdrop.commitDragState = function(dragState) {};
    dragdrop.updateScroll = function () {};
    dragdrop.computeDragPosition = function (x,y) { return {x:x, y:y} };
    dragdrop.computeDragState = function (list, dragPosition) { return {} };
    dragdrop.previewDragState = function(dragState) {};
    dragdrop.buildDragList = function () {};

    dragdrop.init = function(expressionsView){
      this.expressionsView = expressionsView;
      this.active = false;
    };

    dragdrop.start = function(evt, view){
      if(evt.touches.length !== 1) return;
      if(evt.wasHandled('dcg-longhold')) return;
      this.active = true;
      this.exppanel = this.expressionsView.$('.dcg-exppanel');

      this.setupEventListeners(evt);
      this.onDragStart(evt, view);

      this.dragList = this.buildDragList();
      this.toggleStyling(true);
      this.drag(evt.touches[0].x, evt.touches[0].y); //Do first drag

      // disable tipsy while dragging
      Tipsy.addDisableLock();
    };

    dragdrop.setupEventListeners = function(evt){
      // save the touch identifier so that multitouch doesn't mess us up. Also
      // create a function that allows us to lookup the touch we care about.
      var touch_identifier = evt.touches[0].identifier;
      function getTouch (evt) {
        for (var i=0; i < evt.touches.length; i++) {
          var touch = evt.touches[i];
          if (touch.identifier === touch_identifier) {
            return touch;
          }
        }
      }

      var self = this;

      // listen for mouse movements and tell DragDrop about them.
      $(document).on('dcg-tapmove.dragdrop', function (evt) {
        // touch must still be around
        var touch = getTouch(evt);
        if (!touch) return;
        self.drag(touch.x, touch.y);
      });

      // listen for mouse ups and tell DragDrop about them.
      $(document).on('dcg-tapend.dragdrop', function (evt) {
        // touch must not be around
        var touch = getTouch(evt);
        if (touch) return;
        self.stop();
        evt.handle('dragdrop');
      });

      //add event listener on exppanel.scroll
      this.exppanel.on('scroll.dragdrop', this.drag.bind(this));
    };

    dragdrop.stop = function(evt){
      this.active = false;

      //Clear listeners
      $(document).off('.dragdrop');

      //Commit changes to model
      this.commitDragState(this.dragState);

      //Get rid of preview styling
      this.toggleStyling(false);

      this.onDragStop(evt);

      // reenable tipsy after dragging
      Tipsy.removeDisableLock();
    };

    dragdrop.drag = function(x, y){
      if (!this.active) return;

      //Need to cache mouse position for scroll-triggered udpates
      if (typeof(x) === 'number') this.mouseX = x;
      if (typeof(y) === 'number') this.mouseY = y;

      var self = this;
      setTimeout(function() {
        self.updateScroll();
      }, 1);

      var dragPosition = this.computeDragPosition(this.mouseX, this.mouseY);
      this.dragState = this.computeDragState(this.dragList, dragPosition);
      this.previewDragState(this.dragState);
    };
  });

  // TODO - any kind of user interaction (undo, typing, etc) should call
  // finishDrag to prevent us from getting in a weird state where we're dragging
  // an expression that doesn't exist.

  return DragDrop;
});
define('expressions/dragdrop_expressions',['require','underscore','browser','pjs','./dragdrop','conditional_blur'],function(require){
  var _ = require('underscore');
  var Browser = require('browser');
  var P = require('pjs');
  var DragDrop = require('./dragdrop');
  var conditionalBlur = require('conditional_blur');

  var DragDropExpressions = P(DragDrop, function(dragdrop, _super){

    dragdrop.toggleStyling = function(isDragging){
      this.exppanel.toggleClass('dcg-isDragging', isDragging);
      this.draggedView.$().toggleClass('dcg-dragging', isDragging);
      if(!isDragging){
        //Remove things that are set by preview code
        this.draggedView.$().removeClass('dcg-overFolder');
        this.expressionsView.$('.dcg-expressionitem').css('transform', 'none');
      }
    };

    dragdrop.onDragStart = function (evt, view) {
      this.expressionsView.model.setSelected(null);
      this.exppanel = this.expressionsView.$('.dcg-exppanel');

      conditionalBlur();
      evt.preventDefault();

      this.draggedView = view;
      this.draggedViewHeight = view.$().outerHeight() - 1; //because of the negative 1 margin

      this.panelTop = this.exppanel.offset().top;
      this.panelHeight = this.exppanel.height();
      this.expressionListHeight = this.exppanel.find('.dcg-expressionlist').height();
      this.panelBottom = this.panelTop + this.panelHeight;

      this.grabOffset = view.$().offset().top - evt.touches[0].y;
      this.grabY = this.computeDragPosition(evt.touches[0].x, evt.touches[0].y).y;
      this.grabIndex = view.model.index;
      this.draggedViewCount = 1;

      if(view.model.isFolder){
        this.draggedViewCount += _.size(view.model.memberIds);
        this.dropCollapsed = view.model.collapsed; //Cache whether folder is collapsed before collapsing
        view.model.setProperty('collapsed', true);
      }
    };

    dragdrop.onDragStop = function (evt) {
      clearTimeout(this.scrollTimeout);

      //Select the expression we just dragged
      this.expressionsView.model.setSelected(this.draggedView.model);
    };

    dragdrop.buildDragList = function(){
      var self = this;
      var expressions = this.expressionsView.model.getItemsByIndexRange(0, Infinity);

      var list = [{
        y: -Infinity,
        index: 0,
        folder: undefined
      }];

      var lastItem = [{
        y: Infinity,
        index: 0,
        folder: undefined
      }];

      expressions.forEach(function(expression){
        if(expression.id === self.draggedView.model.id) return;
        if(expression.folder && expression.folder.collapsed) return;
        if(expression.folder && self.draggedView.model.isFolder) return;

        //Figure out which expressions are included in this drag item
        var view = self.expressionsView.getItemView(expression.id);
        var belowGrabbedView = (expression.index > self.grabIndex);
        var elements = view.$();
        if (expression.isFolder && (expression.collapsed || self.draggedView.model.isFolder)){
          for (var id in expression.memberIds) {
            elements.push(self.expressionsView.getItemView(id).$()[0]);
          }
        }

        //Compute dimensions of the expression(s), removing draggedView from list
        var offset = (belowGrabbedView ? -self.draggedViewHeight : 0);
        var height = view.$().height();
        var top = view.$().position().top + offset;

        //Compute indexes for before and after the expression(s)
        var indexOffset = (belowGrabbedView ? -1 : 0); //-self.draggedViewCount : 0);
        var indexBefore = expression.index + indexOffset;
        var indexAfter = indexBefore + elements.length;

        //Compute folder insertion behavior
        var topFolder, midFolder;
        if(!self.draggedView.model.isFolder){
          topFolder = expression.folder;
          midFolder = (expression.isFolder ? expression : expression.folder);
        }

        //Record what happens when dragging past the top of the expression
        list.push({
          y: top,
          index: indexBefore,
          folder: topFolder
        });

        //Record what happens when dragging past the midpoint of the expression
        list.push({
          y: top + height / 2,
          index: indexAfter,
          folder: midFolder,

          elements: elements, //TODO - should include all elements dragged past
          offset: offset
        });

        //Record what happens when dragging past the bottom of the expression
        //Only appended to list if this was the last item
        lastItem = {
          y: top + height,
          index: indexAfter,
          folder: undefined
        };

      });
      list.push(lastItem);

      return list;
    };

    // allows expression list to scroll drag above or below it
    dragdrop.updateScroll = function() {
      clearTimeout(this.scrollTimeout);
      if(!this.active) return;
      var scrollSpeed = 0;

      //Use being over top of list (into header bar) as cue to start scrolling up
      scrollSpeed = Math.min(scrollSpeed, (this.mouseY - this.panelTop));

      //Use bottom 30 pixels as cue to start scrolling down  30px is smaller than one equation,
      //But still big enough to trigger easily
      scrollSpeed = Math.max(scrollSpeed, (this.mouseY - this.panelBottom + 30));

      //Adjust the speed based on the expressions list height.
      //A 30 pixel offset should get us to the other side in about 1 second of 30hz updates
      //30 pixels * 30 updates = 900
      scrollSpeed = (scrollSpeed * this.panelHeight / 900);

      if(scrollSpeed){
        this.exppanel.scrollTop(this.exppanel.scrollTop() + scrollSpeed);
      }
    };

    //Compute position of the dragged view in terms of the scrolled list
    dragdrop.computeDragPosition = function(x, y) {
      //Clamp effective mouse position to edges of panel
      y = Math.max(y, Math.min(y, this.panelBottom), this.panelTop);

      //Make position relative to the panel
      y -= this.panelTop;

      //Add offset for where element was grabbed
      y += this.grabOffset;

      //Compensate for scrolling
      y += this.exppanel.scrollTop();

      if (y + this.draggedViewHeight >= this.expressionListHeight) {
        y = this.expressionListHeight - this.draggedViewHeight;
      }

      return {x:NaN, y: y};
    };

    //Takes a list of states, which each includes the y value at which it starts,
    //as well as the index and the folder which the dragged item would have it it
    //is dropped below that line.
    dragdrop.computeDragState = function(list, dragPosition){
      function sortMethod (item) {
        return item.y;
      }

      var index = _.sortedIndex(list, {y:dragPosition.y}, sortMethod) - 1;//See where we would be inserted
      return {
        list: list,
        index: list[index].index,
        folder: list[index].folder,
        dragY: dragPosition.y
      };
    };

    //Update model to reflect new dragState
    dragdrop.commitDragState = function(dragState){
      var self = this;
      var list = this.expressionsView.model;

      list.undoRedo.oneTransaction(function(){
        var draggedModel = self.draggedView.model;

        //Update ordering
        list.moveItemsTo(self.grabIndex, dragState.index, self.draggedViewCount);

        //Update folder membership
        var newFolder = dragState.folder;
        var oldFolder = draggedModel.folder;
        if(newFolder !== oldFolder){
          if(oldFolder) oldFolder.removeItem(draggedModel);
          if(newFolder) newFolder.addItem(draggedModel);
        }

        //Restore folder collapsed state
        if(draggedModel.isFolder){
          draggedModel.setProperty('collapsed', self.dropCollapsed); //Restore collapsed state
        }
      });
    };

    //Display preview of dragState, but don't commit changes
    dragdrop.previewDragState = function(dragState){
      var self = this;

      //Preview height and folder membership of dragged item
      this.draggedView.$().css("transform", Browser.translateRule(0, dragState.dragY - this.grabY));
      this.draggedView.$().toggleClass('dcg-overFolder', !!dragState.folder);

      //Update transforms for items above and below dragged view
      _.each(dragState.list, function(item){
        if(item.elements){
          var offset = item.offset + (item.index > dragState.index ? self.draggedViewHeight : 0);
          item.elements.css('transform', Browser.translateRule(0, offset));
        }
      });
    };
  });

  return DragDropExpressions;
});
define('loadcss!css/add_expression', function(){});
define('template!add_expression', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-add-expression-dropdown dcg-popover dcg-bottom">\n  <div class="dcg-popover-interior">\n     ';
 if (expressions) { 
;__p+='\n     <div class=\'dcg-new-item dcg-do-not-blur dcg-action-newexpression\'>\n        <i class=\'dcg-icon-new-expression dcg-expression-icon\'></i>\n        '+
( t('expression') )+
'\n     </div>\n     ';
 } 
;__p+='\n    \n     ';
 if (texts) { 
;__p+='\n     <div class=\'dcg-new-item dcg-do-not-blur dcg-action-newtext\'>\n       <i class=\'dcg-icon-new-text dcg-expression-icon\'></i>\n       '+
( t('note') )+
'\n     </div>\n     ';
 } 
;__p+='\n\n     ';
 if (tables) { 
;__p+='\n     <div class=\'dcg-new-item dcg-do-not-blur dcg-action-newtable\'>\n       <i class=\'dcg-icon-new-table dcg-expression-icon\'></i>\n       '+
( t('table') )+
'\n     </div>\n     ';
 } 
;__p+='\n     \n     ';
 if (folders) { 
;__p+='\n     <div class=\'dcg-new-item dcg-do-not-blur dcg-action-newfolder\'>\n       <i class=\'dcg-icon-new-folder dcg-expression-icon\'></i>\n       '+
( t('folder') )+
'\n     </div>\n     ';
 } 
;__p+='\n\n     ';
 if (images) { 
;__p+='\n     <div class=\'dcg-new-item dcg-do-not-blur dcg-action-newimage\'>\n       <i class=\'dcg-icon-new-image dcg-expression-icon\'></i>\n       '+
( t('image') )+
'\n       \n       ';
 // hiding the file input box. It's ugly. Our UI is prettier. We'll fake a click on it
          // when our UI is clicked 
;__p+='\n       <input type="file" accept="image/*" style="display: none" />\n     </div>\n     ';
 } 
;__p+='\n\n   </div>\n\n   <span class="dcg-arrow"></span>\n</div>\n';
}
return __p;
};});
/*
 * JavaScript Load Image 1.9.0
 * https://github.com/blueimp/JavaScript-Load-Image
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*jslint nomen: true */
/*global define, window, document, URL, webkitURL, Blob, File, FileReader */

(function ($) {
    

    // Loads an image for a given File object.
    // Invokes the callback with an img or optional canvas
    // element (if supported by the browser) as parameter:
    var loadImage = function (file, callback, options) {
            var img = document.createElement('img'),
                url,
                oUrl;
            img.onerror = callback;
            img.onload = function () {
                if (oUrl && !(options && options.noRevoke)) {
                    loadImage.revokeObjectURL(oUrl);
                }
                if (callback) {
                    callback(loadImage.scale(img, options));
                }
            };
            if (loadImage.isInstanceOf('Blob', file) ||
                    // Files are also Blob instances, but some browsers
                    // (Firefox 3.6) support the File API but not Blobs:
                    loadImage.isInstanceOf('File', file)) {
                url = oUrl = loadImage.createObjectURL(file);
                // Store the file type for resize processing:
                img._type = file.type;
            } else if (typeof file === 'string') {
                url = file;
                if (options && options.crossOrigin) {
                    img.crossOrigin = options.crossOrigin;
                }
            } else {
                return false;
            }
            if (url) {
                img.src = url;
                return img;
            }
            return loadImage.readFile(file, function (e) {
                var target = e.target;
                if (target && target.result) {
                    img.src = target.result;
                } else {
                    if (callback) {
                        callback(e);
                    }
                }
            });
        },
        // The check for URL.revokeObjectURL fixes an issue with Opera 12,
        // which provides URL.createObjectURL but doesn't properly implement it:
        urlAPI = (window.createObjectURL && window) ||
            (window.URL && URL.revokeObjectURL && URL) ||
            (window.webkitURL && webkitURL);

    loadImage.isInstanceOf = function (type, obj) {
        // Cross-frame instanceof check
        return Object.prototype.toString.call(obj) === '[object ' + type + ']';
    };

    // Transform image coordinates, allows to override e.g.
    // the canvas orientation based on the orientation option,
    // gets canvas, options passed as arguments:
    loadImage.transformCoordinates = function () {
        return;
    };

    // Returns transformed options, allows to override e.g.
    // coordinate and dimension options based on the orientation:
    loadImage.getTransformedOptions = function (options) {
        return options;
    };

    // Canvas render method, allows to override the
    // rendering e.g. to work around issues on iOS:
    loadImage.renderImageToCanvas = function (
        canvas,
        img,
        sourceX,
        sourceY,
        sourceWidth,
        sourceHeight,
        destX,
        destY,
        destWidth,
        destHeight
    ) {
        canvas.getContext('2d').drawImage(
            img,
            sourceX,
            sourceY,
            sourceWidth,
            sourceHeight,
            destX,
            destY,
            destWidth,
            destHeight
        );
        return canvas;
    };

    // This method is used to determine if the target image
    // should be a canvas element:
    loadImage.hasCanvasOption = function (options) {
        return options.canvas || options.crop;
    };

    // Scales and/or crops the given image (img or canvas HTML element)
    // using the given options.
    // Returns a canvas object if the browser supports canvas
    // and the hasCanvasOption method returns true or a canvas
    // object is passed as image, else the scaled image:
    loadImage.scale = function (img, options) {
        options = options || {};
        var canvas = document.createElement('canvas'),
            useCanvas = img.getContext ||
                (loadImage.hasCanvasOption(options) && canvas.getContext),
            width = img.naturalWidth || img.width,
            height = img.naturalHeight || img.height,
            destWidth = width,
            destHeight = height,
            maxWidth,
            maxHeight,
            minWidth,
            minHeight,
            sourceWidth,
            sourceHeight,
            sourceX,
            sourceY,
            tmp,
            scaleUp = function () {
                var scale = Math.max(
                    (minWidth || destWidth) / destWidth,
                    (minHeight || destHeight) / destHeight
                );
                if (scale > 1) {
                    destWidth = Math.ceil(destWidth * scale);
                    destHeight = Math.ceil(destHeight * scale);
                }
            },
            scaleDown = function () {
                var scale = Math.min(
                    (maxWidth || destWidth) / destWidth,
                    (maxHeight || destHeight) / destHeight
                );
                if (scale < 1) {
                    destWidth = Math.ceil(destWidth * scale);
                    destHeight = Math.ceil(destHeight * scale);
                }
            };
        if (useCanvas) {
            options = loadImage.getTransformedOptions(options);
            sourceX = options.left || 0;
            sourceY = options.top || 0;
            if (options.sourceWidth) {
                sourceWidth = options.sourceWidth;
                if (options.right !== undefined && options.left === undefined) {
                    sourceX = width - sourceWidth - options.right;
                }
            } else {
                sourceWidth = width - sourceX - (options.right || 0);
            }
            if (options.sourceHeight) {
                sourceHeight = options.sourceHeight;
                if (options.bottom !== undefined && options.top === undefined) {
                    sourceY = height - sourceHeight - options.bottom;
                }
            } else {
                sourceHeight = height - sourceY - (options.bottom || 0);
            }
            destWidth = sourceWidth;
            destHeight = sourceHeight;
        }
        maxWidth = options.maxWidth;
        maxHeight = options.maxHeight;
        minWidth = options.minWidth;
        minHeight = options.minHeight;
        if (useCanvas && maxWidth && maxHeight && options.crop) {
            destWidth = maxWidth;
            destHeight = maxHeight;
            tmp = sourceWidth / sourceHeight - maxWidth / maxHeight;
            if (tmp < 0) {
                sourceHeight = maxHeight * sourceWidth / maxWidth;
                if (options.top === undefined && options.bottom === undefined) {
                    sourceY = (height - sourceHeight) / 2;
                }
            } else if (tmp > 0) {
                sourceWidth = maxWidth * sourceHeight / maxHeight;
                if (options.left === undefined && options.right === undefined) {
                    sourceX = (width - sourceWidth) / 2;
                }
            }
        } else {
            if (options.contain || options.cover) {
                minWidth = maxWidth = maxWidth || minWidth;
                minHeight = maxHeight = maxHeight || minHeight;
            }
            if (options.cover) {
                scaleDown();
                scaleUp();
            } else {
                scaleUp();
                scaleDown();
            }
        }
        if (useCanvas) {
            canvas.width = destWidth;
            canvas.height = destHeight;
            loadImage.transformCoordinates(
                canvas,
                options
            );
            return loadImage.renderImageToCanvas(
                canvas,
                img,
                sourceX,
                sourceY,
                sourceWidth,
                sourceHeight,
                0,
                0,
                destWidth,
                destHeight
            );
        }
        img.width = destWidth;
        img.height = destHeight;
        return img;
    };

    loadImage.createObjectURL = function (file) {
        return urlAPI ? urlAPI.createObjectURL(file) : false;
    };

    loadImage.revokeObjectURL = function (url) {
        return urlAPI ? urlAPI.revokeObjectURL(url) : false;
    };

    // Loads a given File object via FileReader interface,
    // invokes the callback with the event object (load or error).
    // The result can be read via event.target.result:
    loadImage.readFile = function (file, callback, method) {
        if (window.FileReader) {
            var fileReader = new FileReader();
            fileReader.onload = fileReader.onerror = callback;
            method = method || 'readAsDataURL';
            if (fileReader[method]) {
                fileReader[method](file);
                return fileReader;
            }
        }
        return false;
    };

    if (typeof define === 'function' && define.amd) {
        define('vendor/load-image/load-image',[],function () {
            return loadImage;
        });
    } else {
        $.loadImage = loadImage;
    }
}(this));

/*
 * JavaScript Load Image Orientation 1.0.0
 * https://github.com/blueimp/JavaScript-Load-Image
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*global define, window */

(function (factory) {
    
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define('vendor/load-image/load-image-orientation',['./load-image'], factory);
    } else {
        // Browser globals:
        factory(window.loadImage);
    }
}(function (loadImage) {
    

    var originalHasCanvasOptionMethod = loadImage.hasCanvasOption;

    // This method is used to determine if the target image
    // should be a canvas element:
    loadImage.hasCanvasOption = function (options) {
        return originalHasCanvasOptionMethod(options) || options.orientation;
    };

    // Transform image orientation based on
    // the given EXIF orientation option:
    loadImage.transformCoordinates = function (canvas, options) {
        var ctx = canvas.getContext('2d'),
            width = canvas.width,
            height = canvas.height,
            orientation = options.orientation;
        if (!orientation) {
            return;
        }
        if (orientation > 4) {
            canvas.width = height;
            canvas.height = width;
        }
        switch (orientation) {
        case 2:
            // horizontal flip
            ctx.translate(width, 0);
            ctx.scale(-1, 1);
            break;
        case 3:
            // 180° rotate left
            ctx.translate(width, height);
            ctx.rotate(Math.PI);
            break;
        case 4:
            // vertical flip
            ctx.translate(0, height);
            ctx.scale(1, -1);
            break;
        case 5:
            // vertical flip + 90 rotate right
            ctx.rotate(0.5 * Math.PI);
            ctx.scale(1, -1);
            break;
        case 6:
            // 90° rotate right
            ctx.rotate(0.5 * Math.PI);
            ctx.translate(0, -height);
            break;
        case 7:
            // horizontal flip + 90 rotate right
            ctx.rotate(0.5 * Math.PI);
            ctx.translate(width, -height);
            ctx.scale(-1, 1);
            break;
        case 8:
            // 90° rotate left
            ctx.rotate(-0.5 * Math.PI);
            ctx.translate(-width, 0);
            break;
        }
    };

    // Transforms coordinate and dimension options
    // based on the given orientation option:
    loadImage.getTransformedOptions = function (options) {
        if (!options.orientation || options.orientation === 1) {
            return options;
        }
        var newOptions = {},
            i;
        for (i in options) {
            if (options.hasOwnProperty(i)) {
                newOptions[i] = options[i];
            }
        }
        switch (options.orientation) {
        case 2:
            // horizontal flip
            newOptions.left = options.right;
            newOptions.right = options.left;
            break;
        case 3:
            // 180° rotate left
            newOptions.left = options.right;
            newOptions.top = options.bottom;
            newOptions.right = options.left;
            newOptions.bottom = options.top;
            break;
        case 4:
            // vertical flip
            newOptions.top = options.bottom;
            newOptions.bottom = options.top;
            break;
        case 5:
            // vertical flip + 90 rotate right
            newOptions.left = options.top;
            newOptions.top = options.left;
            newOptions.right = options.bottom;
            newOptions.bottom = options.right;
            break;
        case 6:
            // 90° rotate right
            newOptions.left = options.top;
            newOptions.top = options.right;
            newOptions.right = options.bottom;
            newOptions.bottom = options.left;
            break;
        case 7:
            // horizontal flip + 90 rotate right
            newOptions.left = options.bottom;
            newOptions.top = options.right;
            newOptions.right = options.top;
            newOptions.bottom = options.left;
            break;
        case 8:
            // 90° rotate left
            newOptions.left = options.bottom;
            newOptions.top = options.left;
            newOptions.right = options.top;
            newOptions.bottom = options.right;
            break;
        }
        if (options.orientation > 4) {
            newOptions.maxWidth = options.maxHeight;
            newOptions.maxHeight = options.maxWidth;
            newOptions.minWidth = options.minHeight;
            newOptions.minHeight = options.minWidth;
            newOptions.sourceWidth = options.sourceHeight;
            newOptions.sourceHeight = options.sourceWidth;
        }
        return newOptions;
    };

}));

/*
 * JavaScript Load Image Meta 1.0.1
 * https://github.com/blueimp/JavaScript-Load-Image
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Image meta data handling implementation
 * based on the help and contribution of
 * Achim Stöhr.
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*jslint continue:true */
/*global define, window, DataView, Blob, Uint8Array, console */

(function (factory) {
    
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define('vendor/load-image/load-image-meta',['./load-image'], factory);
    } else {
        // Browser globals:
        factory(window.loadImage);
    }
}(function (loadImage) {
    

    var hasblobSlice = window.Blob && (Blob.prototype.slice ||
            Blob.prototype.webkitSlice || Blob.prototype.mozSlice);

    loadImage.blobSlice = hasblobSlice && function () {
        var slice = this.slice || this.webkitSlice || this.mozSlice;
        return slice.apply(this, arguments);
    };

    loadImage.metaDataParsers = {
        jpeg: {
            0xffe1: [] // APP1 marker
        }
    };

    // Parses image meta data and calls the callback with an object argument
    // with the following properties:
    // * imageHead: The complete image head as ArrayBuffer (Uint8Array for IE10)
    // The options arguments accepts an object and supports the following properties:
    // * maxMetaDataSize: Defines the maximum number of bytes to parse.
    // * disableImageHead: Disables creating the imageHead property.
    loadImage.parseMetaData = function (file, callback, options) {
        options = options || {};
        var that = this,
            // 256 KiB should contain all EXIF/ICC/IPTC segments:
            maxMetaDataSize = options.maxMetaDataSize || 262144,
            data = {},
            noMetaData = !(window.DataView  && file && file.size >= 12 &&
                file.type === 'image/jpeg' && loadImage.blobSlice);
        if (noMetaData || !loadImage.readFile(
                loadImage.blobSlice.call(file, 0, maxMetaDataSize),
                function (e) {
                    // Note on endianness:
                    // Since the marker and length bytes in JPEG files are always
                    // stored in big endian order, we can leave the endian parameter
                    // of the DataView methods undefined, defaulting to big endian.
                    var buffer = e.target.result,
                        dataView = new DataView(buffer),
                        offset = 2,
                        maxOffset = dataView.byteLength - 4,
                        headLength = offset,
                        markerBytes,
                        markerLength,
                        parsers,
                        i;
                    // Check for the JPEG marker (0xffd8):
                    if (dataView.getUint16(0) === 0xffd8) {
                        while (offset < maxOffset) {
                            markerBytes = dataView.getUint16(offset);
                            // Search for APPn (0xffeN) and COM (0xfffe) markers,
                            // which contain application-specific meta-data like
                            // Exif, ICC and IPTC data and text comments:
                            if ((markerBytes >= 0xffe0 && markerBytes <= 0xffef) ||
                                    markerBytes === 0xfffe) {
                                // The marker bytes (2) are always followed by
                                // the length bytes (2), indicating the length of the
                                // marker segment, which includes the length bytes,
                                // but not the marker bytes, so we add 2:
                                markerLength = dataView.getUint16(offset + 2) + 2;
                                if (offset + markerLength > dataView.byteLength) {
                                    console.log('Invalid meta data: Invalid segment size.');
                                    break;
                                }
                                parsers = loadImage.metaDataParsers.jpeg[markerBytes];
                                if (parsers) {
                                    for (i = 0; i < parsers.length; i += 1) {
                                        parsers[i].call(
                                            that,
                                            dataView,
                                            offset,
                                            markerLength,
                                            data,
                                            options
                                        );
                                    }
                                }
                                offset += markerLength;
                                headLength = offset;
                            } else {
                                // Not an APPn or COM marker, probably safe to
                                // assume that this is the end of the meta data
                                break;
                            }
                        }
                        // Meta length must be longer than JPEG marker (2)
                        // plus APPn marker (2), followed by length bytes (2):
                        if (!options.disableImageHead && headLength > 6) {
                            if (buffer.slice) {
                                data.imageHead = buffer.slice(0, headLength);
                            } else {
                                // Workaround for IE10, which does not yet
                                // support ArrayBuffer.slice:
                                data.imageHead = new Uint8Array(buffer)
                                    .subarray(0, headLength);
                            }
                        }
                    } else {
                        console.log('Invalid JPEG file: Missing JPEG marker.');
                    }
                    callback(data);
                },
                'readAsArrayBuffer'
            )) {
            callback(data);
        }
    };

}));

/*
 * JavaScript Load Image iOS scaling fixes 1.0.3
 * https://github.com/blueimp/JavaScript-Load-Image
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * iOS image scaling fixes based on
 * https://github.com/stomita/ios-imagefile-megapixel
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*jslint nomen: true, bitwise: true */
/*global define, window, document */

(function (factory) {
    
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define('vendor/load-image/load-image-ios',['./load-image'], factory);
    } else {
        // Browser globals:
        factory(window.loadImage);
    }
}(function (loadImage) {
    

    // Only apply fixes on the iOS platform:
    if (!window.navigator || !window.navigator.platform ||
             !(/iP(hone|od|ad)/).test(window.navigator.platform)) {
        return;
    }

    var originalRenderMethod = loadImage.renderImageToCanvas;

    // Detects subsampling in JPEG images:
    loadImage.detectSubsampling = function (img) {
        var canvas,
            context;
        if (img.width * img.height > 1024 * 1024) { // only consider mexapixel images
            canvas = document.createElement('canvas');
            canvas.width = canvas.height = 1;
            context = canvas.getContext('2d');
            context.drawImage(img, -img.width + 1, 0);
            // subsampled image becomes half smaller in rendering size.
            // check alpha channel value to confirm image is covering edge pixel or not.
            // if alpha value is 0 image is not covering, hence subsampled.
            return context.getImageData(0, 0, 1, 1).data[3] === 0;
        }
        return false;
    };

    // Detects vertical squash in JPEG images:
    loadImage.detectVerticalSquash = function (img, subsampled) {
        var naturalHeight = img.naturalHeight || img.height,
            canvas = document.createElement('canvas'),
            context = canvas.getContext('2d'),
            data,
            sy,
            ey,
            py,
            alpha;
        if (subsampled) {
            naturalHeight /= 2;
        }
        canvas.width = 1;
        canvas.height = naturalHeight;
        context.drawImage(img, 0, 0);
        data = context.getImageData(0, 0, 1, naturalHeight).data;
        // search image edge pixel position in case it is squashed vertically:
        sy = 0;
        ey = naturalHeight;
        py = naturalHeight;
        while (py > sy) {
            alpha = data[(py - 1) * 4 + 3];
            if (alpha === 0) {
                ey = py;
            } else {
                sy = py;
            }
            py = (ey + sy) >> 1;
        }
        return (py / naturalHeight) || 1;
    };

    // Renders image to canvas while working around iOS image scaling bugs:
    // https://github.com/blueimp/JavaScript-Load-Image/issues/13
    loadImage.renderImageToCanvas = function (
        canvas,
        img,
        sourceX,
        sourceY,
        sourceWidth,
        sourceHeight,
        destX,
        destY,
        destWidth,
        destHeight
    ) {
        if (img._type === 'image/jpeg') {
            var context = canvas.getContext('2d'),
                tmpCanvas = document.createElement('canvas'),
                tileSize = 1024,
                tmpContext = tmpCanvas.getContext('2d'),
                subsampled,
                vertSquashRatio,
                tileX,
                tileY;
            tmpCanvas.width = tileSize;
            tmpCanvas.height = tileSize;
            context.save();
            subsampled = loadImage.detectSubsampling(img);
            if (subsampled) {
                sourceX /= 2;
                sourceY /= 2;
                sourceWidth /= 2;
                sourceHeight /= 2;
            }
            vertSquashRatio = loadImage.detectVerticalSquash(img, subsampled);
            if (subsampled || vertSquashRatio !== 1) {
                sourceY *= vertSquashRatio;
                destWidth = Math.ceil(tileSize * destWidth / sourceWidth);
                destHeight = Math.ceil(
                    tileSize * destHeight / sourceHeight / vertSquashRatio
                );
                destY = 0;
                tileY = 0;
                while (tileY < sourceHeight) {
                    destX = 0;
                    tileX = 0;
                    while (tileX < sourceWidth) {
                        tmpContext.clearRect(0, 0, tileSize, tileSize);
                        tmpContext.drawImage(
                            img,
                            sourceX,
                            sourceY,
                            sourceWidth,
                            sourceHeight,
                            -tileX,
                            -tileY,
                            sourceWidth,
                            sourceHeight
                        );
                        context.drawImage(
                            tmpCanvas,
                            0,
                            0,
                            tileSize,
                            tileSize,
                            destX,
                            destY,
                            destWidth,
                            destHeight
                        );
                        tileX += tileSize;
                        destX += destWidth;
                    }
                    tileY += tileSize;
                    destY += destHeight;
                }
                context.restore();
                return canvas;
            }
        }
        return originalRenderMethod(
            canvas,
            img,
            sourceX,
            sourceY,
            sourceWidth,
            sourceHeight,
            destX,
            destY,
            destWidth,
            destHeight
        );
    };

}));

/*
 * JavaScript Load Image Exif Parser 1.0.0
 * https://github.com/blueimp/JavaScript-Load-Image
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*jslint unparam: true */
/*global define, window, console */

(function (factory) {
    
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define('vendor/load-image/load-image-exif',['./load-image', './load-image-meta'], factory);
    } else {
        // Browser globals:
        factory(window.loadImage);
    }
}(function (loadImage) {
    

    loadImage.ExifMap = function () {
        return this;
    };

    loadImage.ExifMap.prototype.map = {
        'Orientation': 0x0112
    };

    loadImage.ExifMap.prototype.get = function (id) {
        return this[id] || this[this.map[id]];
    };

    loadImage.getExifThumbnail = function (dataView, offset, length) {
        var hexData,
            i,
            b;
        if (!length || offset + length > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid thumbnail data.');
            return;
        }
        hexData = [];
        for (i = 0; i < length; i += 1) {
            b = dataView.getUint8(offset + i);
            hexData.push((b < 16 ? '0' : '') + b.toString(16));
        }
        return 'data:image/jpeg,%' + hexData.join('%');
    };

    loadImage.exifTagTypes = {
        // byte, 8-bit unsigned int:
        1: {
            getValue: function (dataView, dataOffset) {
                return dataView.getUint8(dataOffset);
            },
            size: 1
        },
        // ascii, 8-bit byte:
        2: {
            getValue: function (dataView, dataOffset) {
                return String.fromCharCode(dataView.getUint8(dataOffset));
            },
            size: 1,
            ascii: true
        },
        // short, 16 bit int:
        3: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint16(dataOffset, littleEndian);
            },
            size: 2
        },
        // long, 32 bit int:
        4: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint32(dataOffset, littleEndian);
            },
            size: 4
        },
        // rational = two long values, first is numerator, second is denominator:
        5: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint32(dataOffset, littleEndian) /
                    dataView.getUint32(dataOffset + 4, littleEndian);
            },
            size: 8
        },
        // slong, 32 bit signed int:
        9: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getInt32(dataOffset, littleEndian);
            },
            size: 4
        },
        // srational, two slongs, first is numerator, second is denominator:
        10: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getInt32(dataOffset, littleEndian) /
                    dataView.getInt32(dataOffset + 4, littleEndian);
            },
            size: 8
        }
    };
    // undefined, 8-bit byte, value depending on field:
    loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1];

    loadImage.getExifValue = function (dataView, tiffOffset, offset, type, length, littleEndian) {
        var tagType = loadImage.exifTagTypes[type],
            tagSize,
            dataOffset,
            values,
            i,
            str,
            c;
        if (!tagType) {
            console.log('Invalid Exif data: Invalid tag type.');
            return;
        }
        tagSize = tagType.size * length;
        // Determine if the value is contained in the dataOffset bytes,
        // or if the value at the dataOffset is a pointer to the actual data:
        dataOffset = tagSize > 4 ?
                tiffOffset + dataView.getUint32(offset + 8, littleEndian) : (offset + 8);
        if (dataOffset + tagSize > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid data offset.');
            return;
        }
        if (length === 1) {
            return tagType.getValue(dataView, dataOffset, littleEndian);
        }
        values = [];
        for (i = 0; i < length; i += 1) {
            values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);
        }
        if (tagType.ascii) {
            str = '';
            // Concatenate the chars:
            for (i = 0; i < values.length; i += 1) {
                c = values[i];
                // Ignore the terminating NULL byte(s):
                if (c === '\u0000') {
                    break;
                }
                str += c;
            }
            return str;
        }
        return values;
    };

    loadImage.parseExifTag = function (dataView, tiffOffset, offset, littleEndian, data) {
        var tag = dataView.getUint16(offset, littleEndian);
        data.exif[tag] = loadImage.getExifValue(
            dataView,
            tiffOffset,
            offset,
            dataView.getUint16(offset + 2, littleEndian), // tag type
            dataView.getUint32(offset + 4, littleEndian), // tag length
            littleEndian
        );
    };

    loadImage.parseExifTags = function (dataView, tiffOffset, dirOffset, littleEndian, data) {
        var tagsNumber,
            dirEndOffset,
            i;
        if (dirOffset + 6 > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid directory offset.');
            return;
        }
        tagsNumber = dataView.getUint16(dirOffset, littleEndian);
        dirEndOffset = dirOffset + 2 + 12 * tagsNumber;
        if (dirEndOffset + 4 > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid directory size.');
            return;
        }
        for (i = 0; i < tagsNumber; i += 1) {
            this.parseExifTag(
                dataView,
                tiffOffset,
                dirOffset + 2 + 12 * i, // tag offset
                littleEndian,
                data
            );
        }
        // Return the offset to the next directory:
        return dataView.getUint32(dirEndOffset, littleEndian);
    };

    loadImage.parseExifData = function (dataView, offset, length, data, options) {
        if (options.disableExif) {
            return;
        }
        var tiffOffset = offset + 10,
            littleEndian,
            dirOffset,
            thumbnailData;
        // Check for the ASCII code for "Exif" (0x45786966):
        if (dataView.getUint32(offset + 4) !== 0x45786966) {
            // No Exif data, might be XMP data instead
            return;
        }
        if (tiffOffset + 8 > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid segment size.');
            return;
        }
        // Check for the two null bytes:
        if (dataView.getUint16(offset + 8) !== 0x0000) {
            console.log('Invalid Exif data: Missing byte alignment offset.');
            return;
        }
        // Check the byte alignment:
        switch (dataView.getUint16(tiffOffset)) {
        case 0x4949:
            littleEndian = true;
            break;
        case 0x4D4D:
            littleEndian = false;
            break;
        default:
            console.log('Invalid Exif data: Invalid byte alignment marker.');
            return;
        }
        // Check for the TIFF tag marker (0x002A):
        if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002A) {
            console.log('Invalid Exif data: Missing TIFF marker.');
            return;
        }
        // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:
        dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian);
        // Create the exif object to store the tags:
        data.exif = new loadImage.ExifMap();
        // Parse the tags of the main image directory and retrieve the
        // offset to the next directory, usually the thumbnail directory:
        dirOffset = loadImage.parseExifTags(
            dataView,
            tiffOffset,
            tiffOffset + dirOffset,
            littleEndian,
            data
        );
        if (dirOffset && !options.disableExifThumbnail) {
            thumbnailData = {exif: {}};
            dirOffset = loadImage.parseExifTags(
                dataView,
                tiffOffset,
                tiffOffset + dirOffset,
                littleEndian,
                thumbnailData
            );
            // Check for JPEG Thumbnail offset:
            if (thumbnailData.exif[0x0201]) {
                data.exif.Thumbnail = loadImage.getExifThumbnail(
                    dataView,
                    tiffOffset + thumbnailData.exif[0x0201],
                    thumbnailData.exif[0x0202] // Thumbnail data length
                );
            }
        }
        // Check for Exif Sub IFD Pointer:
        if (data.exif[0x8769] && !options.disableExifSub) {
            loadImage.parseExifTags(
                dataView,
                tiffOffset,
                tiffOffset + data.exif[0x8769], // directory offset
                littleEndian,
                data
            );
        }
        // Check for GPS Info IFD Pointer:
        if (data.exif[0x8825] && !options.disableExifGps) {
            loadImage.parseExifTags(
                dataView,
                tiffOffset,
                tiffOffset + data.exif[0x8825], // directory offset
                littleEndian,
                data
            );
        }
    };

    // Registers the Exif parser for the APP1 JPEG meta data segment:
    loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData);

    // Adds the following properties to the parseMetaData callback data:
    // * exif: The exif tags, parsed by the parseExifData method

    // Adds the following options to the parseMetaData method:
    // * disableExif: Disables Exif parsing.
    // * disableExifThumbnail: Disables parsing of the Exif Thumbnail.
    // * disableExifSub: Disables parsing of the Exif Sub IFD.
    // * disableExifGps: Disables parsing of the Exif GPS Info IFD.

}));

/*
 * JavaScript Load Image Exif Map 1.0.2
 * https://github.com/blueimp/JavaScript-Load-Image
 *
 * Copyright 2013, Sebastian Tschan
 * https://blueimp.net
 *
 * Exif tags mapping based on
 * https://github.com/jseidelin/exif-js
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 */

/*global define, window */

(function (factory) {
    
    if (typeof define === 'function' && define.amd) {
        // Register as an anonymous AMD module:
        define('vendor/load-image/load-image-exif-map',['./load-image', './load-image-exif'], factory);
    } else {
        // Browser globals:
        factory(window.loadImage);
    }
}(function (loadImage) {
    

    loadImage.ExifMap.prototype.tags = {
        // =================
        // TIFF tags (IFD0):
        // =================
        0x0100: 'ImageWidth',
        0x0101: 'ImageHeight',
        0x8769: 'ExifIFDPointer',
        0x8825: 'GPSInfoIFDPointer',
        0xA005: 'InteroperabilityIFDPointer',
        0x0102: 'BitsPerSample',
        0x0103: 'Compression',
        0x0106: 'PhotometricInterpretation',
        0x0112: 'Orientation',
        0x0115: 'SamplesPerPixel',
        0x011C: 'PlanarConfiguration',
        0x0212: 'YCbCrSubSampling',
        0x0213: 'YCbCrPositioning',
        0x011A: 'XResolution',
        0x011B: 'YResolution',
        0x0128: 'ResolutionUnit',
        0x0111: 'StripOffsets',
        0x0116: 'RowsPerStrip',
        0x0117: 'StripByteCounts',
        0x0201: 'JPEGInterchangeFormat',
        0x0202: 'JPEGInterchangeFormatLength',
        0x012D: 'TransferFunction',
        0x013E: 'WhitePoint',
        0x013F: 'PrimaryChromaticities',
        0x0211: 'YCbCrCoefficients',
        0x0214: 'ReferenceBlackWhite',
        0x0132: 'DateTime',
        0x010E: 'ImageDescription',
        0x010F: 'Make',
        0x0110: 'Model',
        0x0131: 'Software',
        0x013B: 'Artist',
        0x8298: 'Copyright',
        // ==================
        // Exif Sub IFD tags:
        // ==================
        0x9000: 'ExifVersion',                  // EXIF version
        0xA000: 'FlashpixVersion',              // Flashpix format version
        0xA001: 'ColorSpace',                   // Color space information tag
        0xA002: 'PixelXDimension',              // Valid width of meaningful image
        0xA003: 'PixelYDimension',              // Valid height of meaningful image
        0xA500: 'Gamma',
        0x9101: 'ComponentsConfiguration',      // Information about channels
        0x9102: 'CompressedBitsPerPixel',       // Compressed bits per pixel
        0x927C: 'MakerNote',                    // Any desired information written by the manufacturer
        0x9286: 'UserComment',                  // Comments by user
        0xA004: 'RelatedSoundFile',             // Name of related sound file
        0x9003: 'DateTimeOriginal',             // Date and time when the original image was generated
        0x9004: 'DateTimeDigitized',            // Date and time when the image was stored digitally
        0x9290: 'SubSecTime',                   // Fractions of seconds for DateTime
        0x9291: 'SubSecTimeOriginal',           // Fractions of seconds for DateTimeOriginal
        0x9292: 'SubSecTimeDigitized',          // Fractions of seconds for DateTimeDigitized
        0x829A: 'ExposureTime',                 // Exposure time (in seconds)
        0x829D: 'FNumber',
        0x8822: 'ExposureProgram',              // Exposure program
        0x8824: 'SpectralSensitivity',          // Spectral sensitivity
        0x8827: 'PhotographicSensitivity',      // EXIF 2.3, ISOSpeedRatings in EXIF 2.2
        0x8828: 'OECF',                         // Optoelectric conversion factor
        0x8830: 'SensitivityType',
        0x8831: 'StandardOutputSensitivity',
        0x8832: 'RecommendedExposureIndex',
        0x8833: 'ISOSpeed',
        0x8834: 'ISOSpeedLatitudeyyy',
        0x8835: 'ISOSpeedLatitudezzz',
        0x9201: 'ShutterSpeedValue',            // Shutter speed
        0x9202: 'ApertureValue',                // Lens aperture
        0x9203: 'BrightnessValue',              // Value of brightness
        0x9204: 'ExposureBias',                 // Exposure bias
        0x9205: 'MaxApertureValue',             // Smallest F number of lens
        0x9206: 'SubjectDistance',              // Distance to subject in meters
        0x9207: 'MeteringMode',                 // Metering mode
        0x9208: 'LightSource',                  // Kind of light source
        0x9209: 'Flash',                        // Flash status
        0x9214: 'SubjectArea',                  // Location and area of main subject
        0x920A: 'FocalLength',                  // Focal length of the lens in mm
        0xA20B: 'FlashEnergy',                  // Strobe energy in BCPS
        0xA20C: 'SpatialFrequencyResponse',
        0xA20E: 'FocalPlaneXResolution',        // Number of pixels in width direction per FPRUnit
        0xA20F: 'FocalPlaneYResolution',        // Number of pixels in height direction per FPRUnit
        0xA210: 'FocalPlaneResolutionUnit',     // Unit for measuring the focal plane resolution
        0xA214: 'SubjectLocation',              // Location of subject in image
        0xA215: 'ExposureIndex',                // Exposure index selected on camera
        0xA217: 'SensingMethod',                // Image sensor type
        0xA300: 'FileSource',                   // Image source (3 == DSC)
        0xA301: 'SceneType',                    // Scene type (1 == directly photographed)
        0xA302: 'CFAPattern',                   // Color filter array geometric pattern
        0xA401: 'CustomRendered',               // Special processing
        0xA402: 'ExposureMode',                 // Exposure mode
        0xA403: 'WhiteBalance',                 // 1 = auto white balance, 2 = manual
        0xA404: 'DigitalZoomRatio',             // Digital zoom ratio
        0xA405: 'FocalLengthIn35mmFilm',
        0xA406: 'SceneCaptureType',             // Type of scene
        0xA407: 'GainControl',                  // Degree of overall image gain adjustment
        0xA408: 'Contrast',                     // Direction of contrast processing applied by camera
        0xA409: 'Saturation',                   // Direction of saturation processing applied by camera
        0xA40A: 'Sharpness',                    // Direction of sharpness processing applied by camera
        0xA40B: 'DeviceSettingDescription',
        0xA40C: 'SubjectDistanceRange',         // Distance to subject
        0xA420: 'ImageUniqueID',                // Identifier assigned uniquely to each image
        0xA430: 'CameraOwnerName',
        0xA431: 'BodySerialNumber',
        0xA432: 'LensSpecification',
        0xA433: 'LensMake',
        0xA434: 'LensModel',
        0xA435: 'LensSerialNumber',
        // ==============
        // GPS Info tags:
        // ==============
        0x0000: 'GPSVersionID',
        0x0001: 'GPSLatitudeRef',
        0x0002: 'GPSLatitude',
        0x0003: 'GPSLongitudeRef',
        0x0004: 'GPSLongitude',
        0x0005: 'GPSAltitudeRef',
        0x0006: 'GPSAltitude',
        0x0007: 'GPSTimeStamp',
        0x0008: 'GPSSatellites',
        0x0009: 'GPSStatus',
        0x000A: 'GPSMeasureMode',
        0x000B: 'GPSDOP',
        0x000C: 'GPSSpeedRef',
        0x000D: 'GPSSpeed',
        0x000E: 'GPSTrackRef',
        0x000F: 'GPSTrack',
        0x0010: 'GPSImgDirectionRef',
        0x0011: 'GPSImgDirection',
        0x0012: 'GPSMapDatum',
        0x0013: 'GPSDestLatitudeRef',
        0x0014: 'GPSDestLatitude',
        0x0015: 'GPSDestLongitudeRef',
        0x0016: 'GPSDestLongitude',
        0x0017: 'GPSDestBearingRef',
        0x0018: 'GPSDestBearing',
        0x0019: 'GPSDestDistanceRef',
        0x001A: 'GPSDestDistance',
        0x001B: 'GPSProcessingMethod',
        0x001C: 'GPSAreaInformation',
        0x001D: 'GPSDateStamp',
        0x001E: 'GPSDifferential',
        0x001F: 'GPSHPositioningError'
    };

    loadImage.ExifMap.prototype.stringValues = {
        ExposureProgram: {
            0: 'Undefined',
            1: 'Manual',
            2: 'Normal program',
            3: 'Aperture priority',
            4: 'Shutter priority',
            5: 'Creative program',
            6: 'Action program',
            7: 'Portrait mode',
            8: 'Landscape mode'
        },
        MeteringMode: {
            0: 'Unknown',
            1: 'Average',
            2: 'CenterWeightedAverage',
            3: 'Spot',
            4: 'MultiSpot',
            5: 'Pattern',
            6: 'Partial',
            255: 'Other'
        },
        LightSource: {
            0: 'Unknown',
            1: 'Daylight',
            2: 'Fluorescent',
            3: 'Tungsten (incandescent light)',
            4: 'Flash',
            9: 'Fine weather',
            10: 'Cloudy weather',
            11: 'Shade',
            12: 'Daylight fluorescent (D 5700 - 7100K)',
            13: 'Day white fluorescent (N 4600 - 5400K)',
            14: 'Cool white fluorescent (W 3900 - 4500K)',
            15: 'White fluorescent (WW 3200 - 3700K)',
            17: 'Standard light A',
            18: 'Standard light B',
            19: 'Standard light C',
            20: 'D55',
            21: 'D65',
            22: 'D75',
            23: 'D50',
            24: 'ISO studio tungsten',
            255: 'Other'
        },
        Flash: {
            0x0000: 'Flash did not fire',
            0x0001: 'Flash fired',
            0x0005: 'Strobe return light not detected',
            0x0007: 'Strobe return light detected',
            0x0009: 'Flash fired, compulsory flash mode',
            0x000D: 'Flash fired, compulsory flash mode, return light not detected',
            0x000F: 'Flash fired, compulsory flash mode, return light detected',
            0x0010: 'Flash did not fire, compulsory flash mode',
            0x0018: 'Flash did not fire, auto mode',
            0x0019: 'Flash fired, auto mode',
            0x001D: 'Flash fired, auto mode, return light not detected',
            0x001F: 'Flash fired, auto mode, return light detected',
            0x0020: 'No flash function',
            0x0041: 'Flash fired, red-eye reduction mode',
            0x0045: 'Flash fired, red-eye reduction mode, return light not detected',
            0x0047: 'Flash fired, red-eye reduction mode, return light detected',
            0x0049: 'Flash fired, compulsory flash mode, red-eye reduction mode',
            0x004D: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',
            0x004F: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',
            0x0059: 'Flash fired, auto mode, red-eye reduction mode',
            0x005D: 'Flash fired, auto mode, return light not detected, red-eye reduction mode',
            0x005F: 'Flash fired, auto mode, return light detected, red-eye reduction mode'
        },
        SensingMethod: {
            1: 'Undefined',
            2: 'One-chip color area sensor',
            3: 'Two-chip color area sensor',
            4: 'Three-chip color area sensor',
            5: 'Color sequential area sensor',
            7: 'Trilinear sensor',
            8: 'Color sequential linear sensor'
        },
        SceneCaptureType: {
            0: 'Standard',
            1: 'Landscape',
            2: 'Portrait',
            3: 'Night scene'
        },
        SceneType: {
            1: 'Directly photographed'
        },
        CustomRendered: {
            0: 'Normal process',
            1: 'Custom process'
        },
        WhiteBalance: {
            0: 'Auto white balance',
            1: 'Manual white balance'
        },
        GainControl: {
            0: 'None',
            1: 'Low gain up',
            2: 'High gain up',
            3: 'Low gain down',
            4: 'High gain down'
        },
        Contrast: {
            0: 'Normal',
            1: 'Soft',
            2: 'Hard'
        },
        Saturation: {
            0: 'Normal',
            1: 'Low saturation',
            2: 'High saturation'
        },
        Sharpness: {
            0: 'Normal',
            1: 'Soft',
            2: 'Hard'
        },
        SubjectDistanceRange: {
            0: 'Unknown',
            1: 'Macro',
            2: 'Close view',
            3: 'Distant view'
        },
        FileSource: {
            3: 'DSC'
        },
        ComponentsConfiguration: {
            0: '',
            1: 'Y',
            2: 'Cb',
            3: 'Cr',
            4: 'R',
            5: 'G',
            6: 'B'
        },
        Orientation: {
            1: 'top-left',
            2: 'top-right',
            3: 'bottom-right',
            4: 'bottom-left',
            5: 'left-top',
            6: 'right-top',
            7: 'right-bottom',
            8: 'left-bottom'
        }
    };

    loadImage.ExifMap.prototype.getText = function (id) {
        var value = this.get(id);
        switch (id) {
        case 'LightSource':
        case 'Flash':
        case 'MeteringMode':
        case 'ExposureProgram':
        case 'SensingMethod':
        case 'SceneCaptureType':
        case 'SceneType':
        case 'CustomRendered':
        case 'WhiteBalance':
        case 'GainControl':
        case 'Contrast':
        case 'Saturation':
        case 'Sharpness':
        case 'SubjectDistanceRange':
        case 'FileSource':
        case 'Orientation':
            return this.stringValues[id][value];
        case 'ExifVersion':
        case 'FlashpixVersion':
            return String.fromCharCode(value[0], value[1], value[2], value[3]);
        case 'ComponentsConfiguration':
            return this.stringValues[id][value[0]] +
                this.stringValues[id][value[1]] +
                this.stringValues[id][value[2]] +
                this.stringValues[id][value[3]];
        case 'GPSVersionID':
            return value[0] + '.' + value[1]  + '.' + value[2]  + '.' + value[3];
        }
        return String(value);
    };

    (function (exifMapPrototype) {
        var tags = exifMapPrototype.tags,
            map = exifMapPrototype.map,
            prop;

        // Map the tag names to tags:
        for (prop in tags) {
            if (tags.hasOwnProperty(prop)) {
                map[tags[prop]] = prop;
            }
        }
    }(loadImage.ExifMap.prototype));

    loadImage.ExifMap.prototype.getAll = function () {
        var map = {},
            prop,
            id;
        for (prop in this) {
            if (this.hasOwnProperty(prop)) {
                id = this.tags[prop];
                if (id) {
                    map[id] = this.getText(id);
                }
            }
        }
        return map;
    };

}));

define('loadImage',['require','vendor/load-image/load-image-orientation','vendor/load-image/load-image-meta','vendor/load-image/load-image-ios','vendor/load-image/load-image-exif','vendor/load-image/load-image-exif-map','vendor/load-image/load-image'],function (require) {
  require('vendor/load-image/load-image-orientation');
  require('vendor/load-image/load-image-meta');
  require('vendor/load-image/load-image-ios');
  require('vendor/load-image/load-image-exif');
  require('vendor/load-image/load-image-exif-map');
  var loadImage = require('vendor/load-image/load-image');
  
  return loadImage;
});
define('expressions/add_expression',['require','loadcss!css/add_expression','jquery','pjs','main/popover_view','graphing/label','template!add_expression','./expression','./table','./text','./folder','./image','browser','i18n','loadImage','conditional_blur'],function(require){
  require('loadcss!css/add_expression');

  var $ = require('jquery');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var Label = require('graphing/label');
  var template = require('template!add_expression');
  var ExpressionObject = require('./expression');
  var TableObject = require('./table');
  var TextObject = require('./text');
  var FolderObject = require('./folder');
  var ImageObject = require('./image');
  var Browser = require('browser');
  var i18n = require('i18n');
  var LoadImage = require('loadImage');
  var conditionalBlur = require('conditional_blur');

  var UPLOAD_SUPPORTED = !!window.FileReader;
  var isShittyIos8 = (
    Browser.IS_IPAD &&
    Browser.IOS_VERSION &&
    Browser.IOS_VERSION[0] === 8 &&
    Browser.IOS_VERSION[1] === 0 &&
    Browser.IOS_VERSION[2] === 0
  );
  var AddExpressionView = P(PopoverView, function(view, _super){

    view.template = template;
    view.direction = 'bottom';

    view.init = function (listView, $root, graphSettings, toastView) {
      _super.init.call(this);

      this.$root = $root;
      this.listView = listView;
      this.list = listView.model;
      this.graphSettings = graphSettings;
      this.toastView = toastView;
    };

    view.getTemplateParams = function(){
      var params = _super.getTemplateParams();

      params.expressions = true;
      params.texts = true;
      params.tables = true;
      params.folders = this.graphSettings.config.folders;
      params.images = this.graphSettings.config.images;

      return params;
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      if (Browser.IS_IPAD && Browser.IS_IN_IFRAME) {
        // prevents mobile safari from getting into a bad
        // state where the next tap on the screen defocuses
        // whatever is selected.
        // see #3106
        this.$().on('dcg-tapstart', function (evt) {
          evt.preventDefault();
        });
      }

      this.$('.dcg-action-newexpression').on('dcg-tap', this.newExpression.bind(this));
      this.$('.dcg-action-newtext').on('dcg-tap', this.newText.bind(this));
      this.$('.dcg-action-newfolder').on('dcg-tap', this.newFolder.bind(this));
      this.$('.dcg-action-newtable').on('dcg-tap', this.newTableFromTap.bind(this));
      this.$('.dcg-action-newimage').on('dcg-tap', this.selectImage.bind(this));

      if (UPLOAD_SUPPORTED && !isShittyIos8) {
        this.initFilePicker();
      }

      // prevent dropping file from changing url. Also enables the drop event.
      $(document).on('dragstart drag dragend dragenter dragover dragleave drop', function (evt) {
        evt.preventDefault();
        evt.stopPropagation();
      });

      var $root = this.$root;

      var collection = $();
      function removeFileDraggedClass () {
        $root.removeClass('dcg-filedraggedover');
        collection = $();
        $root.off('.filedraggedover');
      }

      $root.on('dragenter', function (evt) {
        if (collection.size() === 0) {
          $root.addClass('dcg-filedraggedover');
          $root.on('dcg-tapstart.filedraggedover', removeFileDraggedClass);
        }
        collection = collection.add(evt.target);
      }).on('dragleave', function (evt) {
          collection = collection.not(evt.target);
          if (collection.size() === 0) {
            removeFileDraggedClass();
          }
      }).on('drop', removeFileDraggedClass);

      var self = this;
      this.listView.$().on('drop', function (evt) {
        var files = evt.originalEvent.dataTransfer && evt.originalEvent.dataTransfer.files;
        if (files) {
          for (var i=0; i<files.length; i++) {
            self.insertFile(files[i]);
          }
        }
      });
    };

    function recompressJPEG (canvas, maxFileSize) {
      // Initial quality parameter is 0.92, which is browser default. For high quality
      // parameter, file size is exponential in the quality parameter. For low quality
      // parameter, file size is algebraic, something like q^(2/3). Here's a graph of
      // file size in bytes vs quality parameter for one sample image:
      //
      //   https://www.desmos.com/calculator/if9emix6np
      var qualityParameters = [0.92, 0.86, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1];

      var compressedDataURL;
      for (var i = 0; i < qualityParameters.length; i++) {
        compressedDataURL = canvas.toDataURL('image/jpeg', qualityParameters[i]);
        if (compressedDataURL.length < maxFileSize) return compressedDataURL;
      }
      return compressedDataURL;
    }

    function recompressPNG (canvas, maxFileSize) {
      // if the file is too big, we scale the image down in width and height to scale the file size.
      // simply dropping the resolution of the image should do a pretty good job of dropping our
      // image size down. we allow three rounds of compression to hone in on a file that's just under
      // the maxFileSize.  The first attempt usually gets us within 2*maxFileSize. The second attempt
      // usually gets us to within 1.1*maxFileSize. I haven't found an image that the third attempt
      // doesn't get us right under the maxFileSize.

      var fileSize = canvas.toDataURL().length;

      var scaledWidth = canvas.width;
      var scaledHeight = canvas.height;
      var scaledCanvas = document.createElement('canvas');
      var compressedDataURL;
      for (var compressionAttempts = 0; compressionAttempts < 2; compressionAttempts++) {
        var scaleFactor = Math.sqrt(maxFileSize/fileSize);
        scaledWidth = Math.round(scaleFactor * scaledWidth);
        scaledHeight = Math.round(scaleFactor * scaledHeight);

        scaledCanvas.height = scaledHeight;
        scaledCanvas.width = scaledWidth;

        var ctx = scaledCanvas.getContext('2d');
        ctx.drawImage(canvas, 0, 0, scaledWidth, scaledHeight);

        compressedDataURL = scaledCanvas.toDataURL();

        fileSize = compressedDataURL.length;
        if (fileSize < maxFileSize) return compressedDataURL;
      }

      return compressedDataURL;
    }

    view.insertFile = function (file) {
      if (!file) {
        alert(i18n.t('You did not select a file'));
        return;
      }

      if (!file.type.match('image/*')) {
        alert(i18n.t('The file "__file__" is not an image', {file: file.name}));
        return;
      }

      var imageObject = ImageObject({
        originalFilename: file.name,
        name: file.name,
        image_url: null,
        visible: true,
        selected: true,
        width: '0',
        height: '0',
        x: '0',
        y: '0',
        opacity: 1,
        isUploading: true
      }, this.list);

      this.newImage(imageObject);

      LoadImage.parseMetaData(file, function (data) {

        var orientation;
        if (data.exif) {
          orientation = data.exif.get('Orientation');
        }

        var loadImageOptions = {
          orientation: orientation,
          canvas: true,
          maxWidth: 1600,
          maxHeight: 1600
        };

        LoadImage(file, function (canvas) {
          var width = canvas.width;
          var height = canvas.height;
          var ratio = Math.max(width, height) / Math.min(width, height);
          var maxFileSize = 2e5;

          if (width < height) {
            height = 10;
            width = Math.round(10 * height / ratio) / 10;
          } else {
            width = 10;
            height = Math.round(10 * width / ratio) / 10;
          }

          // if it's a jpeg, kick in a little compression from the start. Prevents 1MB images from growing to 7MB
          // simply because of a difference in compression algorithms.
          var compressedDataURL;
          if (file.type === 'image/jpeg') {
            compressedDataURL = recompressJPEG(canvas, maxFileSize);
          } else {
            compressedDataURL = canvas.toDataURL();
            if (compressedDataURL.length > maxFileSize) {
              // If a png is large and poorly compressed (more than 0.75 bytes per pixel),
              // it is probably a full color image. In that case, recompress it as JPEG
              // instead of png.
              compressedDataURL = (compressedDataURL.length > 0.75*canvas.width*canvas.height) ?
                recompressJPEG(canvas, maxFileSize) :
                recompressPNG(canvas, maxFileSize)
              ;
            }
          }

          // finalize image data
          imageObject.setProperty('width', width.toString());
          imageObject.setProperty('height', height.toString());
          imageObject.setProperty('image_url', compressedDataURL);
          imageObject.setProperty('isUploading', false);

        }, loadImageOptions);
      },
      {
        maxMetaDataSize: 262144,
        disableImageHead: false
      });
    };

    view.renderIsVisible = function () {
      if (this.isVisible) {
        if (this.direction === 'bottom' && this.listView.calcIsNarrow) {
          this.direction = 'right';
          this.$().addClass('dcg-right').removeClass('dcg-bottom');
        } else if (this.direction !== 'bottom' && !this.listView.calcIsNarrow) {
          this.direction = 'bottom';
          this.$().addClass('dcg-bottom').removeClass('dcg-right');
        }
      }
      _super.renderIsVisible.call(this);
    };

    view.initFilePicker = function () {
      var self = this;

      // create the filepicker
      this.$filepicker = this.$('input[type=file]');

      this.$filepicker.on('change', function (evt) {
        self.setProperty('isVisible', false);
        self.insertFile(evt.target.files[0]);
        self.$filepicker.val(''); // clear out selected file so we can reselect the file
      });
    };

    view.newExpression = function() {
      this.insertItem(ExpressionObject({selected: true, latex: ''}, this.list));
    };

    view.newText = function() {
      this.insertItem(TextObject({selected: true, text: ''}, this.list));
    };

    view.newFolder = function () {
      this.insertItem(FolderObject({selected: true}, this.list));
    };

    //filter through so that we're not mixing data & jQuery events
    view.newTableFromTap = function (e) {
      this.newTable();
    };

    view.newTable = function(data) {
      var properties = {selected: !data, latex:''};

      var subscript = this.list.findAvailableColumnSubscript();

      //TODO: support pasting in tables with more than 2 columns? It's supported by parse_data
      //what should we choose for headers?
      properties.columns = [
        {
          latex: Label.identifierToLatex('x_' + subscript),
          values:(data ? data[0] : [1, 2, 3, 4, 5])
        },
        {
          latex: Label.identifierToLatex('y_' + subscript),
          values:(data ? data[1] : ['','','','',''])
        }
      ];

      // create a new expression and populate it
      var obj = TableObject(properties, this.list);
      this.insertItem(obj);
      if (!data) {
        this.listView.getSelectedView().addFocus('cell', 1, 1);
      }
    };

    view.selectImage = function () {
      conditionalBlur();

      if (isShittyIos8) {
        this.toastView.show(
          "iOS 8.0 has temporarily broken image upload. So sorry!",
          {hideAfter: 10000}
        );
        this.$('.dcg-action-newimage').addClass('dcg-disabled');
      } else if (UPLOAD_SUPPORTED) {
        this.$filepicker[0].click();
      } else {
        this.toastView.show(
          i18n.t("Image upload is not supported in this browser."),
          {hideAfter: 10000}
        );
        this.$('.dcg-action-newimage').addClass('dcg-disabled');
      }
    };

    view.newImage = function(imageObject) {
      var self = this;
      var list = this.list;

      list.undoRedo.oneTransaction(function(){
        self.insertItem(imageObject);
      });
    };

    //rules for insertItem (the + button at the top)
    //
    // overarching:
    //  (1) pressing that button should always have a visible result (i.e. never a no-op)
    //  (2) a folder can never be inserted inside of another folder
    //  (3) if an item's is a blank expression convert instead of creating a new one (unless that violates #1 or #2)
    //      (unless that violates 1 or 2)
    //  (4) insert below current expression where that's possible (below the folder where necessary)
    //  (5) insert at the highest visible point that's not in a folder

    view.insertItem = function(obj){
      /* jshint maxcomplexity:15 */

      // close the popover
      this.setProperty('isVisible', false);

      //collect up some useful globals
      var list = this.list;
      var item = list.getSelected();

      //case 1: current empty expression needs to be replaced and is outside a folder
      //  only applies if:
      //  item.isExpression and item is empty
      //  obj is not an expression

      if (item && item.isExpression && !item.latex && !item.folder && !obj.isExpression) {

        list.undoRedo.oneTransaction(function () {
          list.insertItemAt(item.index + 1, obj);
          list.removeItemAt(item.index);
        });

        if (obj.selected) this.listView.getSelectedView().addFocus();
        return;
      }

      //case 2: current empty expression needs to be replaced and is inside a folder
      // only applies if:
      // item.isExpression and item is empty
      // obj is not an expression, obj is not a folder

      if (item && item.isExpression && !item.latex && item.folder && !obj.isExpression && !obj.isFolder) {
        list.undoRedo.oneTransaction(function () {
          list.insertItemAt(item.index + 1, obj);
          item.folder.addItem(obj);
          list.removeItemAt(item.index);
        });
        if (obj.selected) this.listView.getSelectedView().addFocus();
        return;
      }

      //case 3: current is outside of a folder: insert right below where we are,
      // no funny business
      if (item && !item.folder && !item.isFolder) {
        this.list.insertItemAt(item.index + 1, obj);
        if (obj.selected) this.listView.getSelectedView().addFocus();
        return;
      }

      //case 4: current item is inside a folder, and we're not inserting a new folder
      // insert right below us, but inside of the folder
      if (item && item.folder && !obj.isFolder) {

        list.undoRedo.oneTransaction(function () {
          list.insertItemAt(item.index + 1, obj);
          item.folder.addItem(obj);
        });
        if (obj.selected) this.listView.getSelectedView().addFocus();
        return;
      }

      //case 5: insert into an existing folder
      if (item && item.isFolder && !item.collapsed && !obj.isFolder) {
        list.undoRedo.oneTransaction(function () {
          list.insertItemAt(item.index + 1, obj);
          item.addItem(obj);
        });
        if (obj.selected) this.listView.getSelectedView().addFocus();
        return;
      }

      //case 5: we need to seek downward from here and insert when we're ready.
      //this is either because nothing is selected, or because we're a folder
      //inside of a folder. in either case, seek downward until the first chance
      //that we have that's not inside of a folder.

      if (!item) item = this.listView.getFirstVisibleItem();
      // can't insert a folder right after the starting folder
      //(fixes problem if you try to insert a folder while in a folder)
      if (item.isFolder) item = this.list.getItemByIndex(item.index + 1);
      //after this, we search for the first non-foldered item, and insert right before it.
      while(item && item.folder) {
        item = this.list.getItemByIndex(item.index + 1);
      }

      var index = (item ? item.index : this.list.getItemCount());
      this.list.insertItemAt(index, obj);
      if (obj.selected) this.listView.getSelectedView().addFocus();
    };

  });

  return AddExpressionView;
});

define('analytics/google_analytics',['require'],function(require){
  var enabled = false;

  return {
    init: function(accountId) {
      if (enabled) return;

      // Initialize google analytics
      window._gaq = window._gaq || [];
      _gaq.push(['_setAccount', accountId]);
      _gaq.push(['_trackPageview']);
      enabled = true;

      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    },
    send: function(evt) {
      //noop until init has been called
      if (!enabled) return;
      _gaq.push(evt);
    }
  };
});

define('scroll_helpers',['require'],function (require) {
  //this ensures that innerEl is visible inside of outerEl by scrolling outerEl
  //padding is the space we want to enforce on either side, if available
  //
  //note: innerEl and outerEl are expected to be jQuery objects.
  var scrollVisible = function(innerEl, outerEl, padding) {
    var outerHeight = outerEl.height();
    var innerHeight = innerEl.height();

    var scrollTop = outerEl[0].scrollTop;
    //innerTop relative to the container (compensate for scroll and offset of container)
    var innerTop = innerEl.offset().top + scrollTop - outerEl.offset().top;

    // {padding}px from the top means innerTop - scrollTop = padding
    var maxScrollTop = innerTop - padding;
    // {padding}px from the bottom means outerHeight+scrollTop = innerHeight + innerTop + padding
    var minScrollTop = innerHeight + innerTop + padding - outerHeight;

    if (maxScrollTop >= minScrollTop) {
      //clamp value between the max and min scrollTop
      outerEl[0].scrollTop = Math.min(Math.max(scrollTop, minScrollTop), maxScrollTop);
    } else {
      //if we can't fit everything, just match padding on both sides by splitting the difference
      outerEl[0].scrollTop = 0.5*(maxScrollTop + minScrollTop);
    }
  };

  return {scrollVisible: scrollVisible};
});

define('loadcss!css/new_expression', function(){});
define('template!new_expression', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-expressionitem dcg-new-expression dcg-opened">\n  <div class=\'dcg-new-math-div dcg-do-not-blur dcg-action-newmath\'>\n    <div class=\'dcg-new-expression-fade\'></div>\n  </div>\n\n  <span\n     class="dcg-tab"\n  >\n     <span class=\'dcg-num dcg-variable-index\'>2</span>\n     <div class=\'dcg-tab-interior\'></div>\n  </span>\n\n</div>\n';
}
return __p;
};});
define('expressions/new_expression',['require','loadcss!css/new_expression','pjs','underscore_view','template!new_expression','./expression'],function(require){
  require('loadcss!css/new_expression');

  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!new_expression');
  var ExpressionObject = require('./expression');

  var NewExpressionView = P(UnderscoreView, function(view, _super){

    view.template = template;

    view.init = function (listView) {
      _super.init.call(this);
      this.observe('index', this.updateIndex.bind(this));
      this.listView = listView;
    };

    view.didInsertElement = function() {
      // update the index now and observe any changes
      this.updateIndex();

      this.$('.dcg-action-newmath').on('dcg-tap', this.newMath.bind(this));
    };

    view.updateIndex = function () {
      this.$('.dcg-variable-index').text(this.index);
    };

    view.newMath = function() {
      var constructor = ExpressionObject;
      var properties = {selected:true, latex:''};
      var obj = constructor(properties, this.listView.model);
      this.listView.model.insertItemAt(this.listView.model.getItemCount(), obj);
      this.listView.getSelectedView().addFocus();
    };

  });

  return NewExpressionView;
});

define('expressions/abstract_icon',['require','jquery','underscore_view','pjs','keys','i18n','analytics/google_analytics'],function(require){
  var $ = require('jquery');
  var UnderscoreView = require('underscore_view');
  var P = require('pjs');
  var Keys = require('keys');
  var i18n = require('i18n');
  var ga = require('analytics/google_analytics');

  var icon_count = 0;

  var AbstractIconView = P(UnderscoreView, function (view, _super) {

    view.init = function (parentView) {
      this.parentView = parentView;
      this.model = parentView.model;

      _super.init.call(this);
      this.optionsmenu_guid = (++icon_count);

      // model.error is a message; this.error is boolean whether we care about
      // the error. One time we don't care is if the model is empty.
      this.model.observe('error.iconview', this.renderErrorTooltip.bind(this));
      this.observe('error', this.renderErrorTooltip.bind(this));

      this.observe('error errorStable', this.computeErrorShown.bind(this));
      this.observe('errorShown', this.renderErrorShown.bind(this));
    };

    view.destruct = function () {
      this.model.unobserve('.iconview');
    };

    view.computeErrorShown = function () {
      this.setProperty('errorShown', this.error && this.errorStable);
    };

    view.renderErrorTooltip = function () {
      var error = this.error ? i18n.unpack(this.model.error) : '';
      this.$().closest('.dcg-variable-errortooltip').attr('tooltip', error);
    };

    view.renderErrorShown = function () {
      this.$().toggleClass('dcg-error', !!this.errorShown);
    };

    view.didInsertElement = function () {
      this.renderErrorShown();
      this.renderErrorTooltip();
    };

    // defined in subclass
    view.createOptionsMenuView = function () {};

    view.toggleOptions = function() {
      if (this.error) {
        this.hideOptions();
        return;
      }
      if (this.optionsShown) {
        this.hideOptions();
        return;
      }

      this.optionsShown = true;

      //to do: track if this is an image, table, or expression?
      if (this.parentView.listView && this.parentView.listView.editListMode) {
        ga.send(['_trackEvent', 'edit-list-mode', 'options shown from edit mode']);
      } else {
        ga.send(['_trackEvent', 'edit-list-mode', 'options shown from long hold']);
      }

      // Add options menu to .dcg-main. workaround bug with "-webkit-scrolling-overflow: touch" and child "position:
      // relative" elements not respecting z-index
      // see: "-webkit-overflow-scrolling: touch is messing up z-index stacking"
      // [http://code.google.com/p/chromium/issues/detail?id=128325]
      this.optionsMenu = this.createOptionsMenuView(); //defined in subclass

      var id = this.optionsmenu_guid;

      // ipad sends out a scroll event when you dcg-tapstart on the button that
      // opens the context menu. We want that first scroll event to be
      // ignored, so we add the listener after a slight timeout to give the
      // first scroll event time to pass through.
      setTimeout(function(){
        //make sure options menu hasn't closed before the timeout fires
        if (this.optionsShown) {
          this.getListView$().on("scroll.options-menu-" + id, function(evt) {
            this.hideOptions();
          }.bind(this));
        }
      }.bind(this), 0);

      $(document).on("keydown.options-menu-" + id, function (e) {
        if (Keys.lookup(e) === Keys.ESCAPE) {
          this.hideOptions();
        }
      }.bind(this));

      $(document).on("dcg-tapstart.options-menu-" + id, function (e) {

        // close this unless:
        // * we click on the icon again (will handle that separately)
        // * we click insde the context-menu (that's been moved to the body)

        // we click inside the context menu (but not on the "close" button)
        if ($(e.target).closest('.dcg-options-menu').length) return;

        // we click within this view again
        if ( $(e.target).closest(this.$()).length) return;

        this.hideOptions();

      }.bind(this));
    };

    view.getListView$ = function () {
      return this.$().closest('.dcg-tap-container').find('.dcg-exppanel');
    };

    view.hideOptions = function() {
      if (!this.optionsShown && !this.optionsMenu) return;
      this.optionsShown = false;

      var id = this.optionsmenu_guid;
      $(document).off("dcg-tapstart.options-menu-" + id);
      $(document).off("keydown.options-menu-" + id);
      this.getListView$().off("scroll.options-menu-" + id);

      if (this.optionsMenu) {
        this.optionsMenu.remove();
        this.optionsMenu = null;
      }
    },

    view.onDisplayChange = function () {
      var error = this.model.error ? true : false;
      if (this.model.isEmpty()) error = false;

      //next sequence of code will only add the errorStable property
      //if the error value hasn't changed within the last 500ms
      if (error !== this.error) {
        this.setProperty('errorStable',false);
        this.__errorTime = new Date().getTime();
        setTimeout(this.onDisplayChange.bind(this), 100);
      } else if (this.__errorTime + 500 < new Date().getTime()) {
        this.setProperty('errorStable', true);
      } else if (!this.errorStable) {
        setTimeout(this.onDisplayChange.bind(this), 100);
      }

      this.setProperty('error', error);
    };

  });

  return AbstractIconView;
});
define('template!expression_options_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'dcg-exp-options-menu dcg-options-menu ';
 if (styles.length === 0) { 
;__p+='dcg-colors-only';
 } 
;__p+='\'>\n  <div class=\'dcg-triangle\'></div>\n  ';
 if (styles.length > 0) { 
;__p+='\n    <div class=\'dcg-styles-div\'>\n      <div class=\'dcg-styles-menu\'>\n        <div class=\'dcg-title\'>style:</div>\n        <div class=\'dcg-styles-menu\'>\n        ';
 _.each(styles, function (style) { 
;__p+='\n          <span class="dcg-style-option dcg-graph-icon dcg-graph-'+
( style )+
'"\n            draw-style="'+
( style )+
'"\n            style=""\n            handleevent="true">\n          </span>\n        ';
 }) 
;__p+='\n        </div>\n      </div>\n    </div>\n  ';
 } 
;__p+='\n  <div class=\'dcg-colors-div\'>\n    <div class=\'dcg-title\'>color:</div>\n    <div class="template-colorsview"></div>\n  </div>\n</div>\n';
}
return __p;
};});
define('loadcss!css/color_menu', function(){});
define('template!color_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-color-menu dcg-do-not-blur">\n  ';
 _.each(colors, function (color) { 
;__p+='\n    <span class="dcg-color-option"\n          color="'+
( color )+
'"\n          style="background: '+
( color )+
'"\n          handleevent="true">\n          <i class=\'dcg-icon-check\'></i>\n    </span>\n  ';
 }) 
;__p+='\n</div>';
}
return __p;
};});
define('expressions/color_menu_view',['require','loadcss!css/color_menu','jquery','pjs','underscore_view','./colors','template!color_menu'],function(require){
  require('loadcss!css/color_menu');

  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var Colors = require('./colors');

  var template = require('template!color_menu');

  var ExpressionColorsView = P(UnderscoreView, function (view, _super) {
    view.template = template,

    view.init = function (expression) {
      _super.init.call(this);
      this.expression = expression;
      this.expression.observe('color.colorview', this.renderSelectedColor.bind(this));
      this.expression.observe('hidden.colorview', this.renderSelectedColor.bind(this));
    };

    view.destruct = function () {
      this.expression.unobserve('.colorview');
    };

    view.renderSelectedColor = function () {
      var color = this.expression.color;
      this.$('.dcg-color-option').removeClass('dcg-selected');
      this.$('.dcg-color-option[color="'+color+'"]').addClass('dcg-selected');
    };

    view.didInsertElement = function () {
      this.$().on('dcg-tap dcg-tapstart', '.dcg-color-option', this.onSelectColor.bind(this));
      this.renderSelectedColor();
    };

    view.getTemplateParams = function () {
      return {
        colors: Colors.all
      };
    };

    view.onSelectColor = function (evt) {
      // when using mouse, fire on 'dcg-tapstart' and when on touch we
      // fire on the 'dcg-tap' event.
      if (evt.type === 'dcg-tap' && evt.device === 'mouse') return;
      if (evt.type === 'dcg-tapstart' && evt.device === 'touch') return;
      var color = $(evt.target).closest('.dcg-color-option').attr('color');
      this.expression.setProperty('color', color);

      //show expression (and its folder) if it was hidden
      this.expression.setProperty('hidden', false);
      if (this.expression.folder) this.expression.folder.setProperty('hidden', false);
    };

  });

  return ExpressionColorsView;
});

define('expressions/expression_options_view',['require','pjs','jquery','underscore','underscore_view','template!expression_options_menu','./colors','./color_menu_view'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var _ = require('underscore');
  var UnderscoreView = require('underscore_view');
  var template = require('template!expression_options_menu');
  var Colors = require('./colors');
  var ColorMenuView = require('./color_menu_view');

  var ExpressionOptionsMenuView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (expression) {
      this.expression = expression;
      this.expression.observe('color.colorview', this.renderSelectedColor.bind(this));
      this.expression.observe('hidden style shouldGraph', this.renderSelectedStyle.bind(this));
    };

    view.destruct = function () {
      if (this.colorsView) {
        this.colorsView.remove();
        this.colorsView = null;
      }
    };

    view.getTemplateParams = function () {
      var params = {colors: Colors.all, styles: []};
      if (this.expression.formula.is_point_list && !this.expression.formula.move_ids) {
        params.styles = ['point', 'open'];
      } else if (!this.expression.table && !this.expression.formula.move_ids) {
        if (!this.expression.formula.is_inequality) {
          params.styles = ['normal', 'dashed'];
        }
      }
      return params;
    };

    view.renderSelectedColor = function () {
      var color = this.expression.color;
      _.each(this.$('.dcg-style-option'), function (option) {
        $(option).css('background', color);
      });
    };

    view.onSelectStyle = function (evt) {
      // when using mouse, fire on 'dcg-tapstart' and when on touch we
      // fire on the 'dcg-tap' event.
      if (evt.type === 'dcg-tap' && evt.device === 'mouse') return;
      if (evt.type === 'dcg-tapstart' && evt.device === 'touch') return;

      var style = $(evt.target).closest('.dcg-style-option').attr('draw-style');
      this.expression.setProperty('hidden', false);
      this.expression.setProperty('style', style);

      //if we're in a folder, show it.
      if (this.expression.folder) this.expression.folder.setProperty('hidden', false);
    };

    view.renderSelectedStyle = function () {
      var style = this.expression.style;
      this.$('.dcg-style-option').removeClass('dcg-selected');
      if (this.expression.shouldGraph) {
        this.$('.dcg-style-option[draw-style="'+style+'"]').addClass('dcg-selected');
      }
    };

    view.didInsertElement = function () {
      // this view has a nested template. We instantiate the color picker
      // and replace a placeholder element within the html.
      this.colorsView = ColorMenuView(this.expression);
      this.colorsView.replace(this.$('.template-colorsview'));
      this.$().on('dcg-tap dcg-tapstart', '.dcg-style-option', this.onSelectStyle.bind(this));
      this.renderSelectedColor();
      this.renderSelectedStyle();
    };

  });

  return ExpressionOptionsMenuView;
});
define('template!expression_icon', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="dcg-icon dcg-graph-icon dcg-variable-colorcss dcg-variable-errortooltip tipsy-sticky">\n\t<i class=\'dcg-icon-play\'></i>\n\t<i class=\'dcg-icon-pause\'></i>\n\t<i class=\'dcg-icon-hidden\'></i>\n</span>\n';
}
return __p;
};});
define('expressions/expression_icon_view',['require','pjs','expressions/abstract_icon','./expression_options_view','math/comparators','template!expression_icon','jquery.handleevent'],function(require){
  var P = require('pjs');
  var AbstractIconView = require('expressions/abstract_icon');
  var ExpressionOptionsMenuView = require('./expression_options_view');
  var Comparators = require('math/comparators');
  var template = require('template!expression_icon');
  require('jquery.handleevent');

  var ExpressionIconView = P(AbstractIconView, function (view, _super) {
    view.template = template;

    view.init = function (parentView) {
      _super.init.call(this, parentView);
      this.expression = this.model;

      // wait for the slider to be created. Then observe the isPlaying property on it
      this.expression.observe('slider.iconview', function () {
        this.expression.slider.observe('isPlaying.iconview', this.onDisplayChange.bind(this));
      }.bind(this));

      this.expression.observe('formula.iconview', this.onDisplayChange.bind(this));
      this.expression.observe('shouldGraph.iconview', this.onDisplayChange.bind(this));
      this.expression.observe('isGraphable.iconview', this.renderUngraphable.bind(this));
      this.expression.observe('loading.iconview', this.renderLoading.bind(this));
      this.expression.observe('color.iconview', this.renderColorCSS.bind(this));
      this.expression.observe('style.iconview', this.onDisplayChange.bind(this));

      this.parentView.observeEvent('hideContextMenu.iconview', this.hideOptions.bind(this));
    };

    view.destruct = function () {
      _super.destruct.call(this);

      this.expression.unobserve('.iconview');
      if (this.expression.slider) {
        this.expression.slider.unobserve('.iconview');
      }

      this.parentView.unobserve('.iconview');
    };

    view.renderUngraphable = function () {
      this.$().toggleClass('dcg-ungraphable', !this.expression.isGraphable);
    };

    view.renderLoading = function () {
      this.$().toggleClass('dcg-loading', !!this.expression.loading);
    };

    view.renderColorCSS = function() {
      this.$('.dcg-variable-colorcss').css({
        'border-color' : this.expression.color,
        'background' : this.expression.color
      });
    };

    view.didInsertElement = function () {
      var self = this;
      _super.didInsertElement.call(this);

      this.renderLoading();
      this.renderUngraphable();
      this.renderColorCSS();
      this.onDisplayChange();

      this.$icon = this.$('.dcg-icon');

      var handleIconTapped = function(evt, device){
        if(evt.wasHandled('dragdrop')) return; //Don't toggle if we were handled by dragdrop
        if(evt.wasLongheld()) return;
        if(evt.device !== device) return;

        if (self.optionsShown) {
          self.toggleOptions();
          return false;
        }

        if (self.parentView.listView.editListMode) {
          if (self.expression.isGraphable) {
            self.toggleOptions();
          }
        } else if (self.expression.formula.is_animatable) {
          self.toggleSliderIsPlaying();
        } else {
          self.toggleGraphShown();
        }
      };

      var handleIconLongHold = function(evt, device) {
        if(evt.device !== device) return;
        if (!self.model.isGraphable) return;

        evt.handle('dcg-longhold');
        self.toggleOptions();
      };

      this.$().closest('.dcg-action-icon-mouse').on('dcg-tap', function(evt){
        handleIconTapped(evt, 'mouse');
      });

      this.$().closest('.dcg-action-icon-touch').on('dcg-tap', function(evt){
        handleIconTapped(evt, 'touch');
      });

      this.$().closest('.dcg-action-icon-mouse').on('dcg-longhold', function(evt){
        handleIconLongHold(evt, 'mouse');
      });

      this.$().closest('.dcg-action-icon-touch').on('dcg-longhold', function(evt){
        handleIconLongHold(evt, 'touch');
      });
    };

    view.isGraphShown = function () {
      return this.expression.shouldGraph;
    };

    view.toggleSliderIsPlaying = function () {
      var slider = this.expression.slider;
      if (slider) {
        slider.setProperty('isPlaying', !slider.isPlaying);
      }
    };

    view.toggleGraphShown = function() {
      if (!this.model.isGraphable) return;
      if (this.errorShown) return;

      //note: if this expression is in a hidden folder this line will always fire, since
      //isGraphShown will be false. It'll be a no-op if the graph was shown when
      //the folder was hidden. That doesn't matter, because later on we turn on the folder
      //which will recalculate isGraphShown, so we'll recompute the icon anyway
      this.expression.setProperty('hidden', this.isGraphShown());

      //always show the folder if we're inside one
      if (this.expression.folder) this.expression.folder.setProperty('hidden', false);
    };

    view.createOptionsMenuView = function () {
      var listView = this.parentView.listView;
      var optionsView = ExpressionOptionsMenuView(this.expression);
      optionsView.appendTo(listView.$());

      // putting the ExpressionOptionsView at the topLeft of the .dcg-icon
      // it's up to the ExpressionOptionsView's css to position it beyond that
      var placeholder = this.$('.dcg-icon');
      var placeholderOffset = placeholder.offset();
      var listViewOffset = listView.$().offset();
      optionsView.$().css({
        position: 'absolute',
        top: placeholderOffset.top - listViewOffset.top + 'px',
        left: placeholderOffset.left - listViewOffset.left + 'px',
        display: 'block' //wait until we know where it is to show it. fixes #3154
      });
      return optionsView;
    };

    view.onDisplayChange = function () {
      /* jshint maxcomplexity:20 */
      _super.onDisplayChange.call(this);
      if (!this.$icon) return;

      var formula = this.expression.formula;
      var icon_class = '';

      if (formula.is_animatable && this.expression.slider) {
        if (this.expression.slider.isPlaying) {
          icon_class = 'dcg-animate-pause';
        } else {
          icon_class = 'dcg-animate-play';
        }
      } else if (this.error || !formula.is_graphable) {
        icon_class = '';
      } else {

        var shouldGraph = this.expression.shouldGraph;
        var style = this.expression.style;
        var operator = formula.operator;
        var shaded = Comparators.table[operator].direction !== 0;
        var dotted = Comparators.table[operator].inclusive === false;
        if (!shouldGraph) {
          icon_class = 'dcg-graph-hidden';
        } else if (formula.move_ids) {
          icon_class = 'dcg-graph-movable-point';
        } else if (formula.is_point_list) {
          if (style === 'open') {
            icon_class = 'dcg-graph-open';
          } else if (style === 'cross') {
            icon_class = 'dcg-graph-cross';
          } else {
            icon_class = 'dcg-graph-point';
          }
        } else if (formula.is_shade_between) {
          // TODO - missing icon for this
          icon_class = 'dcg-graph-shaded-inequality';
        } else if (!dotted && !shaded) {
          if (style === 'normal') {
            icon_class = 'dcg-graph-normal';
          } else if (style === 'dashed') {
            icon_class = 'dcg-graph-dashed';
          }
        } else if (!dotted && shaded) {
          // TODO - missing icon for this
          icon_class = 'dcg-graph-shaded-inequality';
        } else if (dotted && !shaded) {
          icon_class = 'graph-inequality';
        } else if (dotted && shaded) {
          icon_class = 'dcg-graph-shaded-inequality';
        }
      }

      // efficently changes the class of the icon
      if (this.rendered_icon_class === icon_class) return;
      if (this.rendered_icon_class) {
        this.$icon.removeClass(this.rendered_icon_class);
      }
      this.rendered_icon_class = icon_class;
      if (icon_class) {
        this.$icon.addClass(icon_class);
      }

    };
  });

  return ExpressionIconView;
});

define('template!evaluation_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div>\n  <div class="dcg-evaluation dcg-do-blur" handleEvent="true">\n    <table>\n      <tr>\n        <th class="dcg-action-selectevaluation">\n          <span class="dcg-template-dependentlabelhtml"></span>\n          <span class="dcg-equals">=</span>\n        </th>\n        <td class="dcg-text-selectable template-evaluationshtml"></td>\n      </tr>\n    </table>\n  </div>\n  <div class="dcg-clear"></div>\n</div>';
}
return __p;
};});

define('expressions/evaluation',['require','pjs','underscore_view','template!evaluation_view','i18n','graphing/label','bugsnag'],function(require){
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!evaluation_view');
  var i18n = require('i18n');
  var Label = require('graphing/label');
  var Bugsnag = require('bugsnag');

  var EvaluationView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (domain) {
      _super.init.call(this);
      this.evaluations = [];

      this.observe('dependentLabel', this.renderDependent.bind(this));
      this.observe('evaluations', this.renderEvaluations.bind(this));
    };

    view.renderDependent = function () {
      this.$('.dcg-template-dependentlabelhtml').html(this.dependentLabel);
    };

    view.renderEvaluations = function () {
      /* jshint maxcomplexity:12 */
      var vals = this.evaluations;
      var vals_str = [];

      for (var i=0; i<vals.length; i++) {
        var f_val = vals[i];
        if (f_val.val === false || f_val.val === true) {
          Bugsnag.notify(
            "Bad evaluation view",
            "Boolean passed through unexpectedly."
          );
          continue;
        } else if (Array.isArray(f_val.val)) {
          f_val.val = f_val.val.length + " element list";
        } else if (isNaN(f_val.val)) {
          f_val.val = 'undefined';
        } else if (Math.abs(f_val.val) < 1e-15) {
          f_val.val = 0;
        //shrink output if there are 2 solutions
        } else if (vals.length > 1) {
          if (Math.abs(f_val.val) > 1e6 || Math.abs(f_val.val) < 1e-3) {
            f_val.val = Label.htmlSciNote(f_val.val.toExponential(6));
          } else {
            f_val.val = Number(f_val.val.toPrecision(8));
          }
        } else {
          if (Math.abs(f_val.val) > 1e9 || Math.abs(f_val.val) < 1e-6) {
            f_val.val = Label.htmlSciNote(f_val.val.toExponential(8));
          } else {
            f_val.val = Number(f_val.val.toPrecision(12));
          }
        }

        vals_str.push(f_val.val);
      }

      if (vals_str.length === 0) return;
      if (vals_str.length === 1) {
        // skipping jQuery because this happens in the inner loop of sliders
        // and draggable points.
        var elt = this.$evaluationContainer[0];
        elt.innerHTML = vals_str[0];
      } else {
        var output = vals_str.join('<span class="dcg-or">'+ i18n.t('or') + '</span>');
        this.$evaluationContainer.html(output);
      }

    };

    view.didInsertElement = function () {
      this.$evaluationContainer = this.$('.template-evaluationshtml');
      this.renderDependent();
      this.renderEvaluations();

      this.$('.dcg-action-selectevaluation').on('dcg-tap', this.onSelectEvaluation.bind(this));
    };


    view.onSelectEvaluation = function () {
      var numberElement = this.$('td')[0];
      var range = document.createRange();
      range.selectNodeContents(numberElement);
      window.getSelection().removeAllRanges();
      window.getSelection().addRange(range);
    };

  });
  return EvaluationView;
});

define('template!unresolved_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-unresolved">\n  <i class="dcg-icon-error" />\n  '+
( t("This equation contains fine detail that has not been fully resolved.") )+
'\n  <a href="http://support.desmos.com/entries/29577773-Unresolved-Detail-In-Plotted-Functions" target="_blank">\n    '+
( t("Learn more.") )+
'\n  </a>\n</div>';
}
return __p;
};});
define('expressions/unresolved',['require','pjs','underscore_view','template!unresolved_view'],function(require){
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!unresolved_view');

  return P(UnderscoreView, function (view, _super) {
    view.template = template;
  });
});

define('template!domain_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-domain dcg-do-blur" handleEvent="true">\n  \n  <div class="dcg-edit-domain dcg-variable-invalid dcg-desmos-input-container">\n    <table>\n      <tr>\n        <td>\n          <span class="dcg-before-input"></span>\n          <input type="number" limit="min" />\n          <span class="dcg-after-input"></span>\n        </td>\n        <td class="dcg-text">≤</td>\n        <td class="dcg-text">t</td>\n        <td class="dcg-text">≤</td>\n        <td>\n          <span class="dcg-before-input"></span>\n          <input type="number" limit="max" />\n          <span class="dcg-after-input"></span>\n        </td>\n      </tr>\n    </table>\n  </div>\n  \n  <div class="dcg-display-domain">\n    <span class="dcg-variable-min"></span> ≤ t ≤ <span class="dcg-variable-max"></span>    \n  </div>\n\n</div>';
}
return __p;
};});
define('expressions/domain_view',['require','jquery','underscore_view','pjs','template!domain_view','keys','conditional_blur'],function(require){
  var $ = require('jquery');
  var UnderscoreView = require('underscore_view');
  var P = require('pjs');
  var template = require('template!domain_view');
  var Keys = require('keys');
  var conditionalBlur = require('conditional_blur');

var DomainView = P(UnderscoreView, function (view, _super) {
  view.template = template;

  view.init = function (domain) {
    _super.init.call(this);

    this.domain = domain;

    this.domain.observe('min.domainview', this.renderMin.bind(this));
    this.domain.observe('max.domainview', this.renderMax.bind(this));
    this.setProperty('editing', false);
    this.setProperty('invalid', !this.domain.isValid());
    this.observe('invalid', this.renderInvalid.bind(this));
    this.observe('editing', this.renderEditing.bind(this));
    this.storeLastValidDomain();
  };

  view.checkInvalid = function () {
    var min = parseFloat(this.$('input[limit=min]').val());
    var max = parseFloat(this.$('input[limit=max]').val());

    var invalid = ( !isFinite(min) || !isFinite(max) || min>=max);
    this.setProperty('invalid', invalid);
  };

  view.destruct = function () {
    this.domain.unobserve('.domainview');
  };

  view.storeLastValidDomain = function () {
    if (this.domain.isValid()) {
      this.lastValidDomain = this.domain.serialize();
    }
  };

  view.renderInvalid = function () {
    this.$('.dcg-edit-domain').toggleClass('dcg-invalid', !!this.invalid);
  };

  view.renderEditing = function () {
    var editing = this.getProperty('editing');
    this.$().toggleClass('dcg-editing-domain', !!editing);
  };

  view.renderMin = function () {
    var min = this.domain.min;
    this.$('input[limit=min]').val(min);
    this.$('.dcg-variable-min').text(min);
  };

  view.renderMax = function () {
    var max = this.domain.max;
    this.$('input[limit=max]').val(max);
    this.$('.dcg-variable-max').text(max);
  };

  view.didInsertElement = function () {
    this.$('input').on('focusin', this.focusIn.bind(this))
                   .on('focusout', this.focusOut.bind(this))
                   .on('keydown keyup keypress', this.handleUserInput.bind(this));
    this.$('.dcg-display-domain').on('dcg-tap', this.onEditLimit.bind(this));
    this.renderEditing();
    this.renderMin();
    this.renderMax();
  };

  view.onEditLimit = function (evt) {
    evt.preventDefault();
    var $target = $(evt.toElement);
    this.setProperty('editing', true);
    if ($target.hasClass('dcg-variable-max')) {
      this.$('input[limit="max"]').focus().select();
    } else {
      this.$('input[limit="min"]').focus().select();
    }
  };

  view.stopEditing = function () {
    if (!this.domain.isValid() && this.lastValidDomain) {
      this.domain.setProperty('min', this.lastValidDomain.min);
      this.domain.setProperty('max', this.lastValidDomain.max);
    }
    this.setProperty('editing', false);
  };

  // blur input when enter pressed
  view.handleUserInput = function(evt) {
     if (Keys.lookup(evt) === Keys.ENTER) {
      conditionalBlur();
    } else {
      this.checkInvalid();

      // save the domain now so that it redraws
      if (!this.invalid) {
        this.save(evt.target);
      }
    }
  };

  // went straight into a focus, so don't save
  view.focusIn = function(evt) {
    clearTimeout(this.saveAfterBlurTimeout);
    this.checkInvalid();
  };

  // if we don't focus into one of the other boxes really soon,
  // we'll just act like the save button was pressed. This is
  // a sideeffect of focusin being fired AFTER focusout. Temporarily,
  // nothing is focused and we can't tell if focus is about to be
  // placed or not.
  view.focusOut = function(evt) {
    var self = this;
    this.save(evt.target);
    this.saveAfterBlurTimeout = setTimeout(function() {
      clearTimeout(self.saveAfterBlurTimeout);
      self.stopEditing();
    }, 1);
    this.checkInvalid();
  };

  view.save = function(node) {
    if (node) {
      var target = $(node);
      var value = parseFloat(target.val());

      if (target.attr('limit') === 'min') {
        // set the new min
        if (value < this.domain.max) {
          this.domain.setProperty('min', value);
        // reset the value since it's invalid
        } else {
          target.val(this.domain.min);
        }
      } else if (target.attr('limit') === 'max') {
        // set the new max
        if (value > this.domain.min) {
          this.domain.setProperty('max', value);
        // reset the value since it's invalid
        } else {
          target.val(this.domain.max);
        }
      }
      this.storeLastValidDomain();
    }
  };
});

return DomainView;
});

define('loadcss!css/regression', function(){});
define('template!regression_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-regression-container">\n  <div class="dcg-handle-event" handleEvent="true">\n\n    <div class="dcg-log-mode-toggle">\n      <div class="dcg-action-log-mode-toggle">\n        <span class="dcg-log-mode-checkbox">\n          <i class="dcg-icon-check"></i>\n        </span>\n        Log Mode\n      </div>\n      <a class="dcg-log-mode-toggle-help" target="_blank" href="http://support.desmos.com/hc/en-us/articles/204349605">\n        <i class="dcg-icon-question-sign"></i>\n      </a>\n    </div>\n\n    <div class="dcg-statistics">\n      <div class="dcg-regression-title dcg-residuals-title">\n        '+
( t('Statistics') )+
'\n        <a class="dcg-regression-about-link" target="_blank">\n          <i class="dcg-icon-question-sign"></i>\n        </a>\n      </div>\n\n      <div class="dcg-statistics-values"></div>\n    </div>\n    <div class="dcg-residuals">\n      <div class="dcg-regression-title dcg-residuals-title">\n        '+
( t('Residuals') )+
'\n      </div>\n      <span class="dcg-residuals-variable"></span>\n      <span class="dcg-residual-suggestion dcg-action-plot-residual dcg-btn dcg-btn-light-gray">\n        plot\n      </span>\n    </div>\n\n    <div class="dcg-parameters-container">\n      <div class="dcg-regression-title dcg-parameters-title">\n        '+
( t('Parameters') )+
'\n      </div>\n      <div class="dcg-parameters">\n      </div>\n    </div>\n\n    <div class="dcg-clear"></div>\n  </div>\n</div>';
}
return __p;
};});
define('expressions/regression_view',['require','loadcss!css/regression','underscore_view','template!regression_view','pjs','jquery','underscore','mathquill','graphing/label'],function (require) {
  require('loadcss!css/regression');
  var UnderscoreView = require('underscore_view');
  var template = require('template!regression_view');
  var P = require('pjs');
  var $ = require('jquery');
  var _ = require('underscore');
  var MathQuill = require('mathquill');
  var Label = require('graphing/label');

  return P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (expressionModel, listView) {
      _super.init.call(this);
      this.expressionModel = expressionModel;
      this.listView = listView;
      this.setProperty('regression', expressionModel.formula.regression);
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      this.residuals = MathQuill.StaticMath(this.$('.dcg-residuals-variable')[0]);
      this.$statistics = this.$('.dcg-statistics-values');
      this.$residualSuggestion = this.$('.dcg-residual-suggestion');
      this.$parameters = this.$('.dcg-parameters');
      this.$parametersContainer = this.$('.dcg-parameters-container');
      this.$regressionAboutLink = this.$('.dcg-regression-about-link');
      this.$logModeToggleContainer = this.$('.dcg-log-mode-toggle');
      this.$logModeToggleBtn = this.$('.dcg-action-log-mode-toggle');
      this.observeAndSync('regression', this.renderRegression.bind(this));
      this.expressionModel.observeAndSync('isLogModeRegression', this.renderRegression.bind(this));

      this.$residualSuggestion.on('dcg-tap', this.plotResiduals.bind(this));
      this.$logModeToggleBtn.on(
        'dcg-tap',
        this.expressionModel.toggleLogMode.bind(this.expressionModel)
      );
    };

    view.plotResiduals = function (evt) {
      var id = this.regression.residualSuggestionId;
      if (!id) return;
      var table = this.listView.model.getItemById(id);
      if (!table) return;

      table.insertColumn(table.columns.length - 1, {
        latex: Label.identifierToLatex(this.regression.residualVariable)
      });
    };

    view.getRoundedValue = function(val, digits, zeroCutoff) {
      if (Math.abs(val) < zeroCutoff) return 0;

      if (Math.abs(val) > 1e9 || Math.abs(val) < 1e-6) {
        return Label.latexSciNote(val.toExponential(digits - 1));
      }
      return Number(val.toPrecision(digits));
    };

    view.getRoundedParam = function(param, digits) {
      return this.getRoundedValue(this.regression.parameters[param], digits, 1e-15);
    };

    view.renderStats = function () {
      this.renderAboutLink();

      this.$statistics.html('');

      if (this.regression.statistics.hasOwnProperty('Rsquared')) {
        var RsquaredVal = this.getRoundedValue(this.regression.statistics.Rsquared, 3, 1e-15);
        var $Rsquared = $('<span>');
        MathQuill.StaticMath($Rsquared[0]).latex('R^2=' + RsquaredVal);
        this.$statistics.append($('<div>').html($Rsquared));
      }

      if (this.regression.statistics.hasOwnProperty('rsquared')) {
        var rsquaredVal = this.getRoundedValue(this.regression.statistics.rsquared, 3, 1e-15);
        var $rsquared = $('<span>');
        MathQuill.StaticMath($rsquared[0]).latex('r^2=' + rsquaredVal);
        this.$statistics.append($('<div>').html($rsquared));
      }

      if (this.regression.statistics.hasOwnProperty('r')) {
        var rVal = this.getRoundedValue(this.regression.statistics.r, 3, 1e-15);
        //hack: prepend a squared so that this exactly lines up with the above
        var $r = $('<span>');
        MathQuill.StaticMath($r[0]).latex('^2r=' + rVal);
        this.$statistics.append($('<div>').addClass('dcg-r-value').html($r));
      }

      if (this.regression.statistics.hasOwnProperty('RMSE')) {
        var RMSEVal = this.getRoundedValue(this.regression.statistics.RMSE, 4, 1e-8);
        var $RMSE = $('<span>');
        MathQuill.StaticMath($RMSE[0]).latex('RMSE=' + RMSEVal);
        this.$statistics.append($('<div>').html($RMSE));
      }
    };

    view.renderAboutLink = function () {
      //show regression warning only if R^2 is negative. should link to a help page
      if (this.regression.statistics.hasOwnProperty('RMSE')) {
        this.$regressionAboutLink[0].href = 'http://support.desmos.com/entries/60176149-What-is-RMSE-';
        this.$regressionAboutLink.show();
      } else if (this.regression.statistics.Rsquared < 0) {
        this.$regressionAboutLink[0].href =
          'http://support.desmos.com/entries/60460125-Why-am-I-seeing-a-negative-R-2-value-'
        ;
        this.$regressionAboutLink.show();
      } else {
        this.$regressionAboutLink.hide();
      }
    };

    view.renderRegression = function () {
      this.renderStats();

      //render residual variable
      this.residuals.latex(this.regression.residualVariable || '');

      this.$residualSuggestion.toggleClass('dcg-visible', !!this.regression.residualSuggestionId);
      this.$logModeToggleContainer.toggleClass('dcg-visible', !!this.regression.shouldSuggestLogMode);
      this.$logModeToggleBtn.toggleClass('dcg-toggled-on', this.expressionModel.isLogModeRegression);

      //render parameters
      this.$parameters.html('');
      this.$parametersContainer.toggle(_.size(this.regression.parameters) > 0);
      for (var p in this.regression.parameters) {
        var elt = $('<span class="dcg-parameter">').text(p + '=' + this.getRoundedParam(p, 5));
        MathQuill.StaticMath(elt[0]);
        this.$parameters.append(elt);
      }
    };
  });
});
define('loadcss!css/slider', function(){});
define('template!slider_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="dcg-slider-container" tapboundary="true">\n\n  <div class="dcg-do-blur dcg-slider" handleEvent="true">\n    <div class="dcg-minLabel dcg-template-minlabelhtml">\n    </div>\n    <div class="dcg-maxLabel">\n      <span class="dcg-template-maxlabelhtml"></span>\n    </div>\n    <div class="dcg-track dcg-action-moveslider">\n      <div class="dcg-ticks dcg-template-tickmarkhtml"></div>\n      <div class="dcg-graphic"></div>\n    </div>\n    <div class="dcg-zeroMarker dcg-action-moveslider">\n      <div class="dcg-graphic"></div>\n    </div>\n    <div class="dcg-thumb dcg-action-startdragging" disablescroll="true">\n      <div class="dcg-graphic"></div>\n      <div class="dcg-center"></div>\n    </div>\n  </div>\n\n  <div class="dcg-slider_menu dcg-do-blur dcg-desmos-input-container" handleEvent="true">\n    <table>\n      <tr>\n        <td>\n          <span class="dcg-before-input"></span>\n            <input class="dcg-slider_min" limit="min" type="number">\n          <span class="dcg-after-input"></span>\n    ';
 /*
      Need to be careful with unescaped html insertion. This html is generated
      from user input by mathquill, so we"re relying on mathquill to escape
      html as necessary.
    */ 
;__p+='\n        </td>\n        <td class="dcg-text">\n          ≤\n        </td>\n        <td class="dcg-template-dependentlabelhtml dcg-text"></td>\n        <td class="dcg-text">≤</td>\n        <td>\n          <span class="dcg-before-input"></span>\n            <input class="dcg-slider_max" limit="max" type="number">\n          <span class="dcg-after-input"></span>\n        </td>\n        <td class="dcg-step dcg-text">'+
( t('step:') )+
'</td>\n        <td>\n          <span class="dcg-before-input"></span>\n            <input class="dcg-slider_interval" limit="step" type="number">\n          <span class="dcg-after-input"></span>\n        </td>\n      </tr>\n    </table>\n  </div>\n  \n</span>';
}
return __p;
};});
define('expressions/slider_view',['require','loadcss!css/slider','jquery','pjs','lib/rounding','underscore_view','template!slider_view','underscore','keys','conditional_blur'],function(require) {
  require('loadcss!css/slider');

  var $ = require('jquery');
  var P = require('pjs');
  var Rounding = require('lib/rounding');
  var UnderscoreView = require('underscore_view');
  var template = require('template!slider_view');
  var _ = require('underscore');
  var Keys = require('keys');
  var conditionalBlur = require('conditional_blur');

  var label2html = function(num) {
    var onum=num;
    var str = String(num).split("-").join("");

    if (str.length > 4 || str.indexOf("e") != -1) {
      // size of input
      var digits = Math.floor(Math.log(Math.abs(num))/Math.LN10);

      // move the decimial over to the unit's place
      num = num/Math.pow(10, digits);

      // round to 1 sig figs
      num = Math.round(num);

      if (Math.abs(num) >= 10) {
        digits++;
        if (num < 0) {
          num = -1;
        } else {
          num = 1;
        }
      }

      if (digits >= -3 && digits <= 3) {
        str = String(onum);
        if (str.indexOf("0.") === 0) {
          str = str.substr(1);
        } else if (str.indexOf("-0.") === 0) {
          str = "-" + str.substr(2);
        }

        return str.substr(0, 5);
      }

      var coef;
      if (num === 1) {
        coef = '';
      } else if (num === -1) {
        coef = '-';
      } else {
        coef = num + "<span class='dcg-cross'>\u00D7</span>";
      }

      return coef + "10<span class='dcg-sup'>" + digits + "</span> ";
    } else {
      return String(num);
    }
  };

  var SliderView = P(UnderscoreView, function(view, _super) {
    view.template = template;
    view.animationSpeeds = [0.05, 0.1, 0.15, 0.2, 0.35, 0.5, 0.75, 1, 1.5, 2, 3.5, 5, 7.5, 10, 15, 20];

    view.init = function (slider, parentView) {
      _super.init.call(this);
      this.slider = slider;
      this.parentView = parentView;

      // we hold a local copy of the slider's value. this allows us to
      // throttle how quickly we set the value back to the slider.
      this.value = this.slider.value;

      // if the slider's value changes, we immediately overwrite our local
      // copy of the variable with the new official value.
      this.slider.observe('value', function () {
        this.setProperty('value', this.slider.value);
      }.bind(this));

      this.editing = false;

      // Watch changes to the properties while we edit the slider.
      this.slider.observe('min.sliderview max.sliderview', this.renderThumbPosition.bind(this));
      this.observe('value', this.renderThumbPosition.bind(this));

      this.slider.observe('min.sliderview max.sliderview', this.renderZeroMarker.bind(this));
      this.slider.observe('min.sliderview max.sliderview step.sliderview', this.renderTickMarks.bind(this));
      this.slider.observe('min.sliderview hardMin.sliderview', this.renderMin.bind(this));
      this.slider.observe('max.sliderview hardMax.sliderview', this.renderMax.bind(this));
      this.slider.observe('step.sliderview', this.renderStep.bind(this));
      this.observe('dependentLabel', this.renderDependent.bind(this));
      this.observe('editing', this.renderEditing.bind(this));
      this.observe('editing', function () {
        this.slider.setProperty('isPlaying', false);
      }.bind(this));
      this.observe('invalid', this.renderInvalid.bind(this));
      this.slider.observe('dragging.sliderview', this.renderDragging.bind(this));
      this.slider.observe('isPlaying.sliderview', this.renderIsPlaying.bind(this));
      this.slider.observe('animationPeriod', this.renderAnimationPeriod.bind(this));
    };

    view.renderAnimationPeriod = function () {
      var speed = this.computeSpeed();
      var text = speed + 'x';
      this.parentView.$('.dcg-variable-speed').text(text);
      this.parentView.$('.dcg-action-slower').toggleClass('dcg-disabled', _.min(this.animationSpeeds) >= speed);
      this.parentView.$('.dcg-action-faster').toggleClass('dcg-disabled', _.max(this.animationSpeeds) <= speed);
    };

    view.destruct = function () {
      this.slider.unobserve('.sliderview');
    };

    view.renderDependent = function () {
      this.$('.dcg-template-dependentlabelhtml').html(this.dependentLabel);
    };

    view.renderDragging = function () {
      this.$thumb.toggleClass('dcg-down', !!this.slider.dragging);
    };

    view.renderStep = function () {
      if (this.slider.step === undefined) {
        this.$('input[limit=step]').val('');
      } else {
        this.$('input[limit=step]').val(this.slider.step);
      }
    };

    view.renderMin = function () {
      this.$('.dcg-template-minlabelhtml').html(label2html(this.slider.min));
      this.$('input[limit=min]').val(this.slider.hardMin ? this.slider.min : '');
    };

    view.renderMax = function () {
      this.$('.dcg-template-maxlabelhtml').html(label2html(this.slider.max));
      this.$('input[limit=max]').val(this.slider.hardMax ? this.slider.max : '');
    };

    view.renderEditing = function () {
      this.$().toggleClass('dcg-editing-limits', this.editing);
    };

    view.renderInvalid = function () {
      this.$('.dcg-slider_menu').toggleClass('dcg-invalid', !!this.invalid);
    };

    view.renderThumbPosition = function() {

      //TODO: this is for api usage with expressions: false.
      //Ideally, this method should never be reached if we have no expression views
      if (!this.$thumb) return;

      var left;
      var min = this.slider.min;
      var max = this.slider.max;
      var val = this.value;

      if (val <= min) {
        left = 0;
      } else if (val >= max) {
        left = 100;
      } else {
        left = (val - min)/(max - min) * 100;
      }

      // TODO would like to use translateX here, but percentages are
      // referenced to the element, not its parent. Could put the thumb
      // in a container that is width: 100%.
      this.$thumb.css('left', left + "%");
    };

    view.renderZeroMarker = function() {
      var t = (0 - this.slider.min)/(this.slider.max - this.slider.min);
      var css = {};
      if (t >= 0 && t <= 1) {
        var left = t*100;
        css.display = "block";
        css.left = left + '%';
      } else {
        css.display = "none";
      }

      this.$('.dcg-zeroMarker').css(css);
    };

    view.renderTickMarks = function() {
      var step = this.slider.step;
      var min = this.slider.min;
      var max = this.slider.max;

      var percent = 100*step/(max - min);
      if (percent < 3) percent = 0; // don't draw too many ticks

      var html = "";
      if (percent > 0 && percent < 100) {
        for (var i=percent; i<100; i += percent) {
          html += '<div class="dcg-tick" style="left:' + i + '%"></div>';
        }
      }

      this.$('.dcg-template-tickmarkhtml').html(html);
    };

    view.getDimensions = function() {
      var track = this.$('.dcg-track');
      var trackLeft = track.offset().left;
      var trackRight = trackLeft + track.width();
      return {
        trackLeft: trackLeft,
        trackRight: trackRight
      };
    };

    view.computeSpeed = function () {
      var speed = this.slider.DEFAULT_PERIOD / this.slider.animationPeriod;
          speed = Number(speed.toFixed(3)); // in case the speed isn't very precise
      return speed;
    };

    view.setPeriodFromSpeed = function (speed) {
      var period = this.slider.DEFAULT_PERIOD / speed;
      this.slider.setProperty('animationPeriod', period);
    };

    view.animateSlower = function () {
      var speed = this.computeSpeed();
      var slowers = _.filter(this.animationSpeeds, function (val) { return val<speed; });
      if (slowers.length === 0) return;

      this.setPeriodFromSpeed(_.max(slowers));
    };

    view.animateFaster = function () {
      var speed = this.computeSpeed();
      var fasters = _.filter(this.animationSpeeds, function (val) { return val>speed; });
      if (fasters.length === 0) return;

      this.setPeriodFromSpeed(_.min(fasters));
    };

    view.didInsertElement = function() {
      this.$thumb = this.$('.dcg-thumb');

      // setup event handlers
      this.$('.dcg-action-startdragging').on('dcg-tapstart', this.onStartDragging.bind(this));
      this.$('.dcg-action-moveslider').on('dcg-tap', function (evt) {
        var touch = evt.changedTouches[0];
        this.slider.setProperty('isPlaying', false);
        this.setValueByTouch(touch);
        this.commitSliderValue();
      }.bind(this));

      this.$().on('focusout', this.focusOut.bind(this));
      this.$().on('focusin', this.focusIn.bind(this));
      this.$().on('keydown', this.keyDown.bind(this));
      this.$('input[limit]').on('keypress keydown keyup', this.checkInvalid.bind(this));

      this.$('.dcg-action-play').on('dcg-tap', function () {
        this.slider.setProperty('isPlaying', true);
      }.bind(this));

      //Editing from main view - only active when using mouse
      this.$().on('dcg-tap', '.dcg-minLabel', this.onEditMin.bind(this));
      this.$().on('dcg-tap', '.dcg-maxLabel', this.onEditMax.bind(this));

      this.renderTickMarks();
      this.renderThumbPosition();
      this.renderZeroMarker();
      this.renderDependent();
      this.renderMin();
      this.renderMax();
      this.renderStep();
      this.renderAnimationPeriod();
      this.renderIsPlaying();

      this.checkInvalid();
    };

    view.setValueByTouch = function (touch) {

      // properties of the slider
      var min = this.slider.min;
      var max = this.slider.max;

      // figures out where the slider is located on the screen.
      var dimensions = this.getDimensions();

      var left = dimensions.trackLeft;
      var right = dimensions.trackRight;
      var width = right - left;
      var pixel_units = (max-min)/width;

      // figures out the percent 0%-100% of the thumbs position
      var t = Math.min(1, Math.max(0,(touch.pageX - left)/width));

      var val = min*(1 - t) + max*t;

      // round to a pretty number
      val = Rounding.shortestDecimalBetween(val - pixel_units, val + pixel_units);

      // snap to the step interval
      val = this.slider.computeSnappedValue(val);

      val = Math.max(min, Math.min(max, val));

      this.setProperty('value', val);
    };

    view.onStartDragging = function(evt) {
      // Prevents text selection and cursor from turning into text cursor in Safari.
      evt.preventDefault();

      // only start dragging if this is the first touch
      if (evt.touches.length !== 1) return;

      // updated by eli. On Android it's especially noticeable, but in general
      // it feels like we want to defocus expressions we're sliding a slider
      // unintended positive side effect:
      // also improves performance, since we don't need to stream POIs while sliding
      this.parentView.clearListFocus();

      var self = this;

      // Stop any slider animation
      this.slider.setProperty('isPlaying', false);

      var getTouchByIdentifier = function (evt, identifier) {
        var touches = evt.touches;
        var touch = null;

        for (var i=0; i<touches.length; i++) {
          if (touches[i].identifier === identifier) {
            touch = touches[i];
          }
        }

        return touch;
      };
      var throttleInterval = 30;
      var commitSliderValueThrottled = _.throttle(self.commitSliderValue.bind(self), throttleInterval);

      self.slider.setProperty('dragging', true);

      var touchIdentifier = evt.changedTouches[0].identifier;
      var onMouseMove = function(evt) {

        // lookup the touch that started this
        var touch = getTouchByIdentifier(evt, touchIdentifier);
        if (!touch) return;

        self.setValueByTouch(touch);

        // We commit the slider's value manually here instead of using an
        // observer on 'value' because we need precise control of when the
        // value is committed. When the user types in mathquill, that causes
        // a change in the sliders value. We don't want that change to get
        // routed back into commitSliderValue(). If it did, the user would never
        // be able to type decimals. When they typed "a=1.", the
        // commitSliderValue() function would turn that into "a=1" again.
        commitSliderValueThrottled();
      };

      var stopDragging = function () {
        $(document).off('dcg-tapmove', onMouseMove);
        $(document).off('dcg-tapend dcg-tapcancel', onMouseUp);

        self.slider.setProperty('dragging', false);
      };

      var onMouseUp = function(evt) {

        // checks if the touch that started the slider is still around. If so,
        // don't do anything here. A different touch must have lifted.
        var touch = getTouchByIdentifier(evt, touchIdentifier);
        if (touch) return;

        stopDragging();
        self.commitSliderValue();
      };

      $(document).on('dcg-tapmove', onMouseMove);
      $(document).on('dcg-tapend dcg-tapcancel', onMouseUp);
    };

    view.commitSliderValue = function() {
      this.slider.setProperty('value', this.value);
    };

    view.checkInvalid = function () {
      var min = this.$('input[limit=min]').val();
      if (min === '') {
        min = this.slider.min;
      } else {
        min = parseFloat(min);
      }

      var max = this.$('input[limit=max]').val();
      if (max === '') {
        max = this.slider.max;
      } else {
        max = parseFloat(max);
      }

      var step = this.$('input[limit=step]').val();
      if (step === '') {
        step = 0;
      } else {
        step = parseFloat(step);
      }

      var invalid = ( !isFinite(min) || !isFinite(max) || min>=max || step < 0 || step > (max-min));
      this.setProperty('invalid', invalid);
    };

    // blur input when enter pressed
    view.keyDown = function(evt) {
      if (Keys.lookup(evt) === Keys.ENTER) {
        conditionalBlur();
      } else {
        this.checkInvalid();
      }
    },

    // went straight into a focus, so don't save
    view.focusIn = function(evt) {
      this.slider.setProperty('isPlaying', false);
      clearTimeout(this.saveAfterBlurTimeout);
      this.checkInvalid();
    },

    // if we don't focus into one of the other boxes really soon,
    // we'll just act like the save button was pressed. This is
    // a sideeffect of focusin being fired AFTER focusout. Temporarily,
    // nothing is focused and we can't tell if focus is about to be
    // placed or not.
    view.focusOut = function(evt) {
      var self = this;
      this.save(evt.target);

      this.saveAfterBlurTimeout = setTimeout(function() {
        clearTimeout(self.saveAfterBlurTimeout);
        self.onClose();
      }, 1);

      this.checkInvalid();
    },

    view.save = function(node) {
      /* jshint maxcomplexity:12 */
      if (node) {
        var target = $(node);
        var value = target.val();
        if (value === '') {
          value = undefined;
        } else {
          value = parseFloat(value);
        }

        var step = (this.$('.dcg-slider_interval').val() === '') ? 0 : this.slider.step;

        if (target.hasClass('dcg-slider_min')) {

          // turn min soft
          if (value === undefined) {
            this.slider.setProperty('hardMin', false);
          }

          // set the new min
          else if (value < this.slider.max && this.slider.max - value >= step) {
            this.slider.setProperty('min', value);
            this.slider.setProperty('hardMin', true);

          // revert the min value
          } else {
            this.renderMin();
          }

        } else if (target.hasClass('dcg-slider_max')) {

          // set max as soft
          if (value === undefined) {
            this.slider.setProperty('hardMax', false);
          }

          // set the new min
          if (value > this.slider.min && value - this.slider.min >= step) {
            this.slider.setProperty('max', value);
            this.slider.setProperty('hardMax', true);

          // revert the max value
          } else {
            this.renderMax();
          }

        } else if (target.hasClass('dcg-slider_interval')) {

          // clear the step value
          if (value === undefined) {
            this.slider.setProperty('step', undefined);
          }

          // set the new step interval
          else if (value >= 0 && value <= this.slider.max - this.slider.min) {
            this.slider.setProperty('step', value);

          // revert the slider step
          } else {
            this.renderStep();
          }
        }
      }
    };

    view.onClose = function() {
      this.setProperty('editing', false);
    };

    view.onEditMin = function(evt) {
      this.setProperty('editing', true);
      evt.preventDefault();
      this.$('.dcg-slider_min').focus().select();
    };

    view.onEditMax = function(evt) {
      this.setProperty('editing', true);
      evt.preventDefault();
      this.$('.dcg-slider_max').focus().select();
    };

    view.renderIsPlaying = function () {
      if (this.slider.step < 0) {
        this.slider.setProperty('isPlaying', false);
        return;
      }
      this.parentView.$().toggleClass('dcg-isPlaying', !!this.slider.isPlaying);
    };

  });

  return SliderView;
});

define('template!prompt_sliders', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-create_sliders dcg-action-createslider" handleEvent="true">\n  <span class="dcg-msg">'+
( t('add slider:') )+
'</span>\n  <span class="btns">\n    ';
 _.each(variables, function (variable) { 
;__p+='\n      <div class="dcg-slider_btn_container" var_name="'+
( variable.name )+
'" >\n        <div class="dcg-btn dcg-btn-small '+
( (variables.length === 1 ? 'dcg-btn-blue' : 'dcg-btn-light-gray') )+
'">'+
( variable.label )+
'</div>\n      </div>\n    ';
 }) 
;__p+='\n\n    ';
 if (variables.length > 1) { 
;__p+='\n      <div class="dcg-slider_btn_container dcg-all">\n        <div class="dcg-btn dcg-btn-small dcg-btn-blue">'+
( t('all') )+
'</div>\n      </div>\n    ';
 } 
;__p+='\n  </span>\n</div>';
}
return __p;
};});
define('expressions/promptslider_view',['require','jquery','pjs','underscore_view','template!prompt_sliders','./expression','graphing/label'],function(require) {
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!prompt_sliders');
  var ExpressionObject = require('./expression');
  var Label = require('graphing/label');

  var PromptSliderView = P(UnderscoreView, function (view, _super) {

    view.template = template;

    view.init = function (expressionView) {
      _super.init.call(this);

      this.variables = [];
      this.expressionView = expressionView;
      this.observe('variables', this.rerender.bind(this));
    };

    view.didInsertElement = function () {
      this.$('.dcg-action-createslider').on('dcg-tap', this.onCreateSlider.bind(this));
    };

    view.getTemplateParams = function () {
      var vars = this.variables;
      var formattedVariables = [];
      for (var i=0; i<4 && i<vars.length; i++) {
        formattedVariables.push({ name:vars[i], label:Label.identifierToHTML(vars[i]) });
      }
      return {variables: formattedVariables};
    };

    view.onCreateSlider = function(evt) {

      // this action feels like it should defocus expressions
      this.expressionView.clearListFocus();

      var dom = $(evt.target).closest('.dcg-slider_btn_container');
      if (!dom.length) return;

      var vars = dom.hasClass('dcg-all') ? this.variables : [dom.attr('var_name')];

      if (!vars.length) return;

      this.createSliders(vars);
    };

    view.createSliders = function (vars) {
      var expressionView = this.expressionView;
      var expressionModel = this.expressionView.model;

      // build the list of states
      // this is important, because the first time, it will generate
      // an id for us automatically. If we undo then redo, we need to
      // reusue the generated ids.
      // set slider min/max so that they don't
      // get set automatically and messup undo/redo
      var var_states = [];
      for (var i=0; i<vars.length; i++) {
        var_states.push({
          latex: Label.identifierToLatex(vars[i]) + '=1',
          sliderMin: -10, // TODO - combine this lines into:
          sliderMax: 10,  // slider: {min: -10, max: 10}
          hidden: true //don't show a circle when we create an r= slider
        });
      }

      var index = expressionModel.index;
      var folder = expressionModel.folder;
      var next_index = index + 1;

      var list = expressionModel.list;
      list.undoRedo.addTransaction({
        type: list.undoRedo.CAUSE_OF_CHANGE,

        undo: function() {
          for (var i=0; i<vars.length; i++) {
            list.removeItemAt(next_index);
          }
        },

        redo: function() {
          for (var i = var_states.length - 1; i >= 0; i--) {
            var obj = ExpressionObject(var_states[i], list);
            var_states[i].id = obj.id; // store the generated id for next time
            list.insertItemAt(next_index, obj);
            if (folder) folder.addItem(obj);
          }
        }
      });

      // temporarily disables animation while slider is created
      expressionView.setProperty('doAnimate', false);
      clearTimeout(expressionView.restoreAnimationTimeout);
      expressionView.restoreAnimationTimeout = setTimeout(function() {
        expressionView.setProperty('doAnimate', true);
      }, 500);
    };
  });

  return PromptSliderView;
});

define('template!expression_item', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionitem dcg-shell">\n  <div class=\'dcg-shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionitem dcg-mathitem">\n  <div class=\'dcg-fade-container\'>\n\n    <div class="dcg-fadeout-left"></div>\n\n    <span class="dcg-main">\n      <span class="dcg-math-field dcg-transient-mathquill"></span>\n      <span class="dcg-math-field dcg-template-mathquill"></span>\n    </span>\n\n    <span class="dcg-fadeout"></span>\n    <i class="dcg-icon-remove dcg-top-level-delete dcg-action-delete" handleEvent="true"></i>\n\n    <div class="dcg-slider-speed-container dcg-do-not-blur" handleEvent="true">\n      <span class="dcg-action-slower" >&laquo;</span>\n      <span class="dcg-variable-speed"></span>\n      <span class="dcg-action-faster">&raquo;</span>\n    </div>\n\n    <div class="dcg-template-bottom-container dcg-fixed-width-element">\n      <div class="dcg-template-bottom"></div>\n    </div>\n  </div>\n\n  <span class="dcg-tab dcg-action-drag dcg-action-icon-touch"\n        handleevent="true"\n        tapboundary="true"\n        disablescroll="true"\n  >\n    <span class="dcg-num dcg-variable-index"></span>\n    <span class="dcg-tab-interior dcg-action-icon-mouse">\n      <span class="template-expricon"></span>\n    </span>\n  </span>\n\n\n  <span class="dcg-exp-actions">\n    <span class="dcg-graphic" handleEvent="true"></span>\n    <nobr>\n      <span class="dcg-action-delete dcg-delete-btn dcg-tooltip" handleEvent="true" tooltip="'+
( t('Delete') )+
'"><i class=\'dcg-icon-remove\'></i></span>\n      <span class="dcg-action-duplicate dcg-duplicate-btn dcg-tooltip" handleEvent="true" tooltip="'+
( t('Duplicate') )+
'"><i class=\'dcg-icon-duplicate\'></i></span>\n      <span class="dcg-action-createtable dcg-tooltip" tooltip="'+
( t('Convert to Table') )+
'" handleEvent="true">\n        <i class=\'dcg-icon-table\'></i>\n      </span>\n    </nobr>\n  </span>\n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('expressions/abstractitem_view',['require','pjs','jquery','mathquill','underscore_view','conditional_blur'],function(require) {
  var P = require('pjs');
  var $ = require('jquery');
  var MathQuill = require('mathquill');
  var UnderscoreView = require('underscore_view');
  var conditionalBlur = require('conditional_blur');

  var AbstractItemView = P(UnderscoreView, function (view, _super) {
    view.init = function (model, listView) {
      _super.init.call(this);

      this.model = model;
      this.listView = listView;

      // do this now instead of letting renderSelected do this. If we wait
      // for renderSelected to do it, we'll end up calling rerender within a
      // already started render loop. That'll cause events to get bound twice
      // and other weird stuff will happen.
      if (this.model.selected) {
        this.model.renderShell = false;
      }
      //always render the first 15 equations (unless they're in folders)
      if (this.model.index < 15 && !this.model.inCollapsedFolder) {
        this.model.renderShell = false;
      }


      this.model.observe('index.itemview', this.renderIndex.bind(this));
      this.model.observe('selected.itemview', this.renderSelected.bind(this));
      this.model.observe('renderShell.itemview', this.rerender.bind(this));
      this.model.observe('renderShell.itemview', this.setMinWidth.bind(this));
      this.model.observe('folder.itemview', this.renderFolder.bind(this));
      this.model.observe('inCollapsedFolder.itemview', this.renderCollapsedFolder.bind(this));
    };

    //clear focus at the list level if the list has focus
    view.clearListFocus = function () {
      if (this.listView && this.listView.model) {
        this.listView.model.setSelected(null);
      }
    };

    //triggered from list_view when projector mode is changed
    //override from the different item type views. right now, just text_view overrides
    view.onProjectorModeChange = function() {};

    view.destruct = function () {
      this.model.unobserve('.itemview');
      this.setProperty('transient', false);
    };

    view.getTemplateParams = function () {
      return {
        renderShell: this.model.renderShell,
        inCollapsedFolder: this.model.inCollapsedFolder
      };
    };

    //this is called before the animation begins. The goal:
    // if an animation is in process (i.e. dcg-do-animate class is present)
    //   get out of here
    // otherwise, set the height to where it's supposed to start then wait
    // a frame and add dcg-do-animate class. Subsequent calls to set the height
    // will animate through css
    view.setInitialAnimationHeight = function(height) {
      if (this.$templateBottomContainer.hasClass('dcg-do-animate')) return;

      this.$templateBottomContainer.css('height', height);
      var self = this;
      setTimeout(function() {
        self.$templateBottomContainer.addClass('dcg-do-animate');
      });
    };

    //this is called once an animation is already in process, to animate
    //the height of the template bottom
    view.animateHeightTimeout = null;
    view.clearHeightTimeout = null;
    view.animateHeightTo = function (height) {
      var self = this;

      //step 1: animate to the new height. add the faded-in / faded-out class
      // this is in a timeout so that rapid typing doesn't make the bottom see-saw
      clearTimeout(this.animateHeightTimeout);
      this.animateHeightTimeout = setTimeout(function() {
        self.$templateBottomContainer.css('height', height);
        self.$templateBottom.toggleClass('dcg-faded-in', (height > 0));
      }, 250);

      //step 2: wait for the last possible animation to have finished (250ms + time for the animation to run)
      //then remove the animation class and remove the fixed height.
      //this means that subsequent changes to the size of the bottom of the expression will just let the page
      //reflow normally
      clearTimeout(this.clearHeightTimeout);
      this.clearHeightTimeout = setTimeout(function() {
        self.$templateBottomContainer.css('height', 'auto');
        self.$templateBottomContainer.removeClass('dcg-do-animate');
      }, 550);
    };

    view.templateBottomItems = 0;

    view.addViewToBottom = function (view) {
      //TODO: this is for api usage with expressions: false.
      //Ideally, this method should never be reached if we have no expression views
      if (!this.$templateBottom) return;

      this.templateBottomItems++;
      //short-circuit if we're not animating
      //
      //this also shortcuts the case where another bottom item is present
      //this can happen if this new bottom item is added before an existing one is removed.
      //for example: a*b, add sliders for both. then delete the slider for b.
      //The "add sliders:" option is added before the evaluation is removed
      //between this and the above, we just swap out this item.

      if (!this.doAnimate || this.templateBottomItems > 1) {
        this.$templateBottom.addClass('dcg-faded-in');
        view.appendTo(this.$templateBottom);
        return;
      }

      //set the height to zero
      this.setInitialAnimationHeight(0);
      //append the view
      view.appendTo(this.$templateBottom);
      //update the height of the bottom region
      this.animateHeightTo(view.$().height());
    };

    view.removeViewFromBottom = function (view) {
      //TODO: this is for api usage with expressions: false.
      //Ideally, this method should never be reached if we have no expression views
      if (!this.$templateBottom) return;

      this.templateBottomItems--;

      //second half of the shortcutted logic if we're swapping in a bottom element
      if (this.templateBottomItems > 0) {
        view.remove();
        return;
      }

      //short circuit if we're not animating
      if (!this.doAnimate) {
        this.$templateBottom.removeClass('dcg-faded-in');
        view.remove();
        return;
      }

      //set the initial animation height to the full height of the bottom
      this.setInitialAnimationHeight(this.$templateBottom.height());
      //remove the view
      view.remove();
      //animate to zero
      this.animateHeightTo(0);
    };

    view.renderIndex = function () {
      var index = this.model.index;
      this.$().attr('index', index);
      this.$('.dcg-variable-index').text(index+1);
    };

    view.renderFolder = function () {
      this.$().toggleClass('dcg-inFolder', !!this.model.folder);
    };

    view.renderCollapsedFolder = function(){
      this.$().toggleClass('dcg-inCollapsedFolder', !!this.model.inCollapsedFolder);
    };

    view.renderSelected = function () {
      if (this.model.selected) {
        if (this.model.renderShell) {
          this.model.setProperty('renderShell', false);
        }
      }

      this.$().toggleClass('dcg-selected', !!this.model.selected);
    };

    view.setMinWidth = function () {
      this.$('.dcg-fixed-width-element').css('width', this.listView.minWidth - this.listView.scrollbarWidth);
    };

    view.didCreateElement = function () {
      this.setMinWidth();
      this.$templateBottom = this.$('.dcg-template-bottom');
      this.$templateBottomContainer = this.$('.dcg-template-bottom-container');
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);

      var self = this;
      this.$().on('dcg-tap dcg-tapstart', function (evt) {
        // when using mouse, fire on 'dcg-tapstart' and when on touch we
        // fire on the 'dcg-tap' event.
        if (evt.type === 'dcg-tap' && evt.device === 'mouse') return;
        if (evt.type === 'dcg-tapstart' && evt.device === 'touch') return;

        self.onMouseSelect(evt);
      });

      this.$('.dcg-action-drag').on('dcg-tapstart', this.onDragPending.bind(this));
      this.$('.dcg-action-delete').on('dcg-tap', this.onDelete.bind(this));

      this.$().attr('expr-id', this.model.id);
      this.renderIndex();
      this.renderSelected();
      this.renderFolder();
      this.renderCollapsedFolder();
    };

    view.triggerDelete = function () {};
    view.triggerEnterPressed = function () {};
    view.triggerUpPressed = function () {};
    view.triggerDownPressed = function () {};
    view.triggerBackspacePressed = function () {};
    view.triggerDelPressed = function () {};
    view.onMouseSelect = function () {};

    view.sendTapToMathQuill = function(evt, mq) {
      // stop the mathquill from losing focus immediately. Only do this when
      // using mouse. When on ipad, this stops you from being able to put
      // cursor. And when on ipad, focus doesn't get lost anyways.
      if (evt.device === 'mouse') {
        evt.preventDefault();
      }

      /*
      * This will simualte a mousedown on the mathquill itself so that
      * you can start a mouse selection from outside of mathquill. But,
      * this doesn't make much sense for ipad because we don't do selection on
      * mousedown for ipad, we do it on click. That's because we want scroll
      * to work. We also don't want to pass the event into mathquill if it
      * originally started in mathquill.
      */
      if (evt.device === 'mouse') {
        // let mathquill handle the event
        if ($.contains(mq[0], evt.target)) return;

        // the event we're looking at is of type 'dcg-tapstart' and that means
        // nothing to mathquill. We need to turn this back into a 'mousedown'
        // so that it can handle it normally.
        var fakeEvent = $.event.fix(evt.originalEvent);

        // pass into mathquill so it can act like it happened within mathquill
        mq.triggerHandler(fakeEvent);
      }

      // on ipad, use MathQuill API
      else {
        var touch = evt.originalEvent.changedTouches[0];
        MathQuill(mq[0]).fastClick(touch.target, touch.clientX, touch.clientY);
        MathQuill(mq[0]).focus();

        var time, timeout = setTimeout(function() {
          timeout = null;
          time = Date.now();
        });
        MathQuill(mq[0]).ignoreNextMousedown(function() {
          return timeout || Date.now() - time < 500;
        });
      }
    };

    view.onDelete = function() {
      this.triggerDelete();
    };

    view.convertTo = function (cls, state) {

      var obj = cls(state);
      var index = this.model.index;
      var list = this.model.list;
      var folder = this.model.folder;

      obj.setProperty('list', list);

      list.undoRedo.oneTransaction(function(){
        list.removeItemAt(index);
        list.insertItemAt(index, obj);
        if (folder) folder.addItem(obj);
      });

      return obj;
    };

    view.getBounds = function () {
      var dom = this.$();
      var offset = dom.offset();
      if (!offset) return null;

      var top = offset.top;
      var height = dom.height();

      return {
        top: top,
        bottom: top + height
      };
    };

    // override in subclass
    view.allowDragDrop = function () {
      return true;
    };

    view.onDragPending = function(evt) {
      // clear focus when clicking expression handle
      conditionalBlur();

      // don't start dragging if we're not allowed to
      if (!this.allowDragDrop()) return;
      var self = this;
      this.mouseMovedTo = null;

      //if timeout happens or mouse moves sufficiently far, we will start dragging
      //if mouseup, then this was a dcg-tap, and we should let it do its thing

      //Start after 500ms
      var dragStartTimeout = setTimeout(function(){
        $(document).off('.dragpending');
        self.onDragStart(evt);
      }, 500);

      //Start after moving
      $(document).on('dcg-tapmove.dragpending', function(new_evt){
        // mouse has moved since dcg-tapstart. record this in case we actually do start dragging
        self.mouseMovedTo = new_evt.touches[0];

        var dx = evt.touches[0].x - self.mouseMovedTo.x;
        var dy = evt.touches[0].y - self.mouseMovedTo.y;

        // must have moved more than 3px away from dcg-tapstart position to immediately trigger drag
        if (Math.sqrt(dx*dx+dy*dy) > 3) {
          clearTimeout(dragStartTimeout);
          $(document).off('.dragpending');
          self.onDragStart(evt);
        }
      });

      //Cancel on mouseup
      $(document).on('dcg-tapend.dragpending', function(new_evt){
        clearTimeout(dragStartTimeout);
        $(document).off('.dragpending');
      });
    };

    view.onDragStart = function(evt) {
      // don't start dragging if we're not allowed to
      if (!this.allowDragDrop()) return;
      this.listView.dragdrop_expressions.start(evt, this);

      // we've moved our mouse since the initial dcg-tapstart. drag the expression to that point
      if (this.mouseMovedTo) {
        this.hideContextMenu();
        this.listView.dragdrop_expressions.drag(this.mouseMovedTo.x, this.mouseMovedTo.y);
      }
    };

    view.hideContextMenu = function () {
      this.triggerEvent('hideContextMenu');
    };

    view.addFocus = function (where) {};
    view.isFocused = function () {return false};
  });

  return AbstractItemView;
});

define('expressions/expression_view',['require','jquery','pjs','./expression_icon_view','expressions/evaluation','expressions/unresolved','expressions/domain_view','expressions/regression_view','expressions/slider_view','expressions/promptslider_view','./expression','graphing/columnmode','i18n','conditional_blur','analytics/google_analytics','./text','./table','mathquill','jquery.handleevent','keys','template!expression_item','expressions/abstractitem_view'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var ExpressionIconView = require('./expression_icon_view');
  var EvaluationView = require('expressions/evaluation');
  var UnresolvedView = require('expressions/unresolved');
  var DomainView = require('expressions/domain_view');
  var RegressionView = require('expressions/regression_view');
  var SliderView = require('expressions/slider_view');
  var PromptSliderView = require('expressions/promptslider_view');
  var ExpressionObject = require('./expression');
  var COLUMNMODE = require('graphing/columnmode');
  var i18n = require('i18n');
  var conditionalBlur = require('conditional_blur');
  var ga = require('analytics/google_analytics');

  //For convert-to text and convert-to-table
  var TextObject = require('./text');
  var TableObject = require('./table');

  var MathQuill = require('mathquill');
  require('jquery.handleevent');
  var Keys = require('keys');

  var template = require('template!expression_item');

  var AbstractItemView = require('expressions/abstractitem_view');

  var ExpressionView = P(AbstractItemView, function(view, _super) {
    view.template = template;

    view.init = function (model, listView, toastView) {
      _super.init.call(this, model, listView);
      this.toastView = toastView;
      this.model.observe('formula.exprview', this.onFormulaChange.bind(this));
      this.model.observe('selected.exprview', this.onSelectedChange.bind(this));
      this.model.observe('latex.exprview', this.onLatexChange.bind(this));
      this.model.observe('dependent.exprview', this.renderDependent.bind(this));
      this.model.observe('isTableable.exprview', this.renderIsTableable.bind(this));
      this.model.observe('unresolved.exprview', this.renderUnresolved.bind(this));
      this.model.observe('loading.exprview', this.onLoadingChange.bind(this));
    };

    // enable animations on the frame after the expression is loaded
    view.onLoadingChange = function () {
      if (!this.model.loading) {
        var self = this;
        setTimeout(function () {
          self.setProperty('doAnimate', true);
        });
      }
    };

    view.renderIsTableable = function(){
      this.$('.dcg-action-createtable').toggleClass('dcg-disabled', !this.model.isTableable);
    };

    view.destruct = function () {
      _super.destruct.call(this);

      this.model.unobserve('.exprview');

      if (this.iconView) {
        this.iconView.remove();
        this.iconView = null;
      }

      if (this.sliderView) {
        // Trigger our removal from the slider timer.
        this.sliderView.remove();
        this.sliderView = null;
      }

      if (this.promptSliderView) {
        this.promptSliderView.remove();
        this.promptSliderView = null;
      }

      if (this.domainView) {
        this.domainView.remove();
        this.domainView = null;
      }

      if (this.regressionView) {
        this.regressionView.remove();
        this.regressionView = null;
      }

      if (this.evaluationView) {
        this.evaluationView.remove();
        this.evaluationView = null;
      }

      if (this.unresolvedView) {
        this.unresolvedView.remove();
        this.unresolvedView = null;
      }
    };

    view.onLatexChange = function() {
      if (this.sliderView && this.sliderView.slider.transient) {
        this.updateTransientValue();
        return;
      }

      var latex = this.model.latex;
      if (latex === '"' || latex === "'") {
        this.convertTo(TextObject, {selected:true});
        this.listView.getSelectedView().addFocus();
        return;
      }
      //call up to list_view, so that other listeners can listen
      this.listView.onLatexChange(latex);

      this.updateMathquill();
    };

    view.updateMathquill = function () {
      if (!this.mathField) return;

      var latex = this.model.latex;

      if (latex !== undefined && this.mathField.latex() !== latex)
        this.mathField.latex(latex);
    };

    view.updateTransientValue = function () {
      if (!this.$transientValue || !this.$transientValue.length) return;
      this.$transientValue[0].innerHTML = (
        this.model.slider.computeSnappedValue(this.model.slider.value)
        .toString()
        .replace('-', '<span class="unary-operator">\u2212</span>')
      );
    };

    // OVERRIDE TO CREATE APPROPRIATE CHILD VIEW. IF NOT OVERRIDDEN, THE
    // VIEW WILL SIMPLY NOT BE CREATED AT RUNTIME.
    view.createIconView = function () {
      return ExpressionIconView(this);
    };
    view.createSliderView = function () {
      return SliderView(this.model.slider, this);
    };
    view.createPromptSliderView = function () {
      return PromptSliderView(this);
    };
    view.createDomainView = function () {
      return DomainView(this.model.domain);
    };
    view.createRegressionView = function () {
      return RegressionView(this.model, this.listView);
    };
    view.createEvaluationView = function () {
      return EvaluationView(this);
    };

    view.onFormulaChange = function() {
      /* jshint maxcomplexity:20 */
      // Skip this while we are rendering shell. Without this catch, we'd
      // create the child views while rendring the shells and throw them
      // away when we render fully.
      if (this.model.renderShell) return;

      var formula = this.model.formula;

      // closes stale context menus
      this.hideContextMenu();

      var showSlider = formula.is_slidable;
      if (this.sliderView && !showSlider) {
        this.sliderView.slider.unobserve('.expressionView');
        this.removeViewFromBottom(this.sliderView);
        this.sliderView = null;
        this.$().removeClass('dcg-hasSlider');
      } else if (!this.sliderView && showSlider) {
        this.sliderView = this.createSliderView();
        if (this.sliderView) {
          this.addViewToBottom(this.sliderView);
          this.sliderView.setProperty('dependentLabel', this.getDependentLabel());
          this.$().addClass('dcg-hasSlider');
          this.sliderView.slider.observe(
            'transient.expressionView',
            this.updateTransient.bind(this)
          );
          this.updateTransient();
        }
      }
      var promptCreateSlider = formula.variables && formula.variables.length > 0;
      if (this.promptSliderView && !promptCreateSlider) {
        this.removeViewFromBottom(this.promptSliderView);
        this.promptSliderView = null;
      } else if (!this.promptSliderView && promptCreateSlider) {
        this.promptSliderView = this.createPromptSliderView();
        if (this.promptSliderView) {
          this.addViewToBottom(this.promptSliderView);
        }
      }

      var showDomain = formula.is_parametric;
      if (this.domainView && !showDomain) {
        this.removeViewFromBottom(this.domainView);
        this.domainView = null;
        this.$().removeClass('dcg-hasDomain');
      } else if (!this.domainView && showDomain) {
        this.domainView = this.createDomainView();
        if (this.domainView) {
          this.addViewToBottom(this.domainView);
          this.$().addClass('dcg-hasDomain');
        }
      }

      var showRegression = formula.is_regression;
      if (this.regressionView && !showRegression) {
        this.removeViewFromBottom(this.regressionView);
        this.regressionView = null;
        this.$().removeClass('dcg-hasRegression');
      } else if (!this.regressionView && showRegression) {
        this.regressionView = this.createRegressionView();
        this.addViewToBottom(this.regressionView);
        this.$().addClass('dcg-hasRegression');
      }

      var showEvaluation = formula.is_evaluable &&
          formula.zero_values &&
          formula.zero_values.length > 0 &&
          //don't show outputs when they are just booleans
          //re: https://github.com/desmosinc/knox/issues/4574
          typeof formula.zero_values[0].val !== 'boolean';

      if (this.evaluationView && !showEvaluation) {
        this.removeViewFromBottom(this.evaluationView);
        this.evaluationView = null;
      } else if (!this.evaluationView && showEvaluation) {
        this.evaluationView = this.createEvaluationView();
        if (this.evaluationView) {
          this.addViewToBottom(this.evaluationView);
          this.$().addClass('.dcg-hasEvaluation');
          this.evaluationView.setProperty('dependentLabel', this.getDependentLabel());
        }
      }

      if (this.sliderView && !this.sliderView.slider.transient) {
        this.model.slider.setProperty('value', formula.constant_value);
      }

      if (this.promptSliderView) {
       this.promptSliderView.setProperty('variables', formula.variables);
      }

      if (this.evaluationView) {
        this.evaluationView.setProperty('evaluations', formula.zero_values);
      }

      if (this.regressionView) {
        this.regressionView.setProperty('regression', formula.regression);
      }
    };

    view.renderDependent = function () {
      if (this.sliderView) {
        this.sliderView.setProperty('dependentLabel', this.getDependentLabel());
      }
      if (this.evaluationView) {
        this.evaluationView.setProperty('dependentLabel', this.getDependentLabel());
      }
    };

    view.renderUnresolved = function () {
      var unresolved = this.model.unresolved;

      if (!unresolved && this.unresolvedView) {
        this.unresolvedView.remove();
        this.unresolvedView = null;
      }

      if (unresolved && !this.unresolvedView) {
        this.unresolvedView = UnresolvedView();
        this.addViewToBottom(this.unresolvedView);
      }
    };

    // NOTE: this will get called once with model.renderShell = true and once
    // with model.renderShell = false. The first time, the template will
    // shortcircuit and render the bare minimum. The second time the entire
    // dom will get destroyed and rebuilt. We don't want to add any nested
    // views when model.renderShell = false because the views' dom elements will
    // get wiped out as soon as we render with model.renderShell = false. And,
    // the whole point of renderShell=true is that we want as little as
    // possible to happen at startup as possible.
    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      if (this.model.renderShell)  return;

      this.$mathField = this.$('.dcg-template-mathquill');
      this.mathField = MathQuill.MathField(this.$mathField[0]);

      this.$transientLhs = this.$('.dcg-transient-mathquill');
      this.transientLhs = MathQuill.MathField(this.$transientLhs[0]);
      this.$transientLhs.hide();

      this.$transientValue = $('<span>');

      this.$mathField.on(
        'render upPressed downPressed enterPressed backspacePressed delPressed keydown focusin focus',
        this.onMathquillEvent.bind(this)
      );
      this.$transientLhs.on('dcg-tapstart', this.onSelectTransient.bind(this));
      this.mathField.latex(this.model.latex || "");

      this.iconView = this.createIconView();
      if (this.iconView) {
        this.iconView.replace(this.$('.template-expricon'));
      }

      this.$('.dcg-action-duplicate').on('dcg-tap', this.onDuplicateWithoutFocus.bind(this));
      this.$('.dcg-action-createtable').on('dcg-tap', this.onCreateTable.bind(this));

      this.$('.dcg-action-faster').on('dcg-tap', this.animateFaster.bind(this));
      this.$('.dcg-action-slower').on('dcg-tap', this.animateSlower.bind(this));

      this.renderIsTableable();
      this.onFormulaChange();
    };

    view.animateFaster = function () {
      if (this.sliderView) this.sliderView.animateFaster();
    };
    view.animateSlower = function () {
      if (this.sliderView) this.sliderView.animateSlower();
    };

    view.onSelectedChange = function() {
      if (!this.model.selected && this.mathField) {
        // take focus out of mathquill
        this.mathField.clearSelection().blur();
      }
    };

    view.onSelectTransient = function () {
      this.stopTransient();
      this.mathField.focus();
    };

    view.onMathquillEvent = function(evt) {
      /* jshint maxcomplexity:14 */
      switch(evt.type) {
        case "render":
        this.model.setProperty('latex', this.mathField.latex());
        return;

        case "focus":
        case "focusin":
          if (this.sliderView) this.sliderView.slider.setProperty('isPlaying', false);
          this.model.setProperty('selected', true);
          return;

        case "upPressed":
        this.triggerUpPressed();
        return;

        case "downPressed":
        this.triggerDownPressed();
        return;

        case "enterPressed":
        this.triggerEnterPressed();
        return;

        case "backspacePressed":
        if (!this.model.isEmpty()) return;
        this.triggerBackspacePressed();
        return;

        case "delPressed":
        if (!this.model.isEmpty()) return;
        this.triggerDelPressed();
        return;

        case "keydown":
        if (Keys.lookup(evt) === Keys.ESCAPE) conditionalBlur();
        return;
      }
    };

    view.onDuplicateWithoutFocus = function() {

      ga.send(['_trackEvent', 'edit-list-mode', 'duplicate used']);

      var index = this.model.index;
      var state = this.model.getState();
      state.selected = false;
      delete state.id;

      var list = this.model.list;
      var folder = this.model.folder;
      var obj = ExpressionObject(state, list);

      list.undoRedo.oneTransaction(function () {
        list.insertItemAt(index + 1, obj);
        if (folder) folder.addItem(obj);
      });

      return obj;
    };

    view.onMouseSelect = function(evt) {
      if (this.listView.editListMode) return;

      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);

      this.sendTapToMathQuill(evt, this.$mathField);
    };

    view.getDependentLabel = function () {
      var dependent = this.model.dependent;
      if (!dependent) return '';

      //reformat to add back in brackets if we have a subscript
      if (dependent.match(/(.*)_(.+)/)) {
        dependent = dependent.replace(/(.*)_(.+)/, "$1_{$2}");
      }

      // ask mathquill for an html version of itself
      // note: this will break for things like parentheses, which need to be
      // inserted into the dom to know their correct size we should probably
      // be passing around mathquill objects instead of strings, but this
      // works for uncomplicated mathquill
      dependent =
        MathQuill.MathField($('<span>' + dependent + '</span>')[0]).html();

      // surround it in the right class so that it can pull in mathquill
      // stylings
      dependent = (
        "<span class='mq-math-mode'>" +
        dependent +
        "</span>"
      );

      return dependent;
    };

    var lhs = function (latex) {
      return latex.replace(RegExp("=[^=]+$"), "=");
    };

    view.startTransient = function () {
      this.setProperty('transient', true);
      this.updateTransientValue();
      this.$transientLhs.show();
      this.$mathField.hide();
      this.transientLhs.latex(lhs(this.model.latex));
      this.$transientLhs
        .children('.mq-root-block')
        .append(this.$transientValue)
      ;
    };

    view.stopTransient = function () {
      this.setProperty('transient', false);
      this.$transientValue.remove();
      this.$transientLhs.hide();
      this.$mathField.show();
      this.updateMathquill();
    };

    view.updateTransient = function () {
      if (!this.$transientValue || !this.$transientValue.length) return;

      if (this.sliderView.slider.transient) {
        this.startTransient();
      } else {
        this.stopTransient();
      }
    };

    view.isFocused = function () {
      return $(document.activeElement).closest(this.$mathField).length !== 0;
    };

    view.addFocus = function (where) {
      if (!this.mathField) return;

      this.mathField.focus()
      .moveToDirEnd(where === 'start' ? MathQuill.L : MathQuill.R);
    };

    view.onCreateTable = function () {
      ga.send(['_trackEvent', 'edit-list-mode', 'convert to table use']);

      var formula = this.model.formula;

      if (!this.model.isTableable) return;

      var table_info = formula.table_info;
      var index = this.model.index;
      var state = {selected : true};

      var columnMode = COLUMNMODE.POINTS_AND_LINES;
      if (formula.is_point_list || this.model.hidden)
        columnMode = COLUMNMODE.POINTS;

      var i;
      var independent_values = [];
      var dependent_values = [];
      if(table_info.values){
        for(i = 0; i < table_info.values.length; i++){
        independent_values.push(table_info.values[i][0]);
        dependent_values.push(table_info.values[i][1]);
        }
      }
      else{
        for(i = -2; i <=2; i++){
          independent_values.push(i);
          dependent_values.push('');
        }
      }

      state.columns = [{
                          latex:table_info.independent_variable,
                          values: independent_values
                        },{
                          latex:table_info.dependent_column,
                          color: this.model.color,
                          hidden: false,
                          columnMode: columnMode,
                          values: dependent_values
                        }];

      var list = this.model.list;
      var listView = this.listView;
      var folderId = (this.model.folder ? this.model.folder.id : null);
      listView.setProperty('editListMode', false);
      ga.send(['_trackEvent', 'edit-list-mode', 'exit edit list from convert to table']);

      list.undoRedo.oneTransaction(function(){
        if (!table_info.by_reference) {
          list.removeItemAt(index);
          index--;
        }

        var obj = TableObject(state, list);
        list.insertItemAt(index+1, obj);
        if (folderId !== null) list.getItemById(folderId).addItem(obj);
      });

      var undoCallback = function () {
        listView.setProperty('editListMode', true);
      };
      this.listView.toastView.show(i18n.t("Table created."), {undoCallback: undoCallback});
    };
  });

  return ExpressionView;
});

define('template!text', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionitem dcg-expressiontext dcg-shell">\n  <div class=\'dcg-shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressiontext dcg-expressionitem">\n  <div class=\'dcg-fade-container\'>\n\n    <span class="dcg-main">\n      <div class="dcg-smart-textarea-placeholder"></div>\n    </span>\n    <i class="dcg-icon-remove dcg-top-level-delete dcg-action-delete" handleEvent="true"></i>\n\n  </div>\n\n  <span class="dcg-tab dcg-action-drag"\n        handleevent="true"\n        tapboundary="true"\n        disablescroll="true"\n  >\n    <span class=\'dcg-num dcg-variable-index\'></span>\n    <div class=\'dcg-tab-interior\'></div>\n    <i class=\'dcg-icon-text\'></i>\n  </span>\n\n  <span class=\'dcg-exp-actions\'>\n    <span\n      class="dcg-action-delete dcg-delete-btn dcg-tooltip"\n      handleEvent="true"\n      tooltip="'+
( t('Delete') )+
'"\n    >\n      <i class=\'dcg-icon-remove\'></i>\n    </span>\n  </span>\n\n</div>\n\n';
 } 
;__p+='';
}
return __p;
};});
define('loadcss!css/smart_textarea', function(){});
define('template!smart_textarea', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-smart-textarea-container">\n  <div class="dcg-displayTextarea dcg-fixed-width-element"></div>\n  <textarea class="dcg-do-blur dcg-fixed-width-element dcg-smart-textarea" placeholder="'+
( t('enter a note...') )+
'"></textarea>\n</div>';
}
return __p;
};});
/*
*  This is a utility that is used in folders and text views
*  It takes a textarea and a div that's supposed to cover the textarea
*  It updates the div to match the textarea, including swapping in links
*  It resizes the textarea to match the div
*/

define('expressions/smart_textarea',['require','loadcss!css/smart_textarea','jquery','pjs','underscore_view','browser','jquery.handleevent','keys','conditional_blur','template!smart_textarea'],function(require) {
  require('loadcss!css/smart_textarea');
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var Browser = require('browser');
  require('jquery.handleevent');
  var Keys = require('keys');
  var conditionalBlur = require('conditional_blur');

  var template = require('template!smart_textarea');

  var SmartTextarea = P(UnderscoreView, function(view, _super) {
    view.template = template;
    view.init = function (text) {
      _super.init.call(this);

      this.$textarea = null;
      this.$displayText = null;
      this.setProperty('text', text || '');
    };

    view.didCreateElement = function() {
      _super.didCreateElement.call(this);

      this.$textarea = this.$('.dcg-smart-textarea');
      this.$displayText = this.$('.dcg-displayTextarea');
      this.observe('text', this.renderText.bind(this));

      this.$textarea.on('input propertychange change', function(evt) {
        this.setProperty('text', this.$textarea.val());
      }.bind(this));
      this.$textarea.on('keydown', this.onKeydownEvent.bind(this));

      this.$displayText.on('touchend', function(evt) {
        evt.preventDefault();
      });

      // We are going to stop clicks on links and let the rest filter through to the focus() handler below.
      this.$displayText.on('dcg-tap dcg-tapstart', 'a', function(evt) {
        evt.handle();
      });

      // FF has an issue where focus is lost of we change the '.selected' class while clicking. Instead of
      // allowing the "onMouseSelect" code to run, we just expect that the expression will get focus. And that
      // will also cause this to become selected. The difference is that by doing "evt.handle()" here we focus
      // then select (rather than select then focus). FF simply prefers it that way.
      this.$textarea.on('dcg-tapstart', function (evt) {
        evt.handle();
      }.bind(this));

      this.$textarea.focus(function(){
        this.setProperty('focused', true);
      }.bind(this));
      this.$textarea.blur(function(){
        this.setProperty('focused', false);
      }.bind(this));
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      this.renderText();
    };

    view.onKeydownEvent = function (evt) {
      /* jshint maxcomplexity:12 */
      if (!this.$textarea) return;

      var ta = this.$textarea[0];
      var key = Keys.lookup(evt);

      // pressing enter inside textarea creates a new expression underneath
      if (key === Keys.ENTER) {
        evt.preventDefault();
        this.triggerEvent('enterPressed');
      // pressing escape removes focus
      } else if (key === Keys.ESCAPE) {
        conditionalBlur();
      // pressing up while at start of textarea selects expression above
      } else if (key === Keys.UP) {
        if (ta.selectionStart === 0 && ta.selectionEnd === 0) {
          evt.preventDefault();
          this.triggerEvent('upPressed');
        }
      // pressing down while at end of textarea selects expression below
      } else if (key === Keys.DOWN) {
        if (ta.selectionStart === ta.value.length && ta.selectionEnd === ta.value.length) {
          evt.preventDefault();
          this.triggerEvent('downPressed');
        }
      // pressing backspace when completely empty should delete textarea
      } else if (key === Keys.BACKSPACE) {
        if (ta.value.length === 0) {
          evt.preventDefault();
          this.triggerEvent('backspacePressed');
        }
      // pressing delete when completely empty should delete textarea
      } else if (key === Keys.DELETE) {
        if (ta.value.length === 0) {
          evt.preventDefault();
          this.triggerEvent('delPressed');
        }
      }
    };

    view.destruct = function () {
      this.blur();
    };

    view.markedUpText = function () {
      var marked_up_text = this.text || '';
      // converts '<' and '>' to html entity
      marked_up_text = marked_up_text.replace(/</g, '&lt;').replace(/>/g, '&gt;');

      // wraps links in <a> tags
      var exp = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
      marked_up_text = marked_up_text.replace(exp,"<a href='$1' target ='_blank'>$1</a>");

      return marked_up_text;
    };

    view.renderText = function () {
      if (!this.$textarea) return;

      this.$textarea.val(this.text);
      this.$displayText.html(this.markedUpText());
      this.fitText();
      this.$textarea.toggleClass('dcg-empty', !this.text);
      setTimeout(this.fitText.bind(this), 1); //TODO - do we still need this?
    };

    view.fitText = function () {
      if (!this.$displayText) return;

      var height = this.$displayText.outerHeight();
      if (height > 0) this.$textarea.css('height', height);
    };

    view.isFocused = function () {
      return $(document.activeElement).closest(this.$()).length !== 0;
    };

    view.blur = function () {
      if (this.$textarea) this.$textarea.blur();
    };

    view.addFocus = function (where) {
      // Can't reliably focus textarea programatically from within iframe on ipad
      // see #3106
      if (Browser.IS_IPAD && Browser.IS_IN_IFRAME) {
        return;
      }
      var textarea = this.$textarea[0];
      textarea.focus();
      if (where === 'end') {
        textarea.selectionStart = textarea.selectionEnd = textarea.value.length;
      } else if (where === 'start') {
        textarea.selectionStart = textarea.selectionEnd = 0;
      }
    };
  });

  return SmartTextarea;
});

define('expressions/text_view',['require','jquery','pjs','./abstractitem_view','template!text','./smart_textarea','jquery.handleevent'],function(require) {
  var $ = require('jquery');
  var P = require('pjs');
  var AbstractItemView = require('./abstractitem_view');
  var template = require('template!text');
  var SmartTextarea = require('./smart_textarea');
  require('jquery.handleevent');

  var TextView = P(AbstractItemView, function(view, _super) {
    view.template = template;

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);

      this.model.observe('selected.textview', this.onSelectedChange.bind(this));

      //sync up smart_textarea and this.model
      this.smartTextarea = SmartTextarea(this.model.text);
      this.model.observe('text.textview', function() {
        this.smartTextarea.setProperty('text', this.model.text);
      }.bind(this));
      this.smartTextarea.observe('text', function() {
        this.model.setProperty('text', this.smartTextarea.text);
      }.bind(this));

      // fitText doesn't work when we're hidden. Must do it when being shown.
      this.model.observe('inCollapsedFolder.textview', function () {
        if (!this.model.inCollapsedFolder) {
          this.smartTextarea.fitText();
        }
      }.bind(this));
    };

    view.destruct = function () {
      this.model.unobserve('.textview');
      this.smartTextarea.destruct();
    };

    view.onProjectorModeChange = function() {
      this.smartTextarea.fitText();
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);

      if (this.model.renderShell) return;
      this.smartTextarea.replace(this.$('.dcg-smart-textarea-placeholder'));

      this.smartTextarea.observe('focused', function () {
        if (this.smartTextarea.focused) this.model.setProperty('selected', true);
      }.bind(this));

      this.smartTextarea.observeEvent('enterPressed', this.triggerEnterPressed.bind(this));
      this.smartTextarea.observeEvent('upPressed', this.triggerUpPressed.bind(this));
      this.smartTextarea.observeEvent('downPressed', this.triggerDownPressed.bind(this));
      this.smartTextarea.observeEvent('backspacePressed', this.triggerBackspacePressed.bind(this));
      this.smartTextarea.observeEvent('delPressed', this.triggerDelPressed.bind(this));
      //need to include smart-textarea in minWidth
      this.setMinWidth();
    };

    view.onSelectedChange = function() {
      if (!this.model.selected) {
        this.smartTextarea.blur();
      }
    };

    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);
    };

    view.isFocused = function () {
      return $(document.activeElement).closest(this.$()).length !== 0;
    };

    view.addFocus = function (where) {
      this.smartTextarea.addFocus(where);
    };
  });

  return TextView;
});

define('loadcss!css/expressions.table', function(){});
define('template!table_icon', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="dcg-icon-box dcg-variable-errortooltip tipsy-sticky dcg-action-icon dcg-do-not-blur" \n      handleevent="true"\n      disablescroll="true"\n>\n  <span class="dcg-icon dcg-graph-icon dcg-variable-colorcss">\n    <i class=\'dcg-icon-hidden\'></i>\n  </span>\n</span>';
}
return __p;
};});
define('template!table_column_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'dcg-table-column-menu dcg-options-menu\'>\n  <div class=\'dcg-triangle\'></div>\n  <div class=\'dcg-styles-div\'>\n    <div class=\'dcg-title\'>'+
( t('style:') )+
'</div>\n    <div>\n      <span class=\'dcg-columnmode-option dcg-graph-icon dcg-table-points dcg-variable-colorcss\' mode="POINTS"></span>\n      <span class=\'dcg-columnmode-option dcg-graph-icon dcg-table-lines dcg-variable-colorcss\' mode="LINES"></span>\n      <span class=\'dcg-columnmode-option dcg-graph-icon dcg-table-points-and-lines dcg-variable-colorcss\' mode="POINTS_AND_LINES"></span>\n    </div>\n  </div>\n  <div class=\'dcg-drag-div\'>\n    <div class=\'dcg-title\'>'+
( t('drag:') )+
'</div>\n    <div>\n      <span class=\'dcg-dragmode-option dcg-graph-icon dcg-table-drag-y dcg-variable-colorcss\' mode="Y"></span>\n      <span class=\'dcg-dragmode-option dcg-graph-icon dcg-table-drag-x dcg-variable-colorcss\' mode="X"></span>\n      <span class=\'dcg-dragmode-option dcg-graph-icon dcg-table-drag-xy dcg-variable-colorcss\' mode="XY"></span>\n    </div>\n  </div>\n  <div class=\'dcg-colors-div\'>\n    <div class=\'dcg-title\'>'+
( t('color:') )+
'</div>\n    <div class="template-colorsview"></div>\n  </div>\n</div>';
}
return __p;
};});
define('expressions/table_column_menu_view',['require','pjs','underscore_view','template!table_column_menu','jquery','graphing/dragmode','./color_menu_view'],function(require){
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!table_column_menu');
  var $ = require('jquery');
  var DRAGMODE = require('graphing/dragmode');
  var ColorMenuView = require('./color_menu_view');

  var TableColorMenuView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (parentView, column) {
      _super.init.call(this);
      this.column = column;
      this.parentView = parentView;
    };

    view.destruct = function () {
     this.column.unobserve(this.guid);
    };

    view.renderColorCSS = function () {
      var color = this.column.color;
      this.$('.dcg-variable-colorcss').css({
        'border-color' : color,
        'background-color': color
      });
    };

    view.renderSelectedColumnMode = function () {
      this.$('.dcg-columnmode-option').removeClass('dcg-selected');

      if (this.column.shouldGraph) {
        var columnMode = this.column.columnMode;
        this.$('.dcg-columnmode-option[mode="'+columnMode+'"]').addClass('dcg-selected');
      }
    };

    view.renderSelectedDragMode = function () {
      this.$('.dcg-dragmode-option').removeClass('dcg-selected');
      this.$('.dcg-dragmode-option[mode="'+ this.column.dragMode +'"]').addClass('dcg-selected');
    };

    view.renderDragModeVisible = function () {
      this.$('.dcg-drag-div').toggle(!!this.column.draggable);
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      this.$().on('dcg-tap dcg-tapstart', '.dcg-columnmode-option', this.onSelectColumnMode.bind(this));
      this.$().on('dcg-tap dcg-tapstart', '.dcg-dragmode-option', this.onSelectDragMode.bind(this));

      var self = this;
      var col = this.column;
      col.observeAndSync('color.' + this.guid, function () {
        self.renderColorCSS();
      });
      col.observeAndSync('dragMode.' + this.guid, function () {
        self.renderSelectedDragMode();
      });
      col.observeAndSync('draggable.'+ this.guid, function () {
        self.renderDragModeVisible();
      });
      col.observeAndSync('columnMode.'+ this.guid +' shouldGraph.'+ this.guid, function () {
        self.renderSelectedColumnMode();
      });

      // this view has a nested template. We instantiate the color picker
      // and replace a placeholder element within the html.
      var colorsView = ColorMenuView(this.column);
      colorsView.replace(this.$('.template-colorsview'));
    };

    view.onSelectColumnMode = function (evt) {
      // when using mouse, fire on 'dcg-tapstart' and when on touch we
      // fire on the 'dcg-tap' event.
      if (evt.type === 'dcg-tap' && evt.device === 'mouse') return;
      if (evt.type === 'dcg-tapstart' && evt.device === 'touch') return;

      var columnMode = $(evt.target).closest('.dcg-columnmode-option').attr('mode');

      // the column is visible and we've clicked the same columnMode again; hide the column and return
      if (!this.column.hidden && this.column.columnMode === columnMode) {
        this.column.setProperty('hidden', true);
        return;
      }

      this.column.setProperty('columnMode', columnMode);
      this.column.setProperty('hidden', false);

      // making column visible should make folder visible
      var folder = this.column.table.folder;
      if (folder) {
        folder.setProperty('hidden', false);
      }
    };

    view.onSelectDragMode = function (evt) {
      // when using mouse, fire on 'dcg-tapstart' and when on touch we
      // fire on the 'dcg-tap' event.
      if (evt.type === 'dcg-tap' && evt.device === 'mouse') return;
      if (evt.type === 'dcg-tapstart' && evt.device === 'touch') return;
      var dragMode = $(evt.target).closest('.dcg-dragmode-option').attr('mode');
      if (this.column.dragMode !== dragMode) {
        this.column.setProperty('dragMode', dragMode);
      } else {
        this.column.setProperty('dragMode', DRAGMODE.NONE);
      }
    };
  });

  return TableColorMenuView;
});
define('expressions/table_icon_view',['require','./abstract_icon','pjs','template!table_icon','graphing/columnmode','./table_column_menu_view','jquery.handleevent','conditional_blur'],function(require){
  var AbstractIconView = require('./abstract_icon');
  var P = require('pjs');
  var template = require('template!table_icon');
  var COLUMNMODE = require('graphing/columnmode');
  var TableColumnMenuView = require('./table_column_menu_view');
  require('jquery.handleevent');
  var conditionalBlur = require('conditional_blur');

  var TableIconView = P(AbstractIconView, function (view, _super) {
    view.template = template;

    view.init = function (parentView) {
      _super.init.call(this, parentView);
      this.column = this.model;
      this.tableView = parentView.tableView;
      this.listView = this.tableView.listView;
      this.column.observe('color.iconview', this.renderColorCSS.bind(this));
      this.column.observe('error.iconview', this.onDisplayChange.bind(this));
      this.column.observe('columnMode.iconview', this.onDisplayChange.bind(this));
      this.column.observe('shouldGraph.iconview', this.onDisplayChange.bind(this));
      this.tableView.observeEvent('hideContextMenu.iconview', this.hideOptions.bind(this));
    };

    view.destruct = function () {
      _super.destruct.call(this);
      this.column.unobserve('.iconview');
      this.tableView.unobserve('.iconview');
    };

    view.renderErrorShown = function () {
      this.$('.dcg-icon').toggleClass('dcg-error', !!this.errorShown);
      this.$().closest('.dcg-cell').toggleClass('dcg-error', !!this.errorShown);
    };

    view.renderColorCSS = function() {
      this.$('.dcg-variable-colorcss').css('border-color', this.column.color);
      this.$('.dcg-variable-colorcss').css('background', this.column.color);
    };

    view.toggleGraphShown = function() {
      if (!this.column.isGraphable) return;
      if (this.errorShown) return;

      // Trying to edit whether a graph is shown in a hidden folder should
      // show the folder.
      if (this.model.table.folder && this.model.table.folder.hidden) {
        this.model.table.folder.setProperty('hidden', false);
        this.column.setProperty("hidden", false);
        return;
      }

      this.column.setProperty("hidden", !this.column.hidden);
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      var self = this;
      function handleIconTap (evt) {
        if (evt.wasLongheld()) return;
        if (self.optionsShown) {
          self.hideOptions();
          return;
        }
        if (self.listView.editListMode) {
          self.toggleOptions();
        } else {
          self.toggleGraphShown();
        }
      }

      function handleIconLongHold (evt) {
        if (self.optionsShown) return;
        self.toggleOptions(); // will create TableColumnMenuView
      }

      function handleIconTapStart (evt_orig) {
        if (self.optionsShown) return;
        if (evt_orig.touches.length !== 1) return;

        conditionalBlur();
      }

      this.$('.dcg-action-icon').on('dcg-tap', handleIconTap);
      this.$('.dcg-action-icon').on('dcg-longhold', handleIconLongHold);
      this.$('.dcg-action-icon').on('dcg-tapstart', handleIconTapStart);

      this.renderColorCSS();
      this.onDisplayChange();

      this.$icon = this.$('.dcg-icon');
    };

    view.createOptionsMenuView = function () {
      var optionsView = TableColumnMenuView(this, this.column);
      optionsView.appendTo(this.listView.$());

      // putting the column menu view at the topLeft of the .dcg-icon-box
      // it's up to the column menu view's css to position it beyond that
      var placeholder = this.$('.dcg-icon-box');
      var placeholderOffset = placeholder.offset();
      var listViewOffset = this.listView.$().offset();
      optionsView.$().css({
        position: 'absolute',
        top: placeholderOffset.top - listViewOffset.top + 'px',
        left: placeholderOffset.left - listViewOffset.left + 'px',
        display: 'block' //wait until we know where it is to show it. fixes #3154
      });

      return optionsView;
    };

    view.onDisplayChange = function () {
      _super.onDisplayChange.call(this);
      if (!this.$icon) return;

      var shouldGraph = this.column.shouldGraph;
      var columnMode = this.column.columnMode;
      var isGraphable = this.column.isGraphable;
      var icon_class = '';

      if (this.error || !isGraphable) {
        icon_class = '';
      } else {

        if (!shouldGraph) {
          icon_class = 'dcg-graph-hidden';
        } else if (columnMode === COLUMNMODE.POINTS) {
          icon_class = 'dcg-table-points';
        } else if (columnMode === COLUMNMODE.LINES) {
          icon_class = 'dcg-table-lines';
        } else if (columnMode === COLUMNMODE.POINTS_AND_LINES) {
          icon_class = 'dcg-table-points-and-lines';
        }

      }

      // efficently changes the class of the icon
      if (this.rendered_icon_class === icon_class) return;
      if (this.rendered_icon_class) {
        this.$icon.removeClass(this.rendered_icon_class);
      }
      this.rendered_icon_class = icon_class;
      if (icon_class) {
        this.$icon.addClass(icon_class);
      }

    };
  });

  return TableIconView;
});
define('template!table', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="dcg-expressionitem dcg-expressiontable dcg-shell">\n  <div class=\'dcg-shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="dcg-expressionitem dcg-expressiontable">\n\n  <div class=\'dcg-fade-container dcg-disable-horizontal-scroll-to-cursor\'>\n\n    <span class="dcg-main">\n      <div class="dcg-tabledata">\n\n        ';
 _.each(columns, function (column, c) { 
;__p+='\n          <div class="dcg-column">\n\n            ';

               print(templates.table_cell_header());

               _.each(columns[0].cells, function (junk, r) {
                 print(templates.table_cell_body())
               });
            
;__p+='\n\n          </div>\n        ';
 }); 
;__p+='\n\n      </div>\n    </span>\n\n    ';
 //covers up the right hand side of an overflowing table 
;__p+='\n    <span class="dcg-fadeout"></span>\n    <i class="dcg-icon-remove dcg-top-level-delete dcg-action-delete" handleEvent="true"></i>\n  </div>\n\n  <span class="dcg-tab dcg-action-drag"\n        handleevent="true"\n        tapboundary="true"\n        disablescroll="true"\n  >\n    <span class=\'dcg-num dcg-variable-index\'></span>\n    <div class=\'dcg-tab-interior\'></div>\n  </span>\n\n  <span class=\'dcg-exp-actions\'>\n\n    <span\n      class="dcg-action-delete dcg-delete-btn dcg-tooltip"\n      handleEvent="true"\n      tooltip="'+
( t('Delete') )+
'"\n    >\n      <i class=\'dcg-icon-remove\'></i></span>\n    </span>\n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('template!table_cell_body', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-empty dcg-cell">\n  <div class="dcg-inner-border"></div>\n  <span class="dcg-error-indicator dcg-do-not-blur tipsy-sticky" handleevent="true">\n  </span>\n\n  <span class="dcg-math-field dcg-cell-math-content"></span>\n  <div class="dcg-empty-line"></div>\n</div>\n';
}
return __p;
};});
define('template!table_cell_header', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-cell dcg-table-header">\n  <div class="dcg-inner-border"></div>\n  <span class="template-icon"></span>\n  <span class="dcg-math-field dcg-cell-math-content"></span>\n  <span class="dcg-drag-icon">\n    <i class="dcg-icon-move"></i>\n    <i class="dcg-icon-move-horizontal"></i>\n    <i class="dcg-icon-move-vertical"></i>\n  </span>\n  <span class="dcg-fadeout"></span>\n  <span class="dcg-action-removecolumn dcg-icon-remove dcg-do-not-blur" handleevent="true"></span>\n  <div class="dcg-empty-line"></div>\n</div>\n';
}
return __p;
};});
define('expressions/table_view',['require','loadcss!css/expressions.table','jquery','underscore','pjs','underscore_view','mathquill','jquery.handleevent','keys','conditional_blur','i18n','./abstractitem_view','./table_icon_view','analytics/google_analytics','template!table','template!table_cell_body','template!table_cell_header'],function(require) {
  require('loadcss!css/expressions.table');
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var MathQuill = require('mathquill');
  require('jquery.handleevent');
  var Keys = require('keys');
  var conditionalBlur = require('conditional_blur');
  var i18n = require('i18n');

  var AbstractItemView = require('./abstractitem_view');
  var TableIconView = require('./table_icon_view');
  var ga = require('analytics/google_analytics');

  var templates = {};

  templates.table = require('template!table');
  templates.table_cell_body = require('template!table_cell_body');
  templates.table_cell_header = require('template!table_cell_header');

  var TableView = P(AbstractItemView, function(view, _super) {

    view.template = templates.table;

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);

      this.model.triggerRowRemoved = this.onRowRemoved.bind(this);
      this.model.triggerRowAdded = this.onRowAdded.bind(this);
      this.model.triggerColumnAdded = this.onColumnAdded.bind(this);
      this.model.triggerColumnRemoved = this.onColumnRemoved.bind(this);
      this.model.triggerColumnMoved = this.onColumnMoved.bind(this);
      this.model.observe('changingMultipleCells.' + this.guid, this.onChangingMultipleCells.bind(this));
      this.model.observe('selectedCell.' + this.guid, this.onSelectedCellChange.bind(this));
      this.model.observe('inCollapsedFolder.' + this.guid, function () {
        if (!this.model.inCollapsedFolder) {
          //even though we render initially when you open a collapsed folder,
          //I think we still need this for the following (absurd) edge case:
          //* open folder
          //* close folder
          //* toggle projector mode
          //* open folder
          this.recomputeAllRowHeights();
        }
      }.bind(this));
    };

    view.destruct = function () {
      this.model.unobserve('.' + this.guid);

      function noop () {}
      this.model.triggerRowRemoved = noop;
      this.model.triggerRowAdded = noop;
      this.model.triggerColumnAdded = noop;
      this.model.triggerColumnRemoved = noop;
      this.model.triggerColumnMoved = noop;
    };

    view.getTemplateParams = function () {
      return {
        columns: this.model.columns,
        renderShell: this.model.renderShell,
        templates: templates
      };
    };

    view.onChangingMultipleCells = function () {
      // we're done making multiple changes. check if any cell changes
      // requested a syncRow
      if (!this.model.changingMultipleCells) {
        if(this.__syncRowRequestedDuringBatchedUpdate) {
          this.__syncRowRequestedDuringBatchedUpdate = false;
          this.syncAllRowHeights();
        }
      }
    };

    view.onRowRemoved = function (index) {
      if (!this.columnViews) return;

      // index starts at 0 for row under headers. columnViews starts at 0
      // including header. Make the adjustment here.
      var r = index+1;

      // remove the cells
      for (var c = 0; c < this.columnViews.length; c++) {
        var cellView = this.columnViews[c].splice(r, 1)[0];
        cellView.remove();
      }

      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };

    view.onRowAdded = function (index) {
      if (!this.columnViews) return;

      // index starts at 0 for row under headers. columnViews starts at 0
      // including header. Make the adjustment here.
      var r = index+1;
      var cell;
      var cellView;
      var columns = this.model.columns;
      var columnCount = this.columnViews.length;
      var $columns = this.$('.dcg-column');

      for (var c = 0; c < columnCount; c++) {
        cell = columns[c].cells[index];

        // insert new cells into columns to form a row
        cellView = CellView(cell, this);
        cellView.insertAfter($columns.eq(c).find('.dcg-cell:nth-of-type('+r+')'));

        this.columnViews[c].splice(r, 0, cellView);
      }

      this.syncRowHeight(r);

      this.listView.model.updateDrawOrder();

      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };

    view.onColumnRemoved = function (index) {
      if (!this.columnViews) return;

      // remove the cells and then the entire column
      var columnCellViews = this.columnViews.splice(index, 1)[0];
      for (var i=0; i < columnCellViews.length; i++) {
        columnCellViews[i].remove();
      }
      this.$('.dcg-column:nth-child('+(index+1)+')').remove();

      var cell = this.selectedCell;

      if (cell && cell.column > index) {
        // selection was after the deleted column, so decrease selected
        // column.
        this.setProperty('selectedCell', {row: cell.row, column: cell.column-1});
      } else if (cell && cell.column === index) {
        // deleted column was selected, so we need to try to select another
        // one.

        if (this.columns.length <= index) {
          // we just deleted the last column, so we have to select the one
          // to the left of where we just deleted
          this.selectCell(cell.row, cell.column-1);
        } else {
          // we can put focus back in the column that just slid into the
          // deleteded one's place.
          this.selectCell(cell.row, cell.column);
        }
      } else {
        // don't need to do anything because the deleted column was after the
        // selected column. Or, there was no selected column.
      }

      this.syncAllRowHeights();

      this.listView.model.updateDrawOrder();

      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };

    view.onColumnAdded = function (index) {
      if (!this.columnViews) return;

      var column = this.model.columns[index];
      var cells = column.cells;
      var i, views = [];

      // create header
      views.push(HeaderView(column, this));

      // create each cell for each row
      for (i=0; i<cells.length-1; i++) {
        views.push(CellView(cells[i], this));
      }

      // add bottom cell
      views.push(BottomCellView(cells[i], this));

      this.columnViews.splice(index, 0, views);

      // add a column to the table
      var $column = $('<div class="dcg-column"></div>').insertAfter(this.$('.dcg-column:nth-child('+index+')'));

      // add each cell view to the column
      views.forEach(function (view, i) {
        view.appendTo($column);
      });

      this.syncAllRowHeights();

      this.listView.model.updateDrawOrder();

      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };

    view.onColumnMoved = function (from, to) {
      if (!this.columnViews) return;
      var columnView = this.columnViews.splice(from, 1)[0];
      this.columnViews.splice(to, 0, columnView);

      // remove the column and insert somewhere else
      var $movedColumn = this.$('.dcg-column:nth-child('+(from+1)+')').detach();
      $movedColumn.insertAfter(this.$('.dcg-column:nth-child('+(to)+')'));
    };

    view.onProjectorModeChange = function () {
      this.recomputeAllRowHeights();
    };

    view.didCreateElement = function () {
      var self = this;
      this.$().on('focusin', function(){
        setTimeout(self.onFocusChange.bind(self),0);
      });
      this.$().on('keydown', this.onMathQuillKeydownEvent.bind(this));
      this.$().on(
        'upPressed downPressed leftPressed rightPressed enterPressed backspacePressed delPressed',
        this.onMathQuillSpecialEvent.bind(this)
      );
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      if (this.model.renderShell) return;

      this.columnViews = [];

      // all the cells are placed in the dom, but they aren't setup yet.
      // optimization: could walk through the table more efficiently to access
      // the cell's dom element rather than doing a this.findCell(r,c) every
      // time. Could walk left to right, top to bottom.
      var columns = this.model.columns;
      var columnCount = columns.length;
      var rowCount = columns[0].cells.length;
      var r,c,cell,cellView;

      // setup header cells
      for (c=0; c < columnCount; c++) {
        cell = columns[c];

        if (c+1 < columnCount) {
          cellView = HeaderView(cell, this);
        } else {
          cellView = RightHeaderView(cell, this);
        }

        cellView.setDomNode(this.findCell(0,c));
        this.columnViews[c] = [cellView];
      }

      // setup body cells
      var bottomRow = rowCount;

      for (r=1; r <= rowCount; r++) {
        for (c=0; c < columnCount; c++) {
          cell = columns[c].cells[r-1];

          if (r === bottomRow) {
            cellView = BottomCellView(cell, this);
          } else {
            cellView = CellView(cell, this);
          }

          cellView.setDomNode(this.findCell(r,c));

          this.columnViews[c].push(cellView);
        }
      }

      this.syncAllRowHeights();
      this.onSelectedCellChange();
    };

    view.measureRowHeight = function (row) {
      var maxCollapsedHeight = 0;

      for (var i=0; i<this.columnViews.length; i++) {
        var cellView = this.columnViews[i][row];

        // make sure we've measured this cell before. Newly created cells are collapsed but unmeasured
        if (cellView.collapsedHeight === undefined) {
          cellView.measureHeight();
        }

        if (cellView.collapsedHeight > maxCollapsedHeight) {
          maxCollapsedHeight = cellView.collapsedHeight;
        }
      }

      return maxCollapsedHeight;
    };

    view.setRowHeight = function (row, height) {
      for (var i=0; i<this.columnViews.length; i++) {
        var cellView = this.columnViews[i][row];
        cellView.setHeight(height);
        cellView.setMathquillTop();
      }
    };

    view.recomputeAllRowHeights = function () {
      if (!this.columnViews) return;
      // must collapse all cells first
      for (var i=0; i<this.columnViews.length; i++) {
        var views = this.columnViews[i];
        for (var j=0; j<views.length; j++) {
          views[j].collapseHeight();
        }
      }

      this.syncAllRowHeights();
    };

    // is called when entire table needs updated
    view.syncAllRowHeights = function () {
      if (this.model.inCollapsedFolder) return;

      var row;
      var rows = this.columnViews[0].length;
      var heights = [];

      for (row=0; row<rows; row++) {
        heights.push(this.measureRowHeight(row));
      }

      for (row=0; row<rows; row++) {
        this.setRowHeight(row, heights[row]);
      }
    };

    view.syncRowHeight = function (row) {
      // optimizes the case that multiple cells are being updated at once.
      // instead of measuring row heights for each value update, we wait until
      // the last cell is changed and measure all rows once.
      if (this.model.changingMultipleCells) {
        this.__syncRowRequestedDuringBatchedUpdate = true;
      } else {
        this.setRowHeight(row, this.measureRowHeight(row));
      }
    };

    view.onSelectedCellChange = function () {
      if (!this.columnViews) return;

      // could optimize by remembering what cell last had selected class
      this.$('.dcg-tabledata .dcg-selected').removeClass('dcg-selected');

      var cell = this.model.selectedCell;

      // TODO - set selectedCell = null at time the cell is deleted rather than
      // catch it here. This is a bit hacky.
      // make sure cell isn't out of range
      if (cell) {
        if (cell.column >= this.columnViews.length || cell.row >= this.columnViews[0].length) {
          this.model.selectedCell = null; //silently overwrite the property. won't fire observers
          return;
        }
      }

      if (cell) {
        var cellView = this.columnViews[cell.column][cell.row];
        cellView.$().addClass('dcg-selected');

        this.model.setProperty('selected', true);
      }

      // if the cell with focus isn't selected, then remove focus
      var caret = this.getCaretPosition();
      if (caret && !_.isEqual(caret, cell)) {
        if (document.activeElement) {
          conditionalBlur();
        }
      }

      // need to do this manually if the cell that's focused is not editable.
      // these handlers are what hide/show keypad.
      if (cell) {
        var input = this.findCellMathContent(cell.row, cell.column).el();
        this.listView.onFocusIn({target: input});
      } else {
        this.listView.onFocusOut();
      }

      var no_faded_h = cell && cell.column+1 === this.model.columns.length;
      var no_faded_v = cell && cell.row === this.model.columns[0].cells.length;
      this.$().toggleClass('dcg-no-faded-h', !!no_faded_h);
      this.$().toggleClass('dcg-no-faded-v', !!no_faded_v);

      this.hideContextMenu();

      var lastRowSelected = (
        this.model.selectedCell &&
        this.model.selectedCell.row === this.model.columns[0].cells.length
      );

      this.setProperty('lastRowSelected', lastRowSelected);
    };

    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();

      // use .originalEvent.target to ignore the bounds-checking stuff that
      // touchtracking.js does, because the cursor handle can (and in fact
      // usually does) stick out of the td's bounding box
      var td = $(evt.originalEvent.target).closest('.dcg-cell');
      var editable = td.find('.mq-editable-field');
      if (editable.length) {
        this.sendTapToMathQuill(evt, editable);
        return;
      }

      var target = $(evt.target);
      var table = target.closest('.dcg-tabledata')[0];

      // if we're clicking on the table itself, we don't know which cell
      // we meant to click. We'll just act like we clicked the outer padding.
      // that's not terrible, because for us to reach this point, we must
      // have clicked in seemingly blank space anyways.
      if (table && evt.target === table) {
        table = null;
      }

      if (!table) {
        if (document.activeElement) conditionalBlur();

        this.model.setProperty('selectedCell', null);
        this.model.setProperty('selected', true);
        return;
      }

      //select the uneditable cell
      var cell = this.getNodesCellPosition(target);
      this.selectCell(cell.row, cell.column);
    };

    view.getNodesCellPosition = function (node) {
      var c = node.closest('.dcg-column').prevAll('.dcg-column').length;
      var r = node.closest('.dcg-cell').prevAll('.dcg-cell').length;
      return {row: r, column: c};
    };

    view.getCaretPosition = function () {
      if (this.$().find(document.activeElement).length) {
        return this.getNodesCellPosition($(document.activeElement));
      } else {
        return null;
      }
    };

    view.findCell = function (r ,c) {
      return this.$('.dcg-column:nth-of-type('+(c+1)+') .dcg-cell:nth-of-type('+(r+1)+')');
    };

    view.findCellMathContent = function (r, c) {
      return MathQuill(this.findCell(r,c).find('.dcg-cell-math-content')[0]);
    };

    view.selectCell = function (r, c, selectEnd) {
      if (r < 0 || c < 0) return;

      var math = this.findCellMathContent(r, c);
      if (!math) return;

      var newSelectedCell = {row: r, column: c};
      this.model.setProperty('selectedCell', newSelectedCell);

      if (math instanceof MathQuill.MathField) {
        math.focus();
        if (selectEnd) {
          math.moveToRightEnd();
        } else {
          math.select();
        }
      } else {
        conditionalBlur();
      }
    };

    view.unfocus = function () {
      var active = document.activeElement;
      if (this.$().find(active).length) {
        active.blur();
      }
    };

    view.processMissedKeyEvent = function (evt) {
      this.doKeyAction(Keys.lookup(evt), evt);
    };

    view.onMathQuillKeydownEvent = function (evt) {
      var key = Keys.lookup(evt);
      if (key === Keys.Tab || key === Keys.ESCAPE) {
        this.doKeyAction(key, evt);
      }
    };

    view.onMathQuillSpecialEvent = function (evt) {
      var evt_type = evt.type;
      var key = evt_type.slice(0, -('Pressed'.length));
      key = key.charAt(0).toUpperCase() + key.slice(1);
      this.doKeyAction(key, evt);
    };

    view.doKeyAction = function (key, evt) {
      /* jshint maxcomplexity:24 */
      // it's possible this came from a fake key event (keypad for example)
      // just create a dumby event so that evt.preventDefault() is callable.
      if (!evt) evt = $.Event();

      var list = this.listView.model;

      var selectedCell = this.model.selectedCell;
      var r_orig = selectedCell ? selectedCell.row : -1;
      var c_orig = selectedCell ? selectedCell.column : -1;

      var columns = this.model.columns;
      var totalRows = columns[0].cells.length;
      var totalCols = columns.length;

      var _move = function (r, c) {

        // try to wrap it around up one row and to the very right.
        if (r === -1) {
          this.triggerUpPressed();
        } else if ( r > totalRows) {
          this.triggerDownPressed();
        } else {

          // wrap around the left side. goes up a row and to the far right.
          if (c === -1) {
            c = totalCols-1;
            r--;

          // wrap around the right side. goes down a row and to the far left.
          } else if (c === totalCols) {
            r++;
            c=0;
          }

          this.selectCell(r, c);
          evt.preventDefault();
        }
      }.bind(this);

      var _deleteRow = function (r) {

        // don't delete the last row
        if (totalRows <= 1) return;

        // remove the old row
        this.model.removeRow(r_orig-1);

        this.selectCell(r, c_orig);
        evt.preventDefault();
      }.bind(this);

      var _deleteColumn = function (c) {
        // don't delete the first col, and don't delete one of last two cols
        if ( c_orig === 0 || totalCols <= 2) return;

        // remove the old row
        this.model.removeColumn(c_orig);

        this.selectCell(r_orig, c);
        evt.preventDefault();
      }.bind(this);

      switch (key) {

        case Keys.LEFT:  _move(r_orig, c_orig-1);  break;
        case Keys.RIGHT:  _move(r_orig, c_orig+1); break;
        case Keys.UP:  _move(r_orig-1, c_orig);    break;
        case Keys.DOWN:  _move(r_orig+1, c_orig);  break;

        case Keys.ENTER:
          //at the end, we add a new expression underneath
          if (r_orig >= totalRows) return this.triggerEnterPressed();

          //in later columns, we just move down
          if (c_orig > 0) return _move(r_orig + 1, c_orig);

          //in the last row of the first column, we auto-populate
          if (r_orig === totalRows - 1) {
            this.model.insertRow(r_orig, this.model.getAutofillValues(r_orig));
            return this.selectCell(r_orig+1, c_orig);
          }

          //default in first column: insert blank row
          this.model.insertRow(r_orig, c_orig);
          this.selectCell(r_orig+1, c_orig);
          break;

        case Keys.ESCAPE:
          conditionalBlur();
          this.model.setProperty('selectedCell', null);
          break;

        case Keys.TAB:

          // if focus isn't within the table, then prevent tab default.
          if ($(document.activeElement).closest(this.$()).length === 0) {
            evt.preventDefault();
            return;
          }
          break;

        case Keys.BACKSPACE:
          if (r_orig === 0) {
            if(c_orig === 0){ //backspace in empty top-left cell removes whole table
              this.triggerBackspacePressed();
              list.undoRedo.triggerFlash();
            }

            // move left if you're the rightmost column or in only column after the first
            else if (c_orig === totalCols-1 || c_orig === 1 && totalCols === 3) {
              _move(0, c_orig-1);
            }

            else {
              _deleteColumn(c_orig-1);
            }

          } else if (c_orig !== 0) {
            _move(r_orig, c_orig-1);
          } else if (r_orig === totalRows) {
            // backspace in bottom row simply moves up a row.
            _move(r_orig-1, c_orig);
          } else {
            _deleteRow(r_orig-1);
          }
          break;

        case Keys.DELETE:
          if (r_orig === 0) {
            if(c_orig === 0){
              this.triggerDelPressed();
              list.undoRedo.triggerFlash();
            }

            // only delete column if its not on the far right
            else if (c_orig < totalCols-1) {
              _deleteColumn(c_orig);
            }

          } else if (r_orig >= totalRows) {
            // can't delete last row
          } else {
            _deleteRow(r_orig);
          }
          break;
      }
    };

    view.onFocusChange = function() {
      if (!this.model) return;
      this.model.setProperty('selectedCell', this.getCaretPosition());
      if (!this.model.list) return;
      //changing selection within a table should be treated like other instances of selection changing
      //for example: we want to ensureActiveChildIsVisible in list_view
      this.model.list.notifyPropertyChange('selectedItem');
    };


    view.isFocused = function () {
      return !!this.model.selectedCell;
    };

    view.addFocus = function (where, r, c) {
      if (where === 'cell') {
        this.selectCell(r,c);
      }

      else if (where !== 'end') {
        this.selectCell(0,0);
      }

      else {
        this.selectCell(this.model.columns[0].cells.length, 0);
      }
    };

  });


  // a view that will be a cell within a div-based table. it contains machinery to measure and set the cell's
  // height. That's important for syncing the heights of all cells in a 'row'
  var DivCellView = P(UnderscoreView, function (divCellView, _super) {

    divCellView.init = function () {
      _super.init.call(this);

      this.collapsedHeight = undefined;
      this.renderedHeight = undefined;
      this.mathquillTop = 0;
    };

    // overridden by subclass
    divCellView.lookupCellPosition = function () {};

    divCellView.handleHeightUpdate = function () {
      this.collapseHeight();
      this.tableView.syncRowHeight(this.lookupCellPosition().row);
    };

    // removes the height style of the cell. It'll collapse down to the size of the contents
    // NOTE: this.collapsedHeight and this.renderedHeight will be invalid after this
    //       it's up to whomever calls this to make sure measureHeight is called
    //       at an appropriate time. The two have been split for potential performance reasons.
    divCellView.collapseHeight = function () {
      this.$().css('height', '');
      this.collapsedHeight = undefined;
      this.renderedHeight = undefined;
    };

    // measures the current height. It's assumed that the cell is collapsed; otherwise you
    // could have just read this.renderedHeight directly
    divCellView.measureHeight = function () {
      this.collapsedHeight = this.$().outerHeight();
      this.renderedHeight = this.collapsedHeight;
    };

    // sets the new height of the cell
    divCellView.setHeight = function (height) {
      if (this.renderedHeight !== height) {
        this.renderedHeight = height;
        this.$().css('height', height);
      }
    };

    // moves mathquill to the bottom of the cell
    divCellView.setMathquillTop = function () {
      var mathquillTop = this.renderedHeight - this.collapsedHeight;
      if (mathquillTop !== this.mathquillTop) {
        this.mathquillTop = mathquillTop;
        this.$('.dcg-cell-math-content').css('top', mathquillTop);
      }
    };
  });

  var RightHeaderView = P(DivCellView, function(headerView, _super) {
    headerView.template = templates.table_cell_header;

    headerView.init = function (model, tableView) {
      _super.init.call(this);

      this.model = model;
      this.tableView = tableView;
    };

    headerView.lookupCellPosition = function () {
      return {
        row: 0,
        column: this.model.index
      };
    };

    headerView.didInsertElement = function () {
      _super.didInsertElement.call(this);

      // it's the right side
      this.$().addClass('dcg-right');
      this.$().append('<span class="dcg-fade-right"></span>');

      this.mathField = MathQuill.MathField(this.$('.dcg-math-field')[0]);

      var self = this;
      this.$().on('blur focusout', '.dcg-math-field', function () {
        self.mathField.clearSelection();
      });

      this.$().on('render', '.dcg-math-field', function () {
        var latex = MathQuill(this).latex();
        if (!latex) return;

        // set latex back to blank
        MathQuill(this).latex('');

        var index = self.model.index;
        self.model.table.insertColumn(index , {latex: latex});

        // select the new cell and put focus at end
        self.tableView.selectCell(0, index, true);
      });
    };

  });

  var HeaderView = P(DivCellView, function(headerView, _super) {
    headerView.template = templates.table_cell_header;

    headerView.init = function (model, tableView) {
      _super.init.call(this);
      this.__renderedLatex = '';
      this.__renderedBefore = false;

      this.model = model;
      this.tableView = tableView;

      // TODO - get rid of a need to put index in html
      this.model.observe('index.headerview', this.updateIndex.bind(this));
      this.model.observe('latex.headerview', this.onLatexChange.bind(this));
      this.model.observe('selected.headerview', this.onSelectedChange.bind(this));
    };

    // it's possible to select the headers during trace, so we need
    // to make sure we focus the header too
    headerView.onSelectedChange = function () {
      if (this.model.selected) {
        var tableView = this.tableView;
        if (!tableView) return;

        tableView.selectCell(0, this.model.index);
      }
    };

    headerView.lookupCellPosition = function () {
      return {
        row: 0,
        column: this.model.index
      };
    };

    headerView.destruct = function () {
      this.model.unobserve('.headerview');
    };

    headerView.updateIndex = function () {
      this.$().attr('index', this.model.index);
    };

    headerView.onLatexChange = function () {
      if (!this.mathField) return;

      if (this.__renderedLatex !== this.model.latex) {
        this.__renderedLatex = this.model.latex;
        this.mathField.latex(this.model.latex);
      }

      if (this.__renderedBefore) this.handleHeightUpdate();
      this.__renderedBefore = true;
    };

    headerView.renderDragMode = function () {
      this.$('.dcg-drag-icon').attr('dcg-drag-mode', this.model.dragMode);
      this.$('.dcg-drag-icon').css('color', this.model.color);
    };

    headerView.didInsertElement = function () {
      _super.didInsertElement.call(this);

      if (this.model.index === 0) {
        this.$().addClass('dcg-left');
      }

      this.mathField = MathQuill.MathField(this.$('.dcg-math-field')[0]);
      // TODO - move these mathquill handlers up to the table view instead of
      // assigning them on each table cell individually
      var self = this;
      this.$().on('blur focusout', '.dcg-math-field', function () {
        self.mathField.clearSelection();
      });
      this.$().on('dcg-tap', '.dcg-action-removecolumn', function () {
        ga.send(['_trackEvent', 'edit-list-mode', 'delete table column']);
        self.model.table.removeColumn(self.model.index);
      });
      this.$().on('render', '.dcg-math-field', function () {
        var oldLatex = self.model.latex;
        var newLatex = MathQuill(this).latex();
        if (oldLatex === newLatex) return;

        self.__renderedLatex = newLatex;
        self.model.setProperty('latex', newLatex);
      });

      this.iconView = TableIconView(this);
      this.iconView.replace(this.$('.template-icon'));

      this.onLatexChange();
      this.updateIndex();
      this.model.observeAndSync('dragMode color', this.renderDragMode.bind(this));
    };
  });


  var BaseCellView = P(DivCellView, function (cellView, _super) {
    cellView.template = templates.table_cell_body;

    cellView.init = function (model, tableView) {
      _super.init.call(this);

      this.model = model;
      this.tableView = tableView;

      this.__renderedDisabled = false;
      this.__renderedValue = '';
      this.__renderedError = '';
      this.__renderedBefore = false;
    };

    cellView.didInsertElement = function () {
      _super.didInsertElement.call(this);

      if (this.model.column === _.first(this.model.column.table.columns)) {
        this.$().addClass('dcg-left');
      }

      if (this.model.column === _.last(this.model.column.table.columns)) {
        this.$().addClass('dcg-right');
        this.$().append('<span class="dcg-fade-right"></span>');
      }

      if (this.model === _.last(this.model.column.cells)) {
        this.$().addClass('dcg-bottom');
        this.$().append('<span class="dcg-fade-bottom"></span>');
      }
    };

    cellView.lookupCellPosition = function () {
      var cells = this.model.column.cells;
      var cell = this.model;

      return {
        row: _.indexOf(cells, cell) + 1, //because there is a header above it
        column: this.model.column.index
      };
    };

    cellView.onValueChange = function () {
      var oldValue = this.model.getOldProperty('value');
      var value = this.model.value;
      this.$().toggleClass('dcg-empty', !value);

      if (!this.mathField) return;

      if (this.__renderedValue !== value) {
        this.__renderedValue = value;

        if (this.__renderedDisabled) {
          this.staticValue.latex(value);
        }

        else {
          this.mathField.latex(value);
        }
      }

      // we were a single line and are still a single line if the oldValue and new value
      // are both (a simple number OR empty). If this has happened, we don't need to
      // update the height of this cell. It hasn't changed.
      var stillSingleLine = (!oldValue || isFinite(oldValue)) && (!value || isFinite(value));
      if (this.__renderedBefore && !stillSingleLine) this.handleHeightUpdate();
      this.__renderedBefore = true;
    };

    cellView.onDisabledChange = function () {
      var disabled = !!this.model.column.disabled;
      if (!this.mathField || this.__renderedDisabled === disabled) return;
      this.__renderedDisabled = disabled;

      this.$().toggleClass('dcg-non-editable', !!disabled);

      // revert mathquill to not editable
      if (disabled) {
        $(this.mathField.el()).before(this.staticValue.latex(this.model.value || '').el()).detach();

        // created a new mathquill, so mark that it's not shifted down at all
        this.mathquillTop = 0;
      }

      // make mathquill editable
      else {

        // TODO - The empty underline is the wrong size if we make
        // mathquill editable in the same code loop as when the td
        // is added to the dom. Not sure how to fix that.
        $(this.staticValue.el()).before(this.mathField.latex(this.model.value || '').el()).detach();
      }
    };

    cellView.onErrorChange = function () {
      var error = this.model.error ? i18n.unpack(this.model.error) : '';

      if (!this.$error || this.__renderedError === error) return;
      this.__renderedError = error;

      this.$error.attr('tooltip', error);
      this.$().toggleClass('dcg-error', !!error);
    };
  });

  var BottomCellView = P(BaseCellView, function (cellView, _super) {

    cellView.init = function (model, tableView) {
      _super.init.call(this, model, tableView);

      this.model.column.observe('disabled.cellview', this.onDisabledChange.bind(this));
    };

    cellView.destruct = function () {
      this.model.column.unobserve('.cellview');
    };

    cellView.didInsertElement = function () {
      _super.didInsertElement.call(this);

      this.mathField = MathQuill.MathField(this.$('.dcg-math-field')[0]);
      this.staticValue = MathQuill.StaticMath($('<span class="dcg-cell-math-content">')[0]);

      this.onDisabledChange();

      var self = this;
      this.$().on('blur focusout', '.dcg-math-field', function () {
        self.mathField.clearSelection();
      });

      this.$().on('render', '.dcg-math-field', function () {
        var latex = MathQuill(this).latex();
        if (latex === '') return;

        // add a row
        MathQuill(this).latex('');
        var position = self.lookupCellPosition();

        var table = self.model.column.table;

        var rowValues = [];
        for (var i=0; i < table.columns.length; i++) {
          rowValues[i] = '';
        }

        rowValues[position.column] = latex;
        table.insertRow(position.row-1, rowValues);
        self.tableView.selectCell(position.row, position.column, true);
      });
    };
  });

  var CellView = P(BaseCellView, function (cellView, _super) {

    cellView.template = templates.table_cell_body;
    cellView.init = function (model, tableView) {
      _super.init.call(this, model, tableView);

      this.model.observe('value.cellview', this.onValueChange.bind(this));
      this.model.observe('error.cellview', this.onErrorChange.bind(this));
      this.model.column.observe('disabled.' + this.guid, this.onDisabledChange.bind(this));
    };

    cellView.destruct = function () {
      this.model.unobserve('.cellview');
      this.model.column.unobserve('disabled.' + this.guid);
    };

    cellView.didInsertElement = function () {
      _super.didInsertElement.call(this);

      this.$error = this.$('.dcg-error-indicator');
      this.mathField = MathQuill.MathField(this.$('.dcg-math-field')[0]);
      this.staticValue = MathQuill.StaticMath($('<span class="dcg-cell-math-content">')[0]);

      this.onDisabledChange();
      this.onValueChange();
      this.onErrorChange();

      // TODO - move these mathquill handlers up to the table view instead of
      // assigning them on each table cell individually
      var self = this;
      this.$().on('blur focusout', '.dcg-math-field', function () {
        self.mathField.clearSelection();
      });

      // TODO - should move to model. Without this, the model won't have Undo/Redo
      this.$().on('render', '.dcg-math-field', function () {
        var oldValue = self.model.value;
        var newValue = MathQuill(this).latex();
        if (oldValue === newValue) return;
        self.__renderedValue = newValue;

        var id = self.model.column.table.id;
        var position = self.lookupCellPosition();
        var list = self.tableView.listView.model; //TODO ick
        function getCell () {
          var table = list.getItemById(id);
          var column = table.columns[position.column];
          return column.cells[position.row-1];
        }

        list.undoRedo.addTransaction({
          type: list.undoRedo.CAUSE_OF_CHANGE,
          undo: function () {
            var cell = getCell();
            cell.setProperty('value', oldValue);
            cell.column.table.requestParse();
          },
          redo: function () {
            var cell = getCell();
            cell.setProperty('value', newValue);
            cell.column.table.requestParse();
          }
        });

      });
    };
  });

  return TableView;
});

define('template!folder', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
if (renderShell) { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionitem dcg-expressionfolder dcg-shell">\n  <div class="dcg-shell"></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionfolder dcg-expressionitem">\n  <div class="dcg-fade-container">\n\n    <span class="dcg-main">\n      <div class="dcg-caret-container dcg-action-toggle-folder-collapsed dcg-do-not-blur" handleEvent="true">\n        <i class="dcg-icon-caret-down" ></i>\n      </div>\n\n      <div class="dcg-smart-textarea-placeholder"></div>\n    </span>\n    <i class="dcg-icon-remove dcg-top-level-delete dcg-action-delete" handleEvent="true"></i>\n\n  </div>\n\n  <span class="dcg-tab dcg-action-drag"\n        handleEvent="true"\n        tapboundary="true"\n        disablescroll="true"\n  >\n    <span class="dcg-num dcg-variable-index"></span>\n    <div class="dcg-tab-interior">\n    <span class="dcg-action-toggle-folder-hidden dcg-graph-icon dcg-folder dcg-icon">\n      <i class="dcg-icon-hidden"></i>\n      <i class="dcg-icon-folder"></i>\n    </span>\n    </div>\n  </span>\n\n  <span class="dcg-exp-actions">\n    <span\n      class="dcg-action-delete dcg-delete-btn dcg-tooltip"\n      handleEvent="true"\n      tooltip="'+
( t('Delete') )+
'"\n    >\n      <i class=\'dcg-icon-remove\'></i></span>\n    </span>\n  </span>\n\n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('expressions/folder_view',['require','pjs','expressions/abstractitem_view','template!folder','./smart_textarea','jquery.handleevent'],function (require) {
  var P = require('pjs');
  var AbstractItemView = require('expressions/abstractitem_view');
  var template = require('template!folder');
  var SmartTextarea = require('./smart_textarea');
  require('jquery.handleevent');

  var FolderView = P(AbstractItemView, function(view, _super) {
    view.template = template;

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);
      this.model = model;
      model.observe('hidden.folderView', this.onHiddenChanged.bind(this));
      model.observe('collapsed.folderView', this.onCollapsedChanged.bind(this));
      model.observe('selected.folderView', this.onSelectedChange.bind(this));
      model.observe('count.folderView', this.onMemberIdsChange.bind(this));

      this.smartTextarea = SmartTextarea(this.model.title);
      this.model.observe('title.folderView', function() {
        this.smartTextarea.setProperty('text', this.model.title);
      }.bind(this));
      this.smartTextarea.observe('text', function() {
        this.model.setProperty('title', this.smartTextarea.text);
      }.bind(this));
    };

    view.destruct = function () {
      this.model.unobserve('.folderView');
      this.smartTextarea.destruct();
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      if (this.model.renderShell) return;

      this.smartTextarea.replace(this.$('.dcg-smart-textarea-placeholder'));

      this.smartTextarea.observe('focused', function () {
        if (this.smartTextarea.focused) this.model.setProperty('selected', true);
      }.bind(this));
      this.smartTextarea.observeEvent('enterPressed', this.triggerEnterPressed.bind(this));
      this.smartTextarea.observeEvent('upPressed', this.triggerUpPressed.bind(this));
      this.smartTextarea.observeEvent('downPressed', this.triggerDownPressed.bind(this));
      this.smartTextarea.observeEvent('backspacePressed', this.triggerBackspacePressed.bind(this));
      this.smartTextarea.observeEvent('delPressed', this.triggerDelPressed.bind(this));
      //need to include smart-textarea in minWidth
      this.setMinWidth();

      this.$('.dcg-action-toggle-folder-collapsed').on(
        'dcg-tap',
        this.toggleCollapsed.bind(this)
      );
      this.$('.dcg-action-toggle-folder-hidden').on(
        'dcg-tap',
        this.toggleHidden.bind(this)
      );

      this.onCollapsedChanged();
      this.onHiddenChanged();
      this.onMemberIdsChange();
    };

    view.onSelectedChange = function () {
      if (!this.selected && this.$title) {
        this.smartTextarea.blur();
      }
    };

    view.onMemberIdsChange = function () {
      this.$().toggleClass('dcg-has-items', this.model.count > 0);
    };

    view.onProjectorModeChange = function() {
      this.smartTextarea.fitText();
    };

    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);
    };

    view.toggleHidden = function () {
      this.model.setProperty('hidden', !this.model.hidden);
    };

    view.toggleCollapsed = function () {
      this.model.setProperty('collapsed', !this.model.collapsed);
    };

    view.onHiddenChanged = function () {
      this.$().toggleClass('dcg-hidden', !!this.model.hidden);
    };

    view.onCollapsedChanged = function () {
      this.$().toggleClass('dcg-collapsed', !!this.model.collapsed);

      if (!this.model.collapsed) {
        this.listView.triggerFolderOpened();
      }
    };

    view.addFocus = function (where) {
      this.smartTextarea.addFocus();
    };
  });

  return FolderView;
});

define('loadcss!css/expressions.image', function(){});
define('loadcss!css/image_opacity_menu', function(){});
define('template!image_options_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'dcg-exp-options-menu dcg-image-options-menu dcg-options-menu\'>\n  <div class=\'dcg-triangle\'></div>\n  <div class=\'dcg-opacities-div\'>\n    <div class=\'dcg-opacities-menu\'>\n      <div class=\'dcg-title\'>opacity:</div>\n      <div class=\'dcg-opacities-menu\'>\n      ';
 _.each([.2, .4, .6, .8, 1], function (opacity) { 
;__p+='\n        <span class="dcg-opacity-option dcg-graph-icon"\n          image-opacity="'+
( opacity )+
'"\n          handleevent="true">\n            <span class="dcg-image-thumb"\n              style="opacity: '+
( opacity )+
'">\n            </span>\n            <i class=\'dcg-icon-check\'></i>\n        </span>\n      ';
 }) 
;__p+='\n      </div>\n    </div>\n  </div>\n</div>\n';
}
return __p;
};});
define('expressions/image_options_view',['require','loadcss!css/image_opacity_menu','pjs','jquery','underscore_view','template!image_options_menu'],function(require){
  require('loadcss!css/image_opacity_menu');

  var P = require('pjs');
  var $ = require('jquery');
  var UnderscoreView = require('underscore_view');
  var template = require('template!image_options_menu');


  var ImageOptionsMenuView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (image) {
      this.image = image;
      this.image.observe('opacity.' + this.guid, this.renderSelectedOpacity.bind(this));
      this.image.observe('hidden.' + this.guid, this.renderSelectedOpacity.bind(this));
      this.image.observe('image_url.' + this.guid, this.renderImageURL.bind(this));
    };

    view.destruct = function () {
      this.image.unobserve('.' + this.guid);
    };

    view.onSelectOpacity = function (evt) {
      // when using mouse, fire on 'dcg-tapstart' and when on touch we
      // fire on the 'dcg-tap' event.
      if (evt.type === 'dcg-tap' && evt.device === 'mouse') return;
      if (evt.type === 'dcg-tapstart' && evt.device === 'touch') return;

      var opacity = parseFloat($(evt.target).closest('.dcg-opacity-option').attr('image-opacity'));
      this.image.setProperty('hidden', false);
      this.image.setProperty('opacity', opacity);

      //if we're in a folder, show it.
      if (this.image.folder) this.image.folder.setProperty('hidden', false);
    };

    view.renderSelectedOpacity = function () {
      var opacity = this.image.opacity;
      this.$('.dcg-opacity-option').removeClass('dcg-selected');
      if (!this.image.hidden) {
        this.$('.dcg-opacity-option[image-opacity="'+opacity+'"]').addClass('dcg-selected');
      }
    };

    view.renderImageURL = function () {
      if (this.image.image_url) {
        this.$('.dcg-image-thumb').css('background-image', 'url('+ encodeURI(this.image.image_url) +')');
      }
    };

    view.didInsertElement = function () {
      this.$().on('dcg-tap dcg-tapstart', '.dcg-opacity-option', this.onSelectOpacity.bind(this));
      this.renderSelectedOpacity();

      this.renderImageURL();
    };

  });

  return ImageOptionsMenuView;
});

define('template!image_icon', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="dcg-icon dcg-graph-icon dcg-variable-errortooltip tipsy-sticky">\n  <span class="dcg-image-thumb"></span>\n  <i class="dcg-icon-hidden"></i>\n</span>\n';
}
return __p;
};});
define('expressions/image_icon_view',['require','pjs','expressions/abstract_icon','./image_options_view','template!image_icon','jquery.handleevent'],function(require){
  var P = require('pjs');
  var AbstractIconView = require('expressions/abstract_icon');
  var ImageOptionsMenuView = require('./image_options_view');
  var template = require('template!image_icon');
  require('jquery.handleevent');

  var ImageIconView = P(AbstractIconView, function (view, _super) {
    view.template = template;

    view.init = function (parentView) {
      _super.init.call(this, parentView);
      this.expression = this.model;
      this.image = this.model;

      this.image.observe('opacity.' + this.guid, this.onDisplayChange.bind(this));
      this.image.observe('shouldGraph.' + this.guid, this.onDisplayChange.bind(this));
      this.image.observe('loaded.' + this.guid, this.onDisplayChange.bind(this));
      this.image.observe('error.' + this.guid, this.onDisplayChange.bind(this));
      this.image.observe('image_url.' + this.guid, this.renderImageURL.bind(this));

      this.parentView.observeEvent('hideContextMenu.' + this.guid, this.hideOptions.bind(this));
    };

    view.destruct = function () {
      _super.destruct.call(this);

      this.image.unobserve('.' + this.guid);
      this.parentView.unobserve('.' + this.guid);
    };

    view.renderImageURL = function () {
      if (this.image.image_url) {
        this.$imgThumb.css('background-image', 'url('+ encodeURI(this.image.image_url)+')');
      }
    };

    view.didInsertElement = function () {
      var self = this;
      _super.didInsertElement.call(this);
      this.$icon = this.$('.dcg-icon');
      this.$imgThumb = this.$icon.find('.dcg-image-thumb');

      this.renderImageURL();
      this.onDisplayChange();

      var handleIconTapped = function(evt, device){
        if(evt.wasHandled('dragdrop')) return; //Don't toggle if we were handled by dragdrop
        if(evt.wasLongheld()) return;
        if(evt.device !== device) return;

        if (self.optionsShown) {
          self.toggleOptions();
          return false;
        }

        if (self.parentView.listView.editListMode) {
          self.toggleOptions();
        } else {
          if (self.errorShown) return;

          if (self.image.folder && self.image.folder.hidden) {
            self.image.setProperty('hidden', false);
            self.image.folder.setProperty('hidden', false);
          } else {
            self.image.setProperty('hidden', !self.image.hidden);
          }
        }
      };

      var handleIconLongHold = function(evt, device) {
        if(evt.device !== device) return;

        evt.handle('dcg-longhold');
        self.toggleOptions();
      };

      this.$().closest('.dcg-action-icon-mouse').on('dcg-tap', function(evt){
        handleIconTapped(evt, 'mouse');
      });

      this.$().closest('.dcg-action-icon-touch').on('dcg-tap', function(evt){
        handleIconTapped(evt, 'touch');
      });

      this.$().closest('.dcg-action-icon-mouse').on('dcg-longhold', function(evt){
        handleIconLongHold(evt, 'mouse');
      });

      this.$().closest('.dcg-action-icon-touch').on('dcg-longhold', function(evt){
        handleIconLongHold(evt, 'touch');
      });
    };

    view.createOptionsMenuView = function () {
      var listView = this.parentView.listView;
      var optionsView = ImageOptionsMenuView(this.expression);
      optionsView.appendTo(listView.$());

      // putting the ImagenOptionsView at the topLeft of the .dcg-icon
      // it's up to the ImageOptionsView's css to position it beyond that
      var placeholder = this.$('.dcg-icon');
      var placeholderOffset = placeholder.offset();
      var listViewOffset = listView.$().offset();
      optionsView.$().css({
        position: 'absolute',
        top: placeholderOffset.top - listViewOffset.top + 'px',
        left: placeholderOffset.left - listViewOffset.left + 'px',
        display: 'block' //wait until we know where it is to show it. fixes #3154
      });
      return optionsView;
    };

    view.onDisplayChange = function () {
      _super.onDisplayChange.call(this);
      if (!this.$icon) return;

      var icon_class = '';

      if (!this.image.loaded) {
        icon_class = 'dcg-loading-image';
      } else if (this.error) {
        icon_class = '';
      } else if (!this.image.shouldGraph) {
        icon_class = 'dcg-hidden';
      }

      // efficently changes the class of the icon
      if (this.rendered_icon_class !== icon_class) {
        if (this.rendered_icon_class) {
          this.$icon.removeClass(this.rendered_icon_class);
        }
        this.rendered_icon_class = icon_class;
        if (icon_class) {
          this.$icon.addClass(icon_class);
        }
      }
      if (!icon_class) {
        this.$imgThumb.css('opacity', this.image.opacity);
      }
    };
  });

  return ImageIconView;
});
define('template!image', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionitem expressionimage dcg-shell">\n  <div class=\'dcg-shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="dcg-do-not-blur dcg-expressionimage dcg-expressionitem">\n  <div class=\'dcg-fade-container\'>\n\n    <span class="dcg-main">\n      <div class="dcg-image-loading">Loading image...</div>\n      <div class="dcg-image-loaded">\n\n          <div class="dcg-smart-textarea-placeholder"></div>\n\n          <div class="dcg-do-blur" handleEvent="true">\n            <div class="dcg-edit-image dcg-variable-invalid dcg-desmos-input-container">\n              <div class="dcg-center-inputs">\n                '+
( t('center:'))+
'\n                <span class="dcg-image-center">\\left(\\MathQuillMathField[x]{} , \\MathQuillMathField[y]{}\\right)</span>\n              </div>\n              <div class="dcg-size-inputs">\n                '+
( t('size:'))+
'\n                <span class="dcg-image-size">\\MathQuillMathField[width]{} &times; \\MathQuillMathField[height]{}</span>\n              </div>\n            </div>\n          </div>\n\n      </div>\n    </span>\n    <span class="dcg-fadeout"></span>\n\n    <i class="dcg-icon-remove dcg-top-level-delete dcg-action-delete" handleEvent="true"></i>\n\n    <div class="dcg-template-bottom-container dcg-fixed-width-element">\n      <div class="dcg-template-bottom"></div>\n    </div>\n  </div>\n\n  <span class="dcg-tab dcg-action-drag dcg-action-icon-touch" handleEvent="true">\n    <span class=\'dcg-num dcg-variable-index\'></span>\n    <div class=\'dcg-tab-interior dcg-action-icon-mouse\'>\n      <span class="template-imageicon"></span>\n    </div>\n  </span>\n\n  <span class=\'dcg-exp-actions\'>\n    <span class="dcg-graphic" handleEvent="true"></span>\n    <span class="dcg-action-delete dcg-delete-btn" handleEvent="true"><i class=\'dcg-icon-remove\'></i></span>\n  </span>\n\n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('expressions/image_view',['require','loadcss!css/expressions.image','jquery','underscore','pjs','mathquill','keys','./abstractitem_view','./image_icon_view','expressions/promptslider_view','conditional_blur','./smart_textarea','jquery.handleevent','template!image'],function(require) {
  require('loadcss!css/expressions.image');
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var MathQuill = require('mathquill');
  var Keys = require('keys');
  var AbstractItemView = require('./abstractitem_view');
  var ImageIconView = require('./image_icon_view');
  var PromptSliderView = require('expressions/promptslider_view');
  var conditionalBlur = require('conditional_blur');
  var SmartTextarea = require('./smart_textarea');
  require('jquery.handleevent');

  var template = require('template!image');

  var ImageView = P(AbstractItemView, function(view, _super) {

    view.template = template;

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);
      this.model = model;

      // enable animations on the frame after the helpers are evaluated.
      // Only need to watch for a single helper because they'll all be batched.
      var self = this;
      this.model.helpers.x.observe('formula.' + this.guid, function () {
        setTimeout(function () {
          self.setProperty('doAnimate', true);
        });
      });
      this.smartTextarea = SmartTextarea(this.model.name);
      this.model.observe('name.' + this.guid, function() {
        this.smartTextarea.setProperty('text', this.model.name);
      }.bind(this));
      this.smartTextarea.observe('text', function() {
        this.model.setProperty('name', this.smartTextarea.text);
      }.bind(this));
    };

    view.addFocus = function (where) {
      this.smartTextarea.addFocus();
    };

    view.onSelectedChange = function() {
      if (!this.model.selected ) {
        // find the focused mathquill (if there is one)
        var focused = $(document.activeElement).closest('.mq-editable-field');

        // check if the focused mathquill is within this view
        if (focused.closest(this.$()).length) {
          MathQuill(focused[0]).blur();
        }
      }
    };

    view.handleLeftPressed = function (evt) {
      var input = $(evt.target).closest('.dcg-math-input')[0];
      if (this.$y[0] === input) {
        MathQuill(this.$x[0]).focus();
      } else if (this.$height[0] === input) {
        MathQuill(this.$width[0]).focus();
      }
    };

    view.handleRightPressed = function (evt) {
      var input = $(evt.target).closest('.dcg-math-input')[0];
      if (this.$x[0] === input) {
        MathQuill(this.$y[0]).focus();
      } else if (this.$width[0] === input) {
        MathQuill(this.$height[0]).focus();
      }
    };

    view.handleDownPressed = function (evt) {
      var input = $(evt.target).closest('.dcg-math-input')[0];
      if (this.$x[0] === input) {
        MathQuill(this.$width[0]).focus();
      } else if (this.$y[0] === input) {
        MathQuill(this.$height[0]).focus();
      }
    };

    view.handleUpPressed = function (evt) {
      var input = $(evt.target).closest('.dcg-math-input')[0];
      if (this.$width[0] === input) {
        MathQuill(this.$x[0]).focus();
      } else if (this.$height[0] === input) {
        MathQuill(this.$y[0]).focus();
      }
    };

    view.handleKeydown = function (evt) {
      var key = Keys.lookup(evt);
      if (key === Keys.ESCAPE) conditionalBlur();
    };

    // blur input when enter pressed
    view.handleMathquillInput = function(evt) {
      var input = this.$(evt.target).closest('.dcg-math-input');
      var value = MathQuill(input[0]).latex();
      var limit = input.attr('limit');
      this.model.setProperty(limit, value);
    };

    view.didFocusIn = false;
    view.focusInMathquill = function(evt) {
      var input = this.$(evt.target).closest('.dcg-math-input');

      //focusin is triggered always, even when reclicking into a selected mathquill
      //we don't want to reselect in that case.
      if (!input.hasClass('dcg-focus')) {
        input.addClass('dcg-focus');
        MathQuill(input[0]).select();
        //on iPad/iPhone .select() isn't working synchronously. gross hack to make sure that we select all
        //TODO: remove this when we update mathquill, which fixes lots of focus issues
        setTimeout(function() {
          if (!input.find('.mq-selection').length) {
            MathQuill(input[0]).select();
          }
        }, 1);
      }

      this.model.setProperty('selected', true);

      //focusIn is called before focusOut, but we want this to happen after
      this.didFocusIn = true;
      this.$().addClass('dcg-input-focused');
      var self = this;
      setTimeout(function(){
        self.didFocusIn = false;
      });
    };

    view.focusOutMathquill = function(evt) {
      var input = this.$(evt.target).closest('.mq-editable-field');
      input.removeClass('dcg-focus');
      MathQuill(input[0]).clearSelection();

      if (!this.didFocusIn) this.$().removeClass('dcg-input-focused');
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      if (this.model.renderShell) return;

      this.smartTextarea.replace(this.$('.dcg-smart-textarea-placeholder'));
      this.smartTextarea.observe('focused', function () {
        if (this.smartTextarea.focused) this.model.setProperty('selected', true);
      }.bind(this));
      this.smartTextarea.observeEvent('enterPressed', this.triggerEnterPressed.bind(this));
      this.smartTextarea.observeEvent('upPressed', this.triggerUpPressed.bind(this));
      this.smartTextarea.observeEvent('downPressed', this.triggerDownPressed.bind(this));
      this.smartTextarea.observeEvent('backspacePressed', this.triggerBackspacePressed.bind(this));
      this.smartTextarea.observeEvent('delPressed', this.triggerDelPressed.bind(this));

      //need to include smart-textarea in minWidth
      this.setMinWidth();

      this.iconView = ImageIconView(this);
      this.iconView.replace('.template-imageicon');

      // create and select for the \MathQuillMathField's
      var imageCenter = MathQuill.StaticMath(this.$('.dcg-image-center')[0]);
      var imageSize = MathQuill.StaticMath(this.$('.dcg-image-size')[0]);
      this.$x = $(imageCenter.innerFields.x.el()).attr('limit','x');
      this.$y = $(imageCenter.innerFields.y.el()).attr('limit','y');
      this.$width = $(imageSize.innerFields.width.el()).attr('limit','width');
      this.$height = $(imageSize.innerFields.height.el()).attr('limit','height');

      // listen to the mathquill inputs
      var self = this;
      $(_.invoke(imageCenter.innerFields.concat(imageSize.innerFields), 'el'))
               .on('focusin', this.focusInMathquill.bind(this))
               .on('focusout', this.focusOutMathquill.bind(this))
               .on('render', this.handleMathquillInput.bind(this))
               .on('leftPressed', this.handleLeftPressed.bind(this))
               .on('upPressed', this.handleUpPressed.bind(this))
               .on('downPressed', this.handleDownPressed.bind(this))
               .on('rightPressed', this.handleRightPressed.bind(this))
               .on('keydown', this.handleKeydown.bind(this))
               .on('dcg-tap', function (evt) {
                  // self = the ImageView
                  // this = the editable mathquill that was clicked
                  self.sendTapToMathQuill(evt, $(this));
               })
               .addClass('dcg-math-field dcg-math-input');

      // add these observers after the element is fully instantiated. Only after that
      // point is the dom fully in place for these renders to work. If the model updates
      // while the shell is still visible, we'll either get an error thrown (renderInvalids)
      // or we'll miss the dom update completely (renderVariables).
      this.renderX();
      this.renderY();
      this.renderWidth();
      this.renderHeight();
      this.renderInvalids();
      this.renderLoaded();
      this.renderVariables();
      this.model.observe('loaded.' + this.guid, this.renderLoaded.bind(this));
      this.model.observe('variables.' + this.guid, this.renderVariables.bind(this));
      this.model.observe('selected.' + this.guid, this.onSelectedChange.bind(this));
      this.model.observe('x.' + this.guid, this.renderX.bind(this));
      this.model.observe('y.' + this.guid, this.renderY.bind(this));
      this.model.observe('width.' + this.guid, this.renderWidth.bind(this));
      this.model.observe('height.' + this.guid, this.renderHeight.bind(this));
      this.model.observe('errors.' + this.guid, this.renderInvalids.bind(this));
    };

    view.renderLoaded = function() {
      var loaded = this.model.loaded;
      this.$().toggleClass('dcg-loading', !loaded);

      // must redraw the mathquill when loaded because it can't render correctly when display:none
      if (loaded) {
        MathQuill(this.$('.dcg-image-center')[0]).reflow();
        MathQuill(this.$('.dcg-image-size')[0]).reflow();
        this.smartTextarea.renderText();
      }
    };

    view.destruct = function () {
      this.model.unobserve('.' + this.guid);
      this.model.helpers.x.unobserve('formula.' + this.guid);
      this.smartTextarea.destruct();

      if (this.optionsView) {
        this.optionsView.remove();
        this.optionsView = null;
      }
      if (this.promptSliderView) {
        this.promptSliderView.remove();
        this.promptSliderView = null;
      }
    };

    view.renderInvalids = function () {
      this.$x.toggleClass('dcg-invalid', !!this.model.errors.x);
      this.$y.toggleClass('dcg-invalid', !!this.model.errors.y);
      this.$width.toggleClass('dcg-invalid', !!this.model.errors.width);
      this.$height.toggleClass('dcg-invalid', !!this.model.errors.height);
    };

    view.renderX = function () {
      var value = this.model.x;
      if (MathQuill(this.$x[0]).latex() !== value) {
        MathQuill(this.$x[0]).latex(value);
      }
    };

    view.renderY = function () {
      var value = this.model.y;
      if (MathQuill(this.$y[0]).latex() !== value) {
        MathQuill(this.$y[0]).latex(value);
      }
    };

    view.renderWidth = function () {
      var value = this.model.width;
      if (MathQuill(this.$width[0]).latex() !== value) {
        MathQuill(this.$width[0]).latex(value);
      }
    };

    view.renderHeight = function () {
      var value = this.model.height;
      if (MathQuill(this.$height[0]).latex() !== value) {
        MathQuill(this.$height[0]).latex(value);
      }
    };

    view.renderVariables = function () {
      if (!this.model.variables) return;

      var promptCreateSlider = this.model.variables.length > 0;
      if (this.promptSliderView && !promptCreateSlider) {
        this.removeViewFromBottom(this.promptSliderView);
        this.promptSliderView = null;
      } else if (!this.promptSliderView && promptCreateSlider) {
        this.promptSliderView = this.createPromptSliderView();
        this.addViewToBottom(this.promptSliderView);
      }

      if (this.promptSliderView) {
        this.promptSliderView.setProperty('variables', this.model.variables);
      }
    };

    view.createPromptSliderView = function () {
      return PromptSliderView(this);
    };

    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);
    };

    view.isFocused = function () {
      return $(document.activeElement).closest(this.$()).length !== 0;
    };
  });

  return ImageView;
});

define('template!list', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div>\n\n<div class=\'dcg-show-expressions-tab\'>\n  <a\n    class=\'dcg-resize-list-btn dcg-action-showexpressions dcg-tooltip\'\n    tooltip="'+
( t('Show List') )+
'"\n  >\n    <i class=\'dcg-icon-show\'></i>\n  </a>\n</div>\n\n\n<div class="dcg-exppanel-outer">\n  <div class="dcg-exppanel-container">\n    <div class="dcg-expression-top-bar">\n      <a class=\'dcg-btn dcg-btn-medium dcg-pull-left dcg-hide-in-edit dcg-add-expression-btn dcg-action-add-expression dcg-tooltip dcg-do-not-blur\' handleEvent="true" tooltip="'+
( t('Add Item') )+
'"><i class=\'dcg-icon-plus\'></i><i class=\'dcg-icon-caret-down\'></i></a>\n\n      <a class=\'dcg-btn dcg-btn-red dcg-btn-medium dcg-pull-left dcg-show-in-edit dcg-action-clearall\'> '+
( t('Delete All') )+
'</a>\n      <span class=\'dcg-center-aligned dcg-show-in-edit\'>\n        <a class=\'dcg-action-undo dcg-tooltip\' tooltip="'+
( t('Undo (ctrl+z)') )+
'"><i class=\'dcg-icon-undo\'></i></a>\n        <a class=\'dcg-action-redo dcg-tooltip\' tooltip="'+
( t('Redo (ctrl+y)') )+
'"><i class=\'dcg-icon-redo\'></i></a>\n      </span>\n\n      <a class=\'dcg-resize-list-btn dcg-hide-in-edit dcg-action-hideexpressions dcg-tooltip\' tooltip="'+
( t('Hide List') )+
'"><i class=\'dcg-icon-hide\'></i></a>\n\n      <a\n        class=\'dcg-btn dcg-btn-medium dcg-pull-right dcg-action-toggle-edit dcg-hide-in-edit dcg-tooltip dcg-do-not-blur\' handleEvent="true" tooltip="'+
( t('Edit List') )+
'">\n        <i class=\'dcg-icon-settings\' />\n      </a>\n      <a\n        class=\'dcg-btn dcg-btn-blue dcg-btn-medium dcg-pull-right dcg-action-toggle-edit dcg-show-in-edit dcg-do-not-blur\'\n        handleEvent="true">\n          '+
( t('Done') )+
'\n      </a>\n    </div>\n\n    <div class="dcg-exppanel dcg-disable-horizontal-scroll-to-cursor">\n\n      <div class=\'dcg-drop-image\'>\n        <span>'+
( t('Drop Image Here') )+
'</span>\n      </div>\n\n      <div class="dcg-expressionlist">\n        <span class="dcg-template-expressioneach"></span>\n        <div class="template-newexpression"></div>\n\n        <a class="dcg-expressions-branding" href="//www.desmos.com/" target="_blank">\n          <div class="dcg-powered-by">'+
( t('powered by') )+
'</div>\n          <i class="dcg-icon-desmos"></i>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n</div> ';
 /* close container div */ 
;__p+='\n';
}
return __p;
};});
define('expressions/list_view',['require','loadcss!css/expression_top_bar','loadcss!css/expressions','loadcss!css/expressions.icon','jquery','underscore','pjs','mathquill','tipsy','underscore_view','touchtracking','expressions/dragdrop_expressions','./add_expression','conditional_blur','analytics/google_analytics','keys','browser','scroll_helpers','jquery.handleevent','./new_expression','./expression','./expression_view','./text_view','./table_view','./folder_view','./image_view','template!list'],function (require) {
  require('loadcss!css/expression_top_bar');
  require('loadcss!css/expressions');
  require('loadcss!css/expressions.icon');

  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var MathQuill = require('mathquill');
  require('tipsy');
  var UnderscoreView = require('underscore_view');
  var touchtracking = require('touchtracking');
  var DragDropExpressions = require('expressions/dragdrop_expressions');
  var AddExpressionView = require('./add_expression');
  var conditionalBlur = require('conditional_blur');
  var ga = require('analytics/google_analytics');
  var Keys = require('keys');
  var Browser = require('browser');

  var scrollHelpers = require('scroll_helpers');
  require('jquery.handleevent');
  var NewExpressionView = require('./new_expression');
  var ExpressionObject = require('./expression');
  var ExpressionView = require('./expression_view');
  var TextView = require('./text_view');
  var TableView = require('./table_view');
  var FolderView = require('./folder_view');
  var ImageView = require('./image_view');

  var template = require('template!list');

  var ExpressionListView = P(UnderscoreView, function (view, _super) {
    view.__itemViews = {};
    view.__latexChangeCallbacks = [];
    view.isTransient = false;
    view.transientChildren = [];
    view.template = template;

    // Overridden by Calc.
    // TODO: copied and pasted over from list_view_tablet, but this feels really dirty
    // There's got to be a better way to do this.
    view.triggerClearGraph = function () {};

    view.onLatexChange = function (latex) {
      _.each(this.__latexChangeCallbacks, function (cb) { cb(latex); });
    };

    view.init = function (model, $root, toastView, graphSettings) {
      _super.init.call(this);

      this.$root = $root || $('body');
      this.setProperty('scrollbarWidth', 0);
      this.setProperty('minWidth', 356);

      this.toastView = toastView;
      this.graphSettings = graphSettings;
      this.model = model;
      this.model.triggerItemInserted = this.onItemInserted.bind(this);
      this.model.triggerItemRemoved = this.onItemRemoved.bind(this);
      this.model.triggerItemMoved = this.onItemMoved.bind(this);
      this.model.triggerSetState = this.onSetState.bind(this);

      this.observe('itemFocused', this.renderItemFocused.bind(this));
      this.observe('editListMode', this.renderEditListMode.bind(this));

      // ensure selected expression is visible on selection change and focused
      // expression is visible on keypress
      this.model.observe('selectedItem', this.ensureActiveChildIsVisible.bind(this));

      this.dragdrop_expressions = DragDropExpressions(this);
      this.createAllItemViews();
    };

    view.computeTransient = function(){
      this.setProperty('transient', this.transientChildren.length > 0);
    };

    //when sliding a slider, we want to temporarily pad the bottom enough that things don't move around
    view.padLastExpression = function(padding) {
      var $lastExp = this.$('.dcg-expressionitem.dcg-new-expression');
      $lastExp.css('margin-bottom', + padding + 'px');
    };

    view.unpadLastExpression = function() {
      var $lastExp = this.$('.dcg-expressionitem.dcg-new-expression');
      $lastExp.css('margin-bottom', '0');
      this.recalculateScrollbarWidth();
    };

    view.padLastExpressionUntilTapEnd = function(padding){
      var self = this;
      this.padLastExpression(padding);
      $(document).on('dcg-tap.animating-bottom', function() {
        if (self.$('.dcg-exp-options-menu').length === 0) {
          self.unpadLastExpression();
          $(document).off('dcg-tap.animating-bottom');
        }
      });
    };

    //we need to set minWidth at least once, because otherwise
    //we never set the css property, which caused: https://github.com/desmosinc/knox/issues/3878
    //we also don't want to set the css every time, because that'll be a performance burden
    //finally, we need to set it *initially* or else we get a weird slide-in animation
    //because layout_controller doesn't call this until after everything's all instantiated.
    //solution: just store some state recording whether we should ignore our no-op trap
    view.minWidthHasBeenSet = false;
    view.setMinWidth = function (newWidth) {
      if (!this.$exps) return;
      if (newWidth === this.minWidth && this.minWidthHasBeenSet) return;
      this.minWidthHasBeenSet = true;
      this.setProperty('minWidth', newWidth);
      var newCss = {minWidth: newWidth};
      if (!this.itemFocused) newCss.maxWidth = newWidth;
      this.$exppanelContainer.css(newCss);
    };

    view.updateAllViewWidths = function () {
      _.each(this.__itemViews, function (view) { view.setMinWidth(); });
    };

    view.recalculateScrollbarWidth = function () {
      var scrollbarWidth = this.$('.dcg-exppanel').width() - this.$('.dcg-expressionlist').width();
      scrollbarWidth = Math.max(scrollbarWidth, 0);
      this.setProperty('scrollbarWidth', scrollbarWidth);
    };

    view.updateWidth = function () {
      if (!this.$exps) return;
      var exppanel = this.$exppanelContainer;
      var maxWidth = 0;
      //don't update width if we're full-width (i.e. on a smallscreen)
      if (exppanel.css('min-width') === '100%') return;

      var minWidth = this.minWidth;

      this.$('.dcg-disable-horizontal-scroll-to-cursor').scrollLeft(0);

      function includeWidth ($element) {
        var main = $element.find('.dcg-main');
        if (!main.length) return;

        var width = main.outerWidth() + main[0].offsetLeft;
        if (width > maxWidth) maxWidth = width;
      }
      var selected = this.getSelectedView();
      if (selected && (this.itemFocused || selected.model.isTable)) {
        includeWidth(selected.$());
      }

      if (this.editListMode) {
         this.$('.dcg-expressiontable').each(function () {
           includeWidth($(this));
         });
      }

      if (maxWidth < minWidth) {
        maxWidth = minWidth;
      }

      exppanel.css('max-width', maxWidth);
      this.recalculateScrollbarWidth();
    };


    view.onItemInserted = function (index, item) {
      //update index for newExpressionView
      if (this.newExpressionView) {
        this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
      }

      // if we've started adding items to dom, add this item. Otherwise,
      // the view will be created when the ExpressionListView is inserted
      // into the dom
      if (this.$items) {
        var view = this.createItemView(item);
        if (view) {
          if (index === 0) {
            view.prependTo(this.$items); // beginning
          } else if (index === this.model.getItemCount()-1) {
            view.appendTo(this.$items); //end
          } else { //somewhere in the middle
            view.insertAfter(this.$items.children(':nth-child('+ index +')'));
          }

          //in edit list mode, we animate new items
          if (this.editListMode) {
            view.$().css({
              transform: 'scale(0,0)',
              opacity: 0
            });

            //wait one frame, or the 0,0 won't catch
            setTimeout(function() {
              view.$().css({
                transition: '.2s',
                opacity: 1,
                transform: ''
              });
            }, 1);
            //remove our transition after the animation's done
            setTimeout(function () {
              view.$().css({
                transition: 'none'
              });
            }, 300);
          }
        }

        var len = this.model.getItemCount();
        for (var i=index; i<len; i++) {
          this.model.getItemByIndex(i).setProperty('index', i);
        }

        this.updateWidth();
        this.ensureActiveChildIsVisible();
      }
    };

    view.onItemRemoved = function (index, item) {
      var item_id = String(item.id);

      item.unobserve('.listview');

      // update index on newExpressionView
      if (this.newExpressionView) {
        this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
      }

      // remove item view from dom
      var view = this.__itemViews[item_id];
      if (view) {
        view.remove();
        delete this.__itemViews[item_id];

        var len = this.model.getItemCount();
        for (var i=index; i<len; i++) {
          this.model.getItemByIndex(i).setProperty('index', i);
        }
      }

      this.updateWidth();
    };

    view.onItemMoved = function (from, to) {
      // update index of each affected item
      var min_affected = Math.min(from,to);
      var max_affected = Math.max(from,to);
      for (var i = min_affected; i <= max_affected; i++) {
        this.model.getItemByIndex(i).setProperty('index', i);
      }

      // move view to correct spot
      var view = this.getItemView(this.model.getItemByIndex(to).id);
      if (view) {
        var $items = this.$items;
        // put at beginning
        if (to === 0) {
          $items.prepend(view.$());
        }

        // put at end
        else if (to === this.model.getItemCount() - 1) {
          $items.append(view.$());
        }

        // put somewhere in middle
        else {

          // must add 1 to index if to > from. This is because the from spot will
          // get plucked out and inserted after the to spot. Means we need to
          // search one deeper into sibling list to find the correct node to
          // insert after.
          var child_index = to + ( to > from ? 1 : 0);
          view.$().insertAfter($items.children(':nth-child('+ child_index +')'));
        }
      }
    };

    view.onSetState = function (list) {
      // destroy item views
      //TODO - could do a destruct() and remove all at once from dom for optimization.
      for (var id in this.__itemViews) {
        if (this.__itemViews.hasOwnProperty(id)) this.__itemViews[id].remove();
      }

      this.__itemViews = {};

      // update index on newExpressionView
      if (this.newExpressionView) {
        this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
      }

      // make all the views at once and insert one large structure
      this.createAllItemViews();
      this.appendAllItemViews();
    };

    view.renderItemFocused = function () {
      this.$root.toggleClass('dcg-ITEM-FOCUSED', !!this.itemFocused);
    };

    view.instantiateItemView = function (item) {
      if (item.isExpression) {
        return ExpressionView(item, this);
      } else if (item.isText) {
        return TextView(item, this);
      } else if (item.isTable) {
        return TableView(item, this);
      } else if (item.isFolder) {
        return FolderView(item, this);
      } else if (item.isImage) {
        return ImageView(item, this);
      }
    };

    view.createItemView = function (item) {
      var view = this.instantiateItemView(item);
      var item_id = String(item.id);

      if (view) {
        this.__itemViews[item_id] = view;

        // add some triggers to the view
        var self = this;
        view.triggerDelete = function(){self.onDelete(view)};
        view.triggerEnterPressed = function(){self.onEnterPressed(view)};
        view.triggerUpPressed = function(){self.onUpPressed(view)};
        view.triggerDownPressed = function(){self.onDownPressed(view)};
        view.triggerBackspacePressed = function(){self.onBackspacePressed(view)};
        view.triggerDelPressed = function(){self.onDelPressed(view)};
        view.observe('transient', function(prop, view){
          if(view.transient) {
            self.transientChildren.push(view);
          } else {
            self.transientChildren = _(self.transientChildren).without(view);
          }
          self.computeTransient();
        });
      }

      return view;
    };

    view.createAllItemViews = function () {
      var len = this.model.getItemCount();
      for (var i=0; i<len; i++) {
        var item = this.model.getItemByIndex(i);
        this.createItemView(item);
      }
    };

    //this method is for large graphs with lots of unrendered shells
    //previously split between timermoduels and renderviewport.
    //
    //first, it finds the first visible expression.
    //then, starting there, it renders all of the expressions there and below.
    view.renderVisibleExpressions = function () {
      var anyUnrendered = this.model.__items.some(function (item) {
        return item.renderShell;
      });
      if (!anyUnrendered) return;
      var expPanelTop = this.$('.dcg-exppanel').offset().top;
      var first = this.expressionAtPoint(5, expPanelTop);
      if (!first) return;

      //if the user set that we should use shells offscreen (for perf), do
      var last = null;
      if (this.graphSettings.config.useShellsOffscreen) {
        var scrollHeight = this.$('.dcg-exppanel').height();
        last = this.expressionAbovePoint(5, expPanelTop + scrollHeight);
      }

      this.renderExpression(first.index, last);
    };

    //called from a folder when it uncollapses
    view.triggerFolderOpened = function() {
      this.renderVisibleExpressions();
    };

    // render expressions on a loop, starting from first.index (above)
    //
    // notes:
    //   * this only updates expressions *below* where you are. We don't
    // want to have what you're looking at move.
    //   * if "last" is provided, we don't update expressions beyond it
    view.renderExpressionTimeout = null;
    view.renderExpression = function(index, last) {
      clearTimeout(this.renderExpressionTimeout);

      // find the first item (>= index) that needs to be rendered
      var item = this.model.getItemByIndex(index);
      while (item && (!item.renderShell || item.inCollapsedFolder)) {
        index++;
        item = this.model.getItemByIndex(index);

        // we've gone too far.
        if (last && index > last.index) return;
      }

      var self = this;
      if (item) {
        this.renderExpressionTimeout = setTimeout(function() {
          self.renderExpression(index+1, last);
        },1);

        // calling this can immediately send us back into renderExpression.
        // when that happens, we can set two timeouts but 1 overwrites the
        // other. That means one timeout dangles and isn't clearable.
        // The way this was caught was a test was expanding a folder before
        // all of the other shells were rendered. The contents of the folder
        // wasn't expanded because it's timeout was overwriten by the
        // previous timeout targeting the end of the list. We never came back
        // to the top of the list.
        //
        // timeout gets set first.
        item.setProperty('renderShell', false);
      }
    };

    view.appendAllItemViews = function () {
      if (!this.$items) return;
      var len = this.model.getItemCount();
      for (var i=0; i<len; i++) {
        var item = this.model.getItemByIndex(i);
        var view = this.getItemView(item.id);
        view.appendTo(this.$items);
      }

      this.updateWidth();
      this.renderVisibleExpressions();
    };

    // holds a copy of the each item's view for later reference

    view.getItemView = function (id) {
      return this.__itemViews[String(id)];
    };

    view.onDelete = function (view) {
      var self = this;
      var animationDuration = 0.2;
      view.$().css({
        'transition': animationDuration + 's',
        'opacity': '0',
        'transform': "scale(.1, .1)"
      });
      setTimeout(function() {
        self.model.undoRedo.oneTransaction(function(){
          self.model.removeItemAt(view.model.index);
          if (self.model.getItemCount() === 0) {
            self.triggerClearGraph();
            self.toastView.show("Graph cleared.", {undoCallback: function() {}});
          }
        });
      }, 1000*animationDuration);
    };

    view.onUpPressed = function (view) {
      // nothing above
      if (view.model.index === 0) return;

      this.selectPrevExpression(view.model);
      this.getSelectedView().addFocus('end');
    };

    view.onDownPressed = function (view) {
      this.selectNextExpression(view.model);
      this.getSelectedView().addFocus('start');
    };

    view.onBackspacePressed = function (view) {
      var wasText = view.model.isText;

      //if you press backspace from the last element of a folder, it
      //delete -- it removes you from the folder
      var nextItem = this.model.getItemByIndex(view.model.index + 1);
      if (view.model.folder && (!nextItem || !nextItem.folder)) {
        view.model.folder.removeItem(view.model);
        return;
      }

      this.upwardDeleteExpression(view);

      // having issues in iframe on ipad. backspace deletes the textbox
      // but doesn't focus into the expression above
      // see #3106
      if (wasText && Browser.IS_IPAD && Browser.IS_IN_IFRAME) {
        this.model.setSelected(null);
        return;
      }

      this.getSelectedView().addFocus('end');
    };

    view.onDelPressed = function (view) {
      this.downwardDeleteExpression(view);
      this.getSelectedView().addFocus('start');
    };

    view.onEnterPressed = function (view) {
      // having issues in iframe on ipad. make enter work like escape
      // see #3106
      if (view.model.isText && Browser.IS_IPAD && Browser.IS_IN_IFRAME) {
        conditionalBlur();
        this.model.setSelected(null);
        return;
      }

      var obj = ExpressionObject({ selected:true }, this.model);
      var self = this;
      var insertIndex = view.model.index + 1;
      //insert below the last element of a collapsed folder
      if (view.model.isFolder && view.model.collapsed) {
        insertIndex += _(view.model.memberIds).keys().length;
      }

      self.model.undoRedo.oneTransaction(function() {
        self.model.insertItemAt(insertIndex, obj);
        if (view.model.isFolder && !view.model.collapsed) {
          view.model.addItem(obj);
        }
        if (view.model.folder) view.model.folder.addItem(obj);
      });
      this.getSelectedView().addFocus();
    };

    view.expressionsVisible = true;
    view.hideExpressions = function() {
      // deselect expression
      this.model.setSelected(null);
      conditionalBlur();
      //note: the above 2 lines should do this, and this next call should be a no-op. Adding in one last
      //line of defense. See: https://github.com/desmosinc/knox/issues/4580
      this.setProperty('needsFakeKeypad', false);
      this.setProperty('expressionsVisible', false);
    };

    view.showExpressions = function() {
      this.setProperty('expressionsVisible', true);
      conditionalBlur();
    };

    view.renderEditListMode = function () {
      var $root = this.$root;
      var self = this;

      if (this.editListMode) {
        $root.addClass('dcg-EDIT-LIST-MODE');
        this.model.setSelected(null);
        // listen for a dcg-tapstart event to close edit-list-mode
        $(document).on('dcg-tapstart.edit-list-mode', function (evt) {
          if (
            $(evt.target).closest('.dcg-exppanel').length === 0 &&
            $(evt.target).closest('.dcg-options-menu').length === 0 &&
            $(evt.target).closest('.dcg-expression-top-bar').length === 0
          ) {
            self.setProperty('editListMode', false);
            ga.send(['_trackEvent', 'edit-list-mode', 'exit edit list by clicking outside']);
          }
        });
      } else {
        $root.removeClass('dcg-EDIT-LIST-MODE');
        // don't listen for the event to close edit-list-mode anymore
        $(document).off('.edit-list-mode');
      }
    };

    /*
    * EVENTS
    */
    view.handleFocusChange = function (focused) {
      var target = $(focused);
      var inMathquill = target.closest('.mq-math-mode').length !== 0;
      var inEditableMathquill = target.closest('.mq-editable-field').length !== 0;
      var inMathquillWithMathField = target.closest('.mq-math-mode:not(.mq-editable-field)')
                                           .find('.mq-editable-field').length !== 0;
      var inMathInput = target.closest('.dcg-math-input').length !== 0;
      var inText = target.closest('.dcg-expressiontext').length !== 0;
      var inFolder = target.closest('.dcg-expressionfolder').length !== 0;

      // clicking in the uneditable part of a mathquill that has \MathQuillMathFields embedded
      // still sends a focusIn event. Let's correct that by acting like mathquill isn't focused.
      if (!inEditableMathquill && inMathquill && inMathquillWithMathField) {
        inMathquill = false;
        inEditableMathquill = false;
        inMathInput = false;
      }

      // in case we're in list mode, get out of it!
      if (!inMathInput && (inMathquill || inEditableMathquill || inText || inFolder)) {
        if (this.editListMode) {
          ga.send(['_trackEvent', 'edit-list-mode', 'exit edit list from focusing exp']);
        }
        this.setProperty('editListMode', false);
      }

      //itemFocused should only trigger when we're editing mathquill.
      //that shows us when the keypad is up, the list is expanded, etc.
      //none of those actions occur in text or folders
      this.setProperty('itemFocused', inMathquill || inEditableMathquill);
      this.setProperty('needsFakeKeypad', inMathquill && inEditableMathquill);

      var focusedMathQuill;
      if (inEditableMathquill) {
        var closestTemplateMathquill = target.closest('.dcg-template-mathquill')[0];
        if (closestTemplateMathquill) {
          focusedMathQuill = MathQuill(closestTemplateMathquill) || undefined;
        } else {
          focusedMathQuill = undefined;
        }
      }

      this.setProperty('focusedMathQuill', focusedMathQuill);
    };
    view.onFocusIn = function (evt) {

      //it's possible to add focus to an expression even when the expressions are hidden.
      // Most prominently: if you click a curve to select it and then type
      // If that happens, we want to show the expression that's being edited, so pop back out the expressions list
      if (!this.expressionsVisible) {
        this.showExpressions();
      }

      // sometimes mathquill notifies of focusin before the focus is set. So we have to
      // pass in where focus is about to be rather than simply use document.activeElement.
      this.handleFocusChange(evt.target);

      clearTimeout(this.fakeKeypadTimeout);
    };

    view.onFocusOut = function () {
      clearTimeout(this.fakeKeypadTimeout);
      // setTimeout here is used to coalesce calls to onFocusOut and onFocusIn
      // that happen in the same tick. This happens, e.g. when a new
      // expression is created, and we move focus from the previous expression
      // to it.
      this.fakeKeypadTimeout = setTimeout(function () {

        // Mathquill does something weird where it triggers a focusout on
        // render, but nothing actually happens to focus. To combat that, and
        // anything else similar, we check what's actually focused
        this.handleFocusChange(document.activeElement);

      }.bind(this), 0);
    };

    view.offset = function () {
      return this.$exps.offset();
    };

    view.setBottom = function (bottom) {
      if (!this.$exps) return;
      var oldBottom = parseFloat(this.$exps.css('bottom').slice(0,-2));
      if (!isFinite(oldBottom)) oldBottom = 0;
      this.$exps.css('bottom', bottom + 'px');

      //If the user is currently in a mouse interaction and the height
      //is increasing, pad the last expression until they end their interaction to
      //prevent things from moving under them
      if (bottom === 0 && touchtracking.isTapActive()) {
        this.padLastExpressionUntilTapEnd(oldBottom);
      }
      this.recalculateScrollbarWidth();
    };

    view.didCreateElement = function () {
      var self = this;
      var list = this.model;

      _super.didCreateElement.call(this);

      this.$exps = this.$('.dcg-exppanel-outer');

      this.addExpressionView = AddExpressionView(this, this.$root, this.graphSettings, this.toastView);
      this.addExpressionView.appendTo(this.$exps);
      this.addExpressionView.setupOpenButton(this.$('.dcg-action-add-expression'), 'dcg-tap');
      this.observe('scrollbarWidth minWidth', this.updateAllViewWidths.bind(this));

      this.$exps.tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        delegate: '.dcg-tooltip'
      });

      this.$exppanelContainer = this.$('.dcg-exppanel-container');
      this.$exppanel = this.$('.dcg-exppanel');
      this.$items = this.$('.dcg-template-expressioneach');

      this.appendAllItemViews();

      //
      //listen for scroll. add class when scrolled, and set renderShells=false
      //

      var debouncedScroll = _.debounce(function(evt) {
        if (evt) this.$('.dcg-expression-top-bar').toggleClass(
          'dcg-expressions-scrolled',
          $(evt.target).scrollTop() > 0
        );
        this.renderVisibleExpressions();
      }.bind(this), 200);

      this.$exppanel.scroll(function(evt) {
        //stop rendering offscreen things immediately -- don't wait for debounce
        clearTimeout(self.renderExpressionTimeout);
        debouncedScroll(evt);
      });

      //
      // for iPad & nexus, listen for taps in the empty area underneath an expression and defocus
      // because that doesn't happen automatically. The way I'm detecting such a tap is by checking if the
      // event is within an .expressionitem. If it's not, we're assuming the tap is within empty space.
      //
      this.$exppanel.on('dcg-tapstart', function(evt) {
        // avoids losing focus when on desktop and we mouseDown on the scrollbar. If we want to lose foucs in
        // that case, this line is perfect to remove. If we want something more robust to detect that we're
        // on the scrollbar, we might be able to check x position of the event compared to the width of the
        // inner content.
        if (evt.device === 'mouse') return;

        if ($(evt.target).closest('.dcg-expressionitem').length === 0) {
          conditionalBlur();
        }
      });

      this.$exppanel.on('keypress', this.ensureActiveChildIsVisible.bind(this));

      //the below should happen automatically, but doesn't on iPad / android
      //this lets you defocus the currently focused expression by clicking the 'Expressions' header
      this.$('.dcg-expression-top-bar').on('dcg-tapstart', function(evt) {
        if (evt.wasHandled()) return;
        list.setSelected(null);
      });


      this.$exps.on('dcg-tap', '.dcg-action-clearall', function () {
        self.triggerClearGraph();
        var undoCallback = function() {
          self.setProperty('editListMode', true);
        };
        self.toastView.show("Graph cleared.", {undoCallback: undoCallback});
      });

      this.$exps.on('dcg-tap', '.dcg-action-undo', function () {
        list.undoRedo.undo();
      });

      this.$exps.on('dcg-tap', '.dcg-action-redo', function () {
        list.undoRedo.redo();
      });

      this.$exps.on('focusout', this.onFocusOut.bind(this));
      this.$exps.on('focusin',  this.onFocusIn.bind(this));
      this.$('.dcg-action-toggle-edit').on('dcg-tap', function () {
        if (self.editListMode) {
          ga.send(['_trackEvent', 'edit-list-mode', 'manual exit edit list']);
        } else {
          ga.send(['_trackEvent', 'edit-list-mode', 'enter edit list']);
        }
        self.setProperty('editListMode', !self.editListMode);

      });
      this.$('.dcg-action-hideexpressions').on('dcg-tap', this.hideExpressions.bind(this));
      this.$('.dcg-action-showexpressions').on('dcg-tap', this.showExpressions.bind(this));
      // Relies on handleKeyDown returning early if no expression is selected for
      // correctness when there are multiple calculators in the page. This means
      // we want to have the invariant that only one list_view can have a selected
      // item at a time.
      $(document.documentElement).on('keydown', this.handleKeyDown.bind(this));

      this.renderItemFocused();
      this.renderEditListMode();

      this.newExpressionView = NewExpressionView(this);
      this.newExpressionView.replace(this.$('.template-newexpression'));
      this.newExpressionView.setProperty('index', this.model.getItemCount()+1);

      // whenever mathquill renders
      this.$exps.on('render', function (evt) {
        self.updateWidth();
      });

      // these things all factor into how wide the expression list is, so we watch them
      this.model.observe('selectedItem', function () {
        self.updateWidth();
      });
      this.observe('editListMode itemFocused', function () {
        self.updateWidth();
      });

      // any time that focus changes we need to make sure that a part of the page doesn't
      // scroll in order show the cursor. this is specifically important for IE9 and tables.
      // In IE9 there will be a quick flash when the expression list is scrolled back to 0,0
      // but I can't find anything that happens synchronously. I've tried:
      //    1) Listening to changes to selectedCell of the selected table
      //    2) Listening for 'scroll' event on the element that gets scrolled
      //
      // both of those still show a quick flash, so this is the chosen method since it's
      // the simplest and most general.
      this.$exps.on('focusin', function () {
        setTimeout(function () {
          self.updateWidth();
        }, 0);
      });
    };

    view.didInsertElement = function () {
      this.updateWidth();
      this.$exppanelContainer.addClass('dcg-do-animate');
    };

    view.getFirstVisibleItem = function() {
      var top = this.$exppanel.offset().top;
      var el = this.expressionAtPoint(0, top);

      if (!el) {
        return this.model.getItemByIndex(0);
      }
      //make sure it's fully visible
      if (this.getItemView(el.id).$().offset().top < top - 2) { //Allow for overlapping borders
        el = this.model.getItemByIndex(el.index+1);
      }
      return el;
    };

    view.appendBlankExpression = function() {
      this.newExpressionView.newMath();
    };

    // Find the view for the selected expression and scroll that expression
    // into view. If the expression doesn't have a view yet, we'll let the
    // view call this once it's inserted into the dom. If there is no selected
    // view, then check if there's a focused view. If so, scroll that until
    // it's visible
    view.ensureActiveChildIsVisible = function(){
      if (!this.$exps || !this.$exps.is(':visible')) return;

      // if an item is selected, try to force it into view
      var selectedView, $selectedView;
      var active = $(document.activeElement);

      if (this.model.selectedItem) {
        selectedView = this.getItemView(this.model.selectedItem.id);
        if (selectedView) $selectedView = selectedView.$();
      } else if (active) {
        //see if an input is focused (i.e. max / min)
        selectedView = active.closest('.dcg-expressionitem');
        if (selectedView.length) $selectedView = selectedView[0];
      }

      if ($selectedView) {
          var mathquill = active.closest('.mq-editable-field');

        //scroll the specific mathquill if we're in one (i.e. focused in a table or exp)
        if (selectedView.model && mathquill.length) {
          var padding = (selectedView.model.isTable ? 60 : 90);
          return scrollHelpers.scrollVisible(mathquill, this.$exppanel, padding);
        }
        //scroll the activeElement if it exists (i.e. focus is in a textarea or folder title)
        if (active.closest('.dcg-expressionitem').length) {
          return scrollHelpers.scrollVisible(active, this.$exppanel, 90);
        }
        //scroll the whole view
        scrollHelpers.scrollVisible($selectedView, this.$exppanel, 90);
      }
    };

    view.handleKeyDown = function(evt) {
      /* jshint maxcomplexity:26 */
      // make sure nothing has focus
      if ($.contains(document.body, document.activeElement)) {
        return;
      }

      // make sure event didn't happen from within expression list
      if ($(evt.target).closest('.dcg-exppanel').length) {
        return;
      }

      // make sure target is still in dom. fixes #3282
      if (!$.contains(document.documentElement, evt.target)) {
        return;
      }

      var selected = this.getSelectedView();
      if (selected && selected.isFocused() && selected.model.isTable) {
        //this is only used by tables, and only for navigating between selected items
        selected.processMissedKeyEvent(evt);
        return;
      }
      var key = Keys.lookup(evt);

      if (!selected) return;

      switch (key) {
        case Keys.UP:
          evt.preventDefault();
          this.selectPrevExpression(selected.model);
          break;

        case Keys.DOWN:
          evt.preventDefault();
          this.selectNextExpression(selected.model, true);
          break;
        case Keys.ESCAPE:
          evt.preventDefault();
          this.model.setSelected(null);
          break;

        case Keys.RIGHT:
        case Keys.TAB:
          evt.preventDefault();
          if (selected) {
            if (selected.model.isTable) {
              selected.addFocus('cell', 0, 0);
            } else {
              selected.addFocus('start');
            }
          }
          break;

        case Keys.LEFT:
          evt.preventDefault();
          if (selected) {
            if (selected.model.isTable) {
              selected.addFocus('cell', 0, selected.model.columns.length - 1);
            } else {
              selected.addFocus('end');
            }
          }
          break;

        case Keys.BACKSPACE:
          evt.preventDefault();
          if(selected){
            this.upwardDeleteExpression(selected);
          }
          break;

        case Keys.DELETE:
          evt.preventDefault();
          if(selected){
            this.downwardDeleteExpression(selected);
          }
          break;

        case Keys.ENTER:
          evt.preventDefault();
          if (selected) this.onEnterPressed(selected);
          break;

        default:
          //ignore things like ctrl-copy, ctrl-paste, alt-tab, shift
          if (evt.metaKey ||
              evt.ctrlKey ||
              key === Keys.SHIFT ||
              key === Keys.SPACEBAR
          ) {
            return;
          }

          if (selected) {
            if (selected.model.isTable) {
              // do nothing since we don't know where to type
            } else {
              selected.addFocus('end');
            }
          }
      }
    };

    /*
    * PUBLIC METHODS
    */
    view.getSelectedView = function () {
      var selected = this.model.getSelected();
      if (selected) {
        var view = this.getItemView(selected.id);
        return view;
      }

      return null;
    };

    view.upwardDeleteExpression = function (expressionView) {
      var index = expressionView.model.index;
      var prev = this.model.getItemByIndex(this.findPrevSelectableIndex(index));

      if (prev) {
        this.model.setSelected(prev);
        this.model.removeItemAt(index);
      } else {
        this.onDelete(expressionView);
      }
    };

    view.findPrevSelectableIndex = function (index) {
      var item;

      do {
       index--;
       item = this.model.getItemByIndex(index);
      } while (item && item.inCollapsedFolder);

      return item ? index : undefined;
    };

    view.findNextSelectableIndex = function (index) {
      var item;

      do {
       index++;
       item = this.model.getItemByIndex(index);
      } while (item && item.inCollapsedFolder);

      return item ? index : undefined;
    };

    view.downwardDeleteExpression = function (expressionView) {
      var index = expressionView.model.index;
      var next = this.model.getItemByIndex(this.findNextSelectableIndex(index));

      if (next) {
        this.model.setSelected(next);
        this.model.removeItemAt(index);
      } else {
        this.onDelete(expressionView);
      }
    };

    view.selectPrevExpression = function (expression) {
      if (!expression) return;

      var index = expression.index;
      var prev = this.model.getItemByIndex(this.findPrevSelectableIndex(index));

      if (prev) {
        prev.setProperty('selected', true);

        // check if this was an empty last expression
        // if so, remove it
        if (index === this.model.getItemCount() - 1 && expression.isEmpty()) {
          this.model.removeItemAt(index);
        }
      }
    };

     view.selectNextExpression = function (expression, dontCreateNew) {
       if (!expression) return;

       var index = expression.index;
       var next = this.model.getItemByIndex(this.findNextSelectableIndex(index));

       if (next) {
         next.setProperty('selected', true);
       } else if(!dontCreateNew) {
         var obj = ExpressionObject({ selected:true }, this.model);
         this.model.insertItemAt(this.model.getItemCount(), obj);
       }
     };

    /*
    * Returns a list of visible expression views, ordered by index.
    */
    view._getVisibleViews = function () {
      var visibleViews = [];

      for (var i = 0; i < this.model.getItemCount(); i++) {
        var exp = this.model.getItemByIndex(i);
        var view = this.getItemView(exp.id);
        if (view && view.$().is(':visible')) visibleViews.push(view);
      }

      return visibleViews;
    };

    /*
    * Does a binary search to find the .expressionitem that is at the point
    */
    view.expressionAtPoint = function (x, y) {
      var visibleViews = this._getVisibleViews();
      var lo = 0;
      var hi = visibleViews.length-1;

      while (lo<=hi) {
        var mid = lo + Math.floor((hi-lo)/2);
        var view = visibleViews[mid];
        var rect = view.getBounds();

        if (rect.top > y) {
          hi = mid - 1;
        } else if (rect.bottom < y) {
          lo = mid + 1;
        } else {
          return view.model;
        }
      }

      return null;
    };

    /*
    * Finds the first expression at or above the point
    */
    view.expressionAbovePoint = function (x, y) {
      var visibleViews = this._getVisibleViews();
      var lo = 0;
      var hi = visibleViews.length-1;
      var found = null;

      while (lo<=hi) {
        var mid = lo + Math.floor((hi - lo)/2);
        var view = visibleViews[mid];
        var rect = view.getBounds();

        if (rect.top > y) {
          hi = mid - 1;
        } else {
          lo = mid + 1;
          found = view.model;
        }
      }

      return found;
    };

    view.onProjectorModeChange = function() {
      for (var id in this.__itemViews) {
        if (this.__itemViews.hasOwnProperty(id)) {
          this.__itemViews[id].onProjectorModeChange();
        }
      }
    };

    view.addFocusForKeypad = function () {
      //use currently selected expression if one is selected (no-op if it's also focused)
      var selected = this.model.getSelected();
      if (selected && selected.isExpression) {
        this.getItemView(selected.id).addFocus();
        return;
      }

      //if currently selected is a table, return early if it already has focus
      if (selected && selected.isTable && this.itemFocused) {
        return;
      }

      //if not, get the element at the top of the list
      var item = this.getFirstVisibleItem();

      //search downward until we find an expression that we can focus
      while (item && !item.isExpression) {
        item = this.model.getItemByIndex(item.index + 1);
      }

      //if we found an item: focus it!
      if (item) {
        this.getItemView(item.id).addFocus();
        return;
      }

      //append a blank expression at the bottom of the list, and focus that
      this.appendBlankExpression();
    };

  });

  return ExpressionListView;
});

define('loadcss!css/keypad', function(){});
define('template!keypad', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'dcg-keypad\'>\n  <div class=\'dcg-keys-container dcg-retracted\'>\n    <div class=\'dcg-keys-background dcg-do-not-blur\'>\n      <div class=\'dcg-keys\'>\n\n        <div class=\'dcg-functions-popover dcg-popover dcg-top\'>\n          <div class=\'dcg-popover-interior\'>\n            <div class=\'dcg-popover-header\'>\n              <table><tr>\n              ';
 _.each(popups.functionsPopup, function(contents, section) { 
;__p+='\n                <td>\n                  <span key="'+
(contents.tab.id)+
'" class="dcg-heading dcg-tappable dcg-btn dcg-btn-gray'+
((section == "trig" ?  " dcg-selected":""))+
'">\n                    '+
( contents.tab.html )+
'\n                  </span>\n                </td>\n              ';
 }) 
;__p+='\n              </tr></table>\n            </div>\n\n            ';
 _.each(popups.functionsPopup, function(contents, section) { 
;__p+='\n              <table class=\'dcg-interior-buttons\' section=\''+
(section)+
'\'>\n                ';
 if (section == "trig") { 
;__p+='\n                  <tr class=\'dcg-section-headings\'>\n                    <td>trig</td>\n                    <td>inverse</td>\n                    <td>hyperb</td>\n                  </tr>\n                ';
 } 
;__p+='\n                <tr>\n\n                ';

                   var i = 0;
                    _.each(contents.funcs, function(func) {
                
;__p+='\n                  '+
((i%3 == 0 ? "</tr><tr>" : ""))+
'\n                  ';
 i++ 
;__p+='\n                  <td>\n                    <span\n                      class="dcg-option dcg-btn dcg-tappable'+
(func.aClass ? " " + func.aClass : "")+
' dcg-'+
(func.id)+
'-key"\n                      key="'+
(func.id)+
'"\n                    >\n                      '+
( func.html )+
'\n                    </span>\n                  </td>\n              ';
 }) 
;__p+='\n              </tr></table>\n            ';
 }) 
;__p+='\n          </div>\n          <div class=\'dcg-arrow\'></div>\n        </div>\n\n        ';
 _.each(buttons, function(keypad, keypadID) { 
;__p+='\n         <div class="dcg-'+
(keypadID)+
' dcg-main-keypad-section">\n           ';
 _.each(keypad, function(row) { 
;__p+='\n             <div class="dcg-row">\n               ';
 _.each(row['keys'], function(key) { 
;__p+='<div\n                   class="dcg-cell '+
(key.cellClass ? key.cellClass: "")+
'"\n                 >\n                   ';
 if (key.html) { 
;__p+='\n                     <a\n                       class="dcg-btn '+
(key.aClass ? key.aClass : "")+
' dcg-'+
(key.id)+
'-key"\n                       key="'+
(key.id)+
'"\n                     >\n                       '+
( t(key.html) )+
'\n                     </a>\n                   ';
 } 
;__p+='\n                 </div>';
 }) 
;__p+='\n               <div style=\'clear:both\'></div>\n             </div>\n           ';
 }) 
;__p+='\n         </div>\n        ';
 }) 
;__p+='\n        <div style=\'clear:both\'></div>\n      </div>\n\n      <div class=\'dcg-minimize-keypad dcg-tooltip\' tooltip="'+
( t('Hide Keypad').replace(' ', '&nbsp;') )+
'">\n        <i class=\'dcg-icon-keyboard\'></i>\n        <i class=\'dcg-icon-caret-down\'></i>\n      </div>\n\n      <div class=\'dcg-minimize-keypad dcg-tooltip dcg-inline-minimize-keypad\' tooltip="'+
( t('Hide Keypad').replace(' ', '&nbsp;') )+
'">\n        <i class=\'dcg-icon-remove\'></i>\n      </div>\n    </div>\n  </div>\n\n  <div class="dcg-show-keypad dcg-do-not-blur dcg-tooltip" tooltip="'+
( t('Show Keypad').replace(' ', '&nbsp;') )+
'">\n    <i class=\'dcg-icon-keyboard\'></i>\n    <i class="dcg-icon-caret-up dcg-do-not-blur"></i>\n  </div>\n</div>\n';
}
return __p;
};});
define('text!data/keypad_keys.json',[],function () { return '{\n"trigFuncs":        ["sin","cos","tan","csc","sec","cot"],\n\n"oneArgFuncs":      ["ceil","floor","round","abs","sign","ln","log","exp", "total", "length", "mean", "median", "stdev", "stdevp", "var", "mad"],\n\n"twoArgFuncs":      ["min","max","lcm","gcd","mod", "nCr", "nPr", "cov", "corr", "quantile"],\n\n"tabs":             ["trig","stats", "misc"],\n\n"staticKeys": {\n  "unknown":          {"display":{"html":"?"},\n                      "action":{"cmd":"?"}},\n  "pi":               {"display":{"html":"&pi;"},\n                      "action":{"cmd":"\\\\pi"}},\n  "tau":               {"display":{"html":"&tau;"},\n                      "action":{"cmd":"\\\\tau"}},\n  "leftparen":        {"display":{"html":"("},\n                      "action":{"cmd":"("}},\n  "rightparen":       {"display":{"html":")"},\n                      "action":{"cmd":")"}},\n  "sqrt":             {"display":{"html":"&radic;"},\n                      "action":{"cmd":"\\\\sqrt"}},\n  "cuberoot":         {"display":{"html":"3&radic;"},\n                      "action":{"custom": "cuberoot"}},\n  "lt":               {"display":{"html":"&lt;"},\n                      "action":{"cmd":"<"}},\n  "gt":               {"display":{"html":"&gt;"},\n                      "action":{"cmd":">"}},\n  "le":               {"display":{"html":"&le;"},\n                      "action":{"cmd":"\\\\le"}},\n  "ge":               {"display":{"html":"&ge;"},\n                      "action":{"cmd":"\\\\ge"}},\n\n  "squared":          {"display":{"aClass":"dcg-exponent", "html":"a^2"},\n                      "action":{"custom":"squared"}},\n\n  "exponent":         {"display":{"aClass":"dcg-exponent", "html":"a^b"},\n                      "action":{"cmd":"^"}},\n  "subscript":        {"display":{"html":"a_b"},\n                      "action":{"cmd":"_"}},\n  "fact":             {"display":{"html":"n!"},\n                      "action":{"cmd":"!"}},\n  "theta":            {"display":{"html":"&theta;"},\n                      "action":{"cmd":"\\\\theta"}},\n\n  "openbracket":        {"display":{"html":"{ <span class=\'dcg-ghost-bracket\'>}</span>", "noMQ":true},\n                      "action":{"cmd":"{"}},\n  "closebracket":        {"display":{"html":"<span class=\'dcg-ghost-bracket\'>{</span> }", "noMQ":true},\n                      "action":{"cmd":"}"}},\n  "opensquare":        {"display":{"html":"[ <span class=\'dcg-ghost-bracket\'>]</span>", "noMQ":true},\n                      "action":{"cmd":"["}},\n  "closesquare":       {"display":{"html":"<span class=\'dcg-ghost-bracket\'>[</span> ]", "noMQ":true},\n                      "action":{"cmd":"]"}},\n\n  "colon":            {"display":{"html":":"},\n                      "action":{"cmd":":"}},\n  "pipes":            {"display":{"html":"|a|"},\n                      "action":{"cmd":"|"}},\n  "comma":            {"display":{"html":","},\n                      "action":{"cmd":","}},\n\n  "times":            {"display":{"html":"&times;"},\n                      "action":{"cmd":"*"}},\n  "plus":             {"display":{"html":"+"},\n                      "action":{"cmd":"+"}},\n  "divide":           {"display":{"html":"&divide;"},\n                      "action":{"cmd":"/"}},\n  "minus":            {"display":{"html":"&ndash;"},\n                      "action":{"cmd":"-"}},\n  "equals":           {"display":{"html":"="},\n                      "action":{"cmd":"="}},\n  "twiddle":           {"display":{"html":"~"},\n                      "action":{"cmd":"~"}},\n  "decimal":          {"display":{"html":"."},\n                      "action":{"cmd":"."}},\n\n  "backspace":        {"display":{"aClass":"dcg-btn-gray",\n                                  "html":"<i class=\\"dcg-icon-delete\\"></i>",\n                                "colspan": 1.5\n                               },\n                      "action":{"key":"Backspace"}},\n  "enter":            {"display":{"aClass":"dcg-btn-gray",\n                                  "html":"<i class=\\"dcg-icon-arrow-enter\\"></i>",\n                                  "colspan": 2,\n                                  "noMQ":true\n                                },\n                      "action":{"cmd":"\\n",\n                                "custom": "enter"}},\n  "toggleLetters":    {"display":{"aClass":"dcg-btn-gray",\n                                  "html":"A B C",\n                                  "colspan":2},\n                      "action":{"changeLayout": "letters"}},\n  "toggleNumbers":    {"display":{"aClass":"dcg-btn-gray",\n                                "html":"1 2 3",\n                                "colspan":2\n                               },\n                      "action":{"changeLayout":"mainNumbers"}},\n\n  "popupFunctions":  {"display":{"aClass":"dcg-btn-gray", "html":"func<span class=\'dcg-hide-on-narrow\'>tion</span>s", "colspan":2},\n                      "action":{"popup": "functions"}},\n\n  "blank":            {"display":{},\n                      "action":{}},\n\n  "halfBlank":        {"display":{"colspan":0.5},\n                      "action":{}},\n\n  "left":             {"display":{"html":"<i class=\\"dcg-icon-arrow-left\\"></i>"},\n                      "action":{"key":"Left"}},\n  "up":               {"display":{"html":"&uarr;"},\n                      "action":{"key":"Up"}},\n  "right":            {"display":{"html":"<i class=\\"dcg-icon-arrow-right\\"></i>"},\n                      "action":{"key":"Right"}},\n  "down":             {"display":{"html":"&darr;"},\n                      "action":{"key":"Down"}},\n\n\n  "toggleCapital":    {"display":{"aClass":"dcg-btn-gray",\n                                  "html":"<i class=\\"dcg-icon-shift\\"></i>",\n                                  "colspan":1.5},\n                                  "action":{"changeLayout": "capitalLetters"}},\n  "toggleLowercase":    {"display":{"aClass":"dcg-btn-gray dcg-active",\n                                  "html":"<i class=\\"dcg-icon-shift\\"></i>",\n                                  "colspan":1.5},\n                                  "action":{"changeLayout": "letters"}},\n  "loga":             {"display":{"html":"log_a"},\n                      "action":{"custom":"loga"}},\n  "ddx":              {"display":{"html":"d/dx"},\n                      "action":{"custom":"d/dx"}},\n  "sum":              {"display":{"html":"\\\\sum"},\n                      "action":{"cmd":"\\\\sum"}},\n  "prod":             {"display":{"html":"\\\\prod"},\n                      "action":{"cmd":"\\\\prod"}},\n  "highlightedX":     {"display":{"html":"x", "aClass":"dcg-highlighted"},\n                      "action":{"cmd":"x"}},\n  "highlightedY":     {"display":{"html":"y", "aClass": "dcg-highlighted"},\n                      "action":{"cmd":"y"}}\n  }\n}\n';});

define('main/keypad_keys',['require','jquery','underscore','i18n','mathquill','text!data/keypad_keys.json'],function(require){
  var $ = require('jquery');
  var _ = require('underscore');
  var i18n = require('i18n');
  var MathQuill = require('mathquill');
  var keypad_data = JSON.parse(require('text!data/keypad_keys.json'));
  var i;

  //Start with explicitly defined keys
  var keys = keypad_data.staticKeys;

  //Queue i18n to translate strings that show up in keyboard
  i18n.t('functions');
  i18n.t('A B C');
  i18n.t('more');
  i18n.t('enter');

  //Expand summary-form data from JSON to create input structure for keypad
  _.each(keypad_data.tabs, function(t){
    keys[t+'Tab'] = {display:{html:t}, action:{tab:t}};
  });

  _.each(keypad_data.oneArgFuncs, function (f) {
    keys[f] = {display:{html:f},action:{func:f}};
  });

  _.each(keypad_data.twoArgFuncs, function (f) {
    keys[f] = {display:{html:f},action:{func:f, args:2}};
  });

  _.each(keypad_data.trigFuncs, function (fn) {
    _.each([fn, 'arc'+fn,fn+'h'], function (f) {
      keys[f] = {display:{html:f},action:{func:f}};
    });
  });

  var ch;
  for (i = 0; i < 26; i++) { // A-F
    ch = String.fromCharCode(65+i);
    keys[ch] = {display:{html:ch}, action:{cmd:ch}};
  }

  for (i = 0; i < 26; i++) { // a-f
    ch = String.fromCharCode(97+i);
    keys[ch] = {display:{html:ch}, action:{cmd:ch}};
  }

  for (i = 0; i < 10; i++) { // 0-9
    var num = String.fromCharCode(48+i);
    keys[num] = {display:{html:num}, action:{cmd:num}};
  }

  var genButton = function (key, buttonId) {
    var display = key.display;
    var action = key.action;

    display.id = buttonId;
    
    if (!('cellClass' in display)) display.cellClass = '';

    if (!('aClass' in display)) display.aClass = '';

    if (display.colspan) {

      if (display.cellClass) display.cellClass += ' ';

      switch(display.colspan) {
        case 0.5:
          display.cellClass += 'dcg-halfwide';
          break;
        case 2:
          display.cellClass += 'dcg-twowide';
          break;
        case 1.5:
          display.cellClass += 'dcg-onepointfivewide';
          break;
      }
    }

    if (display.html) {
      display.aClass = (display.aClass ? display.aClass + ' dcg-key' : 'dcg-key');
      display.aClass += ' dcg-tappable';
    }

    if (
      !(action.tab || action.key || action.popup || action.changeLayout) &&
      !display.noMQ && display.html
    ) {
      display.mathquill = true;

      // ask mathquill for an html version of itself
      // note: this will break for things like parentheses with contents,
      // which need to be inserted into the dom to know their correct size.
      // but works for uncomplicated mathquill
      // WARNING - if run multiple times, this will modify this.keys in breaking ways
      display.html = MathQuill.StaticMath($('<span>' + display.html + '</span>')[0]).html();
      display.aClass += ' mq-math-mode';
    }
  };

  _.each(keys, genButton);

  return keys;
});

define('main/keypad_view',['require','loadcss!css/keypad','jquery','mathquill','underscore','main/cookie','template!keypad','underscore_view','pjs','tipsy','main/cookie','main/keypad_keys'],function (require) {
  require('loadcss!css/keypad');

  var $ = require('jquery');
  var MathQuill = require('mathquill');
  var _ = require('underscore');
  var Cookie = require('main/cookie');
  var template = require('template!keypad');
  var UnderscoreView = require('underscore_view');
  var P = require('pjs');
  require('tipsy');

  require('main/cookie');
  var KEYS = require('main/keypad_keys');

  var KeypadView = P(UnderscoreView, function (view, _super){

    view.template = template;

    view.init = function () {
      _super.init.call(this);
      this.keys = KEYS;
      this.setupKeypad();
      this.setLayout('mainNumbers');
      this.setProperty('functionsOpen', false);
      this.setProperty('isOpen', false);
      // Flag for whether the user has minimized the keypad with the minimize
      // button. In this case, we keep it minimized unless the user opens it with
      // the open keypad button.
      this.userMinimized = false;

      this.editableViews = [];
    };

    view.getEditableViewThatNeedsKeypad = function () {
      for (var i=0; i<this.editableViews.length; i++) {
        if (this.editableViews[i].needsFakeKeypad) {
          return this.editableViews[i];
        }
      }
      return null;
    };

    view.getActiveMathquill = function () {
      return MathQuill($(document.activeElement).closest('.mq-editable-field')[0]);
    };

    view.registerEditableView = function (editableView) {
      this.editableViews.push(editableView);
      editableView.observe('needsFakeKeypad', this.onNeedsFakeKeypad.bind(this));
    };

    view.onNeedsFakeKeypad = function () {
      this.requestSetIsOpen(!!this.getEditableViewThatNeedsKeypad());
    };

    view.didCreateElement = function(){
      var self = this;
      self.setLayout(self.layout);

      //handles to the various buttons that we're going to use a lot
      self.$hideBtn = self.$('.dcg-minimize-keypad');
      self.$showBtn = self.$('.dcg-show-keypad');
      self.$funcPopover = self.$('.dcg-functions-popover');
      self.$container = self.$('.dcg-keys-container');
      self.$keys = self.$('.dcg-keys');
      self.$funcBtn = self.$('.dcg-popupFunctions-key');
      self.setTab('trig');

      this.observeAndSync('isOpen', function () {
        self.$showBtn.toggle(!self.isOpen);
      });

      this.observe('functionsOpen', this.renderFunctionsOpen.bind(this));
      this.observe('graphpaperHeight', this.positionFunctionsPopup.bind(this));

      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        delegate: '.dcg-tooltip',
        gravity: 's',
        offset: 2
      });

      self.$().on('dcg-tap', '.dcg-tappable', function (evt) {
        var button = $(evt.target).closest('.dcg-tappable');
        self.buttonClicked(button);
      });

      //initialize hide & show
      self.$hideBtn.on("dcg-tap", function () {
        self.userMinimized = true;
        Cookie.setCookie("keypadMinimized", "true");
        self._hideKeypad();
      });

      self.$showBtn.on("dcg-tap", function () {
        self.userMinimized = false;
        Cookie.setCookie("keypadMinimized", "false");
        self._showKeypad();

        // focus is already in a mathquill.
        if (self.getActiveMathquill()) {
          return;
        }

        // the keypad is going to be maximized, but we have
        // no clear place to put focus. Run through the views
        // and request them to put focus.
        //
        // NOTE: works deterministically because only the
        // expressionsView defines the `.addFocusForKeypad()`
        // function. If we add more views that require the fake
        // keypad we can come up with something better.
        for (var i=0; i<self.editableViews.length; i++) {
          if (self.editableViews[i].addFocusForKeypad) {
            self.editableViews[i].addFocusForKeypad();
          }
        }

      });

      self.userMinimized = (Cookie.getCookie("keypadMinimized") === "true");
    };

    view._hideKeypad = function () {
      clearTimeout(this.__showHideTimeout);

      var self = this;
      // Timeout is used to avoid keypad flicker when moving between expressions.
      this.__showHideTimeout = setTimeout(function () {
        self.__showHideTimeout = null;
        self.setProperty('isOpen', false);
        self.setProperty('functionsOpen', false);
        self.$container.addClass('dcg-retracted');
      });
    };

    view._showKeypad = function () {
      clearTimeout(this.__showHideTimeout);
      var self = this;
      this.__showHideTimeout = setTimeout(function () {
        self.__showHideTimeout = null;
        self.setLayout("mainNumbers");
        self.setProperty('isOpen', true);
        self.$container.removeClass('dcg-retracted');
      });
    };

    view.requestSetIsOpen = function (isOpen) {
      if (this.userMinimized  && !this.isOpen) return;
      if (isOpen === this.isOpen && !this.__showHideTimeout) return;

      if (isOpen) {
        this._showKeypad();
      } else {
        this._hideKeypad();
      }
    };

    view.getButton = function (buttonId) {
      if (!this.keys[buttonId])
        buttonId = "unknown";
      return this.keys[buttonId].display;
    };

    view.buttonArray = function (buttonsString) {
      return _.map(buttonsString.split(' '), this.getButton, this);
    };

    view.setupKeypad = function () {

      this.buttons = {
        mainNumbersLeft: [
          {keys: this.buttonArray('highlightedX highlightedY squared exponent') },
          {keys: this.buttonArray('leftparen rightparen lt gt') },
          {keys: this.buttonArray('pipes comma le ge') },
          {keys: this.buttonArray('toggleLetters sqrt pi') }
        ],

        numbersMiddle: [
          {keys: this.buttonArray('7 8 9 divide') },
          {keys: this.buttonArray('4 5 6 times') },
          {keys: this.buttonArray('1 2 3 minus') },
          {keys: this.buttonArray('0 decimal equals plus') }
        ],

        numbersRight: [
          {keys: this.buttonArray('popupFunctions') },
          {keys: this.buttonArray('left right') },
          //intentionally leave the last blank off so that enter isn't covered by it
          {keys: this.buttonArray('halfBlank backspace') },
          {keys: this.buttonArray('enter') }
        ],

        letters: [
          {keys: this.buttonArray('q w e r t y u i o p') },
          {keys: this.buttonArray('halfBlank a s d f g h j k l halfBlank') },
          {keys: this.buttonArray('toggleCapital z x c v b n m backspace') },
          {keys: this.buttonArray(
            'toggleNumbers subscript plus openbracket opensquare twiddle theta enter'
          )}
        ],
        capitalLetters: [
          {keys: this.buttonArray('Q W E R T Y U I O P') },
          {keys: this.buttonArray('halfBlank A S D F G H J K L halfBlank') },
          {keys: this.buttonArray('toggleLowercase Z X C V B N M backspace') },
          {keys: this.buttonArray(
            'toggleNumbers subscript exponent closebracket closesquare colon tau enter'
          )}
        ]
      };

      this.popups = {
        functionsPopup: {
          trig: {
            tab:this.getButton('trigTab'),
            funcs: this.buttonArray(
              'sin arcsin sinh cos arccos cosh tan arctan tanh csc arccsc csch sec arcsec sech cot arccot coth'
            )
          },
          stats: {
            tab: this.getButton('statsTab'),
            funcs: this.buttonArray(
              'total length mean median min max quantile stdev stdevp var cov corr mad nCr nPr fact twiddle'
            )
          },
          misc: {
            tab: this.getButton('miscTab'),
            funcs: this.buttonArray('lcm gcd mod ceil floor round abs sign cuberoot exp ln log loga ddx sum prod')
          },

        }
      };
    };

    view.getTemplateParams = function(){
        return {buttons: this.buttons, popups: this.popups};
    };

    view.height = function () {
      return this.isOpen ? this.$container.height() : 0;
    };

    view.setLayout = function (newLayout) {
      this.layout = newLayout;
      this.$().removeClass('dcg-layout-letters dcg-layout-capitalLetters dcg-layout-mainNumbers')
              .addClass('dcg-layout-' + newLayout);
    };

    view.setTab = function (newTab) {
      var tabs = ['trig','stats','misc'];
      var self = this;
      _.each(tabs, function (tab) {
        self.$('[key=' + tab + 'Tab]').removeClass('dcg-selected');
        self.$('[section=' + tab + ']').hide();
      });
      this.$('[key=' + newTab + 'Tab]').addClass('dcg-selected');
      this.$('[section=' + newTab + ']').show();
    };

    view.renderFunctionsOpen = function () {
      this.$funcBtn.toggleClass("dcg-active", this.functionsOpen);
      this.$funcPopover.toggle(this.functionsOpen);
      this.positionFunctionsPopup();
    };

    view.positionFunctionsPopup = function () {
      if (!this.functionsOpen) return;

      //this just changes which direction the arrowhead is pointing
      var $arrow = this.$funcPopover.find('.dcg-arrow');
      if (this.graphpaperHeight < 525) {
        this.$funcPopover.removeClass("dcg-top").addClass("dcg-left");

        var btnDistanceFromBottom = this.$container.outerHeight() -
              (this.$funcBtn.offset().top - this.$container.offset().top);

        //subtract off half width and then make 2 adjustments:
        // -2px because popover has bottom: 2px
        // -10px to compensate for the 10px height of the arrow
        var arrowBottom = btnDistanceFromBottom - this.$funcBtn.outerHeight() / 2 - 2 - 10;

        $arrow.css({
          left: 'auto',
          bottom: arrowBottom
        });
      } else {
        this.$funcPopover.removeClass("dcg-left").addClass("dcg-top");
        $arrow.css({
          left: this.$funcPopover.width() - this.$funcBtn.width() / 2,
          bottom: 'auto',
        });
      }
    };

    view.buttonClicked = function (button) {
      /* jshint maxcomplexity:293 */
      var keyID        = this.$(button).attr('key'),
          buttonAction = this.keys[keyID].action;

      if (buttonAction.changeLayout) {
        this.setProperty('functionsOpen', false);
        this.setLayout(buttonAction.changeLayout);
        return;
      }
      if (buttonAction.tab) {
        return this.setTab(buttonAction.tab);
      }
      if (buttonAction.popup === 'functions') {
        return this.setProperty('functionsOpen', !this.functionsOpen);
      }

      //hide popup when any button is pressed (Except a popup or tab button)
      this.setProperty('functionsOpen', false);

      var editor = this.getActiveMathquill();

      if (buttonAction.custom) {
        switch (buttonAction.custom) {
          case 'enter':
            editor.typedText('\n');
            break;
          case 'loga':
            editor.write('\\log_{}');
            editor.typedText('(');
            editor.keystroke('Left');
            editor.keystroke('Down');
            break;
          case 'cuberoot':
            editor.write('\\sqrt[3]{}');
            editor.keystroke('Left');
            break;
          case 'squared':
            //route as if typed the exponent button, so that we get the
            //nice behavior where exponentiating in an exponent is treated
            //as a backspace first
            editor.cmd('^');
            editor.cmd('2');
            editor.keystroke('Right');
            break;
          case 'cubed':
            editor.write('^{3}');
            break;
          case 'd/dx':
            editor.write('\\frac{d}{dx}');
            break;
        }
      } else if (buttonAction.key) {
        editor.keystroke(buttonAction.key);
      } else if (buttonAction.cmd) {
        editor.cmd(buttonAction.cmd);
        //if (buttonAction.moveLeft) {
        //  editor.keystroke("Left");
        //}
      } else if (buttonAction.func) {
        var suffix = '(';
        if (buttonAction.args === 2) {
          suffix = '(,';
        }
        editor.typedText(buttonAction.func + suffix);
        if (buttonAction.args === 2) {
          editor.keystroke('Left');
        }
      }
      // after everything is said and done, tell mathquill it rendered. This
      // will update the value stored for the expressions latex. And that
      // will cause this change to go into undo/redo.
      $(editor.el()).trigger('render');
    };
  });

  return KeypadView;
});

define('migrations/0',['require','graphing/axisarrowmode'],function (require) {
  var AxisArrowMode = require('graphing/axisarrowmode');

  // 1. All expression list items store their type
  // 2. Non-standard latex operators are written from \operator form to
  // \operatorname{operator} form.

  var ItemTypes = {
    'expression': true,
    'table': true,
    'image': true,
    'folder': true,
    'text': true
  };

  function inferItemType (obj) {
    if (obj.type) {
      if (ItemTypes.hasOwnProperty(obj.type)) {
        return obj.type;
      } else {
        throw new Error('Invalid item type: \'' + obj.type + '\'.');
      }
    }
    if (obj.text !== undefined) return 'text';
    if (obj.columns !== undefined || obj.headings !== undefined) return 'table';
    return 'expression';
  }

  function migrateLatex (latex) {
    /* jshint maxlen: 250 */
    return latex.replace(
      /\\(total|length|mean|median|quantile|stdev|stddev|stdDev|stdevp|stddevp|stdDevP|var|variance|cov|corr|ceil|floor|round|abs|mod|lcm|mcm|mcd|nCr|nPr|signum|sign|arcsinh|arccosh|arctanh|arccsch|arcsech|arccoth|arccsc|arcsec|arccot)/g,
      '\\operatorname{$1}'
    );
  }

  function migrateTableColumn (column) {
    var out = {};
    for (var k in column) {
      if (!column.hasOwnProperty(k)) continue;
      if (k === 'latex') {
        out[k] = migrateLatex(column[k]);
      } else if (k === 'values') {
        out[k] = column[k].map(migrateLatex);
      } else {
        out[k] = column[k];
      }
    }
    return out;
  }

  function migrateExpressionItem (obj) {
    /* jshint maxcomplexity: 17 */
    var type = inferItemType(obj);

    var out = {};
    var k;
    switch (type) {
      case 'expression':
        for (k in obj) {
          if (!obj.hasOwnProperty(k)) continue;
          if (k === 'latex') {
            out[k] = migrateLatex(obj[k]);
          } else {
            out[k] = obj[k];
          }
        }
        out.type = type;
        return out;
      case 'table':
        for (k in obj) {
          if (!obj.hasOwnProperty(k)) continue;
          if (k === 'columns') {
            out[k] = obj[k].map(migrateTableColumn);
          } else {
            out[k] = obj[k];
          }
        }
        out.type = type;
        return out;
      case 'image':
        for (k in obj) {
          if (!obj.hasOwnProperty(k)) continue;
          if (
            k === 'width' ||
            k === 'height' ||
            k === 'x' ||
            k === 'y'
          ) {
            out[k] = migrateLatex(obj[k]);
          } else {
            out[k] = obj[k];
          }
        }
        out.type = type;
        return out;
      case 'text':
      case 'folder':
        for (k in obj) {
          if (!obj.hasOwnProperty(k)) continue;
          out[k] = obj[k];
        }
        out.type = type;
        return out;
    }
  }

  var arrowModeMap = {
    'none': AxisArrowMode.NONE,
    'both': AxisArrowMode.BOTH,
    'positive': AxisArrowMode.POSITIVE
  };

  function migrateGraphSettings (settings) {
    var newSettings = {};
    // Copy over existing settings
    for (var k in settings) {
      if (!settings.hasOwnProperty(k)) continue;
      // handle these separately
      if (k === 'xAxisArrows' || k === 'yAxisArrows') continue;
      newSettings[k] = settings[k];
    }

    // Translate xAxisArrows and yAxisArrows to xAxisArrowMode and yAxisArrowMode
    newSettings.xAxisArrowMode = arrowModeMap[settings.xAxisArrows || 'none'];
    newSettings.yAxisArrowMode = arrowModeMap[settings.yAxisArrows || 'none'];

    return newSettings;
  }

  function migrateState(state) {
    if (state.version) {
      throw new Error("Unexpected version: " + state.version);
    }
    var newState = {};
    newState.graph = migrateGraphSettings(state.graph);
    newState.expressions = {
      list: state.expressions.list.map(migrateExpressionItem)
    };
    newState.version = 0;
    return newState;
  }

  return migrateState;

});
define('main/migrate_state',['require','console','migrations/0'],function (require) {
  var console = require('console');

  // Migrations are functions from a serialized state to a new serialized state
  // with the next higher version. They are specified in the migrations folder.
  // They should not mutate the state that is passed to them, but should
  // instead return a new state. The new state may share structure with the
  // original state.
  //
  // States that have no version are migrated to version 0. Migrations should
  // be applied in series to migrate an input state from its version to
  // currentVersion.
  //
  // The only migration that exists so far is the migration from undefined version
  // to version 0.

  var migration0 = require('migrations/0');

  var migrations = [
    migration0
  ];

  var currentVersion = 0;

  function migrateToLatest (state) {
    if (state.version > currentVersion) {
      console.warn(
        'Loading saved state with version ' + state.version + ' ' +
        'but last known version is ' + currentVersion + '. States saved in a ' +
        'newer version of the calculator may not load correctly in an older ' +
        'version of the calculator.'
      );
      return state;
    }

    if (state.hasOwnProperty('version') && !migrations[state.version]) {
      console.warn(
        'State has invalid version ' + state.version + '. ' +
        'If a version is present, it should be a non-negative integer less ' +
        'than or equal to ' + currentVersion + '.'
      );
      return state;
    }

    if (!state.hasOwnProperty('version')) state = migrations[0](state);

    while (state.version < currentVersion) {
      state = migrations[state.version + 1](state);
    }

    return state;
  }

  return {
    migrations: migrations,
    currentVersion: currentVersion,
    migrateToLatest: migrateToLatest
  };

});
//Abstract out getState and setState functionality
//TODO - setState is still pretty gross, but this is better than copy/pasting that grossness

define('main/state_controller',['require','pjs','expressions/colors','jquery','main/migrate_state','console'],function (require) {
  var P = require('pjs');
  var Colors = require('expressions/colors');
  var $ = require('jquery');
  var MigrateState = require('main/migrate_state');
  var console = require('console');

  var StateController = P(function (proto) {

    var BLANK_STATE = {
      "version": 0,
      "graph": {
        "showGrid": true,
        "polarMode": false,
        "showXAxis": true,
        "showYAxis": true,
        "xAxisStep": 0,
        "yAxisStep": 0,
        "degreeMode": false,
        "xAxisArrowMode": "NONE",
        "yAxisArrowMode": "NONE",
        "xAxisLabel": "",
        "yAxisLabel": "",
        "xAxisNumbers": true,
        "yAxisNumbers": true,
        "polarNumbers": true,
        "projectorMode": false,
        "squareAxes": true,
        "viewport": {
          "xmin": -10,
          "ymin": -13.25,
          "xmax": 10,
          "ymax": 13.25
        }
      },
      "expressions": {
        "list": [
          {
            "id": "1",
            "type": "expression",
            "latex": "",
            "domain": {
              "min": 0,
              "max": 1
            },
            "hidden": false,
            "style": "normal",
            "residualVariable": "",
            "regressionParameters": {},
            "isLogModeRegression": false
          }
        ]
      }
    };

    if (BLANK_STATE.version !== MigrateState.currentVersion) {
      console.warn(
        'Blank state version is ' + BLANK_STATE.version + ', ' +
        'but latest migration version is ' + MigrateState.currentVersion + '. ' +
        'The blank state should be migrated to the latest version.'
      );
    }

    proto.init = function (grapher, expressionsModel, graphSettings, evaluator) {
      this.grapher = grapher;
      this.expressionsModel = expressionsModel;
      this.graphSettings = graphSettings;
      this.evaluator = evaluator;
      this.isFirstSetState = true;
    };

    proto.triggerSetState = function () {};

    proto.getState = function () {
      return {
        version: MigrateState.currentVersion,
        graph: this.grapher.getState(),
        expressions: this.expressionsModel.getState()
      };
    };

    proto.setState = function (state) {
      //don't set blank state more than once
      if (
        !this.isFirstSetState &&
        (state === null) &&
        this.expressionsModel.isEmpty()
      ) {
        return;
      }

      if (!state) state = BLANK_STATE;
      if (typeof state === 'string') state = JSON.parse(state);
      if (state) state = MigrateState.migrateToLatest(state);

      var self = this;
      var manipulator = function (state) {
        Colors.reset();

        // Empty the evaluator and the graph so that when we switch to the new
        // viewport, we don't flash a rescaled version of the old state.
        if ('expressions' in state) {
          self.expressionsModel.setState({ list: [] });
        }

        self.evaluator.batch(function () {
          self.expressionsModel.setSelected(null);
          self.grapher.clear();
          self.grapher.redrawGraphsLayer();

          if ('graph' in state) {
            if (!('degreeMode' in state.graph)) state.graph.degreeMode = false;

            self.grapher.setState(state.graph);
          }

          if ('expressions' in state) {
            self.expressionsModel.setState(state.expressions);
            self.evaluator.markAsCompleteState();
          }
        });
      };

      //apply it this first time, but don't add to undo/redo
      if (this.isFirstSetState) {
        manipulator(state);
        this.isFirstSetState = false;
        return;
      }

      var curState = this.getState();
      this.expressionsModel.undoRedo.addTransaction({
        type: this.expressionsModel.undoRedo.CAUSE_OF_CHANGE,
        undo: function () { manipulator(curState); },
        redo: function () { manipulator(state); },

        // we stringify two json objects that come out of the same function.
        // If the objects are the same, then the stringified versions will be
        // exactly the same.
        ensureChangeOccured: function () {
          var newState = JSON.stringify(self.getState());
          var oldState = JSON.stringify(curState);

          return oldState === newState;
        }
      });
    };

    proto.setBlank = function () {
      this.setState(BLANK_STATE);
    };

    proto.setStateFromURL = function (url) {
      return $.getJSON(url).done(function (msg) {
        this.setState(msg.state);
      }.bind(this));
    };
  });

  return StateController;

});

// Listens to expressionsModel and propagates selection changes to the grapher
// and evaluator.
//
// TODO this could be *much* simpler if we had a better model for expressing
// selection within a table.
define('main/propagate_selection',['require'],function (require) {
  function propagateSelection(expressionsModel, grapher, evaluator) {
    var lastSelectedId;
    var lastSelectedModel;
    
    // Show pois for the currently selected equation.
    var onSelectedExpressionChange = function () {
      var selected = expressionsModel.getSelected();
      // sets up a listener for changes in selection within tables and folders. It's fine
      // that we add these observers for even non-tables and non-folders.
      if (selected !== lastSelectedModel) {
        if (lastSelectedModel) {
          lastSelectedModel.unobserve('.propagate_selection');
        }
        if (selected) {
          selected.observe('selectedCell.propagate_selection', onSelectedExpressionChange);
          selected.observe('selectedHiddenChild.propagate_selection', onSelectedExpressionChange);
        }
        lastSelectedModel = selected;
      }
      
      var selectedId = (selected) ? selected.id : undefined;

      if (selected && selected.isTable) {
        var selectedCell = selected.selectedCell;
        if (selectedCell) {
          var selectedCol = selected.columns[selectedCell.column];
          selectedId = selectedCol ? selectedCol.id : undefined;
        } else {
          selectedId = undefined;
        }
      }
      
      if (selected && selected.isFolder) {
        var selectedChild = selected.selectedHiddenChild;
        if (selectedChild) {
          selectedId = selectedChild.id;
        } else {
          selectedId = undefined;
        }
      }

      var idChanged = (selectedId !== lastSelectedId);

      if (idChanged) {
        grapher.select(selectedId);
        var intersectIds = grapher.getOpenIntersectionIds();
        if (typeof selectedId !== "undefined") intersectIds[selectedId] = true;
        evaluator.setIntersectIds(intersectIds);
        // Causes a redraw that will update the grapher appearance.
        evaluator.updateIntersections(selectedId);
      }

      lastSelectedId = selectedId;
    };

    expressionsModel.observe('selectedItem', onSelectedExpressionChange);
  }

  return propagateSelection;
});
define('template!pillboxes', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-pillbox-container">\n\n  <div\n    class="dcg-settings-pillbox dcg-tooltip-e dcg-action-settings"\n      tooltip="'+
( t('Graph Settings') )+
'"\n  >\n    <i class="dcg-icon-wrench"></i>\n  </div>\n\n  <div class="dcg-zoom-container">\n    <div class="dcg-zoominout-pillbox">\n      <div class="dcg-action-zoomin dcg-tooltip-e" tooltip="'+
( t('Zoom In') )+
'">\n        <i class="dcg-icon dcg-icon-plus"></i>\n      </div>\n      <div class="dcg-option dcg-action-zoomout dcg-tooltip-e" tooltip="'+
( t('Zoom Out') )+
'">\n        <i class="dcg-icon dcg-icon-minus"></i>\n      </div>\n    </div>\n    <div class="dcg-option dcg-action-zoomrestore dcg-tooltip-e" tooltip="'+
( t('Default Zoom') )+
'">\n      <i class="dcg-icon dcg-icon-home"></i>\n    </div>\n  </div>\n\n  <div class="dcg-graphpaper-branding">\n    <div class="dcg-powered-by">'+
( t('powered by') )+
'</div>\n    <i class="dcg-icon-desmos"></i>\n  </div>\n<div>';
}
return __p;
};});
define('loadcss!css/settings', function(){});
define('template!settings', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-settings-container dcg-left dcg-popover dcg-constrained-height-popover">\n    <div class="dcg-popover-interior">\n      <div class="dcg-popover-fixedwidth">\n        <div class="dcg-popover-content">\n          <div class="dcg-modern-btn dcg-action-projectormode">'+
( t('Projector Mode') )+
'</div>\n        </div>\n\n        <div class="dcg-popover-content dcg-graph-settings">\n\n          <div class="dcg-section-title">\n            '+
( t('Graph Paper') )+
'\n          </div>\n\n          <div class="dcg-grid-settings">\n            <div class="dcg-polargroup">\n              <div class="dcg-icon dcg-action-cartesian"></div>\n              <div class="dcg-icon dcg-action-polar"></div>\n              <div class="dcg-title">'+
( t('Grid') )+
'</div>\n            </div>\n\n            <span class="dcg-checkbox dcg-action-zoomsquare">\n              <span class="dcg-checkbox-box"><i class="dcg-icon-check"></i></span>\n              <span class="dcg-checkbox-label">'+
( t('Square Grid') )+
'</span>\n            </span>\n            <div style="clear:both"></div>\n          </div>\n\n          <div class="dcg-collapsable-options dcg-x-axis-options dcg-collapsed">\n            <div class="dcg-icon dcg-x-arrows dcg-display-icon"><i class="dcg-icon-hidden"></i></div>\n\n            <div class="dcg-title-container">\n              <div class="dcg-caret-container"><i class="dcg-icon-caret-down" ></i></div>\n              <div class="dcg-title">'+
( t('X-Axis') )+
'</div>\n            </div>\n            <input class="dcg-axis-label dcg-x-axis-label" placeholder="'+
( t('add label') )+
'" />\n\n            <div class="dcg-readonly-inputs">\n              <div class="dcg-readonly-mathquill-container">\n                <span class="dcg-action-editinput" data-dcg-limit="xmin"></span><span class="dcg-interval-interior">\\le x\\le </span><span class="dcg-action-editinput" data-dcg-limit="xmax"></span>\n              </div>\n              <div class="dcg-readonly-mathquill-container dcg-step-container">\n                <span class="dcg-step-label">'+
( t('Step:') )+
'</span>\n                <span class="dcg-action-editinput" data-dcg-limit="xstep"></span>\n              </div>\n              <div style="clear:both"></div>\n\n            </div>\n\n            <div class="dcg-editable-inputs">\n              <div class="dcg-editable-mathquill-container">\n                <span class="dcg-math-field" data-dcg-limit="xmin"></span>\n                <span class="dcg-interval-interior">\\le x\\le </span>\n                <span class="dcg-math-field" data-dcg-limit="xmax"></span>\n                <span class="dcg-step-container">\n                  <span class="dcg-step-label">'+
( t('Step:') )+
'</span>\n                  <span class="dcg-math-field" data-dcg-limit="xstep"></span>\n                </span>\n              </div>\n            </div>\n\n            <div class="dcg-more-options">\n              <span>\n                <div class="dcg-arrows-label">'+
( t('Arrows:') )+
'</div>\n                <div class="dcg-icon dcg-x-arrows" dcg-arrows="NONE"></div>\n                <div class="dcg-icon dcg-x-arrows" dcg-arrows="POSITIVE"></div>\n                <div class="dcg-icon dcg-x-arrows" dcg-arrows="BOTH"></div>\n              </span>\n              <span class="dcg-checkbox dcg-action-xaxisnumbers">\n                <span class="dcg-checkbox-box"><i class="dcg-icon-check"></i></span>\n                <span class="dcg-checkbox-label">'+
( t('Show Numbers') )+
'</span>\n              </span>\n            </div>\n          </div>\n\n          <div class="dcg-collapsable-options dcg-y-axis-options dcg-collapsed">\n            <div class="dcg-icon dcg-y-arrows dcg-display-icon"><i class="dcg-icon-hidden"></i></div>\n\n            <div class="dcg-title-container">\n              <div class="dcg-caret-container"><i class="dcg-icon-caret-down" ></i></div>\n              <div class="dcg-title">'+
( t('Y-Axis') )+
'</div>\n            </div>\n            <input class="dcg-axis-label dcg-y-axis-label" placeholder="'+
( t('add label') )+
'" />\n\n            <div class="dcg-readonly-inputs">\n              <div class="dcg-readonly-mathquill-container">\n                <span class="dcg-action-editinput" data-dcg-limit="ymin"></span><span class="dcg-interval-interior">\\le y\\le </span><span class="dcg-action-editinput" data-dcg-limit="ymax"></span>\n              </div>\n              <div class="dcg-readonly-mathquill-container dcg-step-container">\n                <span class="dcg-step-label">'+
( t('Step:') )+
'</span>\n                <span class="dcg-action-editinput" data-dcg-limit="ystep"></span>\n              </div>\n              <div style="clear:both"></div>\n            </div>\n\n            <div class="dcg-editable-inputs">\n              <div class="dcg-editable-mathquill-container">\n                <span class="dcg-math-field" data-dcg-limit="ymin"></span>\n                <span class="dcg-interval-interior">\\le y\\le </span>\n                <span class="dcg-math-field" data-dcg-limit="ymax"></span>\n                <span class="dcg-step-container">\n                  <span class="dcg-step-label">'+
( t('Step:') )+
'</span>\n                  <span class="dcg-math-field" data-dcg-limit="ystep"></span>\n                </span>\n              </div>\n            </div>\n\n            <div class="dcg-more-options">\n              <span>\n                <div class="dcg-arrows-label">'+
( t('Arrows:') )+
'</div>\n                <div class="dcg-icon dcg-y-arrows" dcg-arrows="NONE"></div>\n                <div class="dcg-icon dcg-y-arrows" dcg-arrows="POSITIVE"></div>\n                <div class="dcg-icon dcg-y-arrows" dcg-arrows="BOTH"></div>\n              </span>\n              <span class="dcg-checkbox dcg-action-yaxisnumbers">\n                <span class="dcg-checkbox-box"><i class="dcg-icon-check"></i></span>\n                <span class="dcg-checkbox-label">'+
( t('Show Numbers') )+
'</span>\n              </span>\n            </div>\n          </div>\n\n          <div class="dcg-section-title">\n            '+
( t('Angles') )+
'\n          </div>\n          <div class="dcg-radiangroup">\n            <div class="dcg-action-degreemode dcg-modern-btn">'+
( t('Degrees') )+
'</div>\n            <div class="dcg-action-radianmode dcg-modern-btn">'+
( t('Radians') )+
'</div>\n\n            <div class="dcg-polarnumbers-container">\n              <span class="dcg-checkbox dcg-action-polarnumbers">\n                <span class="dcg-checkbox-box"><i class="dcg-icon-check"></i></span>\n                <span class="dcg-checkbox-label">'+
( t('Show Grid Angles') )+
'</span>\n              </span>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n      <div class="dcg-arrow"></div>\n    </div>\n</div>';
}
return __p;
};});
define('main/settings_view',['require','loadcss!css/settings','jquery','underscore','pjs','mathquill','main/popover_view','graphing/viewport','conditional_blur','math/builtinframe','parser','math/parsenode/constant','keys','graphing/label','template!settings','vendor/jquery.html5-placeholder-shim','scroll_helpers'],function(require){
  require('loadcss!css/settings');
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var MathQuill = require('mathquill');
  var PopoverView = require('main/popover_view');
  var Viewport = require('graphing/viewport');
  var conditionalBlur = require('conditional_blur');
  var BuiltInFrame = require('math/builtinframe');
  var Parser = require('parser');
  var Constant = require('math/parsenode/constant');
  var Keys = require('keys');
  var Label = require('graphing/label');
  var template = require('template!settings');
  require('vendor/jquery.html5-placeholder-shim');
  var scrollHelpers = require('scroll_helpers');

  function formatLatex (num, scale) {
    var label = Label.value(num, scale);
    var latex = '';

    // scientific notation
    if (label.mantissa) {
      latex = label.mantissa.split('×').join('\\cdot') + "^{" + label.superscript + "}";
    } else {
      // fraction
      var frac_parts = label.string.split("/");
      if (frac_parts.length === 2) {
        latex = '\\frac{'+ frac_parts[0] +'}{'+ frac_parts[1] +'}';
      } else {
        latex = label.string;
      }
    }
    return latex;
  }

  /*
  * view for the settings bar
  */
  var SettingsView = P(PopoverView, function (view, _super){
    view.viewport = new Viewport();
    view.template = template;
    view.pointToSelector = '.dcg-action-settings i';

    view.init = function (grapher) {
      _super.init.call(this);
      this.grapher = grapher;
      this.settings = this.grapher.settings;
    };

    // don't do anything if we're inside the popover or if we're inside the openButton
    view.eventShouldClosePopover = function (evt) {
      if (this.eventIsWithinPopover(evt)) {
        return false;
      }
      if (this.isMathquillFocused() && $(evt.target).closest('.dcg-keypad').length) {
        return false;
      }
      return true;
    };

    view.renderIsVisible = function () {
      _super.renderIsVisible.call(this);
      //closing or opening unsets our preservedPreSquareAxes
      this.setProperty('preservedPreSquareAxes', undefined);
      if (this.isVisible && $.placeholder) {
        if ($.placeholder) $.placeholder.shim();
      }
    };

    view.setBottom = function (bottom) {
      this.$().css('bottom', bottom);
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      var self = this;

      // setup the readonly mathquills
      var staticMaths = this.staticMaths = {};
      this.$('.dcg-action-editinput').each(function() {
        staticMaths[$(this).data('dcg-limit')] = MathQuill.StaticMath(this);
      })
      .unbind('mousedown');
          // TODO - revisit after new mathquill. For some reason the readonly mathquills
          // actively blur other mathquills on mousedown. We don't want that in this case.
          // see the comment on .dcg-readonly-inputs dcg-tapstart below for more information.
          //
          // Han: MathQuills blurring other mathquills on mousedown isn't weird, anything
          // blurs whenever anything else receives mousedown. The problem is that normally
          // you can preventDefault() on mousedown to prevent the currently focused thing
          // from blurring (like we do below on tapstart), but since MathQuill manually
          // focuses its textarea on mousedown, it's not enough. TODO: if possible,
          // MathQuill should check event.isDefaultPrevented() instead


      this.$('.dcg-interval-interior').each(function() {
        var html = MathQuill.StaticMath($('<span>' + $(this).text() + '</span>')[0]).html();
        $(this).html(html).addClass('mq-math-mode');
      });

      // setup the editable mathquills
      var mathFields = this.mathFields = {};
      this.$('.dcg-math-field').each(function() {
        mathFields[$(this).data('dcg-limit')] = MathQuill.MathField(this);
      })
      .addClass('dcg-math-input')
      .on('focusin', self.focusInMathquill.bind(self))
      .on('focusout', self.focusOutMathquill.bind(self))
      .on('render', self.handleMathquillInput.bind(self))
      .on('keydown', self.handleKeydown.bind(self))
      .on('enterPressed', conditionalBlur);

      this.$('.dcg-action-zoomsquare').on('dcg-tap', this.handleZoomSquare.bind(this));

      this.$('.dcg-readonly-inputs').on('dcg-tapstart', function (evt) {
        // 1) make sure both the x-axis and y-axis options are collapsed.
        // 2) click in the readonly xmin mathquill. => The x-axis won't expand but the mathquills are editable
        // 3) mousedown in the readonly ymin mathquill.
        //
        // The browser wants to blur the xmin input. If that happens the x-axis inputs will go back
        // to readonly. That'll cause the layout to change. When you mouseup on the readonly ymin input, it may
        // no longer be under your mouse. That'd prevent the dcg-tap event from firing and making ymin editable.
        //
        // Solution:
        // preventDefault() on mousedown within this area.
        evt.preventDefault();
      });

      this.$('.dcg-readonly-mathquill-container').on('dcg-tap', function (evt) {
        var $container = $(this);
        var $target = $(evt.target);
        var $readonly_mathquill = $target.closest('.dcg-action-editinput');

        if (!$readonly_mathquill.length) {
          $readonly_mathquill = $container.find('.dcg-action-editinput:first');
        }

        var limit = $readonly_mathquill.data('dcg-limit');

        var collapsable = self.$(evt.target).closest('.dcg-collapsable-options');
        collapsable.addClass('dcg-input-focused');

        self.mathFields[limit].focus();
      });

      this.$('.dcg-action-polarnumbers').on('dcg-tap', function () {
        if ($(this).hasClass('dcg-disabled')) return;
        self.settings.setProperty('polarNumbers', !self.settings.polarNumbers);
      });
      this.$('.dcg-action-xaxisnumbers').on('dcg-tap', function () {
        if ($(this).hasClass('dcg-disabled')) return;
        self.settings.setProperty('xAxisNumbers', !self.settings.xAxisNumbers);
      });
      this.$('.dcg-action-yaxisnumbers').on('dcg-tap', function () {
        if ($(this).hasClass('dcg-disabled')) return;
        self.settings.setProperty('yAxisNumbers', !self.settings.yAxisNumbers);
      });
      this.$('.dcg-x-axis-label').on('change copy paste cut keypress keydown keyup', function () {
        self.settings.setProperty('xAxisLabel', $(this).val());
      });
      this.$('.dcg-y-axis-label').on('change copy paste cut keypress keydown keyup', function () {
        self.settings.setProperty('yAxisLabel', $(this).val());
      });

      this.$('.dcg-action-polar').on('dcg-tap', function () {
        if (self.settings.showGrid && self.settings.polarMode) {
          //break out of polar here, so that we can set step sizes again
          self.settings.setProperty('polarMode', false);
          self.settings.setProperty('showGrid', false);
        } else {
          self.settings.setProperty('showGrid', true);
          self.settings.setProperty('polarMode', true);
        }
      });
      this.$('.dcg-action-cartesian').on('dcg-tap', function () {
        if (self.settings.showGrid && !self.settings.polarMode) {
          self.settings.setProperty('showGrid', false);
        } else {
          self.settings.setProperty('showGrid', true);
          self.settings.setProperty('polarMode', false);
        }
      });

      this.$('.dcg-action-radianmode').on('dcg-tap', function (){
        self.settings.setProperty(
          'degreeMode',
          false
        );
      });
      this.$('.dcg-action-degreemode').on('dcg-tap', function (){
        self.settings.setProperty(
          'degreeMode',
          true
        );
      });
      this.$('.dcg-action-projectormode').on('dcg-tap', function (){
        self.settings.setProperty(
          'projectorMode',
          !self.settings.projectorMode
        );
      });
      this.$('.dcg-x-arrows:not(.dcg-display-icon)').on('dcg-tap', function () {
        self.settings.setProperty('showXAxis', true);
        self.settings.setProperty('xAxisArrowMode', self.$(this).attr('dcg-arrows'));
      });
      this.$('.dcg-y-arrows:not(.dcg-display-icon)').on('dcg-tap', function () {
        self.settings.setProperty('showYAxis', true);
        self.settings.setProperty('yAxisArrowMode', self.$(this).attr('dcg-arrows'));
      });
      this.$('.dcg-x-axis-options .dcg-display-icon').on('dcg-tap', function () {
        self.settings.setProperty('showXAxis', !self.settings.showXAxis);
      });
      this.$('.dcg-y-axis-options .dcg-display-icon').on('dcg-tap', function () {
        self.settings.setProperty('showYAxis', !self.settings.showYAxis);
      });

      // collapses / expand options
      this.$('.dcg-collapsable-options').find('.dcg-caret-container, .dcg-title').on('dcg-tap', function (evt) {
        self.$(evt.target).closest('.dcg-collapsable-options').toggleClass('dcg-collapsed');
      });

      this.addSettingsObserver('projectorMode', this.renderProjectorMode);
      this.addSettingsObserver('xAxisArrowMode showXAxis', this.renderXArrows);
      this.addSettingsObserver('yAxisArrowMode showYAxis', this.renderYArrows);
      this.addSettingsObserver('polarNumbers showGrid polarMode', this.renderPolarNumbers);
      this.addSettingsObserver('xAxisNumbers showXAxis', this.renderXAxisNumbers);
      this.addSettingsObserver('yAxisNumbers showYAxis', this.renderYAxisNumbers);
      this.addSettingsObserver('xAxisLabel showXAxis', this.renderXAxisLabel);
      this.addSettingsObserver('yAxisLabel showYAxis', this.renderYAxisLabel);
      this.addSettingsObserver('computedStepSizes xAxisStep', this.renderXStep);
      this.addSettingsObserver('computedStepSizes yAxisStep', this.renderYStep);

      this.addSettingsObserver('degreeMode', this.renderDegreeMode);
      this.addSettingsObserver('squareAxes', this.renderSquareAxes);
      this.addSettingsObserver('showGrid polarMode', this.renderPolarMode);
      this.observe('preservedPreSquareAxes', this.renderSquareAxes.bind(this));

      this.updateMathquillInputs();
    };

    view.handleZoomSquare = function () {
      if (this.settings.squareAxes && !this.preservedPreSquareAxes) return;

      //if we're squaring the axes, remember what the viewport was just before so that
      //another click will go back to what we had
      if (!this.settings.squareAxes) {
        var preservedPreSquareAxes = this.viewport.clone();
        //this next step will synchronously update the axes,
        //which will trigger setViewport here, clearing out preservedPreSquareAxes
        this.settings.setProperty('squareAxes', true);
        //alright, we're safe and can set preservedPreSquareAxes
        this.setProperty('preservedPreSquareAxes', preservedPreSquareAxes);
        return;
      }

      //do this directly instead of going through setViewport so that the correct
      //preserve direction is maintained (otherwise repeated clicking would toggle
      //between adjusting x and adjusting y)
      this.grapher.viewportController.setViewport(this.preservedPreSquareAxes);
      this.preservedPreSquareAxes = undefined;
    };

    view.handleKeydown = function (evt) {
      var key = Keys.lookup(evt);

      if (key === Keys.ESCAPE) conditionalBlur();
    };

    function evaluateMathquill (mathField, useDegrees) {
      var latex = mathField.latex();

      // TODO avoid duplicating logic for setting degree mode in frame
      var frame = Object.create(BuiltInFrame, {
        trigAngleMultiplier: Constant(useDegrees ? Math.PI / 180 : 1)
      });

      return +Parser.parse(latex).tryGetConcreteTree(frame).constantValue;
    }

    view.handleMathquillInput = function(evt) {
      var degreeMode = !!this.settings.degreeMode;
      var xmin = evaluateMathquill(this.mathFields.xmin, degreeMode);
      var xmax = evaluateMathquill(this.mathFields.xmax, degreeMode);
      var xstep;
      if (this.mathFields.xstep.latex() === '') {
        xstep = 0;
      } else {
        xstep = evaluateMathquill(this.mathFields.xstep, degreeMode);
      }

      var ymin = evaluateMathquill(this.mathFields.ymin, degreeMode);
      var ymax = evaluateMathquill(this.mathFields.ymax, degreeMode);
      var ystep;
      if (this.mathFields.ystep.latex() === '') {
        ystep = 0;
      } else {
        ystep = evaluateMathquill(this.mathFields.ystep, degreeMode);
      }

      var invalids = {};

      var isFiniteNumber = function (num) {
        return isFinite(num) && typeof num === 'number';
      };

      var tempViewport = new Viewport(xmin, xmax, ymin, ymax);

      if (isFiniteNumber(xmin) && isFiniteNumber(xmax)) {
        invalids.xmin = !tempViewport.isXValid();
        invalids.xmax = invalids.xmin;
      } else {
        invalids.xmin = !isFiniteNumber(xmin);
        invalids.xmax = !isFiniteNumber(xmax);
      }

      if (isFiniteNumber(ymin) && isFiniteNumber(ymax)) {
        invalids.ymin = !tempViewport.isYValid();
        invalids.ymax = invalids.ymin;
      } else {
        invalids.ymin = !isFiniteNumber(ymin);
        invalids.ymax = !isFiniteNumber(ymax);
      }

      if (isFiniteNumber(xstep)) {
        invalids.xstep = false;
        this.settings.setProperty('xAxisStep', xstep);
      } else {
        invalids.xstep = true;
      }

      if (isFiniteNumber(ystep)) {
        invalids.ystep = false;
        this.settings.setProperty('yAxisStep', ystep);
      } else {
        invalids.ystep = true;
      }

      this.setViewport(tempViewport);

      _.each(this.mathFields, function(mathField, limit) {
        $(mathField.el()).toggleClass('dcg-invalid', invalids[limit]);
      });

      if (this.grapher && this.grapher.screen) {
        this.settings.setProperty(
          'squareAxes',
          tempViewport.isSquare(this.grapher.screen)
        );
      }
    };

    view.updateNeedsFakeKeypad = function () {
      this.setProperty('needsFakeKeypad', this.isMathquillFocused());
    };

    view.focusInMathquill = function(evt) {
      var input = this.$(evt.target).closest('.dcg-math-input');
      var collapsable = this.$(evt.target).closest('.dcg-collapsable-options');

      //focusin is triggered always, even when reclicking into a selected mathquill
      //we don't want to reselect in that case.
      if (input.hasClass('dcg-focus')) return;

      input.addClass('dcg-focus');
      MathQuill(input[0]).select();
      collapsable.addClass('dcg-input-focused');
      this.updateNeedsFakeKeypad();

      //make sure inputs visible, but put it in a 1 frame timeout so that the keypad has time to show
      var container = this.$('.dcg-popover-interior');
      setTimeout(function() {
        scrollHelpers.scrollVisible(input, container, 50);
      }, 0);
    };

    view.focusOutMathquill = function(evt) {
      var input = this.$(evt.target).closest('.mq-editable-field');
      var collapsable = this.$(evt.target).closest('.dcg-collapsable-options');

      input.removeClass('dcg-focus');
      MathQuill(input[0]).clearSelection();

      // Disable reverting mathquills right after a focusout.
      // If the user pressed 'tab' then there will be a focusin
      // event next. If focus goes into an element in the
      // same row, then we should not update the mathquills.
      clearTimeout(this.focusedOutRecentlyTimeout);
      this.focusedOutRecently = true;
      this.focusedOutRecentlyTimeout = setTimeout(function () {
        if (collapsable.find('.dcg-focus').length === 0) {
          collapsable.removeClass('dcg-input-focused');
        }

        this.focusedOutRecently = false;
        this.updateMathquillInputs();
      }.bind(this));

      this.updateNeedsFakeKeypad();
    };

    view.addSettingsObserver = function (prop, func) {
      var f = func.bind(this);
      this.settings.observe(prop, f);
      f();
    };

    view.renderProjectorMode = function () {
      var pmode = this.settings.projectorMode;
      this.$('.dcg-action-projectormode').toggleClass('dcg-active', !!pmode);
    };

    view.renderXArrows = function () {
      var arrows = this.settings.xAxisArrowMode;
      var showAxis = this.settings.showXAxis;

      this.$(".dcg-x-axis-options .dcg-display-icon").attr('dcg-arrows', arrows);
      this.$(".dcg-x-arrows").toggleClass('dcg-active', false);

      if (showAxis) {
        this.$(".dcg-x-arrows[dcg-arrows="+arrows+"]").toggleClass('dcg-active', true);
      }
    };

    view.renderYArrows = function () {
      var arrows = this.settings.yAxisArrowMode;
      var showAxis = this.settings.showYAxis;

      this.$(".dcg-y-axis-options .dcg-display-icon").attr('dcg-arrows', arrows);
      this.$(".dcg-y-arrows").toggleClass('dcg-active', false);

      if (showAxis) {
        this.$(".dcg-y-arrows[dcg-arrows="+arrows+"]").toggleClass('dcg-active', true);
      }
    };

    view.renderDegreeMode = function () {
      var degrees = this.settings.degreeMode;
      this.$(".dcg-action-radianmode").toggleClass('dcg-active', !degrees);
      this.$(".dcg-action-degreemode").toggleClass('dcg-active', !!degrees);
    };

    view.renderSquareAxes = function () {
      var square = this.settings.squareAxes;
      var disabled = square && !this.preservedPreSquareAxes;
      this.$(".dcg-action-zoomsquare")
          .toggleClass("dcg-disabled", !!disabled)
          .toggleClass("dcg-checked", !!square);
    };

    view.renderPolarNumbers = function () {
      var checked = this.settings.polarNumbers;
      var polarMode = this.settings.polarMode;
      var checkbox = this.$('.dcg-action-polarnumbers');

      checkbox.toggleClass('dcg-checked', checked);
      checkbox.toggle(polarMode); //only show the checkbox if we're in polarMode
    };

    view.renderXAxisNumbers = function () {
      var checked = this.settings.xAxisNumbers;
      var axisShown = this.settings.showXAxis;
      var checkbox = this.$('.dcg-action-xaxisnumbers');

      checkbox.toggleClass('dcg-checked', checked);
      checkbox.toggleClass('dcg-disabled', !axisShown);
    };

    view.renderYAxisNumbers = function () {
      var checked = this.settings.yAxisNumbers;
      var axisShown = this.settings.showYAxis;
      var checkbox = this.$('.dcg-action-yaxisnumbers');

      checkbox.toggleClass('dcg-checked', checked);
      checkbox.toggleClass('dcg-disabled', !axisShown);
    };

    view.renderXAxisLabel = function () {
      var input = this.$('.dcg-x-axis-label');
      var axisShown = this.settings.showXAxis;

      // prevent cursor from moving to end unexpectedly
      if (input.val() !== this.settings.xAxisLabel) {
        input.val(this.settings.xAxisLabel);
      }

      if (!axisShown) {
        input.prop('disabled', true);
      } else {
        input.prop('disabled', false);
      }
    };
    view.renderYAxisLabel = function () {
      var input = this.$('.dcg-y-axis-label');
      var axisShown = this.settings.showYAxis;

      // prevent cursor from moving to end
      if (input.val() !== this.settings.yAxisLabel) {
        input.val(this.settings.yAxisLabel);
      }

      if (!axisShown) {
        input.prop('disabled', true);
      } else {
        input.prop('disabled', false);
      }
    };

    view.renderXStep = function () {
      var userStep = this.settings.xAxisStep;
      var computedStep = this.settings.computedStepSizes && this.settings.computedStepSizes.majorStepX;
      var outOfBounds = !!(userStep && computedStep && userStep !== computedStep && userStep !== Math.PI);

      $(this.mathFields.xstep.el()).toggleClass('dcg-outofbounds', outOfBounds);
      $(this.staticMaths.xstep.el()).toggleClass('dcg-outofbounds', outOfBounds);
      this.updateMathquillInputs();
    };

    view.renderYStep = function () {
      var userStep = this.settings.yAxisStep;
      var computedStep = this.settings.computedStepSizes && this.settings.computedStepSizes.majorStepY;
      var outOfBounds = !!(userStep && computedStep && userStep !== computedStep && userStep !== Math.PI);

      $(this.mathFields.ystep.el()).toggleClass('dcg-outofbounds', outOfBounds);
      $(this.staticMaths.ystep.el()).toggleClass('dcg-outofbounds', outOfBounds);
      this.updateMathquillInputs();
    };

    view.renderPolarMode = function () {
      var showGrid = this.settings.showGrid;
      this.$('.dcg-action-cartesian').toggleClass('dcg-active', !this.settings.polarMode && showGrid);
      this.$('.dcg-action-polar').toggleClass('dcg-active', !!this.settings.polarMode && showGrid);

      // hide "steps" when in polar mode
      this.$('.dcg-step-container').toggle(!this.settings.polarMode);
    };

    // NOTE: because focusin happens before focusout, we temporarily have two
    // editable mathquills with .dcg-focus when switching between mathquills.
    view.isMathquillFocused = function () {
      return this.$('.mq-editable-field.dcg-focus').length > 0;
    };

    view.isXRangeFocused = function () {
      return this.$('.dcg-x-axis-options .dcg-editable-inputs .dcg-focus').length > 0;
    };

    view.isYRangeFocused = function () {
      return this.$('.dcg-y-axis-options .dcg-editable-inputs .dcg-focus').length > 0;
    };

    view.updateMathquillInputs = function () {
      if (this.focusedOutRecently) return;
      if (!this.mathFields) return;

      function setLatexIfChanged (mathField) {
        var limit = $(mathField.el()).data('dcg-limit');
        var latex = limits[limit];
        if (mathField.latex() !== latex) {
          mathField.latex(latex);
        }
      }

      var limits = {};
      var viewport = this.viewport;
      limits.xmin = formatLatex(viewport.xmin, viewport.xmax - viewport.xmin);
      limits.xmax = formatLatex(viewport.xmax, viewport.xmax - viewport.xmin);
      limits.ymin = formatLatex(viewport.ymin, viewport.ymax - viewport.ymin);
      limits.ymax = formatLatex(viewport.ymax, viewport.ymax - viewport.ymin);

      if (this.settings.xAxisStep) {
        limits.xstep = formatLatex(this.settings.xAxisStep, viewport.xmax - viewport.xmin);
      } else {
        limits.xstep = '';
      }

      if (this.settings.yAxisStep) {
        limits.ystep = formatLatex(this.settings.yAxisStep, viewport.ymax - viewport.ymin);
      } else {
        limits.ystep = '';
      }
      var unfocusedEditable = [];

      // only update x-mathquills if no x-mathquill is focused.
      // aids in range modification when passing through invalid
      // states.
      if (this.isXRangeFocused() === false) {
        unfocusedEditable.push(this.mathFields.xmin);
        unfocusedEditable.push(this.mathFields.xmax);
        unfocusedEditable.push(this.mathFields.xstep);
      }

      // only update y-mathquills if no y-mathquill is focused.
      // aids in range modification when passing through invalid
      // states.
      if (this.isYRangeFocused() === false) {
        unfocusedEditable.push(this.mathFields.ymin);
        unfocusedEditable.push(this.mathFields.ymax);
        unfocusedEditable.push(this.mathFields.ystep);
      }
      _.each(unfocusedEditable, setLatexIfChanged);

      var computedSteps = this.settings.computedStepSizes;
      if (limits.xstep === '' && computedSteps && computedSteps.majorStepX) {
        limits.xstep = formatLatex(computedSteps.majorStepX, viewport.xmax - viewport.xmin);
      }

      if (limits.ystep === '' && computedSteps && computedSteps.majorStepY) {
        limits.ystep = formatLatex(computedSteps.majorStepY, viewport.ymax - viewport.ymin);
      }

      _.each(this.staticMaths, setLatexIfChanged);
    };

    view.setViewport = function (newViewport) {

      if (newViewport.equals(this.viewport)) return;
      if (!newViewport.isValid()) return;

      //any change to the viewport unsets our preservedPreSquareAxes
      this.setProperty('preservedPreSquareAxes', undefined);

      this.viewport = newViewport.clone();

      // set lastChangedAxis
      var oldViewport = this.grapher.viewportController.getViewport();
      if (oldViewport.ymax !== newViewport.ymax || oldViewport.ymin !== newViewport.ymin)
        this.settings.lastChangedAxis = 'y';
      if (oldViewport.xmax !== newViewport.xmax || oldViewport.xmin !== newViewport.xmin)
        this.settings.lastChangedAxis = 'x';

      this.updateMathquillInputs();
      this.grapher.viewportController.setViewport(newViewport);
    };

  });

  return SettingsView;
});

define('loadcss!css/pillboxes', function(){});
define('main/pillbox_view',['require','pjs','underscore_view','template!pillboxes','main/settings_view','tipsy','loadcss!css/pillboxes'],function (require) {
  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!pillboxes');
  var SettingsView = require('main/settings_view');

  require('tipsy');

  require('loadcss!css/pillboxes');

  var ZoomView = P(UnderscoreView, function (view, _super) {
    view.init = function (viewportController) {
      _super.init.call(this);
      this.template = template;
      this.viewportController = viewportController;

      this.settingsView = SettingsView(viewportController.grapher);
      this.settingsView.headerView = this;
    };

    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      view = this.settingsView;
      view.appendTo(this.$());

      this.settingsView.setupOpenButton(this.$('.dcg-action-settings'), 'dcg-tap');

      this.$('.dcg-action-zoomin').on('dcg-tap', this.zoomIn.bind(this));
      this.$('.dcg-action-zoomrestore').on('dcg-tap', this.zoomRestore.bind(this));
      this.$('.dcg-action-zoomout').on('dcg-tap', this.zoomOut.bind(this));

      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        delegate: '.dcg-tooltip-e',
        gravity: 'e'
      });

      this.viewportController.grapher.settings.observe('zoomedDefault', this.renderZoomDefault.bind(this));
    };

    //each of the dropdowns (share_options, graph_settings, help)
    //queries this to find out how tall it should (max)
    //
    // graphpaperHeight is set externally by layout system
    view.popoverHeight = function() {
      return this.graphpaperHeight - 12; //10 px padding on top and 2px on the bottom
    };

    view.didInsertElement = function () {
      this.renderZoomDefault();
    };

    view.renderZoomDefault = function () {
      var isDefault = this.viewportController.grapher.settings.zoomedDefault;
      this.$('.dcg-action-zoomrestore').toggleClass('dcg-disabled', !!isDefault);
    };

    view.zoomIn = function() {
      this.viewportController.zoom("in");
    };

    view.zoomRestore = function() {
      this.viewportController.zoom("default");
    };

    view.zoomOut = function() {
      this.viewportController.zoom("out");
    };
  });

  return ZoomView;
});


define('main/layout_controller',['require','console','pjs','jquery'],function(require){
  var console = require('console');
  var P = require('pjs');
  var $ = require('jquery');

  return P(function (proto) {

    proto.init = function (views, $root, graphSettings) {
      this.views = views;
      this.$root = $root;
      // stores the current screen size at all times
      this.currentScreen = {};

      // callback
      this.triggerGraphpaperRectChanged = function (rect) {};

      this.isAnimating = false;
      this.minExpressionWidth = 290;

      this.$grapher = this.views.grapher.$;
      this.graphSettings = graphSettings;

      this.monitorWindowSize();
      // We call the monitorWindowSize() function every 200ms because the
      // window::onResize event just isn't reliable enough. In some browsers
      // (e.g. mobile safari) the event randomly gets dropped.
      if (graphSettings.config.resizeLoop) {
        var resizeLoop = function() {
          this.monitorWindowSize();
          setTimeout(resizeLoop, 200);
        }.bind(this);
        resizeLoop();
      }

      if (this.views.expressionsView) {
        this.views.expressionsView.observe('expressionsVisible', function () {
          if (this.views.expressionsView.expressionsVisible) {
            this.$root.removeClass('dcg-fullscreen');
          } else {
            this.$root.addClass('dcg-fullscreen');
          }
          this.resize();
        }.bind(this));
      }

      if (this.views.keypadView) this.views.keypadView.observe('isOpen', this.resize.bind(this));
    };

    proto.resize = function () {
      /* jshint maxcomplexity:12 */
      if (this.views.keypadView) {
        this.$root.toggleClass('dcg-keypad-open', !!this.views.keypadView.isOpen);
      }

      //isAnimating is set by animateSlidingInterior
      //when we either show or hide the expressions list
      if (this.isAnimating) return;

      var h = this.$grapher.height();
      var w = this.$root.width();

      var rootRect = this.$root[0].getBoundingClientRect();

      var isFullscreen = (!this.views.expressionsView || !this.views.expressionsView.expressionsVisible);

      this.$root.toggleClass('dcg-narrow', this.isNarrow(w));
      this.$root.toggleClass('dcg-wide', this.isWide(w));
      this.$root.toggleClass('dcg-short', this.isShort(h));

      if (this.views.keypadView && this.views.keypadView.height) {
        var keypad_height = this.views.keypadView.height();
        this.views.expressionsView.setBottom(keypad_height);

        if (this.views.pillboxView && this.views.pillboxView.settingsView) {
          this.views.pillboxView.settingsView.setBottom(keypad_height);
        }
      }

      if (this.views.expressionsView) this.views.expressionsView.setProperty('calcIsNarrow', this.isNarrow(w));

      var newWidth = this.isNarrow(w) ? w : w < 356/0.45 ? Math.floor(0.45 * w) : 356;
      if (newWidth < this.minExpressionWidth) newWidth = this.minExpressionWidth;
      //since our open/close animations use the half-width and we don't want odd numbers
      if (!this.isNarrow(w)) newWidth = 2*Math.floor(0.5*newWidth);

      if (this.views.expressionsView) this.views.expressionsView.setMinWidth(newWidth);

      if (this.views.pillboxView) this.views.pillboxView.setProperty('graphpaperHeight', h);
      if (this.views.keypadView) this.views.keypadView.setProperty('graphpaperHeight', h);

      //on narrow screens, ignore offset
      var leftOffset = (this.isNarrow(w) || isFullscreen) ? 0 : newWidth;

      this.views.grapher.$.css({
        'left': leftOffset+'px',
        //get rid of any transform, in case this was called after doing an animation
        'transform': null
      });

      this.views.grapher.updateScreenSize(w - leftOffset, h);

      //make sure that active expression is scrolled into view
      if (this.views.expressionsView) this.views.expressionsView.ensureActiveChildIsVisible();

      var graphpaperRect = {
        top: 0,
        bottom: rootRect.height,
        left: leftOffset,
        right: rootRect.width,
        height: rootRect.height,
        width: rootRect.width - leftOffset
      };

      this.triggerGraphpaperRectChanged(graphpaperRect);
    };

    proto.animationIsRunning = function () {
      return this.runningAnimations !== 0;
    };

    proto.isNarrow = function (width) {
      return width < 450;
    };

    proto.isWide = function (width) {
      return width >= 900;
    };

    proto.isShort = function (height) {
      return height <= 480; //small iphone in portrait
    };

    proto.animateSlidingInterior = function () {
      if (this.isAnimating) return;
      this.isAnimating = true;

      setTimeout(function () {
        this.isAnimating = false;
        this.resize();
      }.bind(this), this.parseTransitionDuration('.dcg-sliding-interior'));
    };

    proto.parseTransitionDuration = function (target) {
      var $target = $(target);
      var durationString = $target.css('transition-duration');
      if (durationString[durationString.length - 1] !== 's') {
        console.warn(
          'Unexpected transition-duration format. ' +
          'Expected a number followed by \'s\' but saw ' + durationString
        );
        return 0;
      }

      return 1000*parseFloat(durationString.slice(0, -1));
    };

    proto.defocusMobile = function () {
      var focused = $(document.activeElement);
      // Only want to do this when we have to, since it can cause some bouncing.
      if (focused.filter('input, textarea').length === 0) return;
      // hack to get jquery to remove focus from hidden input.
      // the following steps work for all tested mobile devices.
      //
      // step 1) add an input textbox to body and focus it.
      // step 2) make that textbox disabled and readonly.
      // step 3) blur the textbox and remove from the dom.
      $('<input />').prependTo('body').focus()
      .attr({
        readonly: 'readonly',
        disabled: 'true'
      })
      .blur().remove();
    };

    proto.monitorWindowSize = function () {
      // check if anything actually updated
      var w = this.$root.width() + this.$root.scrollLeft();
      var h = this.$root.height() + this.$root.scrollTop();

      if (w === this.currentScreen.width && h === this.currentScreen.height) return;

      this.currentScreen.width = w;
      this.currentScreen.height = h;

      this.resize();
    };
  });
});

// Defines a simple API used by our screenshot service.
define('lib/external_screenshot',['require','pjs'],function (require) {
  var P = require('pjs');

  var Screenshot = P(function (proto) {
    proto.init = function ($root, expressionsView, grapher, evaluator, stateController) {
      this.$root = $root;
      this.expressionsView = expressionsView;
      this.grapher = grapher;
      this.evaluator = evaluator;
      this.stateController = stateController;
    };

    proto.initialize = function (options, cb) {
      this.$root.addClass('dcg-external-screenshot');
      // Allow expression list to overflow for screenshoting.
      document.styleSheets[0].insertRule(
        '* {overflow: visible !important;}',
        document.styleSheets[0].cssRules.length
      );
      cb();
    };

    function getClipRect (elt) {
      var clientRect = elt.getBoundingClientRect();
      return {
        top: clientRect.top,
        left: clientRect.left,
        width: clientRect.width,
        height: clientRect.height
      };
    }

    function waitFor (pred, cb) {
      if (pred) {
        setTimeout(cb);
      } else {
        setTimeout(function () {
          waitFor(pred, cb);
        }, 100);
      }
    }

    proto.load = function (obj, cb) {
      this.stateController.setState(obj.state);

      var self = this;
      this.evaluator.notifyWhenSynced(function () {
        waitFor(function () {
          return !self.expressionsView || self.expressionsView.$('.dcg-shell.dcg-expressionitem').length === 0;
        }, function () {
          // TODO, after jumping through all these hoops, still need an arbitrary timeout to wait
          // for the expression icons to load. Ugh.
          setTimeout(function () {
            var boxes = {};
            boxes.graphpaper = getClipRect(self.grapher.$[0]);
            if (self.expressionsView) {
              boxes.expressions = getClipRect(self.expressionsView.$('.dcg-expressionlist')[0]);
            }
            cb({boxes: boxes});
          }, 100);
        });
      });
    };
  });

  return Screenshot;
});
define('loadcss!css/tour', function(){});
define('tours/mathart',['require','underscore','jquery','pjs','./base_tour'],function(require){
  var _ = require('underscore');
  var $ = require('jquery');
  var P = require('pjs');
  var BaseTour = require('./base_tour');

  return {

    mathart_intro: P(BaseTour, function(tour){

      //Line Tour -- Phase 1!
      tour.restrictedLineTour = function () {
     
        //need expressions visible and resources closed for the entirety of this tour
        if (this.resourcesOpen()) return this.requireResourcesNotOpen();
        if (!this.expressionsVisible()) return this.requireExpressionsVisible();
        
        var restricted_line = this.getMatchingExp(this.RESTRICTED_LINE);
        var exp_not_restricted_line = this.getMatchingExp(this.EXP_NOT_RESTRICTED_LINE);

        if (restricted_line) {
          //to exit the line part of this tour, you not only need a restricted line,
          //you also need another expression that we can later turn into a restricted parabola
          if (exp_not_restricted_line) {
            this.phaseOn++;
            return this.update();
          }
          
          return {
            position: 'e',
            content: '<b>Brilliant!</b><br>Click here to create a new expression',
            sel: '.dcg-new-math-div'
          };
        }

        var exp = this.getMatchingExp(this.EXP);

        if (exp) {
          var is_nonconstant_line = this.expMatches(exp.model, this.NONCONSTANT_LINE);
          var has_error = this.expMatches(exp.model, this.HAS_ERROR);

          if (has_error) return {
            doNotUpdate: true
          };

          if (is_nonconstant_line) return {
            position: 'e',
            content: [
                      '<b>Awesome!</b><br>',
                      'Restrict the domain of this line by making it<br> <code>',
                      'y=2x{1&lt;x&lt;2}</code><br>',
                      '<i>Hint: press the \'A B C\' button on the keypad to find the { } buttons</i>'
            ].join(''),
            sel: exp.$()
          };

          return {
            position: 'e',
            content: ['<b>Let\'s get started!</b><br>',
                      'Try graphing a straight line, like <code>y=2x</code>'
            ].join(''),
            sel: exp.$()
          };
        }

        //nuttin? better create a new expression
        return {
          position: 'e',
          content: 'Click here to make a new blank expression',
          sel: '.dcg-new-math-div'
        };
      };

      //Tour part 2: restricting a parabola
      tour.restrictedParabolaTour = function () {
        
        //need expressions visible and resources closed for the entirety of this tour
        if (this.resourcesOpen()) return this.requireResourcesNotOpen();
        if (!this.expressionsVisible()) return this.requireExpressionsVisible();
        
        var restricted_parabola = this.getMatchingExp([this.RESTRICTED, this.PARABOLA]);

        if (restricted_parabola) {
          //Go to the next activity
          this.phaseOn++;
          return this.update();
        }

        //store our last valid *shifted* parabola
        var exp = this.getMatchingExp(this.EXP_NOT_RESTRICTED_LINE);

        if (exp) {
          var has_equal_sign = this.expMatches(exp.model, [this.PARABOLA, this.HAS_DEPENDENT_Y]);
          var is_shifted = this.expMatches(exp.model, this.SHIFTED_PARABOLA);
          var is_parabola = this.expMatches(exp.model, this.PARABOLA);
          var has_error = this.expMatches(exp.model, this.HAS_ERROR);

          //while they're typing, leave the last valid step.
          if (has_error) return {
            doNotUpdate: true
          };

          if (!is_parabola) return {
            position: 'e',
            content: [
                        'Now graph: <code>y=x<sup>2</sup></code><br>',
                        '<i>Hint: you can type y=x^2,',
                        ' or use the a<sup>2</sup> button on the keypad below</i>'
                     ].join(''),
            sel: exp.$()
          };

          if (!has_equal_sign) return {
            position: 'e',
            content: [
                      '<b>Don\'t forget the "y="!</b><br>',
                      'Try typing all of <code>y=x<sup>2</sup></code>'
                     ].join(''),
            sel: exp.$()
          };


          if (!is_shifted) return {
            position: 'e',
            content: [
                      '<b>Move the parabola.</b><br>',
                      'Change this equation to <code>y=x<sup>2</sup>-2</code>'
                      ].join(''),
            sel: exp.$()
          };

          return {
            position: 'e',
            content: [
                      '<b>Nice!</b><br>Now let\'s restrict the range. Change this to:<br>',
                      '<code>y=x<sup>2</sup>-2{y&lt;4}</code>'
                     ].join(''),
            sel: exp.$()
          };
        }

        return {
          position: 'e',
          content: 'Click here to make a new blank expression',
          sel: '.dcg-new-math-div'
        };
      };


      tour.colorWasChanged = false;
      tour.changeColorTour = function () {
        
        //need expressions visible and resources closed for the entirety of this tour
        if (this.resourcesOpen()) return this.requireResourcesNotOpen();
        if (!this.expressionsVisible()) return this.requireExpressionsVisible();
        
        //bind observers
        var self = this;
        _.each(this.expressionsView.model.getItemsByIndexRange(0, Infinity), function(exp) {
          exp.unobserve('color.tour');
          exp.observe('color.tour', function() {
            self.colorWasChanged = true;
          });
        });

        if (this.colorWasChanged) {
          if ($('.dcg-options-menu').length) return {
            position: 'e',
            content: '... and click anywhere to close the color menu.',
            sel: '.dcg-exppanel-outer'
          };

          return {
            final: true,
            position: 'e',
            endingMsg: 'Great job! Now to complete your mission: make a face. Good luck!',
            sel: '.dcg-exppanel-outer'
          };
        }

        if ($('.dcg-options-menu').length) return {
          position: 'e',
          content: '<b>Last step...</b><br>Change the color!',
          sel: '.dcg-options-menu'
        };

        var graphable_exp = this.getMatchingExp(this.GRAPHABLE_EXP);
        var any_exp = this.getMatchingExp(this.EXP);
        
        // recover from the situation that the user deleted the restricted parabola. Just have them type y=x
        if (!graphable_exp) {
            return {
              position: 'e',
              content: '<b>Oops...</b><br>Make this graphable by typing <code>y=x</code>',
              sel: any_exp.$()
            };
        }
        
        return {
          position: 'e',
          content: '<b>Great!</b><br>Click and hold to open the secret drawing menu.',
          sel: graphable_exp.iconView.$icon
        };
      };

      //manage state of which of the 3 steps we're on
      tour.phaseOn = 0;
      tour.phases = [tour.restrictedLineTour, tour.restrictedParabolaTour, tour.changeColorTour];
      tour.update = function(){
        return this.phases[this.phaseOn].call(this);
      };
    })
  };
});

/*
 *  Modified (heavily) by Eli for the following reasons:
 *    - keep Trip out of the global namespace
 *    - work with our click events
 *    - pass jshint
 *    - get rid of unused methods
 *    - get rid of the other methods too
 *
 *  Trip.js - A jQuery plugin that can help you customize your tutorial trip easily
 *  Version : 1.2.2
 *
 *  Author : EragonJ <eragonj@eragonj.me>
 *  Blog : http://eragonj.me
 */

 define('tours/trip',['require','jquery','pjs','mathquill'],function (require) {
    var $ = require('jquery');
    var P = require('pjs');
    var MathQuill = require('mathquill');

    var Trip = P({

        init : function(settings) {
                this.settings = settings;
                this.__cachedStepName = null;
        },

        ensureTripBlock : function () {
            if (this.$tripBlock) return;

            var html = [
                '<div class="trip-block">',
                    '<div class="trip-interior">',
                        '<a class="trip-close">&times;</a>',
                        '<div class="trip-content"></div>',
                    '</div>',
                    '<div class="trip-arrow"></div>',
                '</div>'
            ].join('');

            var that = this;
            var $tripBlock = this.$tripBlock = $(html);

            $tripBlock.css({top: '-100px'});

            $('body').append( $tripBlock );

            $tripBlock.find('.trip-close').on("dcg-tap", function(e) {
                e.preventDefault();
                that.stop();
            });

            this.bindKeyEvents();
        },

        cleanup : function() {
            this.unbindKeyEvents();

            this.hideTripBlock();
            return false;
        },

        bindKeyEvents : function() {
            var that = this;
            $(document).on({
                'keydown.Trip' : function(e) {
                    // `this` will be bound to #document DOM element here
                    that.keyEvent.call(that, e);
                }
            });
        },

        unbindKeyEvents : function() {
            $(document).off('keydown.Trip');
        },

        keyEvent : function(e) {
            if ( e.which === 27 ) this.stop();  //ESC key
        },

        stop : function() {
            this.hideTripBlock();
            this.settings.onTripStop();
            this.__cachedStepName = null;
        },

        showTripBlock : function( o ) {
            this.ensureTripBlock();

            //soft update will, in general, change neither the contents nor the position
            //the contents can be force updated by setting o.forceTextUpdate=true
            var softUpdate = (o.stepName && o.stepName === this.__cachedStepName);
            this.__cachedStepName = o.stepName;

            if(typeof o.sel === 'string') {
                o.sel = $(o.sel);
            }

            o.sel = o.sel.filter(':visible');

            var $tripBlock = this.$tripBlock;

            if (!softUpdate || o.forceTextUpdate) {
              $tripBlock.find('.trip-content').html( o.content );
              $tripBlock.find('.trip-math:not(.mq-math-mode)').each(function() { MathQuill.StaticMath(this); });
            }

            //get out of here before repositioning
            if (softUpdate) return;

            $tripBlock.toggleClass('trip-hidden', !!o.hidden);

            var $sel = o.sel,
                selWidth = $sel.outerWidth(),
                selHeight = $sel.outerHeight(),
                blockWidth = $tripBlock.outerWidth(),
                blockHeight = $tripBlock.outerHeight(),
                arrowHeight = 10,
                arrowWidth = 10;

            // Take off e/s/w/n classes
            $tripBlock.removeClass('trip-e trip-s trip-w trip-n');

            var horizontalShift = 0;

            switch( o.position ) {
            case 'e':
                $tripBlock.addClass('trip-e');
                $tripBlock.css({
                    left : $sel.offset().left + selWidth + arrowWidth,
                    top : $sel.offset().top - (( blockHeight - selHeight ) / 2)
                });
                break;
            case 's':
                $tripBlock.addClass('trip-s');
                var left = $sel.offset().left + ((selWidth - blockWidth) / 2);
                $tripBlock.css({
                    left : left,
                    top : $sel.offset().top + selHeight + arrowHeight
                });

                if (left + blockWidth > $(window).width() - 1) {
                    horizontalShift = $(window).width() - 1 - left - blockWidth;
                }
                if (left < 1) {
                    horizontalShift = 1 - left;
                }

                break;
            case 'w':
                $tripBlock.addClass('trip-w');
                $tripBlock.css({
                    left : $sel.offset().left - (arrowWidth + blockWidth),
                    top : $sel.offset().top - (( blockHeight - selHeight ) / 2)
                });
                break;
            default:
                $tripBlock.addClass('trip-n');
                $tripBlock.css({
                    left : $sel.offset().left + ((selWidth - blockWidth) / 2),
                    top : $sel.offset().top - arrowHeight - blockHeight
                });

                break;
            }

            $tripBlock.find('.trip-interior')
                .css('transform', 'translate(' + horizontalShift + 'px, 0)');

            $tripBlock.css({
                display : 'inline-block'
            });
        },

        fadeInTripBlock : function () {
            this.ensureTripBlock();

            var $tripBlock = this.$tripBlock;
            //need this on the next cycle so that the animation works
            setTimeout(function () {
                $tripBlock.addClass('trip-is-loaded');
            }, 0);
        },

        hideTripBlock : function() {
            if (this.$tripBlock) this.$tripBlock.removeClass('trip-is-loaded');
        },
    });
    return Trip;
});

define('tours/tour_manager',['require','pjs','./trip'],function(require) {
  var P = require('pjs');

  var Trip = require('./trip');

  var Tour = P(function (proto, _super) {

    proto.init = function () {
      this.tripManager = new Trip({onTripStop: this.stopTour.bind(this)});
      this.currentStep = undefined;
      this.currentTour = undefined;
    };

    proto._tripLoop = function () {
      clearTimeout(this.__tripLoopTimeout);

      if (!this.running) return;

      var self = this;

      self._advanceTrip();
      self.__tripLoopTimeout = setTimeout(self._tripLoop.bind(self), 200);
    };

    proto._advanceTrip = function () {
      var tourStep = this.currentTour.update();
      var currentMs = new Date().getTime();

      if (tourStep && this.currentStep && tourStep.content !== this.currentStep.content) {
        //sometimes we want to wait a little while before leaving a step.
        //For example: when sliders buttons are animating in, or right after creating a table.
        //want to give time for the system to settle down
        if (this.currentStep.delayBeforeExit) {
          //check if we're inside of the throttle limit
          if (
            this.throttleTimer &&
            (currentMs - this.throttleTimer < this.currentStep.delayBeforeExit)
          ) return;
          //first time! haven't seen the throttle timer
          if (!this.throttleTimer) {
            this.throttleTimer = currentMs;
            return;
          }
        }

        //sometimes we want to wait a little while before entering a step.
        //For example: when opening resources view, or hiding expressions.
        if (tourStep.delayBeforeEnter) {
          this.currentStep = tourStep;
          this.throttleTimer = currentMs;
        }
      }

      if (tourStep && this.currentStep && tourStep.content === this.currentStep.content) {
        if (
          this.throttleTimer &&
          (currentMs - this.throttleTimer < this.currentStep.delayBeforeEnter)
        ) return;
      }

      this.throttleTimer = null;

      //doNotUpdate can be passed by a tourStep to freeze the tour at its current location
      //used, for example, when the user is actively sliding a slider
      if (tourStep && !tourStep.doNotUpdate) {
        this.currentStep = tourStep; // Cache current step for testing purposes.

        if (tourStep.final) {
          this.finishTour(tourStep, 5);
          return;
        }
        this.tripManager.showTripBlock(tourStep);
      }
    };

    // Used by testing code to short-circuit the loop timeout.
    proto.updateNow = proto._advanceTrip;

    proto.startTour = function (tour) {
      if(this.running) return;
      this.currentTour = tour;
      this.running = true;
      this._tripLoop();
      this.tripManager.fadeInTripBlock();
    };

    //this can be overwritten from the outside after instantiating the tour manager
    //that allows for things like internationalization of this message.
    proto.closingMsg = "<b>__endingMessage__</b><br>This message will self-destruct in __seconds__...";

    proto.finishTour = function (tourStep, timer) {
      clearTimeout(this.__tripLoopTimeout);

      this.running = false;
      var self = this;

      if (timer < 0) {
        self.tripManager.stop();
        return;
      }

      if (tourStep.endingMsg) {
        tourStep.content = self.closingMsg
                               .replace("__endingMessage__", tourStep.endingMsg)
                               .replace("__seconds__", timer);
      }
      self.tripManager.showTripBlock(tourStep);

      setTimeout(function() {
        self.finishTour(tourStep, timer - 1);
      }, 1000);
    };

    proto.stopTour = function () {
      this.running = false;
      this.currentStep = undefined;
      this.currentTour = undefined;
    };
  });

  return Tour;
});

define('template!toast', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="dcg-toast-container">\n  <span class="dcg-toast">\n    <i class="dcg-icon-error"></i>\n    <i class="dcg-icon-remove dcg-action-hide"></i>\n    <span class="dcg-msg dcg-variable-msg"></span>\n    <a class="dcg-undo dcg-action-toast-undo">'+
( t('Undo') )+
'</a>\n    <a class="dcg-learn-more-link" target="_blank">'+
( t('Learn more') )+
'</a>\n  </span>\n</div>';
}
return __p;
};});
define('loadcss!css/toast', function(){});
//generates a toast (little message near the top of the page)
// lets you do things like switch back into edit-list mode
define('main/toast',['require','pjs','underscore_view','template!toast','loadcss!css/toast'],function (require) {

  var P = require('pjs');
  var UnderscoreView = require('underscore_view');
  var template = require('template!toast');
  require('loadcss!css/toast');

  var ToastView = P(UnderscoreView, function (toast, _super) {
    toast.template = template;

    toast.init = function (undoRedo) {
      _super.init.call(this);
      this.undoRedo = undoRedo;
    };

    toast.didCreateElement = function () {
      var self = this;

      // hide toast when UndoRedo
      self.undoRedo.changesCallbacks.push(function () {
        self.hide();
      });

      this.$('.dcg-action-toast-undo').on('dcg-tap', function () {
        self.undoRedo.undo();

        if (self.undoCallback) {
          self.undoCallback();
        }
        self.hide();
      });

      this.$().on('dcg-tap', '.dcg-action-hide', this.hide.bind(this));
      // start off hidden
      this.$().toggle(false);
    };

    // str: string in the toast message
    // options:
    //   undoCallback: a function that gets called if the "undo" button is pressed.
    //      Note: "undo" is only shown if this is present
    //   hideAfter: integer # of ms (never hide if set to 0)
    //   style: class that we'll add (error is the only option so far)
    //   learnMoreLink: a link that we'll show with the "learn more" text
    toast.show = function (str, options) {
      options = options || {};

      clearTimeout(this.hideTimeout);
      this.$('.dcg-toast-container').fadeOut('fast');
      this.$('.dcg-toast').toggleClass('dcg-show-undo', options.hasOwnProperty('undoCallback'));
      //note: because of how jquery works, this'll strip off the style attr if options.style is undefined
      this.$('.dcg-toast').attr('style', options.style || null);

      if (options.hasOwnProperty('learnMoreLink')) {
        this.$('.dcg-learn-more-link').attr('href', options.learnMoreLink).show();
      } else {
        this.$('.dcg-learn-more-link').hide();
      }

      this.$().fadeIn('fast');

      this.$('.dcg-variable-msg').html(str);
      this.undoCallback = options.undoCallback;

      // hide after (default) 6 seconds
      var hideAfter = (options.hasOwnProperty('hideAfter') ? options.hideAfter : 6000);

      if (hideAfter > 0) {
        var self = this;
        this.hideTimeout = setTimeout(function () {
          self.hide();
        }, hideAfter);
      }
    };

    toast.hide = function () {
      clearTimeout(this.hideTimeout);
      this.$().fadeOut('fast');
    };
  });

  return ToastView;
});

define('undoredo',['require','underscore','pjs'],function (require) {
  var _ = require('underscore');
  var P = require('pjs');

var UndoRedoManager = P(function (manager, _super) {

  manager.CAUSE_OF_CHANGE = 1;
  manager.RESPONSE_TO_CHANGE = 2;

  manager.triggerFlash = function () {};

  manager.init = function () {
    this.undos = [];
    this.redos = [];
    this.changesCallbacks = [];
    this.__isApplyingTransaction = 0;
    this.batchedWrapper = function (cb) {cb()};
  };

  manager.clear = function () {
    this.undos = [];
    this.redos = [];
  };

  manager.pushUndo = function (transaction) {
    this.undos.push(transaction);
    this.triggerChanges();
  };

  manager.pushRedo = function (transaction) {
    this.redos.push(transaction);
    this.triggerChanges();
  };

  manager.canUndo = function () {
    return this.undos.length > 0;
  };

  manager.canRedo = function () {
    return this.redos.length > 0;
  };

  manager.undo = function () {
    if (!this.canUndo()) return;

    var action = this.undos.pop();
    this.applyTransaction(action,true);
    this.pushRedo(action);
  };

  manager.redo = function () {
    if (!this.canRedo()) return;

    var action = this.redos.pop();
    this.applyTransaction(action);
    this.pushUndo(action);
  };

  manager.isApplyingTransaction = function () {
    return !!this.__isApplyingTransaction;
  };

  manager.__applyTransaction = function (transaction, doUndo) {
    var i;
    var batched = transaction.__batched__ ? transaction.__batched__ : [];
    var self = this;

    if (doUndo) {

      if (batched.length) {
        this.batchedWrapper(function () {
          // apply batched transactions in reverse
          for (i=batched.length-1; i>=0; i--) {
            self.__applyTransaction(batched[i], doUndo);
          }

          transaction.undo();
        });
      } else {
        transaction.undo();
      }
    }

    // apply transactions the way they happened the first time
    else {
      if( batched.length) {
        this.batchedWrapper(function () {
          transaction.redo();
          for (i=0; i<batched.length; i++) {
            self.__applyTransaction(batched[i], doUndo);
          }
        });
      } else {
        transaction.redo();
      }
    }
  };

  manager.applyTransaction = function (transaction, doUndo) {
    this.__isApplyingTransaction++;

    try {
      this.__applyTransaction(transaction, doUndo);
    } finally {
      this.__isApplyingTransaction--;
    }
  };

  // sometimes, we want to just do multiple things, and we want them to all
  // be grouped into a single transaction. We want to just do stuff, and all
  // that stuff gets grouped together. It's important to note that oneTransaction
  // requires that all side effects happen synchronously.
  manager.oneTransaction = function (func) {
    if (!this.__oneTransactionDepth) {
      this.__oneTransactionDepth=0;
    }

    this.__oneTransactionDepth++;
    this.batchedWrapper(func);
    this.__oneTransactionDepth--;

    if (!this.__oneTransactionDepth) {
      this.__oneTransaction = null;
    }
  };

  manager.isApplyingOneTransaction = function () {
    return this.__oneTransactionDepth > 0;
  };

  manager.addTransaction = function (transaction) {
    var batched;

    //don't accept changes that are sideffects of applying a transaction.
    //the transaction should've been written in such a way that chained
    //reactions are accounted for.
    if (this.isApplyingTransaction()) {

      // TODO - this exception looks pretty nasty and I'm worried that it's going
      // to change behavior in other places. I don't know why I originally didn't
      // allow addTransaction()'s within other addTransaction()'s. One thought
      // is that doing the first transaction automatically calls the other, so
      // the child transactions would end up getting called multiple times.
      //
      // we do play out the action if it's a CAUSE_OF_CHANGE. We just don't
      // add it to undo/redo.
      if (transaction.type === this.CAUSE_OF_CHANGE) {
        transaction.redo();
      }

      return;
    }

    //automatically apply this if it's what's going to cause the initial
    //change.
    if (transaction.type === this.CAUSE_OF_CHANGE)
      this.applyTransaction(transaction);

    //if nothing really changed, then stop.
    if (transaction.ensureChangeOccured && transaction.ensureChangeOccured())
      return;

    // was this.redos.clear() in the Dark days. this.redos = [] would be
    // simpler, but has different semantics if someone else has a handle to
    // this array.
    this.redos.splice(0);

    if (this.isApplyingOneTransaction()) {
      if (!this.__oneTransaction) {
        this.__oneTransaction = transaction;
      } else {
        batched = this.__oneTransaction.__batched__;
        if (!batched) batched = this.__oneTransaction.__batched__ = [];
        batched.push(transaction);
        return;
      }
    }

    this.pushUndo(transaction);

    return transaction;
  };

  manager.triggerChanges = function () {
    _.each(this.changesCallbacks, function (cb) { cb() });
  };

});


return UndoRedoManager;
});
/*
 * The ipad has some quirky scrolling behavior. This module fixes them.
 * NOTE: this module is only for vertical scrolling. Horizontal page scroll
 *       can be turned off by an html setting. If we want, we can enable
 *       this module to monitor horizontal scrolling as well.
 *
 * On the ipad you can scroll an entire page by:
 *     a) Sliding your finger on a non scrollable object.
 *     b) Sliding your finger on a scrollable object in a direction
 *        that the scrollable object is already maxed out.
 *
 * You can preventDefault() the 'touchMove' event and that will prevent
 *  the ipad from scrolling the entire page. The only problem is that this
 *  also prevents any scrollable area from scrolling.
 *
 * The solution is to monitor the 'touchStart' event to predict what will
 *  happen when the user moves their finger. It predicts both movements up
 *  and down. If it predicts that the entire page will be scrolled, it
 *  makes that movement as invalid. If it predicts that a scrollable area
 *  will be scrolled, it makes the movement as valid.
 *
 * On 'touchMove', this module looks up the prediction for the direction the
 *  user moved. If the movement was valid, it lets the movement continue on
 *  and scroll the scrollable area. If the movement was invalid, it does a
 *  preventDefault() on the 'touchMove' event to prevent the entire page from
 *  scrolling.
 *
 * Also important to know is that once you grab a scrollable area and start
 *  scrolling, you're safe. The page won't scroll even if you max the
 *  scrollable area out and keep dragging in that direction.
 *
 * The prediction routine runs up the ancestors of the evt.target and finds
 * the first that:
 *
 *  1) has overflow and overflow-y properties that allow scrolling
 *                 AND
 *    2) has scrollTop != 0 (can be scrolled downward)
 *                          AND/OR
 *    3) has scrollTop that can be incremented (can be scrolled upward)
 */

// TODO - it seems very likely that someone will want to limit scrolling on multiple elements within the page.
// I haven't wrapped my brain aroudn that situation fully, but it seems likely that we'll want to namespace
// the '.scrollfix' events independently per element. Maybe we don't want to try to handle the case where mutliple
// touches are down on multiple elements. Maybe this still works when that happens. But, it isn't obvious to me that
// things will work since we're turning off all events with the '.scrollfix' namespace when a touchend event happens.
define('ipad.scrollfix',['require','jquery'],function (require) {
  /* jshint bitwise: false */

  var $ = require('jquery');

  //some constants
  var NONE = 0;
  var UP = 1;
  var DOWN = 2;
  
  var limitingScrollOnDocument = false;
  var limitScrollOnDocument = function () {
    limitScrollOnElement(document);
    limitingScrollOnDocument = true;
  };

  //pass in a valid jQuery selector or element
  //this will limit scrolling that occurs inside of that element
  //preventing, for example, full page scrolling
  var limitScrollOnElement = function(el) {
    
    // if the entire page is being limited, don't apply
    // scrollfix behavior on this element. We aren't sure
    // how multiple listeners within the same dom area
    // will behave.
    //
    // NOTE: This early return requires that
    // the entire document be scrollfixed before any
    // specific elements are.
    if (limitingScrollOnDocument) return;
    
    //decides which directions an element can be scrolled
    $(el).bind('touchstart', function(evt) {
      /* jshint maxcomplexity:11 */
      var dom = $(evt.target);
      var validMoveDirections = NONE;
      var startTouches = null;

      // some elements (like the slider) can disable scrolling on tapStart.
      // if we're not automatically prevented from scrolling, then let's iterate
      // up the dom to find if we're inside an element that can be scrolled. If so,
      // we'll mark the scroll directions as valid.
      if (!dom.closest('[disablescroll]').length) {
        while (validMoveDirections === NONE && dom.length) {

          //mobile safari throws error if you try to do normal
          //.css() on the top most element
          if (dom[0].tagName === undefined) {
            break;
          }

          var overflow = dom.css('overflow');
          var overflow_y = dom.css('overflow-y');

          //check if overflow allows it to be scrolled
          if (overflow !== "hidden" && overflow !== "visible" &&
              overflow_y !== "hidden" && overflow_y !== "hidden" ) {

            //can be scrolled downward if it isn't scrolled to the very top
            var scrollTop = dom.scrollTop();
            if (scrollTop !== 0) {
              validMoveDirections = DOWN;
            }

            //can be scrolled upward if we try to scroll it upward and
            //it succeeds
            dom.scrollTop(scrollTop+1);
            if (dom.scrollTop() !== scrollTop) {

              //mark up as a valid scroll
              validMoveDirections = UP | validMoveDirections;

              //move it back to where it was
              dom.scrollTop(scrollTop);
            }
          }

          dom = dom.parent();
        }
      }

      //if any scroll is valid, lets save the original touchStart event
      //so that we can compare it with the touchMove event later to decide
      //which direction the user scrolled.
      if (validMoveDirections !== NONE) {
        startTouches = [];

        //We must clone the original touchStart event instead of simply
        //saving a reference to it. For some reason, the original touchStart
        //event updates it's pageY, screenY, etc properties as you scroll.
        //That means that touchStart.screenY will always equal the
        //touchMove.screenY event when you compare them.
        var origTouches = evt.originalEvent.touches;
        for (var i=0; i<origTouches.length; i++) {
          var clonedTouch = {};
          for (var j in origTouches[i] ) {
            if (origTouches[i].hasOwnProperty(j)) {
              clonedTouch[j] = origTouches[i][j];
            }
          }
          startTouches.push( clonedTouch );
        }
      }

      //decides if the the movement is in a valid direction.
      $(document).on('touchmove.scrollfix', function(evt) {

        //makes sure this is the first touchmove after touchstart
        if (startTouches) {

          //get positions of the touch and move events
          var startTouch = startTouches[0];
          var moveTouch = evt.originalEvent.touches[0];

          //find the direction we moved our finger
          //var deltaX = moveTouch.screenX - startTouch.screenX;
          var deltaY = moveTouch.screenY - startTouch.screenY;

          //check if any of the movements weren't allowed
          //and if not, say that NO move is allowed. Will
          //get caught later at bottom of the function.
          if (deltaY > 0 && !(validMoveDirections & DOWN)) {
            validMoveDirections = NONE;
          } else if (deltaY < 0 && !(validMoveDirections & UP)) {
            validMoveDirections = NONE;
          }

          //first touchmove has been processed
          if (deltaY) {
            startTouches = null;
          }
        }

        //don't scroll the entire screen
        if (validMoveDirections === NONE) {
          evt.preventDefault();
        }
      });

      //resets the state
      $(document).on('touchend.scrollfix', function() {
        $(document).off('.scrollfix');
      });
    });

  };

  return {
    limitScrollOnElement: limitScrollOnElement,
    limitScrollOnDocument: limitScrollOnDocument
  };

});


/*
  Papa Parse
  v3.1.2
  https://github.com/mholt/PapaParse

  modified by @eluberoff to make it a valid require module, and remove all worker references
*/


define('vendor/papaparse',['require','jquery'],function(require){
  

  var $ = require('jquery');

  // A configuration object from which to draw default settings
  var DEFAULTS = {
    delimiter: "",  // empty: auto-detect
    header: false,
    dynamicTyping: false,
    preview: 0,
    step: undefined,
    encoding: "", // browser should default to "UTF-8"
    comments: false,
    complete: undefined,
    error: undefined,
    download: false,
    chunk: undefined,
    keepEmptyRows: false
  };

  var Papa = {};

  Papa.parse = CsvToJson;
  Papa.unparse = JsonToCsv;

  Papa.RECORD_SEP = String.fromCharCode(30);
  Papa.UNIT_SEP = String.fromCharCode(31);
  Papa.BYTE_ORDER_MARK = "\ufeff";
  Papa.BAD_DELIMITERS = ["\r", "\n", "\"", Papa.BYTE_ORDER_MARK];

  // Configurable chunk sizes for local and remote files, respectively
  Papa.LocalChunkSize = 1024 * 1024 * 10;  // 10 MB
  Papa.RemoteChunkSize = 1024 * 1024 * 5;  // 5 MB
  Papa.DefaultDelimiter = ",";       // Used if not specified and detection fails

  // Exposed for testing and development only
  Papa.Parser = Parser;
  Papa.ParserHandle = ParserHandle;
  Papa.NetworkStreamer = NetworkStreamer;
  Papa.FileStreamer = FileStreamer;

  if (true)
  {
    $.fn.parse = function(options)
    {
      var config = options.config || {};
      var queue = [];

      this.each(function(idx)
      {
        var supported = $(this).prop('tagName').toUpperCase() == "INPUT"
                && $(this).attr('type').toLowerCase() == "file"
                && window.FileReader;

        if (!supported || !this.files || this.files.length == 0)
          return true;  // continue to next input element

        for (var i = 0; i < this.files.length; i++)
        {
          queue.push({
            file: this.files[i],
            inputElem: this,
            instanceConfig: $.extend({}, config)
          });
        }
      });

      parseNextFile();  // begin parsing
      return this;    // maintains chainability


      function parseNextFile()
      {
        if (queue.length == 0)
          return;

        var f = queue[0];

        if (isFunction(options.before))
        {
          var returned = options.before(f.file, f.inputElem);

          if (typeof returned === 'object')
          {
            if (returned.action == "abort")
            {
              error("AbortError", f.file, f.inputElem, returned.reason);
              return; // Aborts all queued files immediately
            }
            else if (returned.action == "skip")
            {
              fileComplete(); // parse the next file in the queue, if any
              return;
            }
            else if (typeof returned.config === 'object')
              f.instanceConfig = $.extend(f.instanceConfig, returned.config);
          }
          else if (returned == "skip")
          {
            fileComplete(); // parse the next file in the queue, if any
            return;
          }
        }

        // Wrap up the user's complete callback, if any, so that ours also gets executed
        var userCompleteFunc = f.instanceConfig.complete;
        f.instanceConfig.complete = function(results)
        {
          if (isFunction(userCompleteFunc))
            userCompleteFunc(results, f.file, f.inputElem);
          fileComplete();
        };

        Papa.parse(f.file, f.instanceConfig);
      }

      function error(name, file, elem, reason)
      {
        if (isFunction(options.error))
          options.error({name: name}, file, elem, reason);
      }

      function fileComplete()
      {
        queue.splice(0, 1);
        parseNextFile();
      }
    }
  }


  function CsvToJson(_input, _config)
  {
    var config = copyAndValidateConfig(_config);

    if (typeof _input === 'string')
    {
      if (config.download)
      {
        var streamer = new NetworkStreamer(config);
        streamer.stream(_input);
      }
      else
      {
        var ph = new ParserHandle(config);
        var results = ph.parse(_input);
        return results;
      }
    }
    else if (_input instanceof File)
    {
      if (config.step || config.chunk)
      {
        var streamer = new FileStreamer(config);
        streamer.stream(_input);
      }
      else
      {
        var ph = new ParserHandle(config);

        reader = new FileReader();
        reader.onload = function(event)
        {
          var ph = new ParserHandle(config);
          var results = ph.parse(event.target.result);
        };
        reader.onerror = function()
        {
          if (isFunction(config.error))
            config.error(reader.error, _input);
        };
        reader.readAsText(_input, config.encoding);
      }
    }
  }

  function JsonToCsv(_input, _config)
  {
    var _output = "";
    var _fields = [];

    // Default configuration
    var _quotes = false;  // whether to surround every datum with quotes
    var _delimiter = ","; // delimiting character
    var _newline = "\r\n";  // newline character(s)

    unpackConfig();

    if (typeof _input === 'string')
      _input = JSON.parse(_input);

    if (_input instanceof Array)
    {
      if (!_input.length || _input[0] instanceof Array)
        return serialize(null, _input);
      else if (typeof _input[0] === 'object')
        return serialize(objectKeys(_input[0]), _input);
    }
    else if (typeof _input === 'object')
    {
      if (typeof _input.data === 'string')
        _input.data = JSON.parse(_input.data);

      if (_input.data instanceof Array)
      {
        if (!_input.fields)
          _input.fields = _input.data[0] instanceof Array
                  ? _input.fields
                  : objectKeys(_input.data[0]);

        if (!(_input.data[0] instanceof Array) && typeof _input.data[0] !== 'object')
          _input.data = [_input.data];  // handles input like [1,2,3] or ["asdf"]
      }

      return serialize(_input.fields || [], _input.data || []);
    }

    // Default (any valid paths should return before this)
    throw "exception: Unable to serialize unrecognized input";


    function unpackConfig()
    {
      if (typeof _config !== 'object')
        return;

      if (typeof _config.delimiter === 'string'
        && _config.delimiter.length == 1
        && Papa.BAD_DELIMITERS.indexOf(_config.delimiter) == -1)
      {
        _delimiter = _config.delimiter;
      }

      if (typeof _config.quotes === 'boolean'
        || _config.quotes instanceof Array)
        _quotes = _config.quotes;

      if (typeof _config.newline === 'string')
        _newline = _config.newline;
    }


    // Turns an object's keys into an array
    function objectKeys(obj)
    {
      if (typeof obj !== 'object')
        return [];
      var keys = [];
      for (var key in obj)
        keys.push(key);
      return keys;
    }

    // The double for loop that iterates the data and writes out a CSV string including header row
    function serialize(fields, data)
    {
      var csv = "";

      if (typeof fields === 'string')
        fields = JSON.parse(fields);
      if (typeof data === 'string')
        data = JSON.parse(data);

      var hasHeader = fields instanceof Array && fields.length > 0;
      var dataKeyedByField = !(data[0] instanceof Array);

      // If there a header row, write it first
      if (hasHeader)
      {
        for (var i = 0; i < fields.length; i++)
        {
          if (i > 0)
            csv += _delimiter;
          csv += safe(fields[i], i);
        }
        if (data.length > 0)
          csv += _newline;
      }

      // Then write out the data
      for (var row = 0; row < data.length; row++)
      {
        var maxCol = hasHeader ? fields.length : data[row].length;

        for (var col = 0; col < maxCol; col++)
        {
          if (col > 0)
            csv += _delimiter;
          var colIdx = hasHeader && dataKeyedByField ? fields[col] : col;
          csv += safe(data[row][colIdx], col);
        }

        if (row < data.length - 1)
          csv += _newline;
      }

      return csv;
    }

    // Encloses a value around quotes if needed (makes a value safe for CSV insertion)
    function safe(str, col)
    {
      if (typeof str === "undefined" || str === null)
        return "";

      str = str.toString().replace(/"/g, '""');

      var needsQuotes = (typeof _quotes === 'boolean' && _quotes)
              || (_quotes instanceof Array && _quotes[col])
              || hasAny(str, Papa.BAD_DELIMITERS)
              || str.indexOf(_delimiter) > -1
              || str.charAt(0) == ' '
              || str.charAt(str.length - 1) == ' ';

      return needsQuotes ? '"' + str + '"' : str;
    }

    function hasAny(str, substrings)
    {
      for (var i = 0; i < substrings.length; i++)
        if (str.indexOf(substrings[i]) > -1)
          return true;
      return false;
    }
  }



  // TODO: Many of the functions of NetworkStreamer and FileStreamer are similar or the same. Consolidate?
  function NetworkStreamer(config)
  {
    config = config || {};
    if (!config.chunkSize)
      config.chunkSize = Papa.RemoteChunkSize;

    var start = 0, fileSize = 0;
    var aggregate = "";
    var partialLine = "";
    var xhr, nextChunk;
    var handle = new ParserHandle(copy(config));

    this.stream = function(url)
    {
      nextChunk = function()
      {
        readChunk();
      };

      nextChunk();  // Starts streaming


      function readChunk()
      {
        xhr = new XMLHttpRequest();

        xhr.onload = chunkLoaded;
        xhr.onerror = chunkError;
        //last argument was !worker
        xhr.open("GET", url, true);
        if (config.step)
        {
          var end = start + config.chunkSize - 1; // minus one because byte range is inclusive
          if (fileSize && end > fileSize) // Hack around a Chrome bug: http://stackoverflow.com/q/24745095/1048862
            end = fileSize;
          xhr.setRequestHeader("Range", "bytes="+start+"-"+end);
        }
        xhr.send();
        start += config.chunkSize;
      }

      function chunkLoaded()
      {
        if (xhr.readyState != 4)
          return;

        if (xhr.status < 200 || xhr.status >= 400)
        {
          chunkError();
          return;
        }

        // Rejoin the line we likely just split in two by chunking the file
        aggregate += partialLine + xhr.responseText;
        partialLine = "";

        var finishedWithEntireFile = !config.step || start > getFileSize(xhr);

        if (!finishedWithEntireFile)
        {
          var lastLineEnd = aggregate.lastIndexOf("\n");

          if (lastLineEnd < 0)
            lastLineEnd = aggregate.lastIndexOf("\r");

          if (lastLineEnd > -1)
          {
            partialLine = aggregate.substring(lastLineEnd + 1); // skip the line ending character
            aggregate = aggregate.substring(0, lastLineEnd);
          }
          else
          {
            // For chunk sizes smaller than a line (a line could not fit in a single chunk)
            // we simply build our aggregate by reading in the next chunk, until we find a newline
            nextChunk();
            return;
          }
        }

        var results = handle.parse(aggregate);
        aggregate = "";

        if (isFunction(config.chunk))
        {
          config.chunk(results);
          results = undefined;
        }

        if (!finishedWithEntireFile && !results.meta.paused)
          nextChunk();
      }

      function chunkError()
      {
        if (isFunction(config.error))
          config.error(xhr.statusText);
      }

      function getFileSize(xhr)
      {
        var contentRange = xhr.getResponseHeader("Content-Range");
        return parseInt(contentRange.substr(contentRange.lastIndexOf("/") + 1));
      }
    };
  }









  function FileStreamer(config)
  {
    config = config || {};
    if (!config.chunkSize)
      config.chunkSize = Papa.LocalChunkSize;

    var start = 0;
    var aggregate = "";
    var partialLine = "";
    var reader, nextChunk, slice;
    var handle = new ParserHandle(copy(config));

    // FileReader is better than FileReaderSync (even in worker) - see http://stackoverflow.com/q/24708649/1048862
    // But Firefox is a pill, too - see issue #76: https://github.com/mholt/PapaParse/issues/76
    var usingAsyncReader = typeof FileReader === 'function';

    this.stream = function(file)
    {
      var slice = file.slice || file.webkitSlice || file.mozSlice;

      if (usingAsyncReader)
      {
        reader = new FileReader();    // Preferred method of reading files, even in workers
        reader.onload = chunkLoaded;
        reader.onerror = chunkError;
      }
      else
        reader = new FileReaderSync();  // Hack for running in a web worker in Firefox

      nextChunk();  // Starts streaming

      function nextChunk()
      {
        if (start < file.size)
          readChunk();
      }

      function readChunk()
      {
        var end = Math.min(start + config.chunkSize, file.size);
        var txt = reader.readAsText(slice.call(file, start, end), config.encoding);
        if (!usingAsyncReader)
          chunkLoaded({ target: { result: txt } }); // mimic the async signature
      }

      function chunkLoaded(event)
      {
        // Very important to increment start each time before handling results
        start += config.chunkSize;

        // Rejoin the line we likely just split in two by chunking the file
        aggregate += partialLine + event.target.result;
        partialLine = "";

        var finishedWithEntireFile = start >= file.size;

        if (!finishedWithEntireFile)
        {
          var lastLineEnd = aggregate.lastIndexOf("\n");

          if (lastLineEnd < 0)
            lastLineEnd = aggregate.lastIndexOf("\r");

          if (lastLineEnd > -1)
          {
            partialLine = aggregate.substring(lastLineEnd + 1); // skip the line ending character
            aggregate = aggregate.substring(0, lastLineEnd);
          }
          else
          {
            // For chunk sizes smaller than a line (a line could not fit in a single chunk)
            // we simply build our aggregate by reading in the next chunk, until we find a newline
            nextChunk();
            return;
          }
        }

        var results = handle.parse(aggregate);
        aggregate = "";

        if (isFunction(config.chunk))
        {
          config.chunk(results, file);
          results = undefined;
        }

        if (!finishedWithEntireFile && !results.meta.paused)
          nextChunk();
      }

      function chunkError()
      {
        if (isFunction(config.error))
          config.error(reader.error, file);
      }
    };
  }

  // Use one ParserHandle per entire CSV file or string
  function ParserHandle(_config)
  {
    // One goal is to minimize the use of regular expressions...
    var FLOAT = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i;

    var self = this;
    var _input;       // The input being parsed
    var _parser;      // The core parser being used
    var _paused = false;  // Whether we are paused or not
    var _delimiterError;  // Temporary state between delimiter detection and processing results
    var _fields = [];   // Fields are from the header row of the input, if there is one
    var _results = {    // The last results returned from the parser
      data: [],
      errors: [],
      meta: {}
    };
    _config = copy(_config);

    this.parse = function(input)
    {
      _delimiterError = false;
      if (!_config.delimiter)
      {
        var delimGuess = guessDelimiter(input);
        if (delimGuess.successful)
          _config.delimiter = delimGuess.bestDelimiter;
        else
        {
          _delimiterError = true; // add error after parsing (otherwise it would be overwritten)
          _config.delimiter = Papa.DefaultDelimiter;
        }
        _results.meta.delimiter = _config.delimiter;
      }

      if (isFunction(_config.step))
      {
        var userStep = _config.step;
        _config.step = function(results)
        {
          _results = results;
          if (needsHeaderRow())
            processResults();
          else
            userStep(processResults(), self);
        };
      }

      if (_config.preview && _config.header)
        _config.preview++;  // to compensate for header row

      _input = input;
      _parser = new Parser(_config);
      _results = _parser.parse(_input);
      processResults();
      if (isFunction(_config.complete) && !_paused)
        _config.complete(_results);
      return _paused ? { meta: { paused: true } } : _results;
    };

    this.pause = function()
    {
      _paused = true;
      _parser.abort();
      _input = _input.substr(_parser.getCharIndex());
    };

    this.resume = function()
    {
      _paused = false;
      _parser = new Parser(_config);
      _parser.parse(_input);
      if (isFunction(_config.complete) && !_paused)
        _config.complete(_results);
    };

    this.abort = function()
    {
      _parser.abort();
      if (isFunction(_config.complete))
        _config.complete(_results);
      _input = "";
    }

    function processResults()
    {
      if (_results && _delimiterError)
      {
        addError("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '"+Papa.DefaultDelimiter+"'");
        _delimiterError = false;
      }

      if (needsHeaderRow())
        fillHeaderFields();

      return applyHeaderAndDynamicTyping();
    }

    function needsHeaderRow()
    {
      return _config.header && _fields.length == 0;
    }

    function fillHeaderFields()
    {
      if (!_results)
        return;
      for (var i = 0; needsHeaderRow() && i < _results.data.length; i++)
        for (var j = 0; j < _results.data[i].length; j++)
          _fields.push(_results.data[i][j]);
      _results.data.splice(0, 1);
    }

    function applyHeaderAndDynamicTyping()
    {
      if (!_results || (!_config.header && !_config.dynamicTyping))
        return _results;

      for (var i = 0; i < _results.data.length; i++)
      {
        var row = {};
        for (var j = 0; j < _results.data[i].length; j++)
        {
          if (_config.dynamicTyping)
          {
            var value = _results.data[i][j];
            if (value == "true")
              _results.data[i][j] = true;
            else if (value == "false")
              _results.data[i][j] = false;
            else
              _results.data[i][j] = tryParseFloat(value);
          }

          if (_config.header)
          {
            if (j >= _fields.length)
            {
              if (!row["__parsed_extra"])
                row["__parsed_extra"] = [];
              row["__parsed_extra"].push(_results.data[i][j]);
            }
            else
              row[_fields[j]] = _results.data[i][j];
          }
        }

        if (_config.header)
        {
          _results.data[i] = row;
          if (j > _fields.length)
            addError("FieldMismatch", "TooManyFields", "Too many fields: expected " + _fields.length + " fields but parsed " + j, i);
          else if (j < _fields.length)
            addError("FieldMismatch", "TooFewFields", "Too few fields: expected " + _fields.length + " fields but parsed " + j, i);
        }
      }

      if (_config.header && _results.meta)
        _results.meta.fields = _fields;

      return _results;
    }

    function guessDelimiter(input)
    {
      var delimChoices = [",", "\t", "|", ";", Papa.RECORD_SEP, Papa.UNIT_SEP];
      var bestDelim, bestDelta, fieldCountPrevRow;

      for (var i = 0; i < delimChoices.length; i++)
      {
        var delim = delimChoices[i];
        var delta = 0, avgFieldCount = 0;
        fieldCountPrevRow = undefined;

        var preview = new Parser({
          delimiter: delim,
          preview: 10
        }).parse(input);

        for (var j = 0; j < preview.data.length; j++)
        {
          var fieldCount = preview.data[j].length;
          avgFieldCount += fieldCount;

          if (typeof fieldCountPrevRow === 'undefined')
          {
            fieldCountPrevRow = fieldCount;
            continue;
          }
          else if (fieldCount > 1)
          {
            delta += Math.abs(fieldCount - fieldCountPrevRow);
            fieldCountPrevRow = fieldCount;
          }
        }

        avgFieldCount /= preview.data.length;

        if ((typeof bestDelta === 'undefined' || delta < bestDelta)
          && avgFieldCount > 1.99)
        {
          bestDelta = delta;
          bestDelim = delim;
        }
      }

      _config.delimiter = bestDelim;

      return {
        successful: !!bestDelim,
        bestDelimiter: bestDelim
      }
    }

    function tryParseFloat(val)
    {
      var isNumber = FLOAT.test(val);
      return isNumber ? parseFloat(val) : val;
    }

    function addError(type, code, msg, row)
    {
      _results.errors.push({
        type: type,
        code: code,
        message: msg,
        row: row
      });
    }
  }











  function Parser(config)
  {
    var EMPTY = /^\s*$/;

    var _input;   // The input text being parsed
    var _delimiter; // The delimiting character
    var _comments;  // Comment character (default '#') or boolean
    var _step;    // The step (streaming) function
    var _callback;  // The callback to invoke when finished
    var _preview; // Maximum number of lines (not rows) to parse
    var _ch;    // Current character
    var _i;     // Current character's positional index
    var _inQuotes;  // Whether in quotes or not
    var _lineNum; // Current line number (1-based indexing)
    var _data;    // Parsed data (results)
    var _errors;  // Parse errors
    var _rowIdx;  // Current row index within results (0-based)
    var _colIdx;  // Current col index within result row (0-based)
    var _runningRowIdx;   // Cumulative row index, used by the preview feature
    var _aborted = false; // Abort flag

    // Unpack the config object
    config = config || {};
    _delimiter = config.delimiter;
    _comments = config.comments;
    _step = config.step;
    _preview = config.preview;

    // Delimiter integrity check
    if (typeof _delimiter !== 'string'
      || _delimiter.length != 1
      || Papa.BAD_DELIMITERS.indexOf(_delimiter) > -1)
      _delimiter = ",";

    // Comment character integrity check
    if (_comments === true)
      _comments = "#";
    else if (typeof _comments !== 'string'
      || _comments.length != 1
      || Papa.BAD_DELIMITERS.indexOf(_comments) > -1
      || _comments == _delimiter)
      _comments = false;


    this.parse = function(input)
    {
      if (typeof input !== 'string')
        throw "Input must be a string";
      reset(input);
      return parserLoop();
    };

    this.abort = function()
    {
      _aborted = true;
    };

    this.getCharIndex = function()
    {
       return _i;
    };

    function parserLoop()
    {
      while (_i < _input.length)
      {
        if (_aborted) break;
        if (_preview > 0 && _runningRowIdx >= _preview) break;

        if (_ch == '"')
          parseQuotes();
        else if (_inQuotes)
          parseInQuotes();
        else
          parseNotInQuotes();

        nextChar();
      }

      return finishParsing();
    }

    function nextChar()
    {
      _i++;
      _ch = _input[_i];
    }

    function finishParsing()
    {
      if (_aborted)
        addError("Abort", "ParseAbort", "Parsing was aborted by the user's step function");
      if (_inQuotes)
        addError("Quotes", "MissingQuotes", "Unescaped or mismatched quotes");
      endRow(); // End of input is also end of the last row
      if (!isFunction(_step))
        return returnable();
    }

    function parseQuotes()
    {
      if (quotesOnBoundary() && !quotesEscaped())
        _inQuotes = !_inQuotes;
      else
      {
        saveChar();
        if (_inQuotes && quotesEscaped())
          _i++
        else
          addError("Quotes", "UnexpectedQuotes", "Unexpected quotes");
      }
    }

    function parseInQuotes()
    {
      if (twoCharLineBreak(_i) || oneCharLineBreak(_i))
        _lineNum++;
      saveChar();
    }

    function parseNotInQuotes()
    {
      if (_ch == _delimiter)
        newField();
      else if (twoCharLineBreak(_i))
      {
        newRow();
        nextChar();
      }
      else if (oneCharLineBreak(_i))
        newRow();
      else if (isCommentStart())
        skipLine();
      else
        saveChar();
    }

    function isCommentStart()
    {
      if (!_comments)
        return false;

      var firstCharOfLine = _i == 0
                  || oneCharLineBreak(_i-1)
                  || twoCharLineBreak(_i-2);
      return firstCharOfLine && _input[_i] === _comments;
    }

    function skipLine()
    {
      while (!twoCharLineBreak(_i)
        && !oneCharLineBreak(_i)
        && _i < _input.length)
      {
        nextChar();
      }
    }

    function saveChar()
    {
      _data[_rowIdx][_colIdx] += _ch;
    }

    function newField()
    {
      _data[_rowIdx].push("");
      _colIdx = _data[_rowIdx].length - 1;
    }

    function newRow()
    {
      endRow();

      _lineNum++;
      _runningRowIdx++;
      _data.push([]);
      _rowIdx = _data.length - 1;
      newField();
    }

    function endRow()
    {
      trimEmptyLastRow();
      if (isFunction(_step))
      {
        if (_data[_rowIdx])
          _step(returnable());
        clearErrorsAndData();
      }
    }

    function trimEmptyLastRow()
    {
      if (_data[_rowIdx].length == 1 && EMPTY.test(_data[_rowIdx][0]))
      {
        if (config.keepEmptyRows)
          _data[_rowIdx].splice(0, 1);  // leave row, but no fields
        else
          _data.splice(_rowIdx, 1);   // cut out row entirely
        _rowIdx = _data.length - 1;
      }
    }

    function twoCharLineBreak(i)
    {
      return i < _input.length - 1 &&
        ((_input[i] == "\r" && _input[i+1] == "\n")
        || (_input[i] == "\n" && _input[i+1] == "\r"))
    }

    function oneCharLineBreak(i)
    {
      return _input[i] == "\r" || _input[i] == "\n";
    }

    function quotesEscaped()
    {
      // Quotes as data cannot be on boundary, for example: ,"", are not escaped quotes
      return !quotesOnBoundary() && _i < _input.length - 1 && _input[_i+1] == '"';
    }

    function quotesOnBoundary()
    {
      return (!_inQuotes && isBoundary(_i-1)) || isBoundary(_i+1);
    }

    function isBoundary(i)
    {
      if (typeof i != 'number')
        i = _i;

      var ch = _input[i];

      return (i <= -1 || i >= _input.length)
        || (ch == _delimiter
          || ch == "\r"
          || ch == "\n");
    }

    function addError(type, code, msg)
    {
      _errors.push({
        type: type,
        code: code,
        message: msg,
        line: _lineNum,
        row: _rowIdx,
        index: _i
      });
    }

    function reset(input)
    {
      _input = input;
      _inQuotes = false;
      _i = 0, _runningRowIdx = 0, _lineNum = 1;
      clearErrorsAndData();
      _data = [ [""] ]; // starting parsing requires an empty field
      _ch = _input[_i];
    }

    function clearErrorsAndData()
    {
      _data = [];
      _errors = [];
      _rowIdx = 0;
      _colIdx = 0;
    }

    function returnable()
    {
      return {
        data: _data,
        errors: _errors,
        meta: {
          lines: _lineNum,
          delimiter: _delimiter,
          aborted: _aborted,
          truncated: _preview > 0 && _i < _input.length
        }
      };
    }
  }

  // Replaces bad config values with good, default ones
  function copyAndValidateConfig(origConfig)
  {
    if (typeof origConfig !== 'object')
      origConfig = {};

    var config = copy(origConfig);

    if (typeof config.delimiter !== 'string'
      || config.delimiter.length != 1
      || Papa.BAD_DELIMITERS.indexOf(config.delimiter) > -1)
      config.delimiter = DEFAULTS.delimiter;

    if (typeof config.header !== 'boolean')
      config.header = DEFAULTS.header;

    if (typeof config.dynamicTyping !== 'boolean')
      config.dynamicTyping = DEFAULTS.dynamicTyping;

    if (typeof config.preview !== 'number')
      config.preview = DEFAULTS.preview;

    if (typeof config.step !== 'function')
      config.step = DEFAULTS.step;

    if (typeof config.complete !== 'function')
      config.complete = DEFAULTS.complete;

    if (typeof config.error !== 'function')
      config.error = DEFAULTS.error;

    if (typeof config.encoding !== 'string')
      config.encoding = DEFAULTS.encoding;

    if (typeof config.download !== 'boolean')
      config.download = DEFAULTS.download;

    if (typeof config.keepEmptyRows !== 'boolean')
      config.keepEmptyRows = DEFAULTS.keepEmptyRows;

    return config;
  }

  function copy(obj)
  {
    if (typeof obj !== 'object')
      return obj;
    var cpy = obj instanceof Array ? [] : {};
    for (var key in obj)
      cpy[key] = copy(obj[key]);
    return cpy;
  }

  function isFunction(func)
  {
    return typeof func === 'function';
  }


  return Papa;
});

define('main/data_helpers',['require','vendor/papaparse','underscore','i18n','bugsnag'],function(require) {
  var PapaParse = require('vendor/papaparse');
  var _ = require('underscore');
  var i18n = require('i18n');
  var Bugsnag = require('bugsnag');

  var parse = function (unparsedData) {
    /* jshint maxcomplexity: 13 */

    var res = PapaParse.parse(unparsedData, {preview: 50});
    var parsedData = [], val, i, j;

    if (res.errors.length && !res.data.length) {
      Bugsnag.notify(
        "PasteParseError",
        "PapaParse.parse returned errors.",
        {
          input: unparsedData,
          output: res.errors
        }
      );
    }

    if (!res.data.length || res.data.length < 2) return null;

    for (j = 0 ; j < 2 ; j++) {
      parsedData.push([]);
    }

    for (i = 0 ; i < res.data.length ; i++) {
      if (i === 0 && !parseFloat(res.data[i][0])) continue;
      if (res.data[i].length < 2) return null;

      //skip over empty lines
      if (!res.data[i][0] && !res.data[i][1]) continue;

      for (j = 0 ; j < 2 ; j++) {
        val = res.data[i][j].replace(/,/g, '');
        if (val && isNaN(parseFloat(val))) return {
          error: i18n.t(
            "Error: Row __rowNum__, Column __colNum__ isn't a number.",
            { rowNum: i+1, colNum: j+1}
          )
        };
        parsedData[j].push(val);
      }
    }
    if (parsedData[0].length < 2) return null;

    return {data: parsedData};
  };

  //goal of this fn: ensure that all data is visible in the new viewport with reasonable
  //padding (at least 10%, not more than 20%)
  //make sure the origin, likewise, is visible with padding
  //only update currentMin and/or currentMax if that's necessary
  var _findNewRange = function(rawData, currentMin, currentMax) {
    //add zero in so that the origin remains visible
    var data = _.map(rawData, function(datum) {return parseFloat(datum)});
    data = _.filter(data, function(datum) {return isFinite(datum)});
    data.push(0);

    var max = _.max(data);
    var min = _.min(data);

    var estimatedRange = Math.max(max, currentMax) - Math.min(min, currentMin);

    var recommendedMax = currentMax, recommendedMin = currentMin;
    //override the new max is too tight (has less than 10% buffer)
    if ((max + 0.1 * estimatedRange) > currentMax) {
      recommendedMax = max + 0.2 * estimatedRange; //give us a 20% buffer
    }
    if ((min - 0.1 * estimatedRange) < currentMin) {
      recommendedMin = min - 0.2 * estimatedRange;
    }

    return [recommendedMin, recommendedMax];
  };

  //chooses a new viewport that ensures that all data is visible with at last 20% padding
  //for now, we only consider the first two columns (because those are the only ones that get imported)
  var computeNewViewport = function(viewport, data) {
    var recommendedX = _findNewRange(data[0], viewport.xmin, viewport.xmax);
    var recommendedY = _findNewRange(data[1], viewport.ymin, viewport.ymax);

    return {
      xmin: recommendedX[0],
      xmax: recommendedX[1],
      ymin: recommendedY[0],
      ymax: recommendedY[1]
    };
  };

  return {
    parse: parse,
    computeNewViewport: computeNewViewport
  };
});

define('main/calc_embed',['require','console','jquery','pjs','main/evaluator','graphing/grapher','main/graph_settings','graphing/viewport','expressions/list','expressions/list_view','main/keypad_view','main/state_controller','main/propagate_selection','i18n','main/pillbox_view','main/layout_controller','lib/external_screenshot','loadcss!css/tour','tours/mathart','tours/tour_manager','main/toast','undoredo','underscore_model','ipad.scrollfix','main/data_helpers'],function (require) {
  var console = require('console');
  var $ = require('jquery');
  var P = require('pjs');
  var Evaluator = require('main/evaluator');
  var Grapher = require('graphing/grapher');
  var GraphSettings = require('main/graph_settings');
  var Viewport = require('graphing/viewport');
  var ExpressionList = require('expressions/list');
  var ExpressionListView = require('expressions/list_view');
  var KeypadView = require('main/keypad_view');
  var StateController = require('main/state_controller');
  var propagateSelection = require('main/propagate_selection');
  //To do: render something for unsupported browsers here
  //var Browser = require('browser');

  var i18n = require('i18n');

  var PillboxView = require('main/pillbox_view');
  var LayoutController = require('main/layout_controller');
  var Screenshot = require('lib/external_screenshot');
  require('loadcss!css/tour');
  var mathartTours = require('tours/mathart');
  var TourManager = require('tours/tour_manager');
  var ToastView = require('main/toast');
  var UndoRedo = require('undoredo');
  var UnderscoreModel = require('underscore_model');

  var ScrollFix = require('ipad.scrollfix');
  var DataHelpers = require('main/data_helpers');

  var Calc = P(function (proto) {
    /* jshint maxcomplexity:19 */
    proto.init = function (elt, workerPool, config) {
      /* jshint maxcomplexity:20 */

      var graphSettings = GraphSettings();
      //populate graphSettings config
      for (var key in config) {
        graphSettings.config.setProperty(key, config[key]);
      }

      //disable onscreen keypad, iff:
      // * the expression list is enabled (otherwise doesn't matter)
      // * the keypad is enabled (otherwise, it's a feature to have an onscreen)
      // * the user hasn't set nativeOnscreenKeypad to true
      //
      //note: this is undoable -- if you invoke for one calculator, it'll be
      //true for all subsequent ones. Ideally, new mathquill will allow us to
      //set this kind of thing on a mathquill-by-mathquill basis
      if (
        graphSettings.config.keypad &&
        graphSettings.config.expressions &&
        !graphSettings.config.nativeOnscreenKeypad
      ) {
        window.overrideNativeOnscreenKeypad = true;
      }

      var containerClasses = ['dcg-container', 'dcg-tap-container'];
      if (!graphSettings.config.settingsMenu) containerClasses.push('dcg-no-settings-menu');
      if (!graphSettings.config.expressionsTopbar) containerClasses.push('dcg-no-expression-topbar');
      if (!graphSettings.config.zoomButtons) containerClasses.push('dcg-no-zoom');
      if (!graphSettings.config.branding) containerClasses.push('dcg-no-branding');
      if (graphSettings.config.border) containerClasses.push('dcg-default-border');
      var $embedContainer = $('<div class="' + containerClasses.join(' ') + '">');
      var $graphpaper = $('<div class="dcg-grapher">');

      ScrollFix.limitScrollOnElement($embedContainer);

      var undoRedo = UndoRedo();

      // make sure that anything that is batched within undo/redo is also batched in the evaluator
      undoRedo.batchedWrapper = function (cb) {
        evaluator.batch(cb);
      };

      var toastView = ToastView(undoRedo);
      var evaluator = Evaluator(workerPool);
      var keypadView;
      var expressionsModel = ExpressionList(undoRedo);
      var expressionsView;

      if (!graphSettings.config.expressions || graphSettings.config.expressionsCollapsed) {
        $embedContainer.addClass('dcg-fullscreen');
      }

      if (graphSettings.config.expressions) {
        expressionsView = ExpressionListView(expressionsModel, $embedContainer, toastView, graphSettings);
      }

      $graphpaper.appendTo($embedContainer);
      toastView.appendTo($embedContainer);

      // TODO - what happens when we want a keypad but not the expressionsView? Is that
      // a valid usecase, or is this catch fine?
      if (graphSettings.config.keypad && expressionsView) {
        keypadView = KeypadView();
        keypadView.appendTo($embedContainer);
      }
      if (!graphSettings.config.graphpaper) {
        $embedContainer.addClass('dcg-no-graphpaper');
      }
      $embedContainer.appendTo(elt);
      var grapher = new Grapher($graphpaper, graphSettings, $embedContainer);

      graphSettings.registerCallbacks(grapher, expressionsView, $embedContainer);

      graphSettings.observe('degreeMode', function(){
        evaluator.setDegreeMode(graphSettings.degreeMode);
      });

      graphSettings.config.observeAndSync('singlevarsolutions', function () {
        evaluator.setSingleVarSolutions(graphSettings.config.singlevarsolutions);
      });

      var pillboxView = PillboxView(grapher.viewportController);
      pillboxView.appendTo($embedContainer);

      var stateController = StateController(
        grapher,
        expressionsModel,
        graphSettings,
        evaluator
      );

      this.Screenshot = Screenshot($embedContainer, expressionsView, grapher, evaluator, stateController);

      if (!graphSettings.config.redrawSlowly) {
        grapher.redrawSlowly = grapher.redrawAllLayers;
      }

      var onChangeCallbacks = [];
      var notifyChange = function () {
        for (var i=0; i<onChangeCallbacks.length; i++) {
          onChangeCallbacks[i]();
        }
      };
      var addChangeCallback = function (cb) {
        onChangeCallbacks.push(cb);
      };

      undoRedo.changesCallbacks.push(notifyChange);
      graphSettings.stateProperties.forEach(function (prop) {
        graphSettings.observe(prop, notifyChange);
      });

      grapher.viewportController.triggerViewportStable = function () {
        if (!grapher.screen) return;
        var projection = grapher.createProjection();
        evaluator.setViewState({
          viewport: projection.viewport.toObject(),
          screen: projection.screen
        });

        // if we've set it back to square, keep it square on changes
        if (grapher.viewport.isSquare(grapher.screen)) {
          grapher.settings.setProperty('squareAxes', true);
        }

        grapher.settings.setProperty('zoomedDefault', grapher.viewportController.isZoomRestored());
        pillboxView.settingsView.setViewport(grapher.viewportController.getViewport());

        notifyChange();
      };

      evaluator.triggerStatusChange = function (changes) {
        expressionsModel.onChange(changes);
      };
      evaluator.triggerGraphComputed = function (id, graphData) {
        grapher.updateSketch(id, graphData);
        expressionsModel.onGraphComputed(id, graphData);
      };

      evaluator.triggerRemove = function (id) { grapher.hide(id); };

      evaluator.triggerUpdateIntersections = function (id, intersections) {
        grapher.updateIntersections(id, intersections);
        grapher.redrawPOILayer();
      };

      evaluator.triggerRender = function () {
        grapher.poiController.handleTraceUpdate(); //Needed for updating trace with animation
        grapher.redrawContentLayers();
      };
      evaluator.triggerRenderSlowly = function () { grapher.redrawSlowly(); };

      expressionsModel.triggerAddExp = function (obj) {
        if (!obj) return;
        // if we've completely erased the contents of this expression, then
        // we need to act like it's a new expression. We remove the old sketch
        // so that we don't remember POI information.
        if (obj.latex === '' && this.type !== 'table') {
          grapher.removeGraphSketch(obj.id);
        }

        evaluator.addStatement(obj);
      };

      expressionsModel.triggerRemoveExp = function (id) {
        evaluator.removeStatement(id);
      };
      expressionsModel.triggerRemoveExps = function (ids) {
        evaluator.removeStatements(ids);
      };

      expressionsModel.observe('drawOrder', function(){
        grapher.setSketchOrder(expressionsModel.getProperty('drawOrder'));
      });

      expressionsModel.batchEvaluation = evaluator.batch.bind(evaluator);

      if (expressionsView) {
        expressionsView.triggerClearGraph = function () {
          stateController.setBlank();
          expressionsModel.setSelected(0);
          expressionsView.getSelectedView().addFocus();
        };
      }

      expressionsModel.triggerAddImage = function (image) {
        // add the image only when it's loaded
        if (image.imageObj.width && image.imageObj.height) {
          grapher.addGraphImage(image);
          grapher.redrawImageLayer();
        } else {
          $(image.imageObj).on('load.calc_load', function () {
            grapher.addGraphImage(image);
            grapher.redrawImageLayer();
          });
        }
      };
      expressionsModel.triggerRemoveImage = function (image) {
        $(image.imageObj).off('load.calc_load');
        grapher.removeGraphImage(image.id);
        grapher.redrawImageLayer();
      };
      expressionsModel.triggerRedrawImages = function () {
        grapher.redrawImageLayer();
      };

      propagateSelection(expressionsModel, grapher, evaluator);

      if (keypadView && expressionsView) {
        keypadView.registerEditableView(expressionsView);
      }

      if (keypadView && pillboxView && pillboxView.settingsView) {
        keypadView.registerEditableView(pillboxView.settingsView);
      }

      var layoutController = LayoutController(
        {
          expressionsView: expressionsView,
          keypadView: keypadView,
          pillboxView: pillboxView,
          grapher: grapher
        },
        $embedContainer,
        graphSettings
      );

      grapher.poiController.triggerStartMovingPoint = function (pointInfo) {
        expressionsModel.onStartMovingPoint(pointInfo);
      };

      grapher.poiController.triggerMovePoint = function (pointInfo, screen_pt, projection) {
        expressionsModel.onMovePoint(pointInfo, screen_pt, projection);
      };

      grapher.poiController.triggerStopMovingPoint = function (pointInfo) {
        expressionsModel.onStopMovingPoint(pointInfo);
      };

      grapher.poiController.triggerSelectExpression = function (id) {
        expressionsModel.setSelected(expressionsModel.getItemById(id));
      };

      var graphpaperBounds = UnderscoreModel();
      this.graphpaperBounds = graphpaperBounds;

      layoutController.triggerGraphpaperRectChanged = function (rect) {
        graphpaperBounds.setProperty('pixelCoordinates', {
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right,
          width: rect.width,
          height: rect.height
        });
        grapher.triggerProjectionChanged(grapher.createProjection());
      };

      grapher.triggerProjectionChanged = function (projection) {
        graphpaperBounds.setProperty('mathCoordinates', {
          top: projection.viewport.ymax,
          bottom: projection.viewport.ymin,
          left: projection.viewport.xmin,
          right: projection.viewport.xmax,
          width: projection.viewport.xmax - projection.viewport.xmin,
          height: projection.viewport.ymax - projection.viewport.ymin
        });
      };

      grapher.triggerProjectionChanged(grapher.createProjection());

      if (expressionsView) {
        expressionsView.appendTo($embedContainer);
      }

      //blur if there's a click outside of our container.
      //note: has a special catch for if you click on dcg-shell, because as part of our handlers
      //for clicking on that, we remove the dcg-shell from the DOM
      $(window).on('dcg-tapstart', function(evt) {
        var $target = $(evt.target);
        if (!$target.closest($embedContainer).length && !$target.hasClass('dcg-shell')) {
          expressionsModel.setSelected(null);
        }
      });

      // We call the monitorWindowSize() function on window resize
      // this is triggered even for embedded calculator instances
      // it's a no-op if size hasn't changed
      $(window).resize(layoutController.monitorWindowSize.bind(layoutController));

      this.expressionsModel = expressionsModel;

      if (expressionsView) {
        this.expressions = expressionsView;
      }
      this.grapher = grapher;
      this.evaluator = evaluator;
      this.stateController = stateController;
      this.setState = stateController.setState.bind(stateController);
      this.setBlank = stateController.setBlank.bind(stateController);
      this.getState = stateController.getState.bind(stateController);
      this.setStateFromURL = stateController.setStateFromURL.bind(stateController);
      this.expressionsView = expressionsView;
      this.undoRedo = undoRedo;
      this.addChangeCallback = addChangeCallback;
      this.toast = function(str, options) {
        toastView.show(str, options);
      };

      // We need a "Calc" object inside of TourManager.
      // I think the only thing that the tour_manager *really* needs is a reference
      // to the evaluator, since I imagine we invoke the mathart tour with a direct
      // reference to Calc. Tour_manager uses the evaluator to make sure it doesn't proceed
      // while the evaluator's cranking
      this.tourManager = TourManager({
        evaluator: evaluator
      });

      this.tourManager.TOURS = mathartTours;

      this.setViewport = function (bounds) {
        grapher.viewportController.setViewport(new Viewport(
          bounds[0], bounds[1], bounds[2], bounds[3]
        ));
      };
      this.resize = function () {
        layoutController.resize();
      };

      this.addFocus = function () {
        if (!expressionsView) return;
        expressionsModel.setSelected(0);
        expressionsView.getSelectedView().addFocus();
      };

      //undocumented (for now) method for adding a data table programatically
      this.createAndPopulateTable = function(parsedData) {

        this.expressionsView.addExpressionView.newTable(parsedData);
        //calc viewport
        var cvp = this.grapher.viewport.toObject();
        //new viewport
        var nvp = DataHelpers.computeNewViewport(cvp, parsedData);
        var self = this;
        if (nvp.xmax > cvp.xmax || nvp.xmin < cvp.xmin || nvp.ymax > cvp.ymax || nvp.ymin < cvp.ymin) {

          self.undoRedo.addTransaction({
            type: self.undoRedo.CAUSE_OF_CHANGE,
            undo: function () {
              self.setViewport([cvp.xmin, cvp.xmax, cvp.ymin, cvp.ymax]);
            },
            redo: function () {
              self.setViewport([nvp.xmin, nvp.xmax, nvp.ymin, nvp.ymax]);
            }
          });
          this.toast(i18n.t('We zoomed to fit your data.'), { undoCallback: function () {}});
        }
      };

      this.interceptTouch = function () {
        var elts = $graphpaper;
        if (expressionsView) {
          elts = elts.add(expressionsView.$('.dcg-expression-top-bar'));
        }
        if (keypadView) elts = elts.add(keypadView.$());
        // Don't allow legacy scrolling or legacy clicks on the graphpaper or keypad
        elts.on('touchstart', function (evt) {
          evt.preventDefault();
        });
        // Since we're preventing default, we need to take responsibility for closing
        // the system keypad, and fixing scroll.
        elts.on('touchend', function (evt) {
          if ($(evt.target).closest('.dcg-do-not-blur')) return;
          layoutController.defocusMobile();
        });
      };

      this.setOptions = function (options) {
        var needsResize = false;
        if (options.hasOwnProperty('solutions')) {
          $embedContainer.toggleClass('dcg-no-solutions', !options.solutions);
        }
        if (options.hasOwnProperty('settingsMenu')) {
          $embedContainer.toggleClass('dcg-no-settings-menu', !options.settingsMenu);
        }

        if (options.hasOwnProperty('border')) {
          $embedContainer.toggleClass('dcg-default-border', !!options.border);
        }
        if (options.hasOwnProperty('branding')) {
          $embedContainer.toggleClass('dcg-no-branding', !options.branding);
        }
        if (options.hasOwnProperty('expressionsTopbar')) {
          $embedContainer.toggleClass('dcg-no-expression-topbar', !options.expressionsTopbar);
          needsResize = true;
        }
        if (options.hasOwnProperty('graphpaper')) {
          $embedContainer.toggleClass('dcg-no-graphpaper', !options.graphpaper);
          needsResize = true;
        }
        if (options.hasOwnProperty('zoomButtons')) {
          $embedContainer.toggleClass('dcg-no-zoom', !options.zoomButtons);
        }
        if (options.hasOwnProperty('expressionsCollapsed') && expressionsView) {
          if (options.expressionsCollapsed) {
            expressionsView.hideExpressions();
          } else {
            expressionsView.showExpressions();
          }
        }
        if (options.hasOwnProperty('keypad')) {
          console.warn(
            'Bad option {keypad: ' +
            options.keypad +
            '}. The keypad can only be added or removed at load time, not at runtime.'
          );
        }
        if (options.hasOwnProperty('expressions')) {
          console.warn(
            'Bad option {expressions: ' +
            options.expressions +
            '}. The expressions can only be added or removed at load time, not at runtime.'
          );
        }

        if (needsResize) layoutController.resize();
      };

      layoutController.resize();
      stateController.setBlank();

      if (graphSettings.config.expressionsCollapsed) this.setOptions({expressionsCollapsed: true});

      grapher.viewportController.triggerViewportStable();
    };
  });

  return Calc;
});


define('api/calculator',['require','console','pjs','underscore','main/calc_embed','expressions/helperexpression','underscore_model','worker/workerpool','browser','config','mathquill','expressions/colors','graphing/columnmode','graphing/dragmode','graphing/axisarrowmode'],function (require) {
  var console = require('console');
  var P = require('pjs');
  var _ = require('underscore');
  var Calc = require('main/calc_embed');
  var HelperExpression = require('expressions/helperexpression');
  var UnderscoreModel = require('underscore_model');
  var WorkerPool = require('worker/workerpool');
  var Browser = require('browser');
  var Config = require('config');
  var MathQuill = require('mathquill');

  var Colors = require('expressions/colors');
  var ColumnModes = require('graphing/columnmode');
  var DragModes = require('graphing/dragmode');
  var AxisArrowModes = require('graphing/axisarrowmode');
  function validatedOptions (options) {
    var out = {};
    if (!options) options = {};

    var addOption = function (property, defaultValue) {
      if (options.hasOwnProperty(property)) {
        out[property] = options[property];
      } else {
        out[property] = defaultValue;
      }
    };
    addOption('keypad', true);
    addOption('graphpaper', true);
    addOption('settingsMenu', true);
    addOption('expressionsTopbar', true);
    addOption('branding', true);
    //zoomButtons don't make sense w/o graphpaper
    addOption('zoomButtons', out.graphpaper);
    addOption('solutions', true);
    // singlevarsolutions turns off less behavior than solutions.
    // expect to merge these two, but for now, singlevarsolutions
    // is internal only
    addOption('singlevarsolutions', true);
    addOption('expressionsCollapsed', false);
    addOption('lockViewport', false);
    //default to useShellsOffscreen on mobile
    addOption('useShellsOffscreen', Browser.IS_MOBILE);
    addOption('redrawSlowly', false);
    addOption('onlyTraceSelected', false);
    addOption('disableMouseInteractions', false);
    addOption('folders', true);
    //images don't make much sense w/o graphpaper (but aren't strictly disallowed)
    addOption('images', out.graphpaper);
    addOption('expressions', true);
    addOption('border', true);
    addOption('nativeOnscreenKeypad', false);

    //secret option for resizing in a loop
    addOption('resizeLoop', false);

    if (options.hasOwnProperty('menus')) {
      console.warn(
        'As of API version 0.4, the \'menus\' option is deprecated and has been split into ' +
        'settingsMenu (boolean) and expressionsTopbar (boolean).'
      );
      if (!options.hasOwnProperty('settingsMenu')) out.settingsMenu = !!options.menus;
      if (!options.hasOwnProperty('expressionsTopbar')) out.expressionsTopbar = !!options.menus;
    }


    if (!out.graphpaper) {
      if (out.expressionsCollapsed) {
        out.expressionsCollapsed = false;
        console.warn(
          'Desmos API initialized with bad options. graphpaper: false ' +
          'and expressionsCollapsed: true are incompatible. Proceeding ' +
          'with expressionsCollapsed: false.'
        );
      }
      if (out.zoomButtons) {
        out.zoomButtons = false;
        console.warn(
          'Desmos API initialized with bad options. graphpaper: false ' +
          'and zoomButtons: true are incompatible. Proceeding ' +
          'with zoomButtons: false.'
        );
      }
    }

    return out;
  }
  var nworkers = Config.get('nworkers') ? parseFloat(Config.get('nworkers')) : 8;
  var workerPool = WorkerPool(nworkers);

  var Calculator = P(UnderscoreModel, function (proto, _super) {
    proto.init = function (elt, options, onReady) {
      _super.init.call(this);

      this._calc = Calc(elt, workerPool, validatedOptions(options));
      this._calc.interceptTouch();

      this._calc.graphpaperBounds.observeAndSync('mathCoordinates',
        this._syncGraphpaperBounds.bind(this)
      );
      this._calc.graphpaperBounds.observeAndSync('pixelCoordinates',
        this._syncGraphpaperBounds.bind(this)
      );
      if (this._calc.expressionsView) {
        this._calc.expressionsView.observe('focusedMathQuill', function () {
          this.setProperty('focusedMathQuill', this._calc.expressionsView.focusedMathQuill);
        }.bind(this));
      }

      this._calc.expressionsModel.observe('selectedItem', function () {
        this.setProperty('isAnyExpressionSelected',
          this._calc.expressionsModel.selectedItem !== undefined &&
          this._calc.expressionsModel.selectedItem !== null
        );
      }.bind(this));

      this._initGraphSettings();

      //let the world know that we're ready
      if (typeof onReady === 'function') onReady(this);
    };

    proto._syncGraphpaperBounds = function () {
      this.setProperty('graphpaperBounds', {
        mathCoordinates: this._calc.graphpaperBounds.mathCoordinates,
        pixelCoordinates: this._calc.graphpaperBounds.pixelCoordinates
      });
    };

    var knownSettings = [
      'showGrid',
      'showXAxis',
      'showYAxis',
      'xAxisStep',
      'yAxisStep',
      'xAxisMinorSubdivisions',
      'yAxisMinorSubdivisions',
      'xAxisArrowMode',
      'yAxisArrowMode',
      'xAxisLabel',
      'yAxisLabel',
      'xAxisNumbers',
      'yAxisNumbers',
      'polarMode', // TODO rename to polarGrid
      'polarNumbers',
      'degreeMode',
      'projectorMode'
    ];

    proto._initGraphSettings = function () {
      // Proxy for _calc graphsettings
      var graphSettings = UnderscoreModel();
      this.graphSettings = graphSettings;

      var self = this;
      var syncSetting = function (setting) {
        self._calc.grapher.settings.observeAndSync(setting, function () {
          graphSettings.setProperty(setting, self._calc.grapher.settings[setting]);
        });
      };

      knownSettings.forEach(syncSetting);
    };

    var validateSetting = function (name, val) {
      /* jshint maxcomplexity: false */
      var validatedSetting;
      switch (name) {
        case 'xAxisMinorSubdivisions':
        case 'yAxisMinorSubdivisions':
          validatedSetting = Math.round(Math.min(Math.max(0, val), 5));
          if (val !== validatedSetting) console.warn(
            'minorSubdivisions must be an integer between 0 and 5. You provided ' +
            val + ', which we changed to ' + validatedSetting + '.'
          );
          break;
        case 'degreeMode':
        case 'projectorMode':
        case 'showGrid':
        case 'showXAxis':
        case 'showYAxis':
        case 'xAxisNumbers':
        case 'yAxisNumbers':
        case 'polarNumbers':
          //mutate to boolean
          validatedSetting = val === 'false' ? false : !!val;
          if (val !== validatedSetting) console.warn(
            name + ' must be a Boolean. You provided ' + val + ' (' + (typeof val) +
            '), which we changed to ' + validatedSetting + ' (' + typeof validatedSetting + ').'
          );
          break;
        case 'xAxisStep':
        case 'yAxisStep':
          //mutate to number
          validatedSetting = parseFloat(val);
          if (!isFinite(val)) {
            validatedSetting = 0;
            console.warn(
              name + ' must be a number. You provided ' + val + ', which we changed to ' + validatedSetting + '.'
            );
          }
          break;
        case 'yAxisMinorSubdivisions':
          validatedSetting = Math.round(Math.min(Math.max(0, val), 5));
          if (val !== validatedSetting) console.warn(
            'minorSubdivisions must be an integer between 0 and 5. You provided ' +
            val + ', which we changed to ' + validatedSetting + '.'
          );
          break;
        case 'xAxisArrowMode':
        case 'yAxisArrowMode':
          validatedSetting = AxisArrowModes[val];
          if (validatedSetting !== val) {
            validatedSetting = AxisArrowModes.NONE;
            console.warn(
              'unknown AxisArrowMode. Allowed values are: \n' + _.keys(AxisArrowModes).join('\n')
            );
          }
          break;
        case 'xAxisLabel':
        case 'yAxisLabel':
          validatedSetting = val;
          if (typeof val !== 'string') {
            validatedSetting = '';
            console.warn(name + ' must be a string. you provided a ' + (typeof val) + '.');
          }
          break;
        default:
          validatedSetting = val;
          break;
      }
      return validatedSetting;
    };

    var validateSettings = function (obj) {
      var validatedSettings = {};
      var anyUnknownSettings = false;
      for (var name in obj) {
        if (knownSettings.indexOf(name) >= 0) {
          validatedSettings[name] = validateSetting(name, obj[name]);
        } else {
          console.warn('Invalid graph setting "' + name + '".');
          anyUnknownSettings = true;
        }
      }
      if (anyUnknownSettings) {
        console.warn('Available graph settings are: \n' + knownSettings.join('\n'));
      }
      return validatedSettings;
    };

    proto.setGraphSettings = function (settings) {
      var validatedSettings = validateSettings(settings);
      for (var k in validatedSettings) {
        if (!validatedSettings.hasOwnProperty(k)) continue;
        this._calc.grapher.settings.setProperty(k, validatedSettings[k]);
      }
    };

    proto.mathToPixels = function (point) {
      var out = {};

      var mc = this.graphpaperBounds.mathCoordinates;
      var pc = this.graphpaperBounds.pixelCoordinates;

      if (point.hasOwnProperty('x')) {
        out.x = ((point.x - mc.left)*pc.right + (mc.right - point.x)*pc.left)/(mc.right - mc.left);
      }
      if (point.hasOwnProperty('y')) {
        out.y = ((point.y - mc.bottom)*pc.top + (mc.top - point.y)*pc.bottom)/(mc.top - mc.bottom);
      }

      return out;
    };

    proto.pixelsToMath = function (point) {
      var out = {};

      var mc = this.graphpaperBounds.mathCoordinates;
      var pc = this.graphpaperBounds.pixelCoordinates;

      if (point.hasOwnProperty('x')) {
        out.x = ((point.x - pc.left)*mc.right + (pc.right - point.x)*mc.left)/(pc.right - pc.left);
      }
      if (point.hasOwnProperty('y')) {
        out.y = ((point.y - pc.bottom)*mc.top + (pc.top - point.y)*mc.bottom)/(pc.top - pc.bottom);
      }

      return out;
    };

    var validate = {};
    validate.expression = function (obj) {
      var validatedState = {};
      validatedState.type = 'expression';
      if (obj.hasOwnProperty('id')) {
        validatedState.id = obj.id.toString();
      }
      if (obj.hasOwnProperty('latex')) {
        validatedState.latex = obj.latex.toString();
      }
      if (obj.hasOwnProperty('color')) {
        validatedState.color = obj.color.toString();
      }
      if (obj.hasOwnProperty('style')) {
        validatedState.style = obj.style.toString();
      }
      if (obj.hasOwnProperty('hidden')) {
        validatedState.hidden = !!obj.hidden;
      }
      if (obj.hasOwnProperty('sliderBounds')) {
        // NOTE translation.
        validatedState.sliderMin = +obj.sliderBounds.min;
        validatedState.sliderMax = +obj.sliderBounds.max;
        validatedState.sliderInterval = obj.sliderBounds.step;
      }
      if (obj.hasOwnProperty('domain')) {
        validatedState.domain = {
          min: +obj.domain.min,
          max: +obj.domain.max
        };
      }
      return validatedState;
    };

    var validateColumn = function (obj) {
      /* jshint maxcomplexity: false */
      var validatedState = {};
      if (obj.hasOwnProperty('id')) {
        validatedState.id = obj.id.toString();
      }
      if (obj.hasOwnProperty('latex')) {
        validatedState.latex = obj.latex.toString();
      }
      if (obj.hasOwnProperty('color')) {
        validatedState.color = obj.color.toString();
      }
      if (obj.hasOwnProperty('hidden')) {
        validatedState.hidden = !!obj.hidden;
      }
      if (obj.hasOwnProperty('values')) {
        validatedState.values = obj.values.map(function (val) {return val.toString()});
      }
      if (obj.hasOwnProperty('columnMode')) {
        if (
          obj.columnMode === ColumnModes.LINES &&
          obj.hasOwnProperty('dragMode') &&
          obj.dragMode !== DragModes.NONE
        ) {
          console.warn(
            'columnMode LINES is not compatible with a dragMode other than NONE. ' +
            'Proceeding with columnMode set to Desmos.ColumnModes.POINTS_AND_LINES.'
          );

          obj.columnMode = ColumnModes.POINTS_AND_LINES;
        }

        // Purposely trying to catch typos in the Desmos.ColumnMode property access
        if (_.contains(_.keys(ColumnModes), obj.columnMode)) {
          validatedState.columnMode = obj.columnMode;
        } else {
          console.warn('Invalid columnMode: \'' + obj.columnMode + '\'.');
        }
      }
      if (obj.hasOwnProperty('dragMode')) {
        // Purposely trying to catch typos in the Desmos.ColumnMode property access
        if (_.contains(_.keys(DragModes), obj.dragMode)) {
          validatedState.dragMode = obj.dragMode;
        } else {
          console.warn('Invalid dragMode: \'' + obj.dragMode + '\'.');
        }
      }
      // TODO add columnMode and dragMode
      return validatedState;
    };

    validate.table = function (obj) {
      var validatedState = {};
      validatedState.type = 'table';
      if (obj.hasOwnProperty('id')) {
        validatedState.id = obj.id.toString();
      }
      if (obj.hasOwnProperty('columns')) {
        validatedState.columns = obj.columns.map(validateColumn);
      }
      return validatedState;
    };

    // Note, folders and images are not exposed through the public API, but
    // some users (cough, cough, Mathalicious) were showing and hiding them
    // through the API anyway, which worked in v0.4, but became broken in v0.5.
    //
    // Allow this undocumented use case to fix their regression.
    validate.folder = function (obj) {
      var validatedState = {};
      validatedState.type = 'folder';
      if (obj.hasOwnProperty('id')) {
        validatedState.id = obj.id.toString();
      }
      if (obj.hasOwnProperty('hidden')) {
        validatedState.hidden = !!obj.hidden;
      }
      return validatedState;
    };

    validate.image = function (obj) {
      var validatedState = {};
      validatedState.type = 'image';
      if (obj.hasOwnProperty('id')) {
        validatedState.id = obj.id.toString();
      }
      if (obj.hasOwnProperty('hidden')) {
        validatedState.hidden = !!obj.hidden;
      }
      return validatedState;
    };

    proto.setExpression = function (obj) {
      var expressions = this._calc.expressionsModel;

      var oldExpression = expressions.getItemById(obj.id);
      var validatedState;

      if (oldExpression) {
        //Update
        if (obj.type && (obj.type !== oldExpression.type)) {
          console.warn(
            'Cannot change type of expression from ' +
            '\'' + oldExpression.type + '\' to ' +
            '\'' + obj.type + '\'.'
          );
          return;
        }

        if (!validate.hasOwnProperty(oldExpression.type)) {
          console.warn(
            'Cannot modify expressions of type: \'' + obj.type + '\' ' +
            'through the API.'
          );
          return;
        }

        validatedState = validate[oldExpression.type](obj);
        expressions.updateItemById(validatedState.id, validatedState);
      } else {
        if (obj.type && !validate.hasOwnProperty(obj.type)) {
          console.warn('Invalid expression type: \'' + obj.type + '\'.');
          return;
        }
        validatedState = validate[obj.type || 'expression'](obj);
        //Set
        expressions.addItem(expressions.fromState(validatedState));
      }
    };

    proto.setExpressions = function (expressions) {
      expressions.forEach(this.setExpression.bind(this));
    };

    proto.removeExpression = function (expression) {
      var expressions = this._calc.expressionsModel;
      var id = expression.id.toString();
      expressions.removeItemById(id);
    };

    proto.removeExpressions = function (expressions) {
      expressions.forEach(this.removeExpression.bind(this));
    };

    proto.removeSelected = function () {
      if (!this.isAnyExpressionSelected) return;
      this._calc.expressionsModel.removeItemById(this._calc.expressionsModel.selectedItem.id);
    };

    proto.setMathBounds = function (bounds) {
      if (
        bounds &&
        bounds.left < bounds.right &&
        bounds.bottom < bounds.top
      ) {
        this._calc.setViewport([bounds.left, bounds.right, bounds.bottom, bounds.top]);
      } else {
        console.warn(
          'Invalid bounds argument. ' +
          'Expected a bounds object with bounds.bottom < bounds.top, and bounds.left < bounds.right. ' +
          'Got ' + JSON.stringify(bounds));
      }
    };

    // Preserved for backwards compatibility. Use calculator.setMathBounds instead.
    proto.setViewport = function (bounds) {
      if (
        bounds.length == 4 &&
        bounds[1] > bounds[0] &&
        bounds[3] > bounds[2]
      ) {
        this._calc.setViewport(bounds);
      } else {
        console.warn('Invalid viewport.  Expected [xmin, xmax, ymin, ymax].  Got ' + bounds);
      }
    };

    proto.resize = function () {
      this._calc.resize();
    };

    proto.setBlank = function () { return this._calc.setBlank.apply(this._calc, arguments); };
    proto.setState = function () { return this._calc.setState.apply(this._calc, arguments); };
    proto.getState = function () { return this._calc.getState.apply(this._calc, arguments); };

    proto.screenshot = function (opts) {
      opts = opts ? opts : {};
      return this._calc.grapher.screenshot(opts.width, opts.height);
    };

    proto.setOptions = function () { return this._calc.setOptions.apply(this._calc, arguments)};

    proto.HelperExpression = function (obj) {
      var proxy = UnderscoreModel();

      var h = HelperExpression(obj, this._calc.expressionsModel);
      this._calc.expressionsModel.addHelperItem(h);

      proxy.latex = h.latex;

      h.observe('formula', function () {
        // Notify proxy of changed properties at the end so that the externally
        // exposed values are consistent. Might want to make this an optional feature
        // of UnderscoreModel. Maybe model.batchUpdate(function () { /* do updates */ });
        var props = ['numericValue'];
        var oldValues = props.map(function (prop) {return proxy[prop]});

        var formula = h.formula;

        var val;
        if (formula.zero_values && formula.zero_values.length === 1) {
          val = formula.zero_values[0].val;
        }
        var valType = typeof val;
        proxy.numericValue = valType === 'number' ? val : NaN;

        props.forEach(function (prop) {
          if (!_.isEqual(proxy[prop], oldValues[prop])) proxy.notifyPropertyChange(prop);
        });
      });


      return proxy;
    };
  });

  window.Desmos = window.Desmos ? window.Desmos : {};

  // Spelling these out to avoid giving access to Colors.all. This is a
  // mutable array, and changing it would change the colors we cycle through.
  // That might be desirable, but we would want a better API for doing it.
  window.Desmos.Colors = {
    RED: Colors.RED,
    BLUE: Colors.BLUE,
    GREEN: Colors.GREEN,
    ORANGE: Colors.ORANGE,
    PURPLE: Colors.PURPLE,
    BLACK: Colors.BLACK,
    next: Colors.next
  };

  window.Desmos.ColumnModes = ColumnModes;
  window.Desmos.DragModes = DragModes;
  window.Desmos.AxisArrowModes = AxisArrowModes;
  window.Desmos.MathQuill = MathQuill;
  window.Desmos.Calculator = Calculator;


  return Calculator;
});

define('mygraphs/view',['require','loadcss!css/mygraphs','jquery','underscore','pjs','i18n','keys','config','underscore_view','./examplegraphitem_view','./savedgraphitem_view','template!mygraphs','api/calculator','scroll_helpers','vendor/jquery.html5-placeholder-shim'],function(require) {
  require('loadcss!css/mygraphs');

  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var i18n = require('i18n');
  var Keys = require('keys');
  var Config = require('config');
  var UnderscoreView = require('underscore_view');
  var ExampleGraphItemView = require('./examplegraphitem_view');
  var SavedGraphItemView = require('./savedgraphitem_view');
  var template = require('template!mygraphs');
  var CalcAPI = require('api/calculator');
  var scrollHelpers = require('scroll_helpers');

  require('vendor/jquery.html5-placeholder-shim');

  var MyGraphsView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (model, Calc, modals) {
      _super.init.call(this);
      this.model = model;
      this.Calc = Calc;
      this.modals = modals;
      this.itemViews = {};

      this.model.triggerItemAdded = this.onItemAdded.bind(this);
      this.model.triggerItemRemoved = this.onItemRemoved.bind(this);
      this.model.observe('selectedItem', this.onSelectedItemChange.bind(this));
      this.model.observe('searchQuery', this.onSearchQueryChange.bind(this));

      this.accountsEnabled = !!this.model.userController;

      if (this.accountsEnabled) {
        this.model.userController.observe('currentUser', this.renderLayout.bind(this));
      }

      this.model.observe('isSpinning searchQuery filteredItemCount', this.renderLayout.bind(this));

      this.observe('isOpen', this.renderIsOpen.bind(this));
    };

    view.getTemplateParams = function() {
      return {
        maintenance: Config.get('maintenance'),
        previewMode: Config.get('previewMode'),
        previewFeedbackUrl: Config.get('previewFeedbackUrl'),
        previewMessage: Config.get('previewMessage'),
        accountsEnabled: this.accountsEnabled
      };
    };

    view.createItemView = function (itemModel) {
      if (itemModel.isSavedGraph) {
        return SavedGraphItemView(itemModel);
      } else if (itemModel.isExampleGraph) {
        return ExampleGraphItemView(itemModel);
      }
    };

    view.onItemAdded = function (itemModel, index) {
      if (!this.$()[0]) return; // don't do anything if not in dom

      var itemView = this.createItemView(itemModel);
      this.__itemViews[itemModel.guid] = itemView;

      if (index === 0) {
        itemView.prependTo(this.$('.template-list'));
      } else {
        itemView.insertAfter(this.$('.template-list > :nth-child('+index+')'));
      }
    };

    view.onItemRemoved = function (itemModel) {
      if (!this.$()[0]) return; // don't do anything if not in dom

      var itemView = this.__itemViews[itemModel.guid];
      delete this.__itemViews[itemModel.guid];

      itemView.remove();
    };

    view.getViewFromModel = function (itemModel) {
      return itemModel ? this.__itemViews[itemModel.guid] : null;
    };

    view.getSelectedView = function () {
      return this.getViewFromModel(this.model.selectedItem);
    };

    view.getSelectedGraph = function () {
      var selectedItemModel = this.model.selectedItem;
      if (!selectedItemModel) return null;

      return selectedItemModel.graph;
    };

    view.clearSelection = function () {
      var selectedItemModel = this.model.selectedItem;
      if (selectedItemModel) {
        selectedItemModel.setProperty('selected', false);
      }
      //should be a no-op most of the time
      this.$fullscreenLoadingContainer.hide();
    };

    view.onSelectedItemChange = function () {
      if (this.getSelectedGraph()) {
        this.showPreview();
      } else {
        this.hidePreview();
      }
    };

    view.focusSearchBar = function () {
      this.$('#search-mygraphs').focus();
    };

    view.toggleVisible = function () {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    };

    view.updateSearchQuery = function (evt) {
      //escape pressed -- clear input? just bikeshedding.
      if (Keys.lookup(evt) === Keys.ESCAPE) {
        this.$('#search-mygraphs').val('');
        this.model.setProperty('searchQuery','');
      }

      //don't run the filter graphs code on  enter, up, or down
      else if ([Keys.UP, Keys.DOWN, Keys.ENTER].indexOf(Keys.lookup(evt)) === -1) {
        this.model.setProperty('searchQuery', this.$('#search-mygraphs').val());

        // close preview if it's open when typing in search box
        this.clearSelection();
      }

    };

    view.newBlankGraph = function () {
      this.clearSelection();
      this.model.graphsController.clearGraph();

      var self = this;
      var undoCallback = function () {
        self.open();
      };
      this.Calc._calc.toast(i18n.t("New graph created."), {undoCallback: undoCallback});
      this.close();
    };

    view.onSearchQueryChange = function () {
      this.$('.new-blank-graph').toggle(this.model.searchQuery.length === 0);
    };

    view.didCreateElement = function () {
      var self = this;
      var previewDiv = this.$('#preview-calculator')[0];
      var previewOpts = {
        settingsMenu: false,
        expressionsTopbar: false,
        keypad: false,
        zoomButtons: false,
        useShellsOffscreen: true,
        border: false,
        branding: false
      };
      this.previewCalc = new CalcAPI(previewDiv, previewOpts);

      var throttledResize = _.throttle(function() {
        this.positionPreview();
      }.bind(this), 100);
      $(window).on('resize', throttledResize);

      this.$preview = this.$('.graph-preview');
      this.$previewArrow = this.$preview.children('.active-arrow');
      this.$previewTitle = this.$preview.children('.dcg-title');
      this.$scrollable = this.$('.dcg-scrollable');

      this.$inlineLoadingContainer = this.$('.dcg-inline-loading-container');
      this.$fullscreenLoadingContainer = this.$('.dcg-fullscreen-loading-container');

      this.$('.dcg-action-try-again').on('dcg-tap', this.showPreview.bind(this));

      this.$scrollable.on('scroll', this.hidePreviewIfTooScrolled.bind(this));
      this.$('#search-mygraphs').on('change keypress keyup keydown copy paste cut', this.updateSearchQuery.bind(this));

      this.$('.dcg-action-login').on('dcg-tap', this.login.bind(this));
      this.$('.dcg-action-createaccount').on('dcg-tap', this.createAccount.bind(this));
      this.$().on('click', 'a', function (evt) {
        if (!$(this).attr('href')) evt.preventDefault();
      });

      this.$().on('dcg-tap', '.dcg-action-newblankgraph', this.newBlankGraph.bind(this));
      this.$().on('dcg-tap', '.dcg-action-cancel', this.clearSelection.bind(this));

      this.$('.dcg-action-open-graph').on('dcg-tap', this.openPreview.bind(this));

      //background cover
      // if clicked and a preview is open, close that preview
      // otherwise, close the resources tab
      this.$('.dcg-action-close-resources').on('dcg-tapstart', function (evt) {
        if (self.getSelectedGraph()) {
          self.clearSelection();
        } else {
          self.close();
        }
      });

      // add examples to dom
      var list = this.$('.template-list');
      this.__itemViews = {};
      this.model.getItems().forEach(function (itemModel) {
        var itemView = self.createItemView(itemModel);
        self.__itemViews[itemModel.guid] = itemView;

        // TODO - optimize by adding all starting items at once rather than one at a time
        itemView.appendTo(list);
      });

      this.renderLayout();
    };

    view.createAccount = function () {
      //_kmq.push(['record', 'started signup', {
      //  'signup location': 'mygraphs-drawer'
      //}]);
      this.modals.createAccountDialog.show();
    };

    view.login = function () {
      //_kmq.push(['record', 'started login', {'login location': 'mygraphs-drawer'}]);
      this.modals.loginDialog.show();
    };

    view.renderLayout = function () {
      // exit early if the dom isn't created yet
      if (!this.$()[0]) return;

      var userIsLoggedIn = !!(this.accountsEnabled && this.model.userController.currentUser);
      var isSpinning = !!this.model.isSpinning;

      //show login options. no-op on tablet because login-reminder doesn't exist in the DOM
      this.$('.login-reminder').toggle(!userIsLoggedIn);
      // only show spinner if user is logged in
      this.$('.template-spinning').toggle(userIsLoggedIn && isSpinning);
      // only show 'no matches' if a search query is entered and the're not matches
      this.$('.no-matches').toggle(this.model.filteredItemCount === 0 && this.model.searchQuery.length !== 0);
    };

    view.openPreview = function () {
      var selectedGraph = this.getSelectedGraph();
      if (!selectedGraph) return;

      var onSuccess = (function () {
        if (this.getSelectedGraph() !== selectedGraph) return;

        this.model.graphsController.loadGraph(selectedGraph.copy());

        var graphTitle;
        if (!selectedGraph.title) {
          graphTitle = i18n.t("Untitled Graph");
        } else {
          if (selectedGraph.title.length > 15) {
            graphTitle = selectedGraph.title.substr(0, 15) + "...";
          } else {
            graphTitle = selectedGraph.title;
          }
        }
        this.$fullscreenLoadingContainer.hide();
        var str = i18n.t("Opened '__graphTitle__'", {graphTitle: graphTitle});
        this.Calc._calc.toast(str, { undoCallback: this.open.bind(this) });
        this.close();
      }).bind(this);

      var onFailure = (function () {
        if (this.getSelectedGraph() !== selectedGraph) return;

        this.$inlineLoadingContainer.addClass('dcg-error-loading');
        this.$fullscreenLoadingContainer.addClass('dcg-error-loading');
      }).bind(this);

      selectedGraph.fetchData().then(onSuccess, onFailure);
    };

    view.showPreview = function () {
      var selectedGraph = this.getSelectedGraph();
      if (!selectedGraph) return;

      //on small screens (< 650px), don't show the preview, just open the graph
      if ($('body').width() < 650) {
        this.$fullscreenLoadingContainer.removeClass('dcg-error-loading').show();
        return this.openPreview();
      }
      this.$fullscreenLoadingContainer.hide();

      //do all of these things before showing & setState so that it feels more responsive
      $('body').addClass('preview-open');
      this.positionPreview();
      this.$previewTitle.text(selectedGraph.displayTitle);

      //dcg-visible fades in on a slight delay. remove it and re-add it
      //so that the animation is triggered when you switch between graphs
      this.$('.screenshot-clickjack').removeClass('dcg-visible');
      this.$inlineLoadingContainer.removeClass('dcg-error-loading').show();

      var onSuccess = (function (graphData) {
        if (this.getSelectedGraph() !== selectedGraph) return;

        this.previewCalc.resize();
        this.previewCalc.setState(graphData);
        this.$inlineLoadingContainer.hide();
        this.$('.screenshot-clickjack').addClass('dcg-visible');
      }).bind(this);

      var onFailure = (function () {
        if (this.getSelectedGraph() !== selectedGraph) return;

        this.$inlineLoadingContainer.addClass('dcg-error-loading');
      }).bind(this);

      selectedGraph.fetchData().then(onSuccess, onFailure);
      this.$preview.show();
    };

    view.hidePreview = function () {
      this.$preview.hide();
      $('body').removeClass('preview-open');
    };

    view.selectUp = function (evt) {
      if (this.model.selectPrev()) {
        evt.preventDefault();
      }
    };

    view.selectDown = function (evt) {
      if (this.model.selectNext()) {
        evt.preventDefault();
      }
    };

    //if we scroll enough that the arrow's not pointing at the list item
    //hide preview
    view.hidePreviewIfTooScrolled = function () {
      var selectedView = this.getSelectedView();
      if (!selectedView) return;

      var $target = selectedView.$();
      if (
        $target.offset().top >= this.$previewArrow.offset().top ||
        $target.offset().top + $target.outerHeight() <= this.$previewArrow.offset().top
      ) {
        this.clearSelection();
      }
    };

    // our strategy is to try to keep the arrow in it's natural
    // position and move the entire preview up or down to line the
    // arrow up. That should be possible unless it'd require the
    // preview to go below the bottom of the screen. In that case,
    // we put the preview on the bottom of the screen and move the
    // arrow.
    view.positionPreview = function () {

      var selectedView = this.getSelectedView();
      if (!selectedView) return;

      var $target = selectedView.$();

      // scroll the target into view.
      var targetHeight = $target.outerHeight();

      scrollHelpers.scrollVisible($target, this.$scrollable, targetHeight);

      // restores the arrow to it's natural position
      this.$previewArrow.css('top','60px');
      var arrowOffset = 60;

      // check where the arrow *should* point
      var centerArrowY = $target.offset().top + targetHeight / 2;

      // figure out how far down we can move the preview before it is uncomfortably low on the screen
      var previewHeight = this.$preview.outerHeight();
      var maxBottom = $(window).height() - 5;
      var maxPreviewTop = maxBottom - previewHeight;
      var newPreviewTop = centerArrowY - arrowOffset;

      // the preview is too low, we must put the preview at the bottom of the screen
      // and move the arrow itself
      if (newPreviewTop > maxPreviewTop) {
       newPreviewTop = maxPreviewTop;
       this.$previewArrow.css('top', centerArrowY - newPreviewTop);
      }

      // move the preview to where it needs to go
      this.$preview.css('top', newPreviewTop);
    };

    view.renderIsOpen = function() {
      $('body').toggleClass('resources-open', !!this.isOpen);
    };

    view.close = function () {
      this.setProperty('isOpen', false);
      this.clearSelection();

      this.$('#search-mygraphs').blur().val('');
      this.model.setProperty('searchQuery', '');
      $(document).off('keydown.mygraphs-view');

      // TODO - do we still need this lastRemoved?
      this.model.graphsController.setProperty('lastRemoved', undefined);
    };

    view.open = function () {
      this.setProperty('isOpen', true);
      // update the dates and fix placeholder
      this.model.updateDisplayDates();
      if ($.placeholder) $.placeholder.shim();

      var self = this;
      //listen for arrow keys
      $(document).on('keydown.mygraphs-view', function(evt) {
        var key = Keys.lookup(evt);

        if (key === Keys.UP) {
          self.selectUp(evt);
          evt.preventDefault();
        } else if (key === Keys.DOWN) {
          self.selectDown(evt);
          evt.preventDefault();
        } else if (key === Keys.ENTER) {
          self.openPreview();
        } else if (key === Keys.ESCAPE) {
          self.clearSelection();
        }
      });
    };
  });

  return MyGraphsView;
});

define('template!header_desktop', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'dcg-header-desktop\'>\n  <div class=\'left-floaters\'>\n    <span class="dcg-header-btn dcg-action-opendrawer dcg-tooltip" tooltip="'+
( t('Open Graph (ctrl+o)') )+
'">\n      <i class="dcg-icon-hamburger"></i>\n    </span>\n\n    ';
 if (maintenance) { 
;__p+='\n      <span class="title-div">\n        <span class="dcg-variable-title dcg-tooltip" tooltip="'+
( t('Desmos is in maintenance mode, you won\'t be able to save changes to this graph. We\'re so sorry for the inconvenience!') )+
'"></span>\n      </span>\n    ';
 } else if (previewMode) { 
;__p+='\n      <span class="title-div">\n        <span class="dcg-variable-title dcg-tooltip" tooltip="'+
( t('Desmos is in preview mode, so you won\'t be able to save graphs.') )+
'"></span>\n      </span>\n    ';
 } else { 
;__p+='\n      <span class="title-div">\n        <span class="dcg-variable-title dcg-tooltip dcg-action-savedialog"\n          tooltip="'+
( t('Save As or Rename (ctrl+shift+s)') )+
'"\n        ></span>\n\n        <span class="dcg-if-user">\n          <span class="dcg-action-save">\n            <span class="save-btn tooltip-offset" tooltip="'+
( t('Save (ctrl+s)') )+
'">\n              <i class="dcg-icon-save"></i>\n            </span>\n            <span class="saving-notice">\n              <img src="/assets/img/spinner.gif" />\n            </span>\n          </span>\n        </span>\n      </span>\n    ';
 } 
;__p+='\n  </div>\n\n  <div class=\'right-floaters\'>\n    <!-- reverse order, because these all float right -->\n\n    <span\n      class="dcg-header-btn dcg-action-language dcg-tooltip"\n      tooltip="'+
( t('Language') )+
'"\n    >\n        <i class="dcg-icon-world"></i>\n    </span>\n    <span\n      class="dcg-header-btn dcg-action-help dcg-tooltip"\n      tooltip="'+
( t('Help') )+
'"\n    >\n        <i class="dcg-icon-question-sign"></i>\n    </span>\n\n    ';
 if (!maintenance && !previewMode) { 
;__p+='\n      <span class="dcg-if-user">\n        ';
 if (IS_ANDROID) { 
;__p+='\n          <span class="dcg-share-btn dcg-action-share dcg-header-btn"\n          >\n            <i class="dcg-icon-android-share"></i>\n          </span>\n        ';
 } else { 
;__p+='\n          <span class=\'dcg-btn-group\'>\n            <span\n              class=\'dcg-print-btn tooltip-offset dcg-btn dcg-btn-green dcg-action-print\'\n              tooltip="'+
( t('Print') )+
'"\n            >\n              <i class="dcg-icon-print"></i>\n            </span>\n            <span\n              class=\'dcg-share-btn tooltip-offset dcg-btn dcg-btn-green dcg-action-share\'\n              tooltip="'+
( t('Share Graph') )+
'"\n            >\n              <i class="dcg-icon-share"></i>\n            </span>\n          </span>\n        ';
 } 
;__p+='\n\n        <span class="dcg-account-link">\n          <span class="dcg-edit-acct-success">\n            <i class="dcg-icon-check"></i> '+
( t('saved') )+
'\n          </span>\n          <span class="email">\n            <div class="header-account-name dcg-variable-name">\n            </div>\n            <i class=\'dcg-icon-caret-down\'></i>\n          </span>\n        </span>\n      </span>\n      <span class="dcg-unless-user">\n        <span class="dcg-login">\n          <a\n            class="dcg-create-account dcg-btn dcg-btn-green dcg-action-createaccount"\n          >'+
( t('Create Account') )+
'</a>\n          '+
( t('or') )+
'\n          <a class="dcg-sign-in dcg-action-login">\n            '+
( t('Sign In') )+
'\n          </a>\n        </span>\n      </span>\n    ';
 }
;__p+='\n  </div> <!-- end right floaters -->\n\n  ';
 if (maintenance || previewMode) { 
;__p+='\n    <div class="dcg-toast-container">\n      <span class="dcg-toast dcg-maintenance-toast">\n        <span class="dcg-msg">\n          ';
 if (maintenance) { 
;__p+='\n            '+
( t('Desmos is in Maintenance Mode.') )+
'\n          ';
 } else { 
;__p+='\n            '+
( previewMessage )+
'\n          ';
 } 
;__p+='\n        </span>\n        ';
 if (maintenance) { 
;__p+='\n          <a class="undo" target=\'_blank\' href=\'http://desmos.zendesk.com/entries/25429616-What-is-Maintenance-Mode-/\'>\n            '+
( t('Learn More') )+
'\n          </a>\n        ';
 } else { 
;__p+='\n          <a class="undo" target=\'_blank\' href=\''+
(previewFeedbackUrl)+
'\'>\n            '+
( t('Share your thoughts!') )+
'\n          </a>\n        ';
 } 
;__p+='\n      </span>\n    </div>\n  ';
 } 
;__p+='\n\n  <div class=\'dcg-center\'>\n    <a href="/" target=\'_blank\' class="dcg-home-link-icon" title="dcg-title">\n      <i class="dcg-icon-desmos"></i>\n    </a>\n  </div>\n  <div class=\'dcg-saving-toast-container dcg-toast-container\'>\n    <div class=\'dcg-toast dcg-saving\'>\n      Saving...\n    </div>\n    <div class=\'dcg-toast dcg-save-success\'>\n      Saved!\n    </div>\n    <div class=\'dcg-toast dcg-save-failure\'>\n      <i class=\'dcg-icon-warning\'></i>\n      <b>Error Saving.</b>\n      <span class=\'dcg-link dcg-action-save\'>Retry now</span>\n      <span class=\'dcg-link dcg-action-cancel-retry\'>Cancel</span>\n    </div>\n  </div>\n</div>\n';
}
return __p;
};});
/*
* this is the row of buttons above the calc on desktop
*/

define('main/header_desktop',['require','loadcss!css/header_desktop','underscore_view','pjs','browser','config','i18n','tipsy','conditional_blur','main/share_options','main/help_desktop','main/language','main/account_dropdown','mygraphs/examples','mygraphs/model','mygraphs/view','template!header_desktop'],function(require){
  require('loadcss!css/header_desktop');
  var UnderscoreView = require('underscore_view');
  var P = require('pjs');
  var Browser = require('browser');
  var Config = require('config');
  var i18n = require('i18n');
  require('tipsy');
  var conditionalBlur = require('conditional_blur');

  var ShareView = require('main/share_options');
  var HelpView = require('main/help_desktop');
  var LanguageView = require('main/language');
  var AccountView = require('main/account_dropdown');
  var myGraphExamples = require('mygraphs/examples');
  var MyGraphsModel = require('mygraphs/model');
  var MyGraphsView = require('mygraphs/view');

  var template = require('template!header_desktop');

  var HeaderView = P(UnderscoreView, function (view, _super) {
    view.template = template;
    view.$saveBtn = null;

    view.init = function (
      userController,
      graphsController,
      Calc,
      modals,
      tourController
    ) {
      _super.init.call(this);
      this.userController = userController;
      this.graphsController = graphsController;
      this.Calc = Calc;
      this.modals = modals;

      this.shareView = ShareView(
        userController,
        graphsController,
        Calc
      );
      this.helpView = HelpView(
        userController,
        graphsController,
        Calc,
        modals,
        tourController
      );

      this.languageView = LanguageView(Calc);
      this.myGraphsModel = MyGraphsModel(myGraphExamples, graphsController, userController);
      this.myGraphsView = MyGraphsView(this.myGraphsModel, Calc, modals);


      //needs helpview to be able to open up the feedback box
      this.accountView = AccountView(userController, this.helpView, modals);
      this.saveStatus = null;
      this.childViews = [
        this.shareView,
        this.helpView,
        this.languageView,
        this.accountView
      ];
    };

    view.didCreateElement = function () {
      var self = this;

      this.$saveBtn = this.$('.dcg-action-save');

      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        delegate: '.dcg-tooltip'
      });

      //a few need extra offset
      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        offset: 7,
        delegate: '.tooltip-offset'
      });

      this.childViews.forEach(function(view) {
        view.setPointTo(self.$(view.pointToSelector));
        view.appendTo('.dcg-sliding-interior');
      });

      this.myGraphsView.appendTo('body');

      //bind to events in the graphs controller
      this.graphsController.startSavingCallbacks.push(this.saveStart.bind(this));
      this.graphsController.saveSuccessCallbacks.push(this.saveSuccess.bind(this));
      this.graphsController.saveErrorCallbacks.push(this.saveFailure.bind(this));

      this.helpView.setupOpenButton(this.$('.dcg-action-help'), 'dcg-tap');
      this.languageView.setupOpenButton(this.$('.dcg-action-language'), 'dcg-tap');
      this.shareView.setupOpenButton(this.$('.dcg-action-share'), 'dcg-tap');
      this.accountView.setupOpenButton(this.$('.dcg-account-link'), 'dcg-tap');

      this.$('.dcg-action-opendrawer').on('dcg-tap', this.openDrawer.bind(this));
      this.$('.dcg-action-savedialog').on('dcg-tap', this.saveDialog.bind(this));
      this.$saveBtn.on('dcg-tap', function () {
        this.simpleSave();
      }.bind(this));
      this.$('.dcg-action-print').on('dcg-tap', this.print.bind(this));
      this.$('.dcg-action-login').on('dcg-tap', this.login.bind(this));
      this.$('.dcg-action-createaccount').on('dcg-tap', this.createAccount.bind(this));
      this.$('.dcg-action-cancel-retry').on('dcg-tap', function () {
        this.setProperty('saveStatus', null);
      }.bind(this));
      this.updateTitle();

      this.graphsController.observe('currentGraph', function () {
        self.updateTitle();
        if (self.saveStatus == 'saveFailure') {
          self.setProperty('saveStatus', null);
        }
      });
      this.userController.observe('currentUser', this.renderUser.bind(this));
      this.renderUser();

      this.observe('graphChanged', this.renderGraphChanged.bind(this));
      this.renderGraphChanged();

      //save notices
      this.observeAndSync('saveStatus', function () {
        this.$saveBtn.toggleClass('saving', this.saveStatus === 'saving');
        this.$('.dcg-saving').toggleClass('dcg-visible', this.saveStatus === 'saving');
        this.$('.dcg-save-failure').toggleClass('dcg-visible', this.saveStatus === 'saveFailure');
        this.$('.dcg-save-success').toggleClass('dcg-visible', this.saveStatus === 'saveSuccess');
        clearTimeout(this.saveStatusTimeout);
      }.bind(this));
    };

    view.renderUser = function () {
      this.$().toggleClass('dcg-has-user', !!this.userController.currentUser);
      if (this.userController.currentUser) {
        this.$('.dcg-variable-name').text(this.userController.currentUser.firstName());
      }
    };

    view.renderGraphChanged = function() {
      var hasChanges = !!this.graphChanged;
      this.$('.save-btn').attr(
        'tooltip', (hasChanges ? i18n.t("Save Changes (ctrl+s)") : i18n.t("No Unsaved Changes")));
      this.$('.title-div').toggleClass('has-changes', hasChanges);
    };

    view.openDrawer = function () {
      this.myGraphsView.toggleVisible();
      conditionalBlur();
    };

    view.getTemplateParams = function (){
      return  {
        IS_ANDROID: Browser.IS_ANDROID,
        maintenance: Config.get('maintenance'),
        previewMode: Config.get('previewMode'),
        previewFeedbackUrl: Config.get('previewFeedbackUrl'),
        previewMessage: Config.get('previewMessage')
      };
    };

    view.updateTitle = function () {
      var graph = this.graphsController.currentGraph;
      var title = (graph && graph.title ? graph.title : i18n.t('Untitled Graph'));
      this.$('.dcg-variable-title').text(title);
    };

    //this can be called by ctrl-S or by clicking the save icon
    //it executes the save, but doesn't pop up the dialog unless it's your first save
    view.simpleSave = function () {
      if (!this.userController.currentUser) {
        return this.saveDialog();
      }
      this.graphsController.save(this.graphsController.currentGraph);
    };

    view.saveDialog = function() {
      if (this.userController.currentUser) {
        this.modals.saveDialog.show();
      } else {
        this.userController.unobserve('.headerDesktop');
        this.userController.observe('currentUser.headerDesktop', function () {
          this.userController.unobserve('.headerDesktop');
          this.modals.saveDialog.show();
        }.bind(this));
        this.modals.createAccountDialog.show();
      }
    };

    view.saveStart = function() {
      this.setProperty('saveStatus', 'saving');
      //update title immediately to reflect change from the save dialog
      this.updateTitle();
    };
    view.saveSuccess = function() {
      this.setProperty('saveStatus', 'saveSuccess');

      clearTimeout(this.saveStatusTimeout);
      this.saveStatusTimeout = setTimeout(function() {
        this.setProperty('saveStatus', null);
      }.bind(this), 2000);
    };
    view.saveFailure = function() {
      this.setProperty('saveStatus', 'saveFailure');
    };

    view.print = function(evt) {
      //execute a window.print
      window.print();
      return;
    };

    //
    // right hand tools
    //

    view.login = function() {
      this.modals.loginDialog.show();
    };

    view.createAccount = function() {
      this.modals.createAccountDialog.show();
    };
  });

  return HeaderView;
});

define('lib/urlparser',['require'],function (require) {

  var UrlParser = {
    //from http://stackoverflow.com/questions/1403888/get-url-parameter-with-javascript-or-jquery
    getParameter: function(name) {
      return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)')
             .exec(location.search)||[,""])[1]
             .replace(/\+/g, '%20'))||null;
    }
  };

  return UrlParser;
});
//this is a parent function. It pulls in:
//  * tour_manager (currently on the _calc object in the API)
//  * all of the tours we need

define('tours/tour_controller',['require','pjs','tours/all_tours','lib/urlparser','i18n','jquery'],function(require) {
  var P = require('pjs');
  var tours = require('tours/all_tours');
  var UrlParser = require('lib/urlparser');
  var i18n = require('i18n');

  var $ = require('jquery');

  var TourController = P(function (proto, _super) {

    proto.init = function (Calc) {
      //gross: reach into Calc to get the tourManager
      //and the raw calculator (_calc)
      this.tourManager = Calc._calc.tourManager;
      this.Calc = Calc._calc;

      this.tourManager.closingMsg = [
        "<b>__endingMessage__</b><br>",
        i18n.t("This message will self-destruct in __seconds__...")
      ].join("");
    };

    //if a graph is sufficiently complete when the user gets here,
    //we want to open the tour in a new window, so as not to disrupt existing work
    //this method is called from help.js to determine whether to allow the tour to open
    //in a new window or not.
    proto.shouldPopupTour = function (tourName) {
      //always pop up if we have more than 5 equations
      if (this.Calc.expressions.model.getItemsByIndexRange(0, Infinity).length > 3) return true;

      //ask the tour if our current state is too complicated
      //and we should therefor open the tour in a new window
      var tour = tours[tourName].tour(this.Calc);

      //check if the tour has a shouldPopup method, use it if it does.
      if (tour.shouldPopup) return tour.shouldPopup();

      return false;
    };

    proto.startTour = function (tourName) {
      if (!tourName || !tours[tourName]) return;
      var tour = tours[tourName].tour(this.Calc);

      if (this.tourManager.currentTour) this.tourManager.stopTour();
      this.tourManager.startTour(tour);
    };

    proto.startTourFromUrl = function () {
      //don't start until the expressions are loaded
      if ($('.dcg-expressionitem').length < 2) {
        setTimeout(this.startTourFromUrl.bind(this), 100);
        return;
      }

      var tourName = UrlParser.getParameter('tour');
      this.startTour(tourName);
    };

    //takes a calculator object. saves a tourManager reference
    proto.setCalc = function(Calc) {
      this.Calc = Calc;
    };

  });
  return TourController;
});

// TODO - our calls to Calc.getState() don't work as we expect. The problem is that
// we expect full results immediately. Slider information, for example, isn't populated
// until after the parsing is done in the worker. That means the first .getState() we do will
// not have slider information at all. Every comparison we do between the first state and the
// other states will return not equal. We need to do one of the following:
//
// 1) Parse synchronously (already proven difficult)
// 2) Call .getState() asynchronously after everything is parsed. (tedious and ugly)
// 3) Build a much smarter state comparison function that doesn't need parsing information (redundant)
//
// The solution I'm using right now is brittle and incomplete. I'm simply passing the slider information
// in the setState back out during getState until we do a parse. It greatly improves things, but it'll
// break if you load an old graph that didn't get saved with the latest slider properties. We really
// want a better solution here.
define('main/graph_change_monitor',['require','pjs','underscore','underscore_model'],function (require) {
  var P = require('pjs');
  var _ = require('underscore');
  var UnderscoreModel = require('underscore_model');

  var GraphChangeMonitor = P(UnderscoreModel, function (model, _super) {

   model.init = function (Calc, graphsController) {
     _super.init.call(this);

     this.Calc = Calc;
     this.graphsController = graphsController;
     this.graphChanged = false;
     this._savedStates = {};


     Calc._calc.stateController.triggerSetState = this._useCurrentStateAsSavedState.bind(this);
     graphsController.observe('currentGraph', this._useCurrentStateAsSavedState.bind(this));
     graphsController.observe('currentGraph', this._markPotentialChange.bind(this));

     Calc._calc.addChangeCallback(this._markPotentialChange.bind(this));
   };

   model._statesAreEqual = function (state1, state2) {

     // creates cloned copies and also strips out undefined values in objects.
     // For instance, the .sliderInterval property can legitamely be set to undefined.
     // The problem with that is when we saved the state, that value would not have
     // been included because JSON.stringify() would have left it out. The _.isEqual()
     // function differentiates 'undefined' because it wasn't set and 'undefined' because
     // it was set to 'undefined' by using the .hasOwnProperty() method. One more reason
     // that we don't want to be doing this stuff manually here. Would be better to be
     // comparing full states here rather than piecing in information that should be here
     // but isn't simply because parsing is asynchronous.
     state1 = JSON.parse(JSON.stringify(state1));
     state2 = JSON.parse(JSON.stringify(state2));

     function ignoreAnimatedSliders (state) {
       var animatedSliders = _.filter(state.expressions.list, function(expr) {
         return expr.sliderIsPlaying;
       });

       _.each(animatedSliders, function (expr) {
         delete expr.latex;
         delete expr.sliderPlayDirection;
       });
     }

     ignoreAnimatedSliders(state1);
     ignoreAnimatedSliders(state2);

     return _.isEqual(state1, state2);
   };

   // It's impossible to directly compare two states. We make changes to
   // our datastructure over time. So, we can't read the currentGraph.graphData
   // directly. Instead, we wait to read the Calc.getState() after setting
   // a state. We only do this the first time we setState for a given hash.
   model._useCurrentStateAsSavedState = function () {
     var hash = this.getSavedHash();
     if (!this.getSavedStateForHash(hash)) {
       this.setSavedStateForHash(hash, this.Calc.getState());
     }
   };

   model.getSavedHash = function () {
     var currentGraph = this.graphsController.currentGraph;
     return (currentGraph && currentGraph.hash) || '';
   };

   model.getSavedStateForHash = function (hash) {
     return this._savedStates[hash];
   };

   model.setSavedStateForHash = function (hash, state) {
     this._savedStates[hash] = state;
   };

   model.getSavedState = function () {
     return this.getSavedStateForHash(this.getSavedHash());
   };

   model.setSavedState = function (state) {
     this.setSavedStateForHash(this.getSavedHash(), state);
   };

   // Collapses multiple changes into a single check. The check happens the next
   // event loop to make sure all changes are processed.
   model._markPotentialChange = function () {
     clearTimeout(this._checkForChangesTimeout);
     this._checkForChangesTimeout = setTimeout(this.checkForChanges.bind(this), 0);
   };

   model.checkForChanges = function () {
     var savedState = this.getSavedStateForHash(this.getSavedHash());
     var unsavedState = this.Calc.getState();
     var graphChanged = !this._statesAreEqual(savedState, unsavedState);

     this.setProperty('graphChanged', graphChanged);
   };
  });

  return GraphChangeMonitor;

});
define('text!data/betchacant_graphs.json',[],function () { return '[{\n  "title": "Peg Game",\n  "graphHash": "v788da0xk9",\n  "state": {"graph":{"showGrid":false,"polarMode":false,"showXAxis":false,"showYAxis":false,"xAxisStep":0,"yAxisStep":0,"degreeMode":false,"xAxisArrows":"none","yAxisArrows":"none","xAxisLabel":"","yAxisLabel":"","xAxisNumbers":false,"yAxisNumbers":false,"polarNumbers":false,"projectorMode":false,"squareAxes":true,"viewport":{"xmin":-22.4,"ymin":-16.64,"xmax":23.18,"ymax":9.36}},"expressions":{"list":[{"id":"99","text":"Slide or animate T:"},{"id":"19","latex":"T=0","domain":{"min":0,"max":1},"hidden":false,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":12,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":16000,"sliderPlayDirection":-1,"sliderIsPlaying":true},{"id":"45","text":"Number of peg rows"},{"id":"1","latex":"N=4","domain":{"min":0,"max":1},"hidden":false,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":1,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderInterval":1,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"47","text":"Depth of capture coumns"},{"id":"36","latex":"M=5.81","domain":{"min":0,"max":1},"hidden":false,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"51","text":"Pins"},{"id":"79","latex":"\\\\left(2P_i-P_j+.1\\\\sin\\\\left(\\\\tau tN^2\\\\right)\\\\left\\\\{P_i\\\\le P_j\\\\right\\\\},-1-w-P_j+.1\\\\cos\\\\left(\\\\tau tN^2\\\\right)\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"84","latex":"P_i=\\\\mod\\\\left(\\\\floor\\\\left(N^2t\\\\right),N\\\\right)","domain":{"min":0,"max":1},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"85","latex":"P_j=\\\\floor\\\\left(Nt\\\\right)","domain":{"min":0,"max":1},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"77","text":"Falling balls"},{"id":"78","latex":"\\\\left(\\\\left\\\\{r\\\\floor\\\\left(t\\\\right)>T-1:X\\\\left(\\\\floor\\\\left(t\\\\right),T\\\\right)+w\\\\sin\\\\left(\\\\tau t\\\\right)\\\\right\\\\},\\\\left\\\\{r\\\\floor\\\\left(t\\\\right)>T-1:Y_f\\\\left(\\\\floor\\\\left(t\\\\right),T\\\\right)+w\\\\cos\\\\left(\\\\tau t\\\\right)\\\\right\\\\}\\\\right)","domain":{"min":0,"max":15},"hidden":false,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"53","text":"Dropped balls"},{"id":"90","latex":"\\\\left(\\\\left\\\\{r\\\\floor\\\\left(t\\\\right)<T-1:X\\\\left(\\\\floor\\\\left(t\\\\right),T\\\\right)+w\\\\sin\\\\left(\\\\tau t\\\\right)\\\\right\\\\},\\\\left\\\\{r\\\\floor\\\\left(t\\\\right)<T-1:Y\\\\left(\\\\floor\\\\left(t\\\\right),T\\\\right)+w\\\\cos\\\\left(\\\\tau t\\\\right)\\\\right\\\\}\\\\right)","domain":{"min":0,"max":15},"hidden":false,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"96","text":"Collection columns"},{"id":"97","latex":"\\\\left(\\\\floor\\\\left(\\\\left(N+1\\\\right)t\\\\right)+.5,-N-\\\\frac{M}{2}-\\\\frac{M}{2}\\\\mod\\\\left(\\\\left(N+1\\\\right)t,1\\\\right)-w\\\\right)","domain":{"min":-1,"max":1},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"58","text":"Direction ball i goes at peg layer j"},{"id":"2","latex":"f\\\\left(i,j\\\\right)=2\\\\floor\\\\left(\\\\mod\\\\left(\\\\frac{1000\\\\sin\\\\left(ai\\\\right)}{2^j},1\\\\right)-.499\\\\right)+1","domain":{"min":0,"max":1},"hidden":false,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"89","latex":"a=2.49","domain":{"min":0,"max":1},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"60","text":"End position of ball i"},{"id":"3","latex":"p\\\\left(i\\\\right)=\\\\sum_{n=1}^Nf\\\\left(i,n\\\\right)","domain":{"min":0,"max":1},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"62","text":"Horizontal position of ball i at height d"},{"id":"4","latex":"h\\\\left(i,d\\\\right)=\\\\sum_{n_2=1}^Nf\\\\left(i,n_2\\\\right)g\\\\left(-d-n_2\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"12","latex":"g\\\\left(x\\\\right)=\\\\frac{\\\\left(\\\\tanh\\\\left(5x\\\\right)+1\\\\right)}{2}","domain":{"min":0,"max":1},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"65","text":"Height of ball i at time x"},{"id":"66","latex":"Y\\\\left(i,x\\\\right)=\\\\left\\\\{x<ri:-\\\\frac{2w}{r}\\\\left(x-ri\\\\right),\\\\max\\\\left(N\\\\left(ri-x\\\\right),-\\\\left(N+M\\\\right)+2wc\\\\left(i\\\\right)\\\\right)\\\\right\\\\}","domain":{"min":0,"max":1},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"92","latex":"Y_f\\\\left(i,x\\\\right)=\\\\left\\\\{x<ri:-\\\\frac{2w}{r}\\\\left(x-ri\\\\right),N\\\\left(ri-x\\\\right)\\\\right\\\\}","domain":{"min":0,"max":1},"hidden":false,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"88","latex":"r=\\\\frac{1}{\\\\pi}","domain":{"min":0,"max":1},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"86","latex":"Y\\\\left(1,x\\\\right)","domain":{"min":0,"max":1},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"87","latex":"Y\\\\left(2,x\\\\right)","domain":{"min":0,"max":1},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"68","text":"Horizontal position of ball i at time x"},{"id":"69","latex":"X\\\\left(i,x\\\\right)=h\\\\left(i,Y\\\\left(i,x\\\\right)\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"80","latex":"\\\\left(X\\\\left(1,t\\\\right),Y\\\\left(1,t\\\\right)\\\\right)","domain":{"min":0,"max":20},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"72","text":"Height of ball in resting column"},{"id":"22","latex":"c\\\\left(x\\\\right)=\\\\sum_{n_1=0}^{x-1}\\\\left\\\\{p\\\\left(n_1\\\\right)=p\\\\left(x\\\\right):1,0\\\\right\\\\}","domain":{"min":0,"max":1},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"74","latex":"w=0.3","domain":{"min":0,"max":1},"hidden":false,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0.1,"sliderMax":0.4,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false}]}}\n},\n{\n  "title": "Electric Field Lines",\n  "graphHash": "ttdjntpthd",\n  "state": {"graph":{"showGrid":true,"polarMode":false,"showXAxis":true,"showYAxis":true,"xAxisStep":0,"yAxisStep":0,"degreeMode":false,"xAxisArrows":"none","yAxisArrows":"none","xAxisLabel":"","yAxisLabel":"","xAxisNumbers":true,"yAxisNumbers":true,"polarNumbers":true,"projectorMode":false,"squareAxes":true,"viewport":{"xmin":-11.25,"ymin":-6.62,"xmax":11.25,"ymax":6.623}},"expressions":{"list":[{"id":"32","text":"Electric field lines generated by two point charges:"},{"id":"30","latex":"\\\\left(x_1,y_1\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","style":"point","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"31","latex":"\\\\left(x_2,y_2\\\\right)","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","style":"point","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"101","text":"This is the position and charge of the purple point charge"},{"id":"24","latex":"q_1=1","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"26","latex":"x_1=2","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"27","latex":"y_1=0","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"103","text":"This is the position and charge of the orange point charge "},{"id":"25","latex":"q_2=-1","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"28","latex":"x_2=-2","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"29","latex":"y_2=0","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"105","text":"The rest of this calculates and draws the field lines"},{"id":"6","latex":"f_x\\\\left(x,y\\\\right)=\\\\frac{q_1\\\\left(x-x_1\\\\right)}{\\\\left(\\\\left(x-x_1\\\\right)^2+\\\\left(y-y_1\\\\right)^2\\\\right)^{\\\\frac{3}{2}}}+\\\\frac{q_2\\\\left(x-x_2\\\\right)}{\\\\left(\\\\left(x-x_2\\\\right)^2+\\\\left(y-y_2\\\\right)^2\\\\right)^{\\\\frac{3}{2}}}","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"7","latex":"f_y\\\\left(x,y\\\\right)=\\\\frac{q_1\\\\left(y-y_1\\\\right)}{\\\\left(\\\\left(x-x_1\\\\right)^2+\\\\left(y-y_1\\\\right)^2\\\\right)^{\\\\frac{3}{2}}}+\\\\frac{q_2\\\\left(y-y_2\\\\right)}{\\\\left(\\\\left(x-x_2\\\\right)^2+\\\\left(y-y_2\\\\right)^2\\\\right)^{\\\\frac{3}{2}}}","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"16","latex":"m=0.686","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":1,"sliderHardMin":false,"sliderHardMax":false,"sliderInterval":"","sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"2","latex":"n\\\\space=\\\\space10","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":4,"sliderMax":20,"sliderHardMin":false,"sliderHardMax":false,"sliderInterval":1,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"9","latex":"a\\\\space=\\\\space0","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"10","latex":"b\\\\space=\\\\space0","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":-10,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"3","latex":"x_o=\\\\mod\\\\left(\\\\floor\\\\left(n^2t\\\\right),n\\\\right)-\\\\frac{n-1}{2}+a","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"4","latex":"y_o=\\\\frac{\\\\left(n^2t-\\\\mod\\\\left(n^2t,n\\\\right)\\\\right)}{n}-\\\\frac{n-1}{2}+b","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"17","latex":"x_s=\\\\frac{f_x\\\\left(x_o,y_o\\\\right)}{\\\\sqrt{\\\\left(f_x\\\\left(x_o,y_o\\\\right)\\\\right)^2+\\\\left(f_y\\\\left(x_o,y_o\\\\right)\\\\right)^2}}","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"18","latex":"y_s=\\\\frac{f_y\\\\left(x_o,y_o\\\\right)}{\\\\sqrt{\\\\left(f_x\\\\left(x_o,y_o\\\\right)\\\\right)^2+\\\\left(f_y\\\\left(x_o,y_o\\\\right)\\\\right)^2}}","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"19","latex":"t_m=\\\\mod\\\\left(n^2t,1\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"23","latex":"o=2.5","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":3.14,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"21","latex":"x_p=\\\\left\\\\{0<t_m<.6:x_st_m,\\\\space.6<t_m<.8:.6x_s+\\\\cos\\\\left(o\\\\right)x_s\\\\left(t_m-.6\\\\right)-\\\\sin\\\\left(o\\\\right)y_s\\\\left(t_m-.6\\\\right),\\\\space.8<t_m<1:.6x_s+\\\\sin\\\\left(o\\\\right)y_s\\\\left(t_m-.8\\\\right)+\\\\cos\\\\left(o\\\\right)x_s\\\\left(t_m-.8\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"22","latex":"y_p=\\\\left\\\\{0<t_m<.6:y_st_m,\\\\space.6<t_m<.8:.6y_s+\\\\sin\\\\left(o\\\\right)x_s\\\\left(t_m-.6\\\\right)+\\\\cos\\\\left(o\\\\right)y_s\\\\left(t_m-.6\\\\right),\\\\space.8<t_m<1:.6y_s-\\\\sin\\\\left(o\\\\right)x_s\\\\left(t_m-.8\\\\right)+\\\\cos\\\\left(o\\\\right)y_s\\\\left(t_m-.8\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"107","text":"Finally: we draw the field lines"},{"id":"20","latex":"\\\\left(x_o+mx_p-.3mx_s,y_o-.3my_s+my_p\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false}]}}\n},\n{\n  "title": "Pac-man",\n  "graphHash": "8hxtdephtf",\n  "state": {"graph":{"showGrid":false,"polarMode":false,"showXAxis":false,"showYAxis":false,"xAxisStep":0,"yAxisStep":0,"degreeMode":false,"xAxisArrows":"none","yAxisArrows":"none","xAxisLabel":"","yAxisLabel":"","xAxisNumbers":false,"yAxisNumbers":false,"polarNumbers":false,"projectorMode":false,"squareAxes":true,"viewport":{"xmin":-4.292,"ymin":-3.826,"xmax":9.755,"ymax":4.442}},"expressions":{"list":[{"id":"2","latex":"a=0","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":19.978000000000065,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":true},{"id":"1","latex":"r\\\\le\\\\left\\\\{\\\\cos\\\\left(\\\\theta-h\\\\left(a\\\\right)\\\\right)<.8+.2\\\\sin2\\\\pi a\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"3","latex":"\\\\left(f\\\\left(n\\\\right)-f\\\\left(a\\\\right)+x_c,g\\\\left(n\\\\right)-g\\\\left(a\\\\right)+y_c\\\\right)","domain":{"min":0,"max":20},"hidden":false,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"4","latex":"f_1\\\\left(x\\\\right)=\\\\left\\\\{x<3:x,x<7:3,x-3\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"5","latex":"g_1\\\\left(x\\\\right)=\\\\left\\\\{x<3:0,x<7:x-3,3\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"13","latex":"f\\\\left(x\\\\right)=x","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"14","latex":"g\\\\left(x\\\\right)=\\\\sin x","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"11","latex":"h\\\\left(x\\\\right)=\\\\arctan\\\\left(\\\\frac{\\\\frac{d}{dx}g\\\\left(x\\\\right)}{\\\\frac{d}{dx}f\\\\left(x\\\\right)}\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"8","latex":"x_c=.1\\\\sin\\\\left(2\\\\pi\\\\mod\\\\left(t,1\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"10","latex":"y_c=.1\\\\cos\\\\left(2\\\\pi\\\\mod\\\\left(t,1\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"7","latex":"n=\\\\floor\\\\left(t\\\\right)\\\\left\\\\{\\\\floor\\\\left(t\\\\right)>a\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false}]}}\n},\n{\n  "title": "Regular Sine Wave?",\n  "graphHash": "c1u72uowae",\n  "state": {"graph":{"showGrid":true,"polarMode":false,"showXAxis":true,"showYAxis":true,"xAxisStep":0,"yAxisStep":0,"degreeMode":false,"xAxisArrows":"none","yAxisArrows":"none","xAxisLabel":"","yAxisLabel":"","xAxisNumbers":true,"yAxisNumbers":true,"polarNumbers":true,"projectorMode":false,"squareAxes":true,"viewport":{"xmin":-1.463,"ymin":-2.667,"xmax":16.313,"ymax":7.795}},"expressions":{"list":[{"id":"47","text":"Slide (or animate) a:"},{"id":"45","latex":"a=0","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":1,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"25","latex":"x_m\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<\\\\frac{1}{6}:0,\\\\frac{1}{6}\\\\le t<\\\\frac{1}{3}:.85+.85\\\\cos\\\\left(\\\\pi-6\\\\pi\\\\left(t-\\\\frac{1}{6}\\\\right)\\\\right),\\\\frac{1}{3}\\\\le t<\\\\frac{2}{3}:1.7,\\\\frac{2}{3}\\\\le t<\\\\frac{5}{6}:2.55+.85\\\\cos\\\\left(\\\\pi-6\\\\pi\\\\left(t-\\\\frac{2}{3}\\\\right)\\\\right),\\\\frac{5}{6}\\\\le t\\\\le1:3.4\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"27","latex":"y_m\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<\\\\frac{1}{6}:11.4t,\\\\frac{1}{6}\\\\le t<\\\\frac{1}{3}:1.9+.6\\\\sin\\\\left(\\\\pi-6\\\\pi\\\\left(t-\\\\frac{1}{6}\\\\right)\\\\right),\\\\frac{1}{3}\\\\le t<\\\\frac{1}{2}:1.9-11.4\\\\left(t-\\\\frac{1}{3}\\\\right),\\\\frac{1}{2}\\\\le t<\\\\frac{2}{3}:11.4\\\\left(t-.5\\\\right),\\\\frac{2}{3}\\\\le t<\\\\frac{5}{6}:1.9+.6\\\\sin\\\\left(\\\\pi-6\\\\pi\\\\left(t-\\\\frac{2}{3}\\\\right)\\\\right),\\\\frac{5}{6}\\\\le t\\\\le1:1.9-11.4\\\\left(t-\\\\frac{5}{6}\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"38","latex":"L_x\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<1:x_d\\\\left(t\\\\right),\\\\space1\\\\le t<2:x_e\\\\left(t-1\\\\right)+s_2,2\\\\le t<3:x_s\\\\left(t-2\\\\right)+s_3,3\\\\le t<4:x_m\\\\left(t-3\\\\right)+s_4,4\\\\le t<5:x_0\\\\left(t-4\\\\right)+s_5,5\\\\le t\\\\le6:x_s\\\\left(t-5\\\\right)+s_6\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"39","latex":"L_y\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<1:y_d\\\\left(t\\\\right),\\\\space1\\\\le t<2:y_e\\\\left(t-1\\\\right),2\\\\le t<3:y_s\\\\left(t-2\\\\right),3\\\\le t<4:y_m\\\\left(t-3\\\\right),4\\\\le t<5:y_0\\\\left(t-4\\\\right),5\\\\le t\\\\le6:y_s\\\\left(t-5\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"40","latex":"\\\\left(G_x\\\\left(t\\\\right)\\\\left(1-a\\\\right)+aL_x\\\\left(t\\\\right),G_y\\\\left(t\\\\right)\\\\left(1-a\\\\right)+aL_y\\\\left(t\\\\right)\\\\right)","domain":{"min":0,"max":6},"hidden":false,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"41","latex":"G_x\\\\left(t\\\\right)=2.3t","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"42","latex":"G_y\\\\left(t\\\\right)=\\\\sin\\\\left(2\\\\pi t\\\\right)+1","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"1","latex":"x_d\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t\\\\le\\\\frac{2}{3}:1.1+1.1\\\\cos\\\\left(3\\\\pi t\\\\right),\\\\frac{2}{3}\\\\le t\\\\le1:2.2\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"2","latex":"y_d\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t\\\\le\\\\frac{2}{3}:1.25+1.25\\\\sin\\\\left(3\\\\pi t\\\\right),\\\\frac{2}{3}\\\\le t\\\\le1:1.25+9.6\\\\left(t-\\\\frac{2}{3}\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"4","latex":"x_e\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<\\\\frac{1}{3}:6.9t,\\\\frac{1}{3}\\\\le t\\\\le\\\\frac{19}{21}:1.15+1.15\\\\cos\\\\left(1.5\\\\cdot1.75\\\\pi\\\\left(t-\\\\frac{1}{3}\\\\right)\\\\right),\\\\frac{19}{21}\\\\le t\\\\le1:1.15+1.45\\\\cos\\\\left(1.5\\\\cdot1.75\\\\pi\\\\left(t-\\\\frac{1}{3}\\\\right)\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"5","latex":"y_e\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<\\\\frac{1}{3}:1.25,\\\\frac{1}{3}\\\\le t\\\\le1:1.25+1.25\\\\sin\\\\left(1.5\\\\cdot1.75\\\\pi\\\\left(t-\\\\frac{1}{3}\\\\right)\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"7","latex":"s_{tx}\\\\left(t\\\\right)=L+.6\\\\cos\\\\left(2\\\\pi t\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"15","latex":"s_{ty}\\\\left(t\\\\right)=2+.5\\\\sin\\\\left(2\\\\pi t\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"16","latex":"s_{bx}\\\\left(t\\\\right)=.9+.9\\\\cos\\\\left(2\\\\pi t\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"17","latex":"s_{by}\\\\left(t\\\\right)=.6+.6\\\\sin\\\\left(2\\\\pi t\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"19","latex":"s_{mx}\\\\left(t\\\\right)=11.4-4L+162\\\\left(2.4-L\\\\right)\\\\left(-\\\\frac{t^3}{3}+\\\\frac{t^2}{2}-\\\\frac{2t}{9}\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"20","latex":"s_{my}\\\\left(t\\\\right)=2-4.2\\\\left(t-\\\\frac{1}{3}\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"21","latex":"x_s\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<\\\\frac{1}{3}:\\\\space s_{tx}\\\\left(.1+1.2t\\\\right),\\\\frac{1}{3}\\\\le t<\\\\frac{2}{3}:s_{mx}\\\\left(t\\\\right),\\\\frac{2}{3}\\\\le t\\\\le1:s_{bx}\\\\left(-1.5\\\\left(t-\\\\frac{2}{3}\\\\right)\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"22","latex":"y_s\\\\left(t\\\\right)=\\\\left\\\\{0\\\\le t<\\\\frac{1}{3}:\\\\space s_{ty}\\\\left(.1+1.2t\\\\right),\\\\frac{1}{3}\\\\le t<\\\\frac{2}{3}:s_{my}\\\\left(t\\\\right),\\\\frac{2}{3}\\\\le t\\\\le1:s_{by}\\\\left(-1.5\\\\left(t-\\\\frac{2}{3}\\\\right)\\\\right)\\\\right\\\\}","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"14","latex":"L=1","domain":{"min":0,"max":10},"hidden":false,"color":"#F79646","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":1,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"28","latex":"x_0\\\\left(t\\\\right)=1.1+1.1\\\\cos\\\\left(2\\\\pi\\\\left(t+.25\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"29","latex":"y_0\\\\left(t\\\\right)=1.25+1.25\\\\sin\\\\left(2\\\\pi\\\\left(t+.25\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false},{"id":"35","latex":"s_2=2.4","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"36","latex":"s_3=4.76","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":10,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"34","latex":"s_4=6.77","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":20,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"31","latex":"s_5=10.37","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":20,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false},{"id":"33","latex":"s_6=12.65","domain":{"min":0,"max":10},"hidden":false,"color":"#000000","style":"normal","residualVariable":"","regressionParameters":{},"isLogModeRegression":false,"sliderMin":0,"sliderMax":20,"sliderHardMin":false,"sliderHardMax":false,"sliderAnimationPeriod":8000,"sliderPlayDirection":1,"sliderIsPlaying":false}]}}\n},\n{\n  "title": "3D World",\n  "graphHash": "neyobpzndu",\n  "state": {"graph":{"viewport":{"xmin":-28.11,"ymin":-25.9,"xmax":67.4,"ymax":21.54},"showLabels":false,"degreeMode":false,"showGrid":false,"polarMode":false,"showAxes":false,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":31,"text":"You\'re at the black dot (u_p, v_p) looking at the world..."},{"id":4,"latex":"\\\\left(u_p,v_p\\\\right)","domain":{"min":0,"max":10},"hidden": false,"color":"#000000"},{"id":1,"latex":"u_p=1.1","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D","sliderMin":-29.34,"sliderMax":11.3},{"id":2,"latex":"v_p=0.4","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","sliderMin":-20,"sliderMax":20},{"id":33,"text":"These are the endpoints of the purple wall (you can drag those points too)"},{"id":43,"latex":"\\\\left(u_a,v_a\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#8064A2"},{"id":44,"latex":"\\\\left(u_b,v_b\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#8064A2"},{"id":5,"latex":"u_a=-2.001","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-10.001,"sliderMax":10,"sliderInterval":0.01},{"id":6,"latex":"v_a=4.299","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59","sliderMin":-10.001,"sliderMax":10.5,"sliderInterval":0.01},{"id":7,"latex":"u_b=6","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","sliderMin":-10,"sliderMax":10.5},{"id":8,"latex":"v_b=2.8","domain":{"min":0,"max":10},"hidden":false,"color":"#8064A2","sliderMin":-10,"sliderMax":10.9},{"id":35,"text":"These all draws the world:"},{"id":24,"latex":"y\\\\le-y_0","domain":{"min":0,"max":10},"hidden":false,"color":"#9BBB59"},{"id":9,"latex":"\\\\left(u_a+t\\\\left(u_b-u_a\\\\right),v_a+t\\\\left(v_b-v_a\\\\right)\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#8064A2"},{"id":28,"latex":"r_w\\\\left(\\\\theta\\\\right)=\\\\sec\\\\left(\\\\theta+.2\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#C0504D"},{"id":10,"latex":"r_b\\\\left(\\\\theta\\\\right)=\\\\floor\\\\left(\\\\frac{\\\\theta}{2\\\\pi}\\\\right)\\\\sec\\\\left(\\\\theta+\\\\frac{\\\\pi}{2}\\\\floor\\\\left(\\\\frac{2\\\\theta}{\\\\pi}+.5\\\\right)\\\\right)","domain":{"min":0,"max":10},"hidden":true,"color":"#000000"},{"id":14,"latex":"\\\\left[r_b\\\\left(2\\\\pi t\\\\right)\\\\sin2\\\\pi t,r_b\\\\left(2\\\\pi t\\\\right)\\\\cos2\\\\pi t\\\\right]","domain":{"min":0,"max":10},"hidden": false,"color":"#F79646"},{"id":16,"text":"Project (u, v) to (x, y) coordinates"},{"id":17,"latex":"X\\\\left(u,\\\\space v\\\\right)=5\\\\frac{\\\\left(u-u_p\\\\right)}{\\\\left(v-v_p\\\\right)}-x_0","domain":{"min":0,"max":10},"hidden":false,"color":"#000000"},{"id":18,"latex":"Y\\\\left(u,\\\\space v,\\\\space z\\\\right)=\\\\frac{-8+z}{\\\\left(v-v_p\\\\right)}-y_0","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD"},{"id":47,"latex":"c_{ond}\\\\space=\\\\space v_a+\\\\left(\\\\frac{u_p-u_a}{u_b-u_a}\\\\right)\\\\left(v_b-v_a\\\\right)-v_p","domain":{"min":0,"max":1},"hidden":true,"color":"#9BBB59"},{"id":36,"latex":"f\\\\left(x,z\\\\right)=\\\\frac{\\\\left(Y\\\\left(u_b,v_b,z\\\\right)-Y\\\\left(u_a,v_a,z\\\\right)\\\\right)}{X\\\\left(u_b,v_b\\\\right)-X\\\\left(u_a,v_a\\\\right)}\\\\left(x-X\\\\left(u_a,v_a\\\\right)\\\\right)+Y\\\\left(u_a,v_a,z\\\\right)","domain":{"min":0,"max":1},"hidden":false,"color":"#4F81BD"},{"id":40,"latex":"x_m=\\\\left\\\\{v_p<v_a:X\\\\left(u_a,v_a\\\\right),-1000\\\\right\\\\}","domain":{"min":0,"max":1},"hidden":false,"color":"#000000"},{"id":41,"latex":"X_m=\\\\left\\\\{v_p<v_b:X\\\\left(u_b,v_b\\\\right),\\\\space1000\\\\right\\\\}","domain":{"min":0,"max":1},"hidden":false,"color":"#C0504D"},{"id":39,"latex":"f\\\\left(x,0\\\\right)\\\\le y\\\\le f\\\\left(x,16\\\\right)\\\\left\\\\{c_{ond}>0\\\\right\\\\}\\\\left\\\\{x_m<x<X_m\\\\right\\\\}","domain":{"min":0,"max":1},"hidden": false,"color":"#8064A2"},{"id":22,"latex":"\\\\left(X\\\\left(r_b\\\\left(t\\\\right)\\\\sin t,r_b\\\\left(t\\\\right)\\\\cos t\\\\right)\\\\left\\\\{r_b\\\\left(t\\\\right)\\\\cos t-v_p>1\\\\right\\\\},Y\\\\left(r_b\\\\left(t\\\\right)\\\\sin t,r_b\\\\left(t\\\\right)\\\\cos t,0\\\\right)\\\\right)","domain":{"min":0,"max":62.831853},"hidden": false,"color":"#F79646"},{"id":11,"latex":"x_0=-31","domain":{"min":0,"max":10},"hidden":false,"color":"#4F81BD","sliderMin":-60,"sliderMax":10},{"id":13,"latex":"y_0=11","domain":{"min":0,"max":10},"hidden":false,"color":"#C0504D","sliderMin":-10,"sliderMax":20},{"id":46,"latex":"y\\\\le-8-y_0","domain":{"min":0,"max":1},"hidden":false,"color":"#000000"}]}}\n}]';});

define('main/betchacant',['require','loadcss!css/mygraphs','pjs','main/graph','text!data/betchacant_graphs.json'],function(require) {
  require('loadcss!css/mygraphs');
  
  var P = require('pjs');
  var Graph = require('main/graph');
  
  var betchacantString = require('text!data/betchacant_graphs.json');

  var betchaCant = P(function (proto, _super) {
    proto.init = function (Calc, graphsController) {
      this.Calc = Calc;
      this.expressionsView = Calc._calc.expressionsView;
      this.graphsController = graphsController;

      var self = this;
      this.expressionsView.__latexChangeCallbacks.push(function(latex) {
        if (latex === "betchacant") self.acceptChallenge();
      });

      this.betchacantGraphs = JSON.parse(betchacantString);
    };

    proto.acceptChallenge = function () {
      var graphData = this.betchacantGraphs[Math.floor(Math.random()*this.betchacantGraphs.length)];

      this.expressionsView.model.getSelected().setProperty('latex', '');
      var graph = Graph({
                  hash: graphData.graphHash,
                  title: graphData.title,
                  graphData: JSON.stringify(graphData.state)
                });

      this.selectedIndex = this.expressionsView.model.getSelected().index;
      this.graphsController.loadGraph(graph);
      var self = this;

      var undoCallback = function() {
        var model = self.expressionsView.model.getItemByIndex(self.selectedIndex);
        var view = self.expressionsView.getItemView(model.id);
        setTimeout(function() {
          view.addFocus();
        },100);
      };

      this.Calc._calc.toast('Challenge accepted.', {undoCallback: undoCallback});
    };
  });

  return betchaCant;
});

define('main/heartbeat',['require','analytics/google_analytics','jquery'],function(require){
  var ga = require('analytics/google_analytics');
  var pageload_timestamp = new Date();
  var $ = require('jquery');

  var wasActiveInInterval = false;

  function heartbeat () {
    //Low resolution since google analytics only allows 500 events per user-session
    var n = Math.round((new Date() - pageload_timestamp) / (60 * 1000));
    var eventName = 'Heartbeat' + (wasActiveInInterval ? '-active' : '-passive');
    ga.send(['_trackEvent', eventName, n + ' minutes']);
    wasActiveInInterval = false;
  }

  $(document).on('dcg-tap keypress', function () {
    wasActiveInInterval = true;
  });

  // Record heartbeat every minute
  setInterval(heartbeat, 60*1000);
});


define('main/calc_desktop',['require','jquery','config','main/load_data','main/user_controller','main/graphs_controller','main/graph','main/modals_controller','main/header_desktop','tours/tour_controller','main/preserved_state','main/graph_change_monitor','browser','main/data_helpers','ipad.scrollfix','i18n','analytics/google_analytics','api/calculator','main/betchacant','main/heartbeat','bugsnag'],function (require) {

  var $ = require('jquery');
  var Config = require('config');
  var LOAD_DATA = require('main/load_data');

  //these manage the user and the loaded graph (graph hash, etc)
  var UserController = require('main/user_controller');
  var GraphsController = require('main/graphs_controller');
  var Graph = require('main/graph');

  var ModalsController = require('main/modals_controller');
  var HeaderView = require('main/header_desktop');
  var TourController = require('tours/tour_controller');

  //for page reloads when, for example, you switch language
  var preservedState = require('main/preserved_state');
  var GraphChangeMonitor = require('main/graph_change_monitor');

  //TODO: move browser detection into the API
  var Browser = require('browser');

  var DataHelpers = require('main/data_helpers');

  // prevent scrolling of entire page (includes the UI around embedded API)
  var ScrollFix = require('ipad.scrollfix');
  ScrollFix.limitScrollOnDocument();

  var i18n = require('i18n');

  var ga = require('analytics/google_analytics');
  if (!Config.get('testing')) {
   ga.init('UA-22127755-1');
  }

  //load up and insert the calculator!
  var CalcAPI = require('api/calculator');

  var options = Config.all();
  options.redrawSlowly = !Browser.IS_MOBILE;
  options.border = false;
  var elt = document.getElementById('graph-container');
  var Calc = CalcAPI(elt, options);

  var tourController = TourController(Calc);
  //we need this for tests
  window.tourController = tourController;
  var Betchacant = require('main/betchacant');

  // Send a heartbeat to google analytics once per minute
  require('main/heartbeat');
  // Send errors to bugsnag. Note, should keep this require even if we stop explicitly
  // using the Bugsnag API in this file, in order to continue getting generic error
  // notifications.
  var Bugsnag = require('bugsnag');

  // Get a notification whenever there is an ajax error.
  // https://bugsnag.com/docs/notifiers/js#notifying-bugsnag-about-jquery-ajax-errors
  $(document).ajaxError(function(event, jqxhr, settings, thrownError) {
    Bugsnag.notify("AjaxError", thrownError + ': ' + settings.url, {
      url: settings.url,
      type: settings.type,
      status: jqxhr.status,
      headers: jqxhr.getAllResponseHeaders(),
      responseText: jqxhr.responseText
    });
  });

  //hook up graphsController
  var graphsController = GraphsController(Calc, LOAD_DATA.seed);
  graphsController.driveAccessErrorCallbacks.push(function (error) {
    Calc._calc.toast(
      'Error saving. ' +
      '<a href="' + error.authorizeUrl + '" target="_blank" class="dcg-action-hide">Click here</a> ' +
      'to re-authorize Desmos to save graphs to Google Drive.',
      {
        style: 'error',
        hideAfter: 0
      }
    );
  });

  // some versions of webkit fire a ghost 'popstate ' event after and in the same event-loop as
  // the 'load' event. So, we disable 'popstate' events for the rest of the 'load' event-loop.
  var isGhostPopStateEvent = false;
  $(window).on('load', function () {
    isGhostPopStateEvent = true;
    setTimeout(function () {isGhostPopStateEvent = false;}, 0);
  });

  // back button support
  $(window).on('popstate', function (evt) {
    if (isGhostPopStateEvent) return;
    graphsController.popState(evt);
  });

  var userController = UserController(graphsController);
  //we need this on the window for tests
  window.userController = userController;

  var modalsController = ModalsController(userController, graphsController);
  var modals = modalsController.modals;

  var headerView = HeaderView(
    userController,
    graphsController,
    Calc,
    modals,
    tourController
  );

  if (Config.get('expressions') !== false) Betchacant(
    Calc,
    graphsController
  );

  //make sure the user doesn't accidentally leave the page!
  if(!Config.get('no_navigation_warning')){
    $(window).on('beforeunload', function(){
      if (Calc.hasUnsavedChanges() && !preservedState.hasState()) {
        return i18n.t('Are you sure you want to leave this graph? Your unsaved work will be lost.');
      }
    });
  }

  var graphChangeMonitor = GraphChangeMonitor(Calc, graphsController);
  Calc.graphChangeMonitor = graphChangeMonitor;

  graphChangeMonitor.observe('graphChanged', function () {
    headerView.setProperty('graphChanged', Calc.hasUnsavedChanges());
  });

  Calc.hasUnsavedChanges = function () {
    return graphChangeMonitor.graphChanged;
  };

  $(window).on('paste', function (e) {
    //allow paste of text into textboxes and folder titles
    var selectedItem = Calc._calc.expressionsModel.selectedItem;
    if (selectedItem && (selectedItem.type === 'text' || selectedItem.type === 'folder')) return;

    var pastedText;
    if (window.clipboardData && window.clipboardData.getData) { // IE
      pastedText = window.clipboardData.getData('Text');
    } else if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) {
      pastedText = e.originalEvent.clipboardData.getData('text/plain');
    }

    var parsedData = DataHelpers.parse(pastedText);
    if (parsedData) {
      e.stopPropagation();
      e.preventDefault();

      if (parsedData.error) {
        return Calc._calc.toast(parsedData.error, {style: 'error', hideAfter: 12000});
      }
      //undocumented method inside of calc_embed.js
      Calc._calc.createAndPopulateTable(parsedData.data);
    }
  });

  //This top-level location should becomes the place where all nontrivial document.ready() activities happen
  $(document).ready(function () {
    /* jshint maxcomplexity: 14 */

    //Setup save shortcut listener
    $(document).on('keydown', function (evt) {
      if (!evt.ctrlKey && !evt.metaKey) return;
      switch (evt.which) {
        case 90: //z
          if (evt.shiftKey) {
            Calc._calc.undoRedo.redo();
          } else {
            Calc._calc.undoRedo.undo();
          }
          return false;
        case 89: //y
          Calc._calc.undoRedo.redo();
          return false;
        case 83: //s
          headerView.simpleSave();
          return false;
        case 79: //o
          headerView.openDrawer();
          return false;
      }
    });

    headerView.appendTo('.dcg-header');

    $('.dcg-loading-div').fadeOut();

    // Process LOAD_DATA
    if (LOAD_DATA.user) userController.completeLogin(LOAD_DATA.user, 'load');

    if (LOAD_DATA.flash) {
      switch (LOAD_DATA.flash) {
        case 'clever_welcome':
          Calc._calc.toast(i18n.t('Logged in with Clever!'));
          break;
        case 'clever_no_email':
          Calc._calc.toast(i18n.t('Visiting anonymously from Clever.'), {
            hideAfter: 12000,
            learnMoreLink: 'http://support.desmos.com/entries/47595905-Signed-in-Anonymously-with-Clever'
          });
          break;
        case 'clever_communication_error':
          Calc._calc.toast(i18n.t('Error signing in with Clever.'), {
            hideAfter: 0,
            style: 'error',
            learnMoreLink: 'http://support.desmos.com/entries/47595625-Error-Signing-in-with-Clever'
          });
          break;
        default:
          Calc._calc.toast(LOAD_DATA.flash);
          break;
      }
    }

    modalsController.ready();
    //Show warning modal for unsupported browsers (because of screensize, for example)
    if (Browser.IS_ANDROID && !Browser.IS_CHROME) {
      modals.unsupportedBrowserDialog.show();
    } else if (document.location.search.match(/(\?|\&)create_account/)) {
      history.replaceState(null, null, document.location.pathname);
      if (userController.currentUser) {
        Calc._calc.toast(i18n.t('Logged in successfully!'));
      } else {
        modals.createAccountDialog.show();
      }
    } else if (document.location.search.match(/(\?|\&)login/)
    ){
      history.replaceState(null, null, document.location.pathname);
      if (userController.currentUser) {
        Calc._calc.toast(i18n.t('Logged in successfully!'));
      } else {
        modals.loginDialog.show();
      }
    }

    if (LOAD_DATA.graph) {
      graphsController.loadGraph(Graph.fromAjax(LOAD_DATA.graph));
    } else {
      // The graph state either needs to be set or cleared to get the
      // calculator into a consistent state.
      graphsController.clearGraph();
    }

    if (preservedState.hasState()) {
      var stateInfo = preservedState.popState();
      graphChangeMonitor.setSavedState(stateInfo.savedState);
      Calc.setState(stateInfo.unsavedState);
    }


    if (Config.get('expressions') !== false) Calc._calc.expressionsView.triggerClearGraph = function () {
      graphsController.clearGraph();
    };

    //reach in and start a tour.
    tourController.startTourFromUrl();
  });

  return Calc;
});


define('toplevel/calculator_desktop',['require','main/calc_desktop'], function (require) {
  // Calc global has singletons like expressions and userController that are
  // useful for debugging and testing.
  window.Calc = require('main/calc_desktop');
});